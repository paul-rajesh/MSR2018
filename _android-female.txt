===Database gerrit_android

== Dumping data for table JOINED_TABLE

|Theoretically you could combine two sequential allocations I guess, but it practice I don't see why you would.
|I keep going back and forth on this, but I think I've convinced myself that the heaps should do the splitting of pages since they are going to have to do the freeing correctly and at the top level we should just test that it's done...
|agreed.
|the ids are set by the board files...so it's weird code to swap the id's on insertion, or this code to traverse it in reverse.  Do you have a strong preference?
|will do
|strong feeling here?  that means we'll be holding the lock for a while which will block any threads trying to allocate.
|i dont' know, it's what we did in lowmemorykiller -- i'm happy wiht just dfault instead if you think that makes more sense.
|that's hard because free_pagelist is also consolidating into larger chunks as it frees, so items that are contiguous have their list entries freed and are joined up with the previous entry.  After ionsystem_heap_free_pagelist, the list no longer exists.  I suppose I could build a second list of free'd items but that seems unnecessarily complex
|Done
|yes, split pages only applies to cached'

split_pages = cached &amp;&amp; fault
|Done
|Done
|I added debug code to the system heap in the next patch in the stack so we could print the number of patches in the page pool.  I can make this part of that patch if you'd prefer
|Done
|Done
|Done
|suggestions?
|Done
|how much is left
|I'm open to suggestions, what do you think makes more sense?
|Why would you do that?  Basically it'll work as long as the context you call ion_client_lookup from is the same one you called ion_client_create from.  Client lookup is only used to find the canonical client on a mmap call path from userspace so I suppose if you did something really weird like created a client in a kernel thread and then later morphed it into a file descriptor backed client somehow you wouldn't be able to find the right task.  As far as I'm concerned that's &quot;unsupported&quot;

The kernel_clients rb tree is only used to track clients for debug purposes to print metadata about them from debugfs.
|it's a bad name -- i'm going to change it to id.  type is insufficient as a platform might have multiple heaps of the same type (ie multiple carveout heaps)
|handles are client local -- the client is getting destroyed, the handles should too. the underlying buffers will be refcounted correctly (theoretically you could call handle_put n times where n is the number of times your referenced it but that seems silly.
|oops, let me fix that
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|never more the 32 of these?
|i think the debugfs stuff all compiles out.  I'm not sure you need this.
|i thin we can jut call flush_dcache_page which is defined in cacheflush.h rather than externing this...
|put this on the line with the while maybe?  is there a style guideline to cover this??
|samsies
|for one thing you could move this outside the for loop.  Also is this safe?  Are you only going to look at the private field of the first page in the allocation?
|i don't get this change.  you've effectively called page_to_pfn(pfn_to_page(pfn) -- what's this accomplish?
|white space...
|why the new include here?
|this should probably be a separate cleanup change, but for now ok...
|snprintf or just pass this in
|second time you've generated this stuff -- consider a helper function with a good name?
|yuck change history :(
|i don't see any reason for all this instead of kmalloc/kfree do you?
|the pin should be AB1 and I think the register value should be 0x1d2.
|i think this should be AE10 and maybe 0x5da
|This should be AE13
|can you make this disable_irq_nosync?

otherwise it'll break at 2.6.30
|don't call this wlan, it might not be wlan on some board, you are just defining gpios.  stick these in with the other gpio defines above
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 3: Patch Set 3 was rebased
|Patch Set 4: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 4:

Is there any reason not to just add a shrinker to the top level ion freelist?  It's certainly possible to have an instance of ion in your kernel that uses the asynchronous free code without the page pools.  In that case there will be no shrinker to drain the free list from.  I think they will have to be a separate shrinker for the free list.
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1:

The total size is already printed in the end of the top level heap debug function.  I'm not sure what this adds.
|Patch Set 1: Looks good to me, approved; Verified


|Abandoned

this change appears to have been submitted.
|Patch Set 1:

I'm confused about what you need this for.  You should be passing these around with accompanying necessary metadata, same as you would do with malloc'd or mmaped memory.
|Patch Set 1:

what do you need the flags for?  Again these aren't intended to be used outside of ion.
|Patch Set 1:

Clients should know how they allocated the buffers and whether or not they were cached -- I don't get why you'd have to query ion for that information later.
|Patch Set 1:

That's not the intended model for how things work.  The ion handles are opaque cookies to allocated memory -- think of them as the equivalent of the pointer you get back when you mmap a buffer.  Clearly the kernel can tell how much memory was mmap'ed by interrogating the vma or whether it was PROT_SHARED or wahtever, but there's no api that works that way.  Please refer to gralloc if you want to see a very clean example of how to package these memory handles with associated metadata for passing between processes.  

There is absolutely no way these flags should be used for anything outside of the code in ion -- they definitely shouldn't be processed by userspace code or other drivers.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified+1 Code-Review+2
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 3: Patch Set 2 was rebased onto the latest head
|Uploaded patch set 4.
|Patch Set 4: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 2: Patch Set 1 was rebased onto the latest head
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3: Patch Set 2 was rebased onto the latest head
|Patch Set 3: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 3: Patch Set 2 was rebased onto the latest head
|Uploaded patch set 4.
|Patch Set 4: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Abandoned
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased onto the latest head
|Patch Set 4: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased onto the latest head
|Patch Set 4: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased onto the latest head
|Patch Set 4: Code-Review+2 Verified+1
|Patch Set 5: Patch Set 4 was rebased onto the latest head
|Patch Set 5: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 4: Patch Set 3 was rebased onto the latest head
|Patch Set 5: Patch Set 3 was rebased onto the latest head
|Patch Set 5: Code-Review+2 Verified+1
|Patch Set 6: Patch Set 5 was rebased onto the latest head
|Patch Set 6: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Code-Review+2 Verified+1
|Patch Set 6: Patch Set 5 was rebased onto the latest head
|Patch Set 6: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Patch Set 2: Patch Set 1 was rebased onto the latest head
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Patch Set 1 was rebased onto the latest head
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified


|Patch Set 2: Rebased
|Patch Set 3: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 1: (3 inline comments)


|Uploaded patch set 3.
|Patch Set 3: Looks good to me, approved; Verified


|Patch Set 3: Rebased
|Patch Set 4: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified

approved by colin verbally
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Abandoned
|Uploaded patch set 2.
|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Patch Set 2:

We want to know, when a bug report is taken b/c the system looks like it's out of memory, how much memory is sitting in the shrinkers.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: (1 inline comment)


|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5: (3 inline comments)


|Patch Set 6: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3: (1 inline comment)


|Uploaded patch set 5.
|Patch Set 5: (2 inline comments)


|Uploaded patch set 6.
|Patch Set 5: (5 inline comments)


|Patch Set 6: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Patch Set 1: Rebased
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Looks good to me, approved; Verified


|Patch Set 3: Rebased
|Patch Set 4: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Patch Set 1: Rebased
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Rebased
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Patch Set 1: Rebased
|Patch Set 2: Abandoned

merged
|Patch Set 1: Abandoned

merged
|Patch Set 2: Abandoned

merged
|Patch Set 3: Rebased
|Patch Set 4: Abandoned

merged
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Patch Set 1: Rebased
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; No score

i think writecombine should be sufficient here.  It doesn't mean the memory is cached, it means it can take advantage of a writecombine buffer if one is available.  Have you seen an issue?
|Did this patch resolve their issue?  I'm surprised writecombine had any effect on them.  Was this 3d or 2d?
|Confirm for me that switching to non-cached fixed the problem.  Write combine memory is non-cached.  It just batches up writes to memory in the write buffer.  I don't think this will have any effect on things showing on the screen.  I'd be suspicious that changing this had enough of an effect on timing that it fixed some other problem.  

I'd rather not make this change as it will make all omap based platforms use non-cahced instead of write combine memory.
|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: Verified


|this was merged and can be abandoned
|Patch Set 1: No score; Looks good to me, approved


|merged
|Patch Set 3: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: (2 inline comments)

All other comments addressed in forthcoming patch
|Patch Set 4:

Rob,

I'm working on some supporting documentation to describe the problem we're trying so solve in more detail, but in short, this is intended as the api and first look at what we're building.  Basically we're trying to create a single unified &quot;memory manager&quot; for all the soc's we encounter that allows us to do zero copy gfx, video playback, camera preview etc and any mix of those.  On pretty much every program, we've written or inherited a new solution (sometimes several hybrid solutions we had to glue together) to solve this problem.  

I'm not a GEM expert by any means, but from what I can tell it doesn't solve a couple of problems we need to.  First off I don't think it has any mechanism for securely sharing handles between userspace processes.  That's essential on Android.  We pass buffers around a lot.  Secondly, and probably more importantly, from what I can tell GEM mostly addresses sharing needs between the gpu and cpu.  We care about sharing between the gpu, cpu, isp block, video encoder and decoders etc.  On different SOC's those have all different memory requirements -- in some cases separate iommu's, one iommu, special purpose mmus, a simple gart, direct physical memory access, etc.  For testing and clarity I've implemented two REALLY simple heaps and a mapper, but the intention is for the sets of heaps and mappers to grow to cover all these cases.  

As you've pointed out, one of the things we'll be adding is a heap for managing large chunks of physically contiguous memory.  Additionally, we'll be doing a lot of work to manage the complex requirements of the tiler on omap4 as a mapper.  

The intention of posting what I have so far was to start eliciting feedback, so please do let me know what you think.

Thanks, 
Rebecca
|Uploaded patch set 5.
|Patch Set 1: Looks good to me, approved


|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Uploaded patch set 2.
|Change has been successfully pushed.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1:

Fixes all the things found on review after the fact on the previous patch set
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: (2 inline comments)

responded to or fixed in upcoming patch set.

Thanks for the review everyone!
|Patch Set 1: Abandoned
|Patch Set 3: Looks good to me, approved


|Patch Set 3: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Verified


|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Change has been successfully pushed.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Change has been successfully pushed.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Change has been successfully pushed.
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

I've looked at your diff and in and of itself it seems fine (it's pretty small).  The bigger questions is what our long term plan is for this code.  They really shouldn't be using an clkdm api that isn't available (necessitating the use of the cflags) and the whole thing really should be in kernel style.  I didn't review the parts you didn't touch for correctness either.  Are we planning on further cleanup here?  We have forced kernel style around other pieces before and this isn't really that big a component.  

On their own, *your* changes LGTM.
|Patch Set 1:

Shouldn't this go in linux-omap-2.6.39?
|Patch Set 1:

Shouldn't this go in linux-omap-2.6.39?
|Change has been successfully pushed.
|Change has been successfully pushed.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Change has been successfully pushed.
|Change has been successfully pushed.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified


|Uploaded patch set 5.
|Patch Set 5: Looks good to me, approved


|Patch Set 5: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 3: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1:

This is literally an impossible condition.  The id comes from the minor field (low 20 bits) of a device node which is an unsigned int in itself.  Also do we want to refer to coverity numbers in a commit message?  I sort of doubt it, they don't mean anything to anyone.  To be pedantic about it you also missed one use of id at line 199
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified; Looks good to me, approved


|Patch Set 4: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Looks good to me, approved


|Patch Set 4: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Uploaded patch set 4.
|Patch Set 4: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

I see how this fixes the fput problem but I'm still confused about it's safety.  It seems like, esp since this is an unlocked ioctl, user-space could call the ioctl while the kernel thread is executing and thread_file or other fields in that struct could get corrupted.  I see that it's protected by the dev-&gt;state variables, but those seem to sometimes get modified in the middle of processing the event (like when the mtp_thread calls mtp_sendfile which calls mtp_write, which modifies the dev-&gt;state flag.  It might be the case that this is totally safe on UP due to guarding with thread-&gt;command, but on ARM's weakly ordered memory model I'm pretty sure you have no guarantee that store will execute with any ordering relative to the rest of the fields in the structure.  

A lot of the complexity here comes from the presence of mtp_thread.  It seems like you've sort of rolled your own workqueue, which is probably unnecessary.  Adding to that, you always block in the ioctl until mtp_thread finishes processing your command.  Why not just call a function to process your command instead of executing the command in another thread?
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully pushed into branch android-tegra-2.6.36-honeycomb.
|Change has been successfully pushed into branch android-tegra-2.6.36-honeycomb-mr1.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2:

Ok I'm convinced this is safe wrt owner.  The only other users of owner check owner against current client -- so it shouldn't be possible for it to be transitioning to null at that point, and even if it is, the worst case scenario is you share a handle on the way to exit.  Again should be safe.  

However I have subsequently discovered that none of the rest of the handle fields are protected.  Locking here needs revisiting
|Patch Set 2: (1 inline comment)


|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Uploaded patch set 4.
|Patch Set 4: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 1: (7 inline comments)


|Patch Set 2: Verified


|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved

(2 inline comments)


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2:

Interesting... guess it isn't REALLY write once.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Abandoned
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

I'm still seeing the errors from camera:


misc knvmap: nvmap_pin_ids: NvOsKernelThrea pinning unreferenced handle e624c7e0
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve

(2 inline comments)


|Patch Set 1:

LGTM except for conflicts with the l2 read-alloc changes, can you rebase and re-upload when the rest of it's ready.
|Patch Set 1:

LGTM except for conflicts with the l2 read-alloc changes, can you rebase and re-upload when the rest of it's ready.
|Patch Set 1: (2 inline comments)


|Patch Set 1:

upload a fix?
|Patch Set 3:

Just a heads up, on 36 this change requires you add include linux/bootmem.h
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 4: Verified


|Uploaded patch set 5.
|Patch Set 5: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, but someone else must approve

(1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: (1 inline comment)


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1:

If we need this we REALLY need to try to get it upstream.  It looks ok to me though
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; No score

Nice catch, thought I found all of those.  All this explains why this crashes so much, bad news to modify the list while you are traversing it...
|Uploaded patch set 2.
|Patch Set 2: No score; No score

Can someone (dmitry maybe) take a second look?
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Uploaded patch set 3.
|Patch Set 3: No score; Looks good to me, approved


|Patch Set 3: Verified


|Uploaded patch set 4.
|Patch Set 4: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved

LGTM and the merge down is in.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score

This change is fine but please don't check in a kernel -- theres some userspace changes that need to go in at the same time.  I'll check in a kernel tonight.

Rebecca
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; No score

Mike, 

I get your point about possible thread safety issues in the resource manager -- but I'd like to check this in while we work out the right solution since it unblocks the issue with hcharging. 

Rebecca
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified; No score


|Patch Set 3: Looks good to me, approved


|Change has been successfully pushed into branch android-omap-2.6.32.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Change has been successfully pushed.
|Change has been successfully pushed.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score

give this a better cl comment and it's fine
|Uploaded patch set 5.
|Patch Set 5: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; I would prefer that you didn't submit this

Half of this change is just a mode change on a file.  You need to revisit all of your commits and make sure that you aren't changing modes on files (in this case from 644 to 755).  Gerrit doesn't really give you a good view on it, check the gitweb.

These headers are autogenerated using a script.  You can read the directions in bionic/libc/kernel/README.TXT.  Autogenerate an update for this file and submit that instead.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score

What would we want this for?

Rebecca
|Is the l2 cache currently disabled without this patch?
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Patch Set 2: I would prefer that you didn't submit this

Brian, can you take a look at this and tell me what you think?  Is there somewhere else this should be?
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Uploaded patch set 3.
|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|going to pull these in, rebase and submit for you, they make my i2c errors go away
|Uploaded patch set 2.
|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 3.
|Patch Set 3: Verified


|Patch Set 3: Looks good to me, approved


|Patch Set 3: Abandoned

merged as 10764
|Patch Set 1: Verified; Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score

DSS bails because it expects you to initialize a regulator associated with VENC.  You can copy the required code from the beagle board files.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved

Mostly looks ok, need to make sure we check on the buffer allocation stuff
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved

is this a patch you pulled from linux-omap on 2.6.30?  
Looks ok to me
|looks like we already picked this up somehow, maybe in a merge from kevin's pm branch.  I'm going to abandon it
|looks like we already picked this up somehow, maybe in a merge from kevin's pm branch.  Could you abandon it please?
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: No score; No score

I will sign off and rebase this patch for you and then submit it, otherwise you have to catch things at a moment where I'm not submitting other patches and it very quickly gets unweildy
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified


|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Vikram, 

Can you rebase this change on top of the most recent kernel?  Also change the commit comment so it follows our style for config changes:

[ARM] omap2: zoom2: Change defconfig for blah blah blah

Rebecca
|Uploaded patch set 3.
|Patch Set 3: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score

I think we want to merge this before the changes to the board file, otherwise I don't think the board file changes will compile.  What do you think?
|Uploaded patch set 2.
|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 6.
|Patch Set 6: Verified; Looks good to me, approved

reupload with rebase so I can merge it
|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified


|Patch Set 4: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified


|Patch Set 4: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved

approved as https://review.source.android.com/Gerrit#change,10189
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Abandoned
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 3: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved

we should consider posting it to linux omap
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score


|Patch Set 1: No score; Looks good to me, approved

send it to kevin too!
|Uploaded patch set 2.
|Patch Set 2: Verified


|Patch Set 2: Looks good to me, approved


|Uploaded patch set 3.
|Patch Set 3: Abandoned
|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: No score; No score

fix this so it doesn't change file modes
|Patch Set 1: No score; No score

fix this so it doesn't change file modes
|Patch Set 1: No score; No score

fix this patch so it doesn't change file modes
|Patch Set 1: No score; No score

Fix this so it doesn't change the file mode from 644 to 755.
|Patch Set 1: No score; I would prefer that you didn't submit this


|Patch Set 1: No score; Do not submit

Abandon this change and the change that reverts it.

Please do not upload your temporary fixes to gerrit.
|Patch Set 1: No score; Do not submit

Abandon this change and the change it reverts please.
|Patch Set 1: No score; Do not submit


|Patch Set 1: No score; Do not submit


|Patch Set 1: No score; I would prefer that you didn't submit this

clean up your commit history before pushing patches, these empty merge commits should not get pushed to gerrit
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 5: No score; Looks good to me, approved

only a style diff from last approval
|Patch Set 6: Looks good to me, approved


|Patch Set 3: No score; Looks good to me, approved

looks the same as when arve ok'd it, so it's ok with me
|Patch Set 4: Looks good to me, approved


|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: Verified; No score


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified


|Uploaded patch set 3.
|Uploaded patch set 4.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; No score


|Change has been successfully merged into the git repository.
|Patch Set 3: No score; Looks good to me, approved


|Patch Set 3: Verified


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved

|Patch Set 1: No score; Looks good to me, approved

|Patch Set 1: No score; Looks good to me, approved

|Patch Set 1:

James,

we encountered this issue with respect to a corrupt clip. In this case of corrupt clips, our goal has been to recover gracefully.

Issue: Gallery freezes when you seek beyond 1:50 min.

Rootcause: In this particular clip, there are no valid video frames beyond 1:50 min. if the frames are invalid, codec will ignore them. Therefore, no output buffers will be available either. Therefore, video seek beyond 1:50 is not successful. Therefore, OMXCodec hangs and consequently, gallery also hangs. 

Solution: if the codec does not return buffers within a reasonable time, report an error and exit.

After applying this patch, if you seek beyond 1:50 min, gallery will display &quot;Sorry, Cannot play video&quot; message and you exit gracefully. After exiting you can play another clip successfully - which you couldnt do previously.

Note 1: Codec does not return an error because it hopes that subsequent frames might be good and so it simply ignores the corrupt frames.

Note 2: Changing this logic affects how the clients (ex: Flash has an issue with this approach) use OMXCodec... This change probably also requires that a pause state be implemented in OMXCodec.
|Patch Set 1:

James,
This clip is 284 MB. I cannot email it. I will send it through someone from TI visiting Google.

The behavior is even worse on ICS. Even force closing the Gallery App doesnt get rid of the playback thread. It was very weird. If you apply this patch, then it exits fine.
|Patch Set 1: Looks good to me, but someone else must approve

Patches 18580 and 18581 must be merged together.
|Patch Set 1:

These 4 patches are related:
18580, 18581, 18582, 18583
|Patch Set 1: Looks good to me, but someone else must approve

Patches 18580 and 18581 must be merged together.
|Patch Set 1:

These 4 patches are related:
18580, 18581, 18582, 18583
|Patch Set 1: Looks good to me, but someone else must approve

Patches 18582 and 18583 must be merged together.
|Patch Set 1:

These 4 patches are related:
18580, 18581, 18582, 18583
|Patch Set 1: Looks good to me, but someone else must approve

Patches 18582 and 18583 must be merged together.
|Patch Set 1:

These 4 patches are related:
18580, 18581, 18582, 18583
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned

96 is adequate.
|Patch Set 1: Abandoned

Not needed anymore. Audio Record works fine.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, but someone else must approve

This is a fix for the camcorder application.

When we attempt to record the video for the second time, we found that the overlay was not being setup correctly. The function LayerBuffer::OverlaySource::onVisibilityResolved() sets up the overlay. But it does do so the second time, because the variable mVisibilityResolved is not set to true. We already discussed this issue with Mathias Agopian and he agrees that it is an issue. I have pasted the email conversation with him. This patch is a workaround until a proper solution is implemented.

I also filed a bug:

http://code.google.com/p/android/issues/detail?id=2350


Email Conversation with Mathias Agopian
=======================================

-----Original Message-----
From: Mathias Agopian [mailto:mathias@google.com]
Sent: Tuesday, March 31, 2009 1:51 PM
To: Fischer Steven-P27614
Cc: Sundararajan, Anuradha; Dave Sparks; Rebecca Schultz Zavin; chao han; Martinez Cisneros, Ricardo; Mande, Nikhil; Miesen, Sharon
Subject: Re: camcorder issue

onTransaction is not called, probably because the configuration of the surface has not changed -- which is normal.

There may be a bug here,  maybe I need to force a transaction just to make sure this function is called, or I need to change the logic so that these flags are set somewhere else.

I'm not sure, I will have to look at it in more detail.


At this point, it would be good to file a bug.


Mathias



On Tue, Mar 31, 2009 at 8:57 AM, Fischer Steven-P27614 &lt;Steven.Fischer@motorola.com&gt; wrote:
&gt; All,
&gt;
&gt; I am experiencing the same issue as Anu, specifically when using an 
&gt; overlay for preview frames, preview doesn't restart after a video 
&gt; capture. Â After a bit of an investigation into this issue, I found the
&gt; following:
&gt;
&gt; 1) The overlay is created successfully
&gt;
&gt; 2) LayerBuffer::unlockPageFlip() is calling 
&gt; OverlaySource::onVisibilityResolved(), thus the source must be created
&gt;
&gt; 3) The OverlaySource::onTransaction() is not being called, thus the 
&gt; OverlaySource::mVisibilityChanged flag is never being set to &quot;true&quot; 
&gt; and the OverlaySource::onVisibilityResolved() call is prevented from 
&gt; making the overlay configuration calls
&gt;
&gt; 4) I do not see any of the
&gt; LayerBase::setPosition()/::setLayer()/setSize()/etc. functions being 
&gt; called during this second creation of the video capture overlay. Â They 
&gt; are being called when the overlay is created for the initial video 
&gt; capture preview setup. Â I believe these functions are called based on 
&gt; some action from the application or at least from external of the 
&gt; Surface Flinger since the calls seems to be coming in from
&gt; BClient::setState() which is called via the ISurfaceFlingerClient 
&gt; interface.
&gt;
&gt; 5) When hacking the OverlaySource::mVisibilityChanged flag to be 
&gt; defaulted to &quot;true&quot; in the OverlaySource constructor, I do see the 
&gt; overlay being configured and preview frames displayed.
&gt;
&gt; Should we be expecting the BClient::setState() function to be called?
&gt; If not, how is the OverlaySource::onTransaction() function suppose to 
&gt; be triggered during this re-creation of the overlay, thus allowing the 
&gt; OverlaySource::mVisibilityChanged flag to be set properly?
&gt;
&gt; Thanks,
&gt;
&gt; Steve.
&gt;
&gt; -----Original Message-----
&gt; From: Sundararajan, Anuradha [mailto:sanuradha@ti.com]
&gt; Sent: Tuesday, March 31, 2009 10:20 AM
&gt; To: Mathias Agopian; Fischer Steven-P27614
&gt; Cc: Dave Sparks; Rebecca Schultz Zavin; chao han; Martinez Cisneros, 
&gt; Ricardo; Mande, Nikhil; Miesen, Sharon
&gt; Subject: RE: camcorder issue
&gt;
&gt; Looping Steven Fisher from Motorola.
&gt;
&gt; Anu Sundararajan
&gt;
&gt;
&gt;
&gt;
&gt; -----Original Message-----
&gt; From: Mathias Agopian [mailto:mathias@google.com]
&gt; Sent: Monday, March 30, 2009 4:01 PM
&gt; To: Sundararajan, Anuradha
&gt; Cc: Dave Sparks; Rebecca Schultz Zavin; chao han; Martinez Cisneros, 
&gt; Ricardo; Mande, Nikhil; Miesen, Sharon
&gt; Subject: Re: camcorder issue
&gt;
&gt; It is intentional that we check mSource in createOverlay() and return 
&gt; an error if it is already set. This is because you shouldn't be able 
&gt; to call createOverlay() without calling destroy first.
&gt;
&gt; Now, &quot;new OverlaySource&quot; shouldn't fail.
&gt;
&gt; Can you please figure out which code path is take and where it fails?
&gt; We need to know *if* &quot;new OverlaySource&quot; is called and if it fails, 
&gt; why... (there are only 2 points of failure there).
&gt;
&gt;
&gt; Mathias
&gt;
&gt;
&gt; On Mon, Mar 30, 2009 at 1:48 PM, Sundararajan, Anuradha 
&gt; &lt;sanuradha@ti.com&gt; wrote:
&gt;&gt; Thanks, Mathias and Dave.
&gt;&gt;
&gt;&gt; I noticed it too. So, it (So mSource is not set. Which Â means that
&gt; createOverlay() failed in when calling &quot;new OverlaySource(...)&quot;.) is a 
&gt; bug or is it intentional?
&gt;&gt;
&gt;&gt; Someone else gave this explanation:
&gt;&gt;
&gt;&gt; I don't believe that the return of a null is a bug, in fact I think 
&gt;&gt; it
&gt; is correct behavior. Â Take a look at the 
&gt; LayerBuffer::registerBuffers() function. Â The first thing that does is 
&gt; a similar check for an existing mSource and it returns a 
&gt; INVALID_OPERATION error if mSource already exists. Â In my opinion 
&gt; those check are there to limit the interface to a single user.
&gt;&gt;
&gt;&gt; Anu Sundararajan
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; -----Original Message-----
&gt;&gt; From: Mathias Agopian [mailto:mathias@google.com]
&gt;&gt; Sent: Monday, March 30, 2009 3:31 PM
&gt;&gt; To: Dave Sparks
&gt;&gt; Cc: Sundararajan, Anuradha; Rebecca Schultz Zavin; chao han; Martinez 
&gt;&gt; Cisneros, Ricardo; Mande, Nikhil; Miesen, Sharon
&gt;&gt; Subject: Re: camcorder issue
&gt;&gt;
&gt;&gt; It looks like LayerBuffer::getSource() returns NULL the second time 
&gt;&gt; (see line 121). So mSource is not set. Which Â means that
&gt;&gt; createOverlay() failed in when calling &quot;new OverlaySource(...)&quot;. 
&gt;&gt; Which
&gt;
&gt;&gt; would happen if the HAL module didn't work the 2nd time.
&gt;&gt;
&gt;&gt; mathias
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; On Mon, Mar 30, 2009 at 1:23 PM, Dave Sparks &lt;davidsparks@google.com&gt;
&gt; wrote:
&gt;&gt;&gt; Hi Anu,
&gt;&gt;&gt;
&gt;&gt;&gt; I imagine that there is some state in SurfaceFlinger related to the 
&gt;&gt;&gt; overlay that is not reset when the overlay is destroyed. Maybe 
&gt;&gt;&gt; Mathias or Rebecca will have an idea on this...
&gt;&gt;&gt;
&gt;&gt;&gt; Dave
&gt;&gt;&gt;
&gt;&gt;&gt; On Fri, Mar 27, 2009 at 2:42 PM, Sundararajan, Anuradha 
&gt;&gt;&gt; &lt;sanuradha@ti.com&gt;
&gt;&gt;&gt; wrote:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Dave,
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; When recording video the second time, this function is not called 
&gt;&gt;&gt;&gt; by
&gt;
&gt;&gt;&gt;&gt; Surface Flinger:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; LayerBuffer::OverlaySource::onVisibilityResolved()
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Therefore the preview is messed up.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; More details on how to reproduce the issue.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Start camera preview
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Switch to video record mode
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -Camera preview is stopped and Overlay is destroyed.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -createOverlay is called.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -Surface Flinger sets the window position and rotation.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Start recording video.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Stop video record.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -Camera preview is stopped and Overlay is destroyed.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Switch back to video record mode.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -createOverlay is called.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Â  Â  Â  -Surface Flinger does not set the window position and
&gt; rotation.
&gt;&gt;&gt;&gt; Therefore overlay uses some uninitialized values and the window is 
&gt;&gt;&gt;&gt; in some corner..
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Can you give me some pointers on how to debug this issue?
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Thank you,
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Anu Sundararajan
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;
|Patch Set 1: Abandoned

This patch causes some merge conflicts. So, replacing with this patch: https://review.source.android.com/9903
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, but someone else must approve

Patches 9415 and 9416 are interdependent.
|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, but someone else must approve

Patches 9415 and 9416 are interdependent.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: I would prefer that you didn't submit this

Please do not accept this patch.
It is a temporary fix for our internal needs.
I will abandon the patch in one month.
|Patch Set 1: I would prefer that you didn't submit this

Please do not accept this patch.
It is a temporary fix for our internal needs.
I will abandon the patch in one month.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Not required anymore.
|Patch Set 1: Abandoned

Incorrect commit.
|Patch Set 1: Abandoned

Incorrect commit.
|Patch Set 1: Abandoned

Incorrect commit.
|Patch Set 1: Abandoned

Incorrect commit.
|Patch Set 1: Abandoned

Incorrect commit.
|Patch Set 1: Abandoned

Will be replaced by another patch at a future date.
|Patch Set 1: Abandoned

Dont need this anymore.
Implemented the same in Opencore.
|Patch Set 1: Abandoned

Replaced with 9415 and 9416.
|Patch Set 1: Abandoned

Replaced with 9415 and 9416.
|This logic is used to determine which packet should go before the other. PPTP uses 32-bit sequences, so sequences will wrap around UINT32_MAX. As a result, we know that 2 should go before 3 and 0xffffffff should go before 0.

Your examples shows two sequences on the opposite sides of 32-bit space. It will not happen due to the check in line 102. Even it happens, there is no way to tell which one should go first.
|Read ptr at this point might cause SEGV.
|Hmm, I take it back.
in_egroup_p(AID_NET_RAW) only checks the groups,
but capable(CAP_NET_RAW) also checks the real capability.
|Yes, they are the same.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

Can you give me an example demonstrating the difference made by this change? That is, a short code snippet to create an instance of Inet4Address or Inet6Address such that its getHostAddress() will return unexpected characters?
|Patch Set 1:

I see. So will it be fixed by not using String.format()?
For example, will mAddresses.append(' ' + address.getHostAddress() + '/' + prefixLength) fix the problem? Or mAddresses.append(' ').append(address.getHostAddress()).append('/').append(prefixLength)?
|Patch Set 1:

Thanks for your explanation, Elliott.

Hi Johan,

Apparently it was my mistake to use String.format() here since I was not presenting the data to the user. In this case, I would prefer not using String.format() at all. Could you please choose one of the two fixes in my previous comment and upload another patch? Thanks for your help!
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Looks good to me, approved

Nice catch! Thanks!
|Change has been successfully merged into the git repository.
|Patch Set 2:

We did not support this from the beginning because of some security concerns. However, we did receive the requests and understand the needs from advanced and enterprise users.

The java part looks fine, and Hung-ying also gave me a green light for that. For the ppp part, things change a lot since donut, so I might do it for you. Maybe it should be done in netd, or maybe not. I also need to consult the security council, so please stay tuned.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

cherry-picked from android-2.6.36 0d48e31fcc17a91dcffb2f43c18c7ca1761abb98.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified

verified.
|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified


|Patch Set 1: Abandoned

dup
|Patch Set 1: Abandoned
|Patch Set 1:

Although verify_identifier is turned off in racoon by default, the argument seems reasonable to me. I will discuss with others and do it for you if no surprise exists. Thanks!
|Patch Set 1:

I will merge it for you. Thanks!
|Patch Set 1:

Hi Andreas,

I just merged it into our internal repository. You can now safely abandon it. Thanks!

Chia-chi
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 4: Looks good to me, but someone else must approve


|Patch Set 5: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 6: Looks good to me, but someone else must approve

I do not have permission to approve changes in system/core.
Mike?
|Patch Set 4: Verified; Looks good to me, but someone else must approve


|Patch Set 1: No score

cherry-picked from android-2.6.29.
|Patch Set 1: No score

cherry-picked from android-2.6.29.
|Patch Set 1: No score

Both drivers are verified on devices.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 2.
|This one only moves AID_NET_RAW checks.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 1: Looks good to me, but someone else must approve


|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Thanks for your help. :)
|Uploaded patch set 11.
|In our device with MSM7627, it takes about 27 minutes by completion of playback for media file had long period.
(e.g.   &quot;bbb_full.ffmpeg.480x360.webm.libvpx_500kbps_25fps.libvorbis_stereo_128kbps_44100Hz.webm&quot;)
It's caused by time-wasting  for software decoding of vp8 in our investigation, because there is no problem with the resolution-reduced media file (e.g 480x360  -&gt; 176x144 QCIF).
We think that an hour is a reasonable value.
|Our assumption:
In North America, there are some phones which can be used in Japanese.
These phones might be used for Japanese in North America.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Looks good to me, but someone else must approve

I confirmed the issue is fixed. I think we can pass that test case by the next version of cts(4.0.4?) even if the device has the small screen.
|Uploaded patch set 2.
|Patch Set 2:

- Regarding Patch Set 2
In accordance with your proposal, I modified the patch for this issue.
This new patch calculates proper size of view (instead of fixed size)
with using DisplayMetrics information.
|Patch Set 2: Abandoned

I think this issue is resolved by the following.

https://android-review.googlesource.com/#/c/35120/1
|Patch Set 1: (1 inline comment)

Regarding the reason of an hour, I commented with inline.
|Patch Set 1: Abandoned

I understood that this patch did not adequate for CTS code.
However please understand there are various handsets which have limitation for supporting some kind of media format.
Thank you for your review.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 1: Abandoned

I abandon this patch set. I'll study how to avoid this problem. Thanks a lot.
|Patch Set 1: (1 inline comment)


|Patch Set 1: Abandoned

I'll investigate this function again. Thanks a lot.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch lollipop-mr1-cts-dev as commit 1e2e5bb38d8236955be64a6cca0b9cd0b1a734c8
|Patch Set 1: Cherry Picked from branch master.
|unitl -&gt; until
|Yes, this is the only change that could affect ARM.
This part is for linking shared libraries as a standalone toolchain, which should be the same as what is defined in Android tree build.

In core/combo/TARGET_linux-arm.mk, crtbegin_so.o and crtend_so.o are listed in transform-o-to-shared-lib-inner.

I don't know why these two files are missing initially. Maybe they were not there in early Android versions, or it was a bug.
|In other files, this setlocale() call was put inside of &quot;if (__old != NULL)&quot; clause.
|In other files, this setlocale() call was put inside of &quot;if (__old != NULL)&quot; clause.
|Patch Set 1: Looks good to me, approved; Verified

Ben, could you help to upstream/backport this patch to binutils? Or, you could make a local patch to our internal binutils branch. If you prefer to make this AOSP version off our internal branch, I am fine with that too.
|Change has been successfully merged into the git repository.
|Patch Set 1:

I sent the patch to binutils upstream for review. Please hold on for the moment.
|Patch Set 1: I would prefer that you didn't submit this

According to http://sourceware.org/ml/binutils/2012-06/msg00050.html, please change the patch into
-# define textdomain(Domainname) while (0) /* nothing */
-# define bindtextdomain(Domainname, Dirname) while (0) /* nothing */
+# define textdomain(Domainname) do {} while (0) /* nothing */
+# define bindtextdomain(Domainname, Dirname) do {} while (0) /* nothing */
|Patch Set 2: Looks good to me, approved; Verified

The patch has been committed into google local binutils-2.21 branch and mobile release branch.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: I would prefer that you didn't submit this

If you would like to change default options in gcc/config/linux-android.h, please send the patch to gcc upstream gcc-patches@gcc.gnu.org for review. CC maxim@codesourcery.com, hjl.tools@gmail.com, and googlers.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1:

This is a partial backport of the three upstream patches. For example, changes to &quot;ignore unresolved reloc errors from garbage-collected code&quot; (http://sourceware.org/bugzilla/show_bug.cgi?id=13177) is not ported. In elflink.c (elf_gc_sweep_symbol), there is an extra &quot;h-&gt;def_regular&quot; in the if condition.

I understand that binutils-2.21 is quite different from binutils-2.22. Since I haven't read the underline idea of the patch, I am not sure if this partial backport is complete or not. I am wondering whether the patch owner can explain a little if possible.

I think it would be better to port back the unit tests as well if it is not too difficult.
|Patch Set 2: I would prefer that you didn't submit this

Patch submitted in
https://android-review.googlesource.com/#/c/36585/
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1:

You can send the gdb-6.6 and gdb-7.1.x patches to AOSP. These gdb-6.6 and gdb-7.1.x are not shared with non-Android toolchains.
|Patch Set 1: Looks good to me, approved

Someone please verify the patch.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 4: (1 inline comment)


|Patch Set 5: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1:

I just do repo sync and can see the patch in toolchain/build.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: I would prefer that you didn't submit this

As you said, current bionic does not support c99 or sincos. So if we build arm-linux-androideabi toolchain (--target=arm-linux-androideabi), OPTION_BIONIC is true, OPTION_GLIBC is false, such that TARGET_C99_FUNCTIONS and TARGET_HAS_SINCOS will be false.
|Patch Set 1:

The change you suggest also affects the server (x86) toolchain and ChromeOs toolchain we maintain. We need to find the root cause of the problem and make the patch to upstream first.
Have you tried the upstream GCC or the 4.5 branch maintained by H.J. from Intel (hjl/android/gcc-4_5-branch branch from http://git.kernel.org/?p=devel/gcc/hjl/x86.git;a=summary). I have heard that people can build x86 Android toolchain from that branch. Almost all Android related patches on that branch are already in upstream 4.6 except one or two which are under review. We already back ported those upstream 4.6 patches into our internal development gcc-4.4.3 and plan to release those patches Q1 next year. If you find some patches very important for you, we can try to push them out earlier.
|Patch Set 1:

The cited gcc-4.5 branch maintained by H.J. has several patches that he said are necessary to build android-atom. It is not a surprise that upstream gcc-4.5 does not work. Upstream 4.6 has a certain chance to work because it contains most H.J.'s patches. I haven't tried it however.

Would it possible for you to share with us the procedure you configure and build the android-x86 toolchain? So that we can have a try too.

Thanks!
|Patch Set 1:

If the gcc target is configured properly, gcc will automatically sets bionic as default library and adds -fPIC by default.

From gcc/config.gcc (in our gcc-4.4.3 and upstream gcc-4.6), it looks like if $target satisfies both *-*-linux*  and  *-*-*android* pattern,  gcc will define
        DEFAULT_LIBC=LIBC_BIONIC
        ANDROID_DEFAULT=1
 
Current arm-linux-androideabi-4.4.x is configured in this way. I would suggest i686 android toolchain does the same thing.
|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 1: I would prefer that you didn't submit this

Thanks for porting the patch.
We may probably already have the patch in our internal development gcc-4.4.3 branch (we plan to release these atom patches early next year). Could you please send us the upstream revision number so that I can make sure we have this particular patch?
|Patch Set 1:

We have 4000+ of lines of Atom patches in our internal development branch which were back ported from upstream gcc-4.5. It takes time to test. We plan to roll out these patches by the end of Jan 2011.

Luse, thanks for this patch. Our policy is to take only those patches that are back ported from GCC upstream. Probably this one came originally from upstream. Next time could you please directly point to the link of FSF upstream GCC patch or the revision number? Thanks!
|Patch Set 1:

gcc-4.4.3 source has been upgraded.
Atom support is there now (mostly back ported from upstream gcc-4.5).
https://review.source.android.com/#change,20825

If you need more atom support, please point us to upstream GCC revision numbers.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

I hesitate of this patch because of two observations:
1. Change in this file will affect all targets that are configured to be android. Current Android tree x86 build uses -fPIC as default. Are we sure we want to use -fpic as default for x86-android as well?
2. In current gcc arm backend, -fpic and -fPIC have no difference

It seems like to be conservative, -fPIC works for all targets in all cases and makes no difference on ARM.
|Patch Set 1: Verified; Looks good to me, approved

Built Android toolchain in the old way, and also in the new way.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

Pass gold and binutils dejagnu tests.
Build android tree.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

-Built Android toolchain on mac and linux, built Android tree
-Did arm/thumb1/thumb2 dejagnu tests with glibc and qemu
-Special dejagnu tests on arm hardfp
-x86-64 bootstrap (c,c++,fortran,objc)

Todo:
-Linux and mac divergence tests
|Change has been successfully merged into the git repository.
|Patch Set 1: I would prefer that you didn't submit this

(2 inline comments)

Sorry I skipped the review request somehow.

I read the patch. It looks like it does proper protection if setlocale() returns NULL and the patch should not affect normal cases when setlocale() returns something. I will port the patch to internal branch, fix the style stuff and do required tests. When the patch is accepted internally, I will push it out here.

Bionic setlocale() always returns 0. Is it going to be changed later or not? I am wondering whether we should push the patch to upstream GCC.
|Patch Set 1:

David, do you have a test case that shows the failure?
|Patch Set 1:

Thanks for the test case and information!

I will send the patch for internal review and ask for other developers' opinion on pushing the patch to upstream.
At least I don't see any problem of keeping the patch locally now. If the patch can go upstream, that will be ideal.
|Patch Set 1:

The second question is also my concern.

Currently, in bionic setlocale() always return 0. Even if it is changed in the future, it is still good to provide a way that is compatible with old bionic. That means we need to patch the toolchain, in gcc source or as a local patch inside NDK.

I did an incomplete search on setlocale(). The return value of setlocale() can be NULL, if the locale to be set is not valid. In this patch, however, the concerning places are those where locale=NULL. If locale is NULL, setlocale() is supposed to return the current locale. ANSI C defines that the default locale is &quot;C&quot;. That means if the C library is ANSI C compliant, setlocale(xxx, NULL) should not return NULL.

What I am not sure is whether libstdc++ requires that the supporting C library must be ANSI C compliant.
|Patch Set 1:

I submitted a refined patch into internal branch and have merged it to Android GIT. https://review.source.android.com/#change,20478.

You can abandon this patch now.
|Patch Set 1: Verified; Looks good to me, approved

Tests done:
1. X86 bootstrap. Dejagnu tests on libstdc++-v3.
2. Built full C++ supportive Android toolchain. Tested std::cout &lt;&lt; &quot;Hello&quot; case.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

This patch makes no change if -mtune=cortex-a9 is not given.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

We have made the same change in internal master tree.

Author: Doug Kwan &lt;dougkwan@google.com&gt;
Date:   Tue Mar 30 14:55:18 2010 -0700
Add missing libcrypto in linker option.
  Change-Id: I014a03e4f1acae841185b1cfb7c0efe3640c58fd

JBQ, can we propagate the change to external tree?
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: I would prefer that you didn't submit this

The changes in Makefile.def looks fine. But Makefile.in generated on my machine does not contain the differences around &quot;$(HOST_EXPORTS)  \&quot;.

I will port the change, regenerate the Makefile.in, do testing, and send you a new patch for review.
|Patch Set 1:

I was wrong. Git diff shows that my generated Makefile.in also adds a space to the line after $(HOST_EXPORT). (g4 diff does not show this difference.)

Any way, I back port the patch to our internal source, add a README entry and test it.
It is submitted on:
https://review.source.android.com/#change,16619
|Patch Set 1: Verified; Looks good to me, approved

This patch was originally made by Jim Huang. I added a README entry and did testing.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

Thanks for the fix. I will backport this patch to our internal master code base. Thanks!
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

I ported this change to internal master toolchain code base. This change won't be lost when we upgrade toolchain source in the future. Thanks!
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Do not submit

This problem has been fixed in our master toolchain sources: https://mondrian.corp.google.com/changelist/42581-p2.
I will copy the change to the git repository. Thanks.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

Right, I made a similar change to prepare for the up coming arm-linux-androideabi toolchain, which defines &quot;__unix__&quot; internally. I added &quot;!defined(__ANDROID__)&quot; to prevent this block from being executed. In the new up coming arm-linux-androideabi toolchain, __ANDROID__ is defined. So I think we still want to use !defined(__ANDROID__) here, instead of !defined(ANDROID)&quot;.

Adding this sentence does not affect current arm_eabi toolchain, because arm_eabi toolchain does not define &quot;__unix__&quot; at all. The block will not be executed anyway.

Let me know if you have further questions. Thanks!
|Patch Set 1:

The internal patch ID is:
commit e5b5bb96ec50350cad24fb9694f8399674535cd2
Author: Jing Yu &lt;jingyu@google.com&gt;
Date:   Mon May 24 11:16:42 2010 -0700

I can check out an external master tree and manually make the same patch.

I may be confused.
Why do you mention x86 target toolchain? Do you mean use the x86 toolchain to build the emulator?
The x86 toolchain has a different story than the arm toolchain, since it links against x86 native system libraries. Because many system calls are not defined by bionic, arm toolchain can not use them. But x86 toolchain does not have a problem with them. I haven't tried compiling this file with x86 toolchain though. Did someone see compilation error?
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

OK. I see what you want to do. If you want the x86 toolchain walk the same path as ARM toolchain does, then you have to prevent calling to &quot;IsNANorINF, IsINF, IsNegNAN, ecvt_r, fcvt_r&quot;. I would suggest add &quot;-D__ANDROID__&quot; to the global cflags when using the x86 toolchain, to be consistent with the upcoming arm-linux-androideabi toolchain. I have tried &quot;-D__ANDROID__&quot; flag, the error messages are gone.

The upcoming arm-linux-androideabi toolchain defines __unix, as x86 toolchain does. It also defines __ANDROID__ implicitly to tell it is targeted for Android platform. We need the patch to make sure that arm-linux-androideabi toolchain does not take a path Android does not like.

However, the ubuntu x86 toolchain is for general X86 platform. We have to explicitly tell the compiler we are working for Android system now. I think adding a &quot;-D__ANDROID__&quot; compilation option is a good way to go.
|Patch Set 1:

Yes.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: No score; Looks good to me, approved


|Patch Set 1: Verified; No score

I built Android toolchain out of the patched source. And used the new toolchain to compile hello.c. The generated assembly code contains GNU-stack annotation.
|Patch Set 1: Verified; Looks good to me, approved

Just check in a new toolchain to master. Here is the according source.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

Just check in a new toolchain in master. Here is the binutils source.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified; Looks good to me, approved

Just check in a new toolchain to master. Here is the source.
|Change has been successfully merged into the git repository.
|Done
|I don't think we need to - the other places in this code that do similar things don't (line 493, for example).  As far as I know this will always point to the last character in the string, as defined as the last character before '\0', so we shouldn't get any false matches in the junk at the end, and I can't think of any other errors that could come from just comparing it.
|Indeed it should.  I'm a little surprised that even worked before.
|Patch Set 1:

Re:Kenny Root on a similar fix, I believe there is no other place to do this.  The regex for parsing the URI is within this same file and changing that does not have the desired result.  If I am wrong about this would you please point me towards the right place to do this?

Thanks!

-- Melanie
|Uploaded patch set 2.
|Patch Set 2:

Moved the fix up to the regex in line 57 as suggested.
|Patch Set 2:

Hmm, looks like my inline comments got wiped out when I uploaded.  Here they are again:

@Kenny Root
Cool, that appears to work as well. Should I add a comment up here to describe why I am adding this or does the git comment suffice?

@Patrick Scott
As far as I can tell this is being called from WebView within webkit. WebView also has a function called loadDataWithBaseURL which seemed like a good place for this, but when I ran it through the debugger with a test site it never got called. Beyond that I couldn't find any other references to 'base' within webkit.
|Uploaded patch set 3.
|Patch Set 3:

Hey,

I synced to the current version and re-uploaded, does this suffice?
|Patch Set 3:

Hey,

That part of this thread went partially offline.  I tried some fixes within KURL but they didn't seem to have any effect when I ran tests with the emulator/debugger.  This could very well be an error on my part or something to do with it being external code.
|Patch Set 3:

I do not believe it is intentional, as it does not follow the guidelines outlined in http://tools.ietf.org/html/rfc3986#section-5.4 .  The only reason I have not submitted a fix within KURL.cc in external/webkit is that I have been unable to get any changes I make to that file to be reflected in the emulator or in the debugger (eclipse), so I have no way of knowing whether they actually fix the problem.  

Is there something particular that I need to do to edit external/webkit that is different from the main android workflow?  

Thanks!
|Patch Set 3:

I have uploaded my changes to KURL in https://review.source.android.com/#change,16622

Once that goes through I will abandon this change.
|Patch Set 3:

Yep, sorry I thought I had already done so :)
|Patch Set 3: Abandoned

Fixed in change 16622
|Patch Set 1: (3 inline comments)

Rebuilt and tested with new changes.
|Patch Set 1:

Hmm, I'm having some difficulties with repo upload --replace.  The second patch set ended up in a new change 


 https://review.source.android.com/16841

Is it possible to merge the two or something like that?

Thanks, and sorry for all the trouble.
|Patch Set 2:

Thanks :)
|Patch Set 1: Abandoned

uploaded by mistake
|Uploaded patch set 3.
|Patch Set 3:

Ok, thanks for the feedback.  I'll try and get to the root of the problem and send a new change at that point. 

Thanks,

-- Melanie
|Patch Set 3: Abandoned
|Patch Set 1: Abandoned

Reversion of unintentionally uploaded change
|Patch Set 1: Abandoned

Unintentionally uploaded
|Uploaded patch set 2.
|Patch Set 2:

Hey,  I have updated the comments.  The example given was on hypothetical file names with spaces, I don't have any examples of actual files with spaces to test on, since to test I just uploaded mine to the sdcard.

Thanks!
|there is no such variable.
Do you mean LOCAL_IS_HOST_MODULE?
|I guess for Linux/Mac this config doesn't build any more.
|Let's overwrite it here, and add a comment to make it clear this doesn't mean we still support pure 32-bit host build.
|I remember long time ago we used to repeat the static module names to satisfy circular dependency between static libraries in some cases. Not sure we still have such cases in the tree. Even if we have, we can use LOCAL_GROUP_STATIC_LIBRARIES now.
|Perhaps better to move to a utility package.
|This can be totalSkip too.
|+byi
Or even better, we can add libstlport.so to these devices blobs, then you can remove stlport from the tree right now.
|OH, I forgot your that CL :-)
However STLPORT_WHITELIST isn't defined yet at this point.
In config.mk it loads envsetup.mk (which eventually loads the product makefiles) before it defines STLPORT_WHITELIST.
On the other hand, we can remove libstlport from this file, and add it to specific device's makefile, such as device/asus/flo/device-common.mk. I'd really like to keep the device names out of the build project.
|I think we can just remove libstlport from this list, assuming libstlport is pulled in LOCAL_SHARED_LIBRARIES.
Then we can contain the whitelist in the external/stlport/Android.mk.
|is this related?
|This is for debugging only?
|The pure purpose is to test correctness of this function. Sounds like something we should put in testing code.
|you'll need this to regenerate it with the new property added.
|No, you can override both in product's makefile.
|Is it intentional to set this in /default.prop instead of /system/build.prop?
|Is this advisory or mandatory? We do have include paths that get created only after the code generation is done, such as generated protocol buffer head files.
|so we are appending the global paths (relative to the root of the source tree) to the local paths. How will you distinguish them when you process the list later?
|This is a function added by you recently. I can see the ID of your change in git history &quot;Ief696ec85cf33ad5fb187227d215c1c2e894f962&quot;. But I couldn't find it in gerrit. Do we submit blueprint change in upstream with a separate gerrit or something? I'd like to see code reviews in the blueprint project too.
|I would normalize the conditional after parsing the conditionals. Otherwise, you may also need to handle cases like:
ifeq (darwin,$(HOST_OS))
...
|What does &quot;target&quot; mean here? what's the opposite?
This &quot;target&quot; prefix is confusing, given it means device-side in the makefile build system. How about renaming it to &quot;os&quot;?
|This change LGTM - removed libc++.so while keeping the ability to add back libraries later.
|This should be libstlport, as the PRODUCT_PACKAGES references it.
To set the suffix, use:
LOCAL_MODULE_SUFFIX := .so
|Unnecessary. This is the default for SHARED_LIBRARIES.
|You don't need to define a separate module. Just add to the above module definition:
ifeq ($(TARGET_DEVICE),flounder)
LOCAL_MULTILIB := both
LOCAL_SRC_FILES_32 := $(TARGET_DEVICE)/32/$(LOCAL_MODULE).so
endif
|Better to change the conditional more general:
ifeq ($(TARGET_IS_64_BIT),true)
|You don't want to install both, do you?
|Why doesn't it apply to jar files?
|Isn't it that common.Glob() returns only files?
What do we expect it to return here? how do you handle files in just resourceDir?
|Oh, I looked at the old glob.GlobWithDepFile() you just replaced in the other change.
|Do we really want to expand $PATH when soong is run? Does that mean if $PATH changes the build.ninja will be automatically updated?
Maybe we want to defer the expansion to when ninja is run, by changing it to &quot;$$PATH&quot;.
|We added HostBin to $PATH.
Perhaps we don't need to add $PATH in init(), just use &quot;PATH=$$PATH:$path&quot; here.
|This can also be a target/device module.
|Perhaps check if current is host module.
What will happen if it's a combined module with both target and host?
|not sure why tabs end up here.
|Since LOCAL_SANITIZE is already multiple valued, can we make this an optional value for LOCA_SANTITIZE?
I want to reduce the number of LOCAL variables if possible.
|LoadGlobalDict() in this file loads the dictionary generated by generate-userimage-prop-dictionary in build/core/Makefile and it doesn't contain build.prop.
build.prop is loaded only when ImagePropFromGlobalDict() is called by add_img_to_target_files.py, for which the dictionary is loaded by build/tools/releasetools/common.py.
|Isn't glob_dict[&quot;build.prop&quot;] already a dict object? see build/tools/releasetools/common.py:
d[&quot;build.prop&quot;] = LoadBuildProp(read_helper)
|You can u reference the installed file of the module defined by $(BUILD_HOST_EXECUTABLE):
consrypt_generate_constatns_exe := $(LOCAL_INSTALLED_MODULE)
Use lower-case for local variables.
|The convention is to use lower-case for local variable. Suggest to use conscrypt_gen_java_files.
|TARGET_OUT_GEN is for native code. That means every product has its own copy. But Java code is shared across all products. I think we should use $(TARGET_OUT_COMMON_GEN) instead.
|No need to use $(LOCAL_PATH) here. Just use:
$(conscryt_gen_java_files) : $(conscrypt_generate_constants_exe)
|$(dir $@)
|$&lt; &gt; $@
|If you use LOCAL_GENERATED_SOURCES you don't need the ../..:
LOCAL_GENERATED_SOURCES := $(conscrypt_gen_java_files)
|conscrypt_generate_constants_exe :=
conscrypt_gen_java_files :=
|This is commented out, so the enclosed will be applied universally. See the commit message in https://android-review.googlesource.com/#/c/114664/

I think we can switch to opt-in for unbundled build in build/core/dynamic_binary.mk for now:
ifeq ($(my_pack_module_relocations),)
ifdef BUILD_TARGET_APPS
# Unbundled build
  my_pack_module_relocations := false
else
  my_pack_module_relocations := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_PACK_MODULE_RELOCATIONS)
endif
endif
|We can remove this as well.
|We can remove this since all archs are with this enabled.
|where is the source of this tool?
Note that with the new dependency on this tool it may break many existing unbundled branches.
|Definitely not. Unbundled branches don't include bionic. They use libc from the NDK prebuilts.
That said, you'll need to move it to a project common to platform branches and unbundled branches.
Can we make it a prebuilt and store it in prebuilts/misc/?
Or put the source and build it from source in build/tools?
|This isn't correct.
For shared libraries, $(LOCAL_BUILT_MODULE) is in a common library path, such as out/target/product/shamu/obj/lib, which will be added to &quot;-L&quot; when a module links against the library. 
The new strip_output should be put in $(intermediates) instead, something like:
strip_output := $(intermediates)/STRIPPED/$(my_built_module_stem)
(following example of linked_module.)
|You need to add it to build/core/clear_vars.mk
|no need.
ifeq (true,$(my_pack_module_relocations))
|you need $(ACP) too, because you call $(copy-file-to-target) in $(pack-elf-relocations).
|In your previous patcheset, it defaults to true, by the arch specific global variables removed in this PS.
Do you want it to opt-in or opt-out?
|Oh, I was wondering why you use &quot;ifneq ($(LOCAL_FORCE_STATIC_EXECUTABLE),true)&quot; below.
|Oh, you export LD_LIBRARY_PATH. In that case  probably the library path name lib/ is OK. But you need to make sure the bitness of the binaries and the libc++.so matches.
|Did you test it?
This will be expanded to out/host/linux-x86/lib64/libc++.so in the current build system, which builds host modules in 64-bit by default.
I am not sure the cts binaries that depends on libc++.so is 64-bit or 32-bit. If you have both, you'll need to include both 32-bit and 64-bit libc++.so.
|So this require to be lib64 too.
|To confirm from comment in the other change: so we don't need this kind of stuff in soong, because framework.jar will have dependency on frameworks-res's filelist target.
|I remember you have added support to generate the framework.aidl. But I couldn't find it...
|Hmm, nany droiddoc modules skipped. The api-stubs modules will be hard to tackle.
|Fortunately we have moved the .rs files out of the framework.jar itself, so this isn't really needed now.
|Yes, I can imagine that would make the blueprint module definition much more complicated. But I can see many places where we need to establish file-level dependency between modules. Just search for &quot;&lt;target&gt; : &lt;dep&gt;&quot; pattern in Android.mks.
Can we have support for per-module soong extension (or plugin)? i.e. a module provides a snippet of go code that can alter the regular module build process. I mean the go code should be separate from the core soong code. Ideally they should exist in the module's own project.
|This is hacky.
Can we express this dependency in the corresponding Blueprints file?
I believe there are other cases in the source tree that one module depends on sources generated by another module.
|if no LOCAL_CERTIFICATE is specified, the build system uses the product-specific default dev key.
|Yes, we do need LOCAL_JAVA_RESOURCE_DIRS in app.
Actually we used to forbid LOCAL_JAVA_RESOURCE_DIRS in app, but then requirement emerged when an app used third-party library (IIRC, it's an unbundled app), and we found no reason to forbid it.
(P.S. I found the bug 6892294.)
|where is Resource_dirs?
Note that we have two types of resources:
LOCAL_JAVA_RESOURCE_DIRS, LOCAL_JAVA_RESOURCE_FILES: resources common to all Java modules. (i.e., files to be added to the jar file)
LOCAL_RESOURCE_DIR: Android resource compiled and packaged to apk by aapt.
|It may be reasonable to disallow apk with its own Java resources, in the spirit of replacing them with Android resources.
But for static Java libraries, I think both Java resources and Android resources are in active use. To support Android resource for static java library is another story, see http://b/issue?id=5714516.
I think we need to distinguish these two resources. java_resource_dirs v.s. app_resource_dirs ( android_resource_dirs may be better) sounds good to me.
|I don't understand here.
For &quot;LOCAL_SDK_VERSION := current&quot;, the dep library should be android_stubs_current; for &quot;system_current&quot; the dep library should be android_system_stubs_current. If it's unbundled build (with TARGET_BUILD_APPS), the dpes are corresponding prebuilts.
If LOCAL_SDK_VERSION isn't set, i.e. to build against the platform, the deps should be TARGET_DEFAULT_JAVA_LIBRARIES, which is usually core-libart, ext, framework.
|properties is inehrited from JavaBase, so Resource_dirs looks like Java resource dirs, not Android Resource dirs. See my previous comment.
|The order matters. Note that the overlay should be prepended to the module's LOCAL_RESOURCE_DIR. The overlay rule is: the first takes precedence.
|Actually they are widely used in the internal source tree, with the function inherit-package, to build a google-specific version of an AOSP app.
|Great
|In the make-based build system, we don't do this, because there may be many rules generating .java files to the LOCAL_INTERMEDIATE_SOURCE_DIR. We take the advantage that the function compile-java includes any java files found in that dir.
So you may delete files just generated by another rule.
|There is a okhttp-tests-nojarjar module in the Android.mk but not in Blueprints.
Also missing okhttp-hostdex. I know blueprint doesn't support conditional yet, but I don't see the usual warning lines...
|wow,  does soong supports this? or shall we let Blueprint support list subtraction? I'd like to see Blueprint to support more functionalities.
|in that case it may be better to have a separate property &quot;srcs-excludes&quot;.
|why do we have this?
|Nit: we may want to move this to build/core/config.mk (or similar) as a global constant, so we dont' need to parse it for every module.
|Use $(filter) instead of $(findstring).
|Please specify in what path and what module the error occurs:
$(error $(LOCAL_PATH): $(LOCAL_MODULE): Use of sanitizers requires LOCAL_CLANG := true)
|For a target module, my_sanitize_host isn't initialized, and
you may pick up the value of a random host module.
It seems to me we don't need the variable my_sanitize_host at all.
|I think We don't have it because we don't need it.
Is there anything changed? +enh
|where is this variable defined?
|We can ask TARGET_ANDROID_FILESYSTEM_CONFIG_H to have a fixed file name, but not the path. I think that's reasonable.


(Or you can use:
LOCAL_CFLAGS += -include $(TARGET_ANDROID_FILESYSTEM_CONFIG_H), but it's not preferred.
|We should allow the device define a custom value in its BoardConfig.mk;
Is fs_config_dirs and/or fs_config_files required for every build? If so we may need to give a default android_filesystem_config.h.
Otherwise enclose the whole thing with conditional:
ifdef TARGET_ANDROID_FILESYSTEM_CONFIG_H
...
endif
|You don't need this. The build system will establish the dependency on all the header files included by the source.
|I'd use:
-I $(dir $(TARGET_ANDROID_FILESYSTEM_CONFIG_H))
|I found this is hard to read. I'd change it to:
-DANDROID_FILESYSTEM_CONFIG=\&quot;$(TARGET_ANDROID_FILESYSTEM_CONFIG_H)\&quot;

Do you really want to build the file path into the binary?
|Yes, I got it after I read the c file.
Yes, you can use &quot;ifneq ...&quot; here.
|You can store the built executable to a vaiable here:
host_fs_config_bin := $(LOCAL_INSTALLED_MODULE)
Then you can use $(host_fs_config_bin) to replace &quot;$(HOST_OUT_EXECUTABLES)/fs_config_generate_$(TARGET_DEVICE)&quot; later in this file.
|$(LOCAL_BUILT_MODULE) : $(HOST_OUT_EXECUTABLES)/fs_config_generate_$(TARGET_DEVICE)
   mkdir -p $(dir $@)
   $&lt; -D -o $@
|$(LOCAL_BUILT_MODULE) : $(HOST_OUT_EXECUTABLES)/fs_config_generate_$(TARGET_DEVICE)
   mkdir -p $(dir $@)
   $&lt; -F -o $@
|We may want to use a different file name for the device specific header file, to avoid conflict and reduce confusion.
|I'd move the default value to a header file and use it if a device header file isn't provided. So that we can have all the above logic in the makefile and not pass the path to the c file.
|This never evaluates to true.
|This complexity is really unnecessary.
I think it's reasonable to require a fixed header file name, such as android_filesystem_config.h.
I'll upload a cleaner one.
|With &quot;LOCAL_CFLAGS := -Werror&quot; the above line fails the build.
|Where is this functiond efined?
I got this error:
error: implicit declaration of function 'fs_config_generate' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
|Please remove this line: it's noop for a host module.
|You don't need this. They are already defined in build/core/config.mk.
|Probably.
Or should we disable dex-preopt for PRESIGNED apks?
|I am not sure if you can put a comment line inside the build recipe. Did you try running such case?
|No, they are not shipped in the SDK.
They are distributed to build signed images (and / or generate the OTA package) by the release team.
|I don't see libselinux
|zipalign is part of the SDK build tool package. That means:
1) The shared libraries should be built in linux, darwin and windows.
2) you need to add any shared library dependencies to the SDK package, by adding them to the .atree files development/build/sdk-[linux&#124;darwin&#124;windows]-x86.atree.
|The requirement of such statement makes go confusing to me.
|Yeah, I got that point after I read http://golang.org/doc/effective_go.html#blank_implements .
But I was puzzled why you could assign a pointer type to a value type, until I saw logtags() below.
Btw, the pointer-type-v.s.-value-type of Go is also confusing. I am still trying to get used to everything of Go.
|If it generates multiple .dex files for a module, how do you track the dependency in the ninja file?
The number of the output .dex unknown until dx has finished running.
The current build system uses the first output dex file (classes.dex) as dependency, but it will package up any classes*.dex in the same dir to the final apk/jar.
|clearer, I meant, not cleaner, sorry.
|I am not sure if it's good idea to combine them.
I think it may be cleaner if we define them separately and just refer to the same set of source and flags.
|Hmm, so this creates combination [host&#124;target][static&#124;shared] of four libraries. But the source Android.mk does not define host shared library for this project. I am wondering the 
androidmk parser's logic.
|The Android.mk has only target test.
|Sorry I didn't dig into the soong source files yet, but I am wondering:
So this builds both static and shared library?
Will each of .cpp files be compiled only once? or we just define two separate modules they happen to have the same source and flags?
|The configuration sounds flexible.
I am still wondering the meaning of &quot;create rules as needed&quot;: if the library is never referenced by anyone, will the rule be created when you do a checkbuild?
|Ah, got it. So the rules will be always defined in the ninja file; whereas the module will be built or not is as needed, similar to how the current build system handles multilib build.
|We don't do that in the current build system.
Is it ever possible that there is case we don't want to add  export_include_dirs to local_include_dirs?
|I believe this is just for the SDK framework.aidl files.
In the current makefile build system, we just refer to the source file in prebuilts/sdk. Not sure if it's worth adding a new module type.
|Shouldn't they be defined in a .blurprints file?
|Even though it's cheap to add new module type, there may be big number of such cases. It would be much easier (especially for the developers) to do it in just blueprint file like:
genrule {
  srcs: [...],
  deps: [...],
  cmd: [...],
  
}

I have the same concern about the above list of directories. People won't want to dig into the .go files to find where to add a directory.
|Do we support more general genrule yet?
I think aidl-preocess is run only once in the whole build process. It maybe overkill to have a new module type for this.
|Hmm, makes sense for the preprocessed aidl.
|No, we don't need the above 2 lines.
Otherwise you get the opposite :-)
|With your other build system change, it will be set to &quot;32&quot; in the core build system anyway when HOST_PREFER_32_BIT is set.
|With this you will be unable to express &quot;I want to build only 64-bit even when HOST_PREFER_32_BIT.&quot; Also I don't think we need to set LOCAL_MUTLIB here with HOST_PREFER_32_BIT. 
I think it's reasonable and more flexible to let the module itself to decide based on HOST_PREFER_32_BIT here.
|Let's keep the simple meaning of &quot;first&quot;: to build for [TARGET&#124;HOST]_ARCH only.
|Colin, I think this change breaks the SDK build, in which actually we should use &quot;LOCAL_MULTILIB := 32&quot;, which is the HOST_2ND_ARCH.
I think we can fix it by:
ifneq ($(HOST_PREFER_32_BIT),true)
LOCAL_MULTILIB := first
endif
|I have no idea what licence implication for the DISTOOLS or OTATOOLS. They are just host tools we don't distribute to anybody outside google, do we?
If you add new tool to the platform, you'll still need to get the license approval.
|You need an extra &quot;,&quot; at the end, otherwise it's the same as patchset 1.
http://stackoverflow.com/questions/6682093/returning-tuple-with-a-single-item-from-a-function
|pass in a sequence like ('android.jar',)? otherwise any substring would match.
|Do we need this?
I don't think Android build needs this: we use prebuilt ccache in the source tree.
|Yes, that's a decision at the time we added multilib build support to host modules, lots of modules didn't build for 64-bit, such as the vast number of LLVM related modules.
|I agree. Anything not built for both arch should have been marked properly now, since we actually build with HOST_PREFER_32_BIT when doing SDK builds.
I'll change the default to both and verify the build later when I have time.
|If eventually we are going to abandon support of gcc build, I'd like to avoid the gcc-only variables.  YOu can see  many LOCAL_CLANG_* variables in build/core/clear_vars.mk ; We would as many gcc-only variables.
|LOCAL_CLANG isn't set yet at this point.
I think you need to detect USE_CLANG_PLATFORM_BUILD instead.
|Is there a mechanism to specify just a module name as dependency (LOCAL_REQUIRED_MODULES), and resole it to installed files only after the dependency module definitions are also loaded?
|ToDo: a module should also be able to specify what partition to install.
|Oh, I think I misunderstood it. We do globbing only if the directory has newer modification time.
|So we'll still do all the globbings every time you run soong. That would be quite expensive when the tree is big and file system cache is cold. I have been thinking to forbid globbing outright in the build system, though it might not be welcomed by the developers.
|I was worried it may fail in other way, without printing a message. But it seems unlikely.
|Wow, I didn't we are doing this.
Not failing the build looks good to me.
But can we still keep the error message if any?
|Does the linux ar support @file? 
In my impression it doesn't either. In the current makefile build system, we run ar repeatedly to solve the problem. See https://googleplex-android-review.git.corp.google.com/#/c/52790/.
|Let's use shared library.
|Oh, it's part of the ota tools package. If you add shared library dependency, you'll pack the so file to the package too. See the rule for otatools.zip in build/core/Makefile.
In that case, static library looks reasonable.
|Use $(LLVM_PREBUILTS_VERSION)?
|This file isn't intended to be included multiple times.
It has been included once in build/core/config.mk.
Also clang/config.mk has been written in a way that it has dependency on variables set in core/combo/[HOST&#124;TARGET]_*.mk, not the opposite.
I'd suggest to move the *_LIBPROFILE_RT variables to build/core/clang/config.mk.
|This causes the build failure.
|Good catch. I missed this case.
I remember I had tested this case. I don't know why I didn't catch it...
|Good point.
|If soong.bootstrap.in changes, you'll still need to manually rebootstrap :-)
Perhaps the chance is slim. But how about just &quot;echo SRCDIR=${SRCDIR} &gt; .soong.bootstrap&quot; here so people won't put more things in soong.bootstrap.in?
|Oh, this dependency won't work in a clean build, in which the header dependency files are not generated yet and no file depends on $(LOCAL_PATH)/getevent.h.
You need to add it as dependency of a .c file.
|typo: it should be $(UNAME)!
|In the makefile build system, actually a module can define 3 targets:
1) LOCAL_INSTALLED_MODULE , the final installed file a  product can depend on;
2) LOCAL_BUILT_MODULE, the build result in the intermediate directory;
3) LOCAL_CHECKED_MODULE, the file to build when you just want to check the build. Usually LOCAL_CHECKED_MODULE is the same as LOCAL_BUILT_MODULE. But for an apk actually the build system set LOCAL_CHECKED_MODULE to the output of javac, so that when you do checkbuild we just run javac and skip dx'ing/aapt-packaging/etc, which are presumably more time-consuming and less error-prone.
|This will end up with a lib in the platform-version independent directory. That may lead to conflict if we want ever to ship tools of multiple platform versions. Maybe we should create bin and lib subdirectories. +xav.
|We don't ship 64-bit executables in the SDK package.
(In the build system, if you are building sdk/win_sdk, it switches to &quot;HOST_PREFER_32_BIT := true&quot;)
|I guess you didn't do a clean build?
If you do a clean sdk build, it will be 32-bit.
The default now is 64-bit.
|Definitely we should combine.
I'll upload a new patch.
|we have unified the function.
|Yes, but that would end up with duplicate rule for the same object file and make will give warning for that case.
Anyway I think that's good and idea and advice is taken.
|this is not good. It will be executed every time you run make, even if the files are all up to date.
Can we define the constant in the Android.mk instead?
|Oh, I didn't see this.
Yes, we can drop this. We don't support cygwin build now.
|sorry, I didn't see the above definition of WITH_MINGW.
Let's remove it, if we can.
|it's USE_MINGW, not WITH_MINGW :)
|The CTS configuration is relatively simple and is fine here.
|I'd like to move all the lines below to a new file.
|Use lowercase and more specific names for local variables.
|You want to collect both 32 and 64 bit rules, right?
|ditto
|just for debugging?
|Remove this line - you don't have any subdir Android.mk.
Otherwise if you do have, the following would be broken, because LOCAL_PATH has changed in the subdir Android.mks.
|ifeq ($(TARGET_IS_64_BIT),true)
|ifeq ($(TARGET_IS_64_BIT),true)
|I think there is misunderstanding of .NOTPARALLEL: it essentially disable any parallelism even if you run &quot;make -j&quot;. See make's manual:http://www.gnu.org/software/make/manual/make.html#index-_002eNOTPARALLEL
To have two targets built sequentially, you can have one depend on the other.
|Oh, I missed that.
Removing it or correcting the value, either seems fine to me.
|I believe we should expand those two variables here:
BOARD_MKBOOTIMG_ARGS := --ramdisk_offset $(BOARD_RAMDISK_OFFSET) --tags_offset $(BOARD_KERNEL_TAGS_OFFSET)
Those two variables are not used by the core build system in any way.
I think that's an oversight in the original commit 3647fdffd1a7f17c728024249bf73d584c681de2 .
|We don't need it as a parameter. Just use $(PRIVATE_JNI_SHARED_LIBRARIES_ZIP_OPTIONS), as other $(PRIVE_*)s in the rule.
|Same here - you can reference directly the $(PRIVATE_*) variables in the build recipe.
|Why not combine the two calls to zipalign?
|It's unnecessary to check the alignment at this point here.
|Upper-case is preferred.
|You don't need this, or other changes in this file.
|Use the macro defined in config.mk?
|Use just the LOCAL_ variable to decide the value of jni_zip_options. Or perhaps we should use LOCAL_JNI_LIBS_ZIP_OPTIONS? so you can pass it directly to the zip command line.
|Also I hope we can extend LOCAL_PACKAGE_ALIGNMENT to LOCAL_ZIPALIGN_OPTIONS.
|That's a user error.
If you want to ensure a global variable not to be modified by individual Android.mk, you can add it to _product_stash_var_list in build/core/product.mk.
|You can define global variables (in config.mk or definitions.mk) and reference the global variables in the functions.
|This won't work if WITH_ART_SMALL_MODE is set in BoardConfig.mk, because board config is loaded only after product makefiles are loaded.
I saw other properties set in build/core/main.mk. We can move this to that file as well, if you want WITH_ART_SMALL_MODE set as board config variable.
|What's the use case? Why those predefined macros?
Maybe we should allow the module to define its own macors with  private variable like PRIVATE_M4_OPTIONS?
|You can also move definition of this variable out of the function body, because it's a constant and you don't need to reasgin it in every invocation of the function.
That way, you don't need to escape when you reference it in the function body.
|That's correct: $(intermediates.COMMON) is module specific.
|The convention is lower-case for local variables. Please rename it to something like tmp_resource_dir.
|Oh, you only need to replace just one file. That may be difficult to do otherwise in the makefile.
|Why not filter out $(config_root) from $(icu4j_resource_dirs) when you assign it to LOCAL_JAVA_RESOURCE_DIRS ?
|The core build system does much makefile-parse-time processing on each entry of LOCAL_JAVA_RESOURCE_DIRS. Removing it in the first place saves load time; Also it's fragile to call $(subst) here: if the core build system changes anything in '-C &quot;$(config_root)&quot;', this will break without anybody knowing it.
|oh, yes, this scrip is now run in a new shell.
Alternatively you can &quot;export -f &lt;functions needed by this script&gt;&quot; in envsetup.sh.
|Hmm, why function can't be used in this script?
|Yeah, this is chicken-and-eng issue: ANDROID_BUILD_TOP is set by envsetup.sh.
I think you should state that envsetup.sh (even lunch) must be run before running this script.
|We do not allow makefile as build target: that would make gmake to load all the makefiles again right away once the makefile target is updated.
Actually you don't need to do that here.
If you want to generate additional file as resource, you should define just the rule to generate the file, and have other modules depend on the generated file. As Narayan said, I would prefer to move the shell script (or whatever script, but just don't introduce new build prerequisite) to a separate file, and call the script from the build recipe.
On the other hand, if the generated file changes only if you import a new version of icudata, why not just check in the generated file?
|In that case you don't need to use the generated .lst files as dependency. In general if file names are unknown at makefile loading time, we can use a timestamp file in the dependency graph instead.
In this case, you can write:
icudata_tmp := $(call intermediates-dir-for,JAVA_LIBRARIES,icudata,HOST,COMMON)
icudata_tmp_stamp := $(icudata_tmp)/stamp
$(icudata_tmp_stamp) : $(LOCAL_PATH)/main/shared/data/icudata.jar
    &lt;call the script to generate the .lst files into the a subdir of $(icudata_tmp)/lst/, and make sure the subdir contains only the generated .lst files.

Then you can add &quot;-C $(icudata_tmp) lst&quot; to the other modules' PRIVATE_EXTRA_JAVA_ARGS, and add $(icudata_tmp_stamp) as their dependency.

You can put the script wherever in this git project.
|This is wrong. You can't modify a target in another target's build recipe.
|Actually if you are using the platform build system, the build system will use a prebuilt libc++.so in prebuilts/sdk/tools.
The problem is when you use it in gradle. You'll need to copy both aprotoc and libc++.so to the correct place to make it work properly.
Anyway, I am fine with this CL.
|Re-zipalign a zipalign'ed apk should be a noop. I just did a test and it behaved as a noop.
|+Runtime and framework folks.
I am not sure if it's good idea to allow partially zipalign'ed prebult apks in the system.img.
Otherwise I have no problem with the CL.
|So only the tests care about the directory entries in the jar?
If that's the case we don't even need any change in the care build system, because the tests are host modules or static modules, and we don't strip directories for those modules.
(We only strip directories when classes.dex is built).
|This is the one really needed.
|Is this overriding of PRIVATE_EXTRA_JAR_ARGS enough? As I mentioned in your previous review, we don't call $(initialize-package-file) for a static or host java library.
But for target (device) Java library, for example a shared Java library that links against static Java library icu4j-tests, you'll need to skip deletion of directory entries. If we do have that requirement, I can add a build system variable for that.
|Yes, I knew two things involved in the resource directory handling.
initialize-package-file isn't involved when icu4j-icudata.jar (or others) gets repackaged into icu4j.jar.
The build system just unzip icu4j-icudata.jar to the staging directory of icu4j.jar and rerun jar with &quot;jar -C &lt;staging_dir&gt; .&quot;, so nothing should be lost here.
Which directory in which jar file do you think has been lost? I can investigate in which step it gets lost.
|This patch won't work: the function $(initialize-package-file) in build recipe won't get expanded until the build recipe is executed.
|Effectively your change changes every call of $(initialize-package-file) to not delete directory entries, no matter a module is defined before or after this file gets included.
|We have &quot;LOCAL_FORCE_STATIC_EXECUTABLE := true&quot; for that.
As the comment (and a previous email) mentioned, &quot;To minimize risk, we now add -static only to link 'init'.&quot;, not change the core build system flags.
|-dynamic or -shared?
|same here
|If we want to go this way, I think it's better to use:
$(filter $(PRIVATE_LDFLAGS),-shared)
than $(findstring).
|Actually I tested builds with &quot;-shared&quot; removed, for both gcc and clang. Both built fine.
|We can just remove the above part.
There is no ro.product.locale mentioned in product makefiles. You need just update the oem.prop in the internal source tree.
|Good idea.
Let's set up a variable in the arch variable specific config makefile.
|Where is module sensors.ranchu defined? I couldn't find it in the source tree.
|You don't need this: we'll call the filtering function on line 989.
|We'll filter the unknown flags here.
|Hmm, this is really confusing, caused by the irregularity of mips32r6.  Andrew, can we create symlink directory mips32r6 pointing to mipsr6 to eliminate the irregularity?
|I don't like to put arch-specific things in this file. They will be evaluated every time this file gets included.
I would suggest to create symlinks. We have done that for arm64.
Another alternative is to set up per-arch(variant) per-sdk-version variables in an arch specific configuration file, and then uses such variables in this file.
|Let's move this definition to build/core/config.mk (or build/core/clang/config.mk).
|Yes, $(shell) is more expensive than makefile builtins.
You can define a list of supported API levels lower than 21 somewhere, and then use $(filter) here, something like:
RENDERSCRIPT_32BIT_ONLY_API_LEVELS := 9 10 ... 20
ifeq ($(filter $(RENDERSCRIPT_32BIT_ONLY_API_LEVELS),$(renderscript_target_api)),)
...
|If you store the path in a variable, you don't need to handle the conditional here.
|Without LOCAL_CLANG_$(arch), the loop makes no sense now. You can just write:
LOCAL_CLANG := $(ART_TARGET_CLANG_$(TARGET_ARCH))
|In that case ART_TARGET_CLANG is always evaluated to false with this change, even for non-mips build. That's not desired.
|Let's preserve use of LOCAL_CLANG_$(arch), as we discussed in the email.
|We can remove use of arch specific LOCAL_CLANG_$(arch), only if it won't happen that 64-bit needs it off but 32-bit needs it on (or vice versa).
Before change https://android-review.googlesource.com/#/c/99275/1, we needed this because we wanted to turn on clang for 64-bit targets but not 32-bit targets in arm64 build.
|Yes, line 160 is a mistake. We shouldn't add art_clang_cflags to ART_TARGET_CFLAGS.
I think we can add &quot;LOCAL_CLANG_CFLAGS += $(art_clang_cflags&quot; to the function set-target-local-clang-vars, instead.
(This and other art makefiles are over-complicated and a bit messy :-( )
|No, $(set-target-local-clang-vars) is called in the module definition, not here. Run &quot;mgrep set-target-local-clang-vars&quot; in art  you'll see where it's called.
|I agree this is slightly better.
Even-better is to not add art_clang_cflags to  ART_TARGET_CFLAGS, but add ART_TARGET_CLANG_CFLAGS, and in set-target-local-cflags-vars we use:
LOCAL_CLANG_CFLAGS += $(ART_TARGET_CLANG_CFLAGS)
|ART_TARGET_CLANG_CFLAGS_$(arch) is never applied, since $(ART_TARGET_CLANG_$(arch)) is blank, see line 86-90.
I think we should use LOCAL_CLANG_CFLAGS_$(arch)  without the conditional.
|Unfortunately this won't work in incremental build between user and eng/userdbug build: compilation flag change won't trigger rebuild with the current build system.
Our build server does incremental user build on top of userdebug build. That means user build will get the binaries built with &quot;-g&quot; as  well.
In general, basing comilation flags on TARGET_BUILD_VARIANT doesn't work in incremental build with the current build system.
|The comment says it evaluates to the list of the dst files.
|LOCAL_REQUIRED_MODULES works with $(BUILD_PREBUILT), but not $(BUILD_MULTI_PREBUILT)
|I don't want to make this list longer. There were a couple of proposals to add other variables.
You can always write a small makefiile template that include $(BUILD_PREBUILT) and then include the template multiple times.
|You shouldn't be building llvm-rs-cc.exe at all, the prebuilts in prebuilts/sdk/tools/windows will be used. See prebuilts/sdk/tools/Android.mk.
|Oh sorry, you should still be building llvm-rs-cc.exe, but not libLLVM.dll/libclang.dll. Do you have the following CLs in your client:
 https://android-review.googlesource.com/#/c/97182/
https://android-review.googlesource.com/#/c/97686/
&lt;Obviously I replied to the wrong section&gt;
|Hmm, I just deleted this several days ago. Any particular reason to add it back?
|Oh sorry, you should still be building llvm-rs-cc.exe, but not libLLVM.dll/libclang.dll. Do you have the following CLs in your client:
 https://android-review.googlesource.com/#/c/97182/
https://android-review.googlesource.com/#/c/97686/
|Then you don't need the ifneq..else..endif any more.
$(BUILD_OUT_EXECUTABLES) points to out/host/linux-x86/bin in windows build.
|I think we should change to $(BUILD_OUT_EXECUTABLES) in the above instead. $(BUILD_OUT_EXECUTABLES) points to the build OS directory.
|Done
|Done
|Or if it isn't easy to fix, declare it as 64-bit explicitly with:
LOCAL_MULTILIB := 64
|This means to build it 64-bit only. Can we just fix the 32-bit build?
|Why do (only) this in a separate file? 
If you want to do it in a separate file, I'd like to move all the 
LOCAL_ADDRESS_SANITIZER stuff to that file.
|I am not sure if the use case is valid to make this change, but  it's simpler to obtain the same effect:
LOCAL_MULTILIB := first
|Perhaps it's more concise and complete to use just:
ifneq (,$(filter generic%, $(TARGET_DEVICE))
?
|This is not allowed. It may break our buildbots, which expect clean source tree after a build.
|no, we are reassigning.
|Daniel, I think we should use the more efficient $(addprefix):
cts_src_dirs := $(addprefix -s , $(cts_src_dirs))
|We don't need variable new_source_file
|What's this for? why do you need to touch SELinuxNeverallowTestGen.py?
|PRIVATE_SELINUX_NEVERALLOW_GEN is unused.
|$(my_libcxx) isn't set anyway.
|Hmm, remove the cruft.
|$(PRIVATE_LIBCXX) isn't set anyway.
|power.goldfish builds fine in aosp_arm64, aosp_x86_64.
I'll move it to emulator.mk.
|combos_2nd_arch_prefix -&gt; combo_2nd_arch_prefix
|combos_2nd_arch_prefix -&gt; combo_2nd_arch_prefix
|It should be:
$($(PRIVATE_2ND_ARCH_VAR_PREFIX)TARGET_LINKER)
|remove
|For tapas, we should get the device name from the build system:
 DEVICE=$(get_build_var TARGET_DEVICE)
You can test env variable TARGET_BUILD_APPS to see if it's tapas build, see the function tapas() in this same file.
|This isn't correct. For tapas $DEVICE may be generic, generic_x86, generic_mips etc.
|You can't clear it here, because $(my-dir) is called only once for an Android.mk, but here may be multiple modules (with &quot;include $(CLEAR_VARS)) in an Android.mk.
|Not needed now.
|I don't like that for LOCAL_MODULE is referenced even before the build system set up LOCAL_2ND_ARCH_VAR_PREFIX.
Can we remove the arch from the module name? 
After second thought, I think &quot;LOCAL_MODULE := $(ADDRESS_SANITIZER_RUNTIME_LIBRARY)&quot; actually works - in mutlitlib build we use the TARGET_ARCH to name both the 64-bit and the 32-bit libraries. It may be misleading, but the build system logic is still correct.
|Oh, I didn't know that. Then it won't work in multilib build.
|Should be fine.
|We may be able to use LOCAL_2ND_ARCH_VAR_PREFIX trick on LOCAL_MODULE_STEM instead of LOCAL_MODULE. You can try the following:
LOCAL_MODULE := &lt;whatever&gt;
LOCAL_MODULE_STEM = $($(LOCAL_2ND_ARCH_VAR_PREFIX)ADDRESS_SANITIZER_RUNTIME_LIBRARY)

Note that you need to add to build/core/clang/config.mk:
$(TARGET_2ND_ARCH_VAR_PREFIX)ADDRESS_SANITIZER_RUNTIME_LIBRARY := libclang_rt.asan_$(TARGET_2ND_ARCH)_android
Also do similar to ADDRESS_SANITIZER_CONFIG_EXTRA_SHARED_LIBRARIES
|I think you also need the following line to enable multilib in 64-bit build:
LOCAL_MULTILIB := both
|ditto
|ditto
|You mean the user lists both libprotobuf-cpp-full-gnustl-rtti and libprotobuf-cpp-2.3.0-full-gnustl-rtti in his Android.mk? that's his error. 	LOCAL_OVERRIDES_PACKAGES won't prevent that from happening. There is no general build system mechanism for that, unless you explicitly check LOCAL_STATIC_LIBRARIES in the build system, which I don't think is necessary.
|You don't need those LOCAL_OVERRIDES_PACKAGES: they will be no-op in those cases.  LOCAL_OVERRIDES_PACKAGES only works for apk module and it means &quot;If I am installed, please skip those apks&quot;.
Please remove them.
|Yes, you should fix them, maybe also make it an error in the build system if you find both are set.
|I didn't realize we also have prebuilt native libraries. So you have prebult just for arm? you'll need them for all achs we currently support: arm, x86,mips and their 64-bit counterparts.
|&quot;lunch aosp_&lt;arch_name&gt;&quot; the run &quot;make &lt;module_name&gt;&quot;.
$(BUILD_MULTI_PREBUILT) doesn't support multi archs.
You'll need to use $(BUILD_PREBUILT) for each prebuilt library and use LOCAL_SRC_FILES_&lt;arch_name&gt; to specify arch-specific source file. I can help write the makefile after you check in the prebuilts.
|_TARGET
|That sounds good, but I think it will be difficult to introduce arch-specific change to those functions.
Actually the build system supports a general transform-o-to-static-executable-inner (and other similar functions), and it can be overridden by arch-specific functions. (Maybe initially all archs were using the general one).
|Sounds good. (It may be harder to override things like argument order with variable). Thanks for taking care of this!
|The general ones are defined in build/core/definitions.mk.
|In the above two commands on Mac, it prints error. you can redirect the stderr to /dev/null.
|$(error) if someone use stlport in host module.
|Do you plan to move permanently to libc++ in chromium? I don't think you can modify the makefiles manually. Torne should be able to help add LOCAL_CXX_STL support to the gyp-to-Android.mk generator, based on if it's host or target module.
|Sorry, I forgot that bit.
Done.
|See here.
|Sure it can.
|No, we run to this point only if LOCAL_DEX_PREOPT is not set by the project. The precedence is:
project's LOCAL variable &gt; $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG)  &gt; $(PRODUCT_DEX_PREOPT_DEFAULT_FLAGS)
|No, as the commit message says $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) can be used either to disable LOCAL_DEX_PREOPT or pass dex2oat command line flags, for which we added a new LOCAL_DEX_PREOPT_FLAGS.
|Sorry, I don't understand. If DEX_PREOPT_DEFAULT:=false, we don't do dex-preot for the module at all. Why bother to set module specific thing?
Also I believe we introduced DEX_PREOPT_DEFAULT to accommodate  &quot;nostripping&quot; when we wanted to preserve the classes.dex inside apks to allow dual boot. This flag should be gone now as we have removed dalvik.
Again, this change allows  you to attach an arbitrary string to a module in a product configuration. It's not meant to finalize how we interpret the string. We can improve that when the requirement becomes clearer.
|Here is when $(DEXPREOPT.$(TARGET_PRODUCT).$(LOCAL_MODULE).CONFIG) is other value than false.
|We want to replace all whitespaces in the config with the following string, so it appears as a single word in PRODUCT_DEX_PREOPT_MODULE_CONFIGS.
|Done
|Done
|Done
|This isn't correct now.
|... explicitly sets LOCAL_NATIVE_COVERAGE := true
|Sorry, the static libstlport was actually named libstlport_static. I prefer to naming the shared and static libraries differently. Can we name the static libc++ to libc++_static? Then the above logic can be simplified.
|I just found $(my_libcxx) has been removed by this CL. You need to update the use of PRIVATE_LIBCXX as well.
|OK, I don't have strong opinion.
|I think we can use just empty string as the default now.
|We don't need LOCAL_STATIC_CXX_STL. Just use a new variant libc++_static, just like we have stlport_static and stlport_shared in the NDK stl variants.
|If a build is with TARGET_BUILD_APPS, but not LOCAL_SDK_VERSION, that means we are doing unbundled build in the full platform source tree (with bionic, such as the &quot;apps&quot; target in master on the build page), so libc++ should be available as well.
Regarding unbundled branches, are we going to add libc++ as one of the NDK stl variant? If not, will libc++ be built against the NDK (with LOCAL_SDK_VERSION in external/libcxx/Android.mk )? If not, unbundled branches won't be able to use libc++, because it will depend on bionic, which can't be used in unbundled branch.
|Note that for most of the common host tools, such as aapt, fastboot, adb etc, we don't want them to depend on any additional shared library, because that means we'll need to distribute the shared library together with the executables and deploy them with the correct directory structure.
Maybe in that case we should use the static libc++?
|Hmm. So we'll explicitly set &quot;LOCAL_CXX_STL := none&quot; in those modules?
Btw, &quot;LOCAL_CXX_STL := none&quot; is more expressive than &quot;LOCAL_CXX_STL :=&quot;.
|We don't automatically add -lc or -lm previously.
|No, this is totally wrong.
I am going to upload a fix.
|Can we just move this to LOCAL_ADDITIONAL_DEPENDENCIES so we don't need to add a new LOCAL variable?
(If we use prebult FileCheck then we don't need this dependency).
|Stephen, can we check in FileCheck as prebuilt to prebults/clang? so that you don't need to worry about the dependency.
|ANDROID_HOST_OUT imay be not set. It's set only if you run lunch. Our build server doesn't run lunch.
You should pass it in from makefile.
|No, you'll still need to pass in from makefile, the same as clang++ below.
|you should use $($(LOCAL_2ND_ARCH_VAR_PREFIX)CXX_BARE)
|It will work properly for both 1st and 2nd arch.
I believe Dan has tested it.
|Maybe we should use libc++_static instead? since llvm-rs-cc will be shipped in the SDK package and we don't want to ship another libc++.so?
|So we don't need this now.
|art_dont_bother
|remove the above line
|So you are going to disable art-run-tests on the build server? which is required by vendor/google/build/tasks/emulator_tests.mk and vendor/google/build/tasks/google_tests.mk.
|PRIVATE_NATIVE_COVERAGE isn't used.
|You need the 	$(combo_2nd_arch_prefix) prefix, so it works in multilib build.
|This won't work in multlib build.
You need to turn it into a target-specific variable (like the PRIVATE_TARGET_LIBATOMIC). Or can we merge PRIVATE_TARGET_LIBATOMIC, PRIVATE_TARGET_LIBGCOV and PRIVATE_TARGET_LIBGCC to a single PRIVATE_ variable?
|I remember this is a hack to fix bionic-unit-tests-static build, see https://b.corp.google.com/issue?id=13643367#ISSUE_HistoryHeader9 . Not sure if moving to libstdc++.so would break the build.
|You need to reset the new LOCAL_ variables in build/core/clear_vars.mk.
|I think you added LOCAL_CLANG_LDFLAGS, not LOCAL_CLANG_LDLIBS :-)
|Also I believe we enclosed it in this conditional statement, because -pie doesn't work with the emulator, which is built with LOCAL_NO_DEFAULT_COMPILER_FLAGS. It seems fine to move it out of this if statement now, since we no longer build the emulator in the source tree.
|This won't work.
Variable in build recipe won't be evaluated until the recipe run.
I think we can move the $(HOST_FPIE_FLAGS) to LOCAL_LDFLAGS  in build/core/host_execuable.mk. Add $(HOST_FPIE_FLAGS) to LOCAL_LDFLAGS only if LOCAL_NO_FPIE is not set.
|You need to move it up here, before the first inclusion of $(BUILD_SYSTEM)/host_executable_internal.mk
|You can't use conditional on $(TARGET_BUILD_VARIANT) to change how a module get build.
Erik, can we remove this and install r universally?
|In that case you have to build another module and tag it as &quot;LOCAL_MODULE_TAGS := debug&quot;.
TARGET_BUILD_VARIANT is supposed only affect what modules to install, but not how a module gets built. We have a couple of such variables. If it's violated, incremental build will break.
We used to talk about enforcing the rule, but it's not easy to do.
|This make it always regenerate  $(TOOLS_H_TMP), even in a nothing-to-do build.
|You should add them to build/core/clang/config.mk, or arch-specific clang config makefiles. Then they will be covered by function call of $(LOCAL_2ND_ARCH_VAR_PREFIX)convert-to-$(my_host)clang-flags) in this file.
|You don't need to add them to board config.
To enable those two, include build/target/product/core_64_bit.mk, which aosp_arm64.mk already does.
|Why do we need this?
I believe that flag is only for RS team debugging.
Also this will break unbundled build.
|Sorry, this product configuration is used to build unbundled apps across lots of unbundled branches, so it shouldn't use BoardConfig.mk outside the build project. We recently hacked the generic_arm64 BoardConfig.mk just for this, see http://b.corp.google.com/issue?id=16951392 .
Could we fix files inside build/target/board/generic_arm64 instead?
|I don't think the generic devices can reference files inside particular vendor's device tree.
|Now runtime_libart_default is the default and you don't need to set this.
|$(wordlist 2,999,$(PRIVATE_ALL_WHOLE_STATIC_LIBRARIES)) is more efficient :-).
|$(wordlist 2,999,$(PRIVATE_ALL_WHOLE_STATIC_LIBRARIES) here too.
|Here is the exact error:

system/core/fastboot/usb_osx.c:331:85: error: values of type 'UInt32' should not be used as format arguments; add an explicit cast to 'unsigned int' instead [-Werror,-Wformat]
    snprintf(handle-&gt;info.device_path, sizeof(handle-&gt;info.device_path), &quot;usb:%lX&quot;, locationId);
                                                                              ~~~   ^~~~~~~~~~
                                                                              %X    (unsigned int)
|Yes, otherwise the compiler complains that UInt32 can't be used as type for formatting string and it asks explicitly for the cast.
|Actually space is preferred over tab, for according to makefiile manual tab should be used on in build recipe.
|Currently the default is false.
We need this only if we plan to default it to true.
|The variable name is misleading: actually you dex-preopt only the libraries in $(DEXPREOPT_BOOT_JARS_MODULES), not other Java libraries. Change it to someting like WITH_DEXPREOPT_BOOT_IMG_ONLY?
|This is incorrect: we need to unset LOCAL_DEX_PREOPT instead of setting it to nostripping, if dex-preopt is disabled.
|I'd expect something like this here:
ifeq ($(WITH_DEXPREOPT_BOOT_IMG_ONLY),true)
ifeq ($(filter $(DEXPREOPT_BOOT_JARS_MODULES),$(LOCAL_MODULE)),)
LOCAL_DEX_PREOPT :=
endif
endif

Then you don't need to change other lines in this file.
|Let's not use $(findstring) but set it explictly as PRIVATE_CLANG in binary.mk, near where we set PRIVATE_CXX.
|The dependency is established later with the line:
$(R_file_stamp): $(selinux_policy.xml)
|I need a change to build/core/package_internal.mk: it clears LOCAL_ASSET_DIR if it can't find files in the dir when it parses the Android.mk.
|Use target specific variable (like PRIVATE_POLICY_PARSER) instead of selinux_policy_parser in the build recipe, lest it's reset elsewhere.
For the same reason use $&lt; instead of $(general_sepolicy_policy.conf) in the recipe.
|here.
|You need to calculate the path of the other module here:
general_sepolicy_policy.conf := $(call intermediates-for,ETC,general_sepolicy.conf)/general_sepolicy.conf
|You can't reference $(GENERAL_SEPOLICY_POLICY.CONF) here, because it isn't defined at this point.
|Hmmm, that would give a weird error message like:
bash: error-HOST_CC-is-not-set : No such file or directory.
I'd rather like it to be:
bash: prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.8/bin/gcc : No such file or directory.
|I've thought about that, but we can't do that: Many unbundled branches build only Java code and they don't need host toolchains in their repo manifest.
|This doesn't work if you switch build target between 32-bit and 64-bit: the host modules are shared by all products. Ian talked to me and we agreed that we'll eventually move to by-default-64-bit host builds. If this is just a temporary workaround, that's fine.
|Yes, as Ian said, you  don't need the &quot;ifeq..else..&quot; with the build system's TARGET_OUT_DATA_NATIVE_TESTS: ART_TARGET_NATIVETEST_DIR := /data/$(notdir $(TARGET_OUT_DATA_NATIVE_TESTS))
|I think that's good enough if ccache doesn't complain.
(Sorry, I missed this review.)
|I just did a couple of builds and it didn't show any problem. Actually it's a big win as we are moving to clang for host build by default in master.
|This also enables ccache with clang. Did you guys test it?
|LOCAL_POST_INSTALL_CMD is the answer to most of symlink creations.
|there must be a space between ifneq and (.
|We only need this.
|This isn't necessary.
|Unnecessary either.
|Unnecessary either.
|Good catch!
|This just keeps the previous behaviour.
I am not sure if it's the proper solution. In art/build/Android.gtest.mk we build the 32-bit and 64-bit tests into userdata/nativetest/arm and userdata/nativetest/arm64 respectively, that's odd with the build system's nativetest-vs-nativetest64.
|We already build it both 32-bit and 64-bit.
|We don't need such 64-bit module variants any more.
|Yes
|Sorry, I missed that too.
|It will work. This basically duplicate the logic in build/core/target_test_internal.mk.
I think the ideal fix is to &quot;include $(BUILD_NATIVE_TEST)&quot; or &quot;include $(BUILD_SHARED_TEST_LIBRARY&quot;, then you don't need to set up LOCAL_MODULE_PATH by yourself.
|Hmm,can we run just &quot;zip -d $(1) classes*.dex&quot;?
|# Create the symlink when you run mm/mmm or &quot;make &lt;module_name&gt;&quot;
$(LOCAL_MODULE) : $(my_symlink)
|The above line is missing in the new file.
|This function is never called now.
|That's intentional, so that the commands for each abi will be in separate line.
I'll add a comment.
|You'll need the same for libssl-host, if both 32-bit and 64-bit are required.
|Hmm, it doesn't make sense to have &quot;:32&quot; or &quot;:64&quot; in a 32-bit product configuration. But yes, I think the build system can do better job if by any chance they end up in a 32-bit product configuration. I just uploaded a change: https://android-review.googlesource.com/99208
|I think you can just call $(get_abs_build_var TARGET_OUT_UNSTRIPPED), instead of double $(dirname)s.
|Done.
It's a little tricky to get it right.
|In that case most of the aosp_*-userdebug (or if the user has a long username) won't build, because the fingerprint will be too long. What are the users supposed to do to proceed?
It seems with truncated fingerprint at least a dev build still work as long as you are not testing build fingerprint related code.
OTOH, do you think if we can remove or shorten any part of the $(BUILD_FINGERPRINT)?  see discussion in https://b.corp.google.com/issue?id=15593959 .
|Suggestions accepted:
1) &quot;OPENMASTER&quot; -&gt; &quot;AOSP&quot;
2) eng.$(USER).$(shell date +%Y%m%d.%H%M%S) -&gt; $(USER)$(shell date %m%d.%H%M)
|Hmm, these lines just tell the truth what would cause if the value is too long, that's why I prefer to keep them. Shall I change &quot;This will cause ...&quot; to &quot;This would cause ...&quot;?
|On what branch you saw the error? I had submitted a fix before submitting this change:
https://android-review.googlesource.com/#/c/97215/
|Ah, I missed that.
|Is $(LOCAL_MODULE) in the path intentional? that will result in full path like /data/nativetest/mytest/mytest.
|The configurations in build/core/combo.
With armv8-a for the second arch, it won't bulid, for we don't have armv8-a.mk in build/core/combo/arch/arm/. Also I don't know if the 32-bit toolchain knows armv8-a as arch variant and cpu variant.
|We wanted to use the exactly same configuration of 32-bit arm build for the second arch.
|Done
|Done.
I just removed the &quot;ifneq ($(HOST_ARCH),x86_64)&quot; .
The setting of WITH_HOST_DALVIK will be removed in future change after no other place using it.
|remove this line
|ws
|ws
|ws
|ws
|my_src_files_arm64 is unused?
|That would apply  $(my_cflags_arm) to all other archs.
Use 	LOCAL_ASFLAGS_arm instead.
|ditto.
|Guard with &quot;ifdef JAVAC_WRAPPER&quot;.
|guard it with &quot;ifdef CC_WRAPPER&quot;, otherwise we may end up with extra spaces at the beginning of $(combo_var_prefix)CC
|Where is this from? is it added by you another pending change?
|$(BUILD_FINGERPRINT) includes build variant in it and this doesn't work correctly if you do incremental build between build variants. Do you care that?
|What the purpose for this file? I don't see it's included by any Android.mk. Also the the Android platform build system doesn't have  $(GET_LOCAL_DIR).
|You can't change global variables like 	TARGET_ARCH or 	TARGET_2ND_ARCH.
|Dan, do we need to exclude LIBATOMIC as well if libc++ is used?
|You can't write to the object files to just $$f. That will end up in the root of the source tree and cause race condition if 2 jobs have the same file name.
You need to put it under $(PRIVATE_INTERMEDIATES_DIR)/WHOLE/, like what it previously did.
|i=$$(($$i + 1))
|$(combo_var_prefix)GLOBAL_ARFLAGS in core/combo/select.mk is only used here. But yes, you need to &quot;make checkbuild&quot; to make sure it doesn't break existing builds.
|You should use $($(PRIVATE_2ND_ARCH_VAR_PREFIX)TARGET_GLOBAL_ARFLAGS), which already includes cqPD.
|Good to know q would improve performance. But copy-the-first seems to still be good to have. I's appreciate if you can do it :-)
|_extract-and-include-single-target-whole-static-lib used to be long-running job when the whole static libraries get really big in external/llvm .
 I think this change would make it worse. One optimization I can think of is to for the 1st .a we can actually just do a copy instead of extracting and merging.
|Fortunately we have only gdbserver in the subdirectories.
|This won't work. This is a global configuration loaded well before any Android.mk gets loaded. So at this point the module-scoped LOCAL_CPPFLAGS isn't defined.

Maybe you can use &quot;LOCAL_NO_DEFAULT_COMPILER_FLAGS := true&quot; in libc++'s module definition, so the build system will skip any global flags. If you still need some global flags, you can add them with LOCAL_CFLAGS_&lt;arch_name&gt; in the Android.mk.
|I think the current approach is to discourage people using LOCAL_PATH for shared library.
|I guess the increase comes from the multilib .odex/.oat/.art files.
I changed the generic_x86_64 to 786432000 (750M) recently. Maybe we shall just use that value?
|It should be appended here. Otherwise we may end up with &quot;::&quot; in PATH.
|cd $TOP here.
|We should do the same here.
|Ah, I know why there is such difference.
Look at the definition of the 2 shell functions get_abs_build_var() and get_build_var(): we run &quot;cd $TOP&quot; before running make in get_abs_build_var, whereas we don't do that for get_build_var. Since we the build system relies on the shell variable $PWD to calculate the absolute path, we definitely should do &quot;cd $TOP&quot; for both.

Btw, I didn't expect a user to run lunch from a dir other than the top dir.
|ANDROID_BUILD_PATHS is already absolute path, see build/core/dumpvar.mk
|If necessary we can add a global variable TARGET_IS_64_BIT and define it in build/core/combo/TARGET_linux-aarch64.mk and build/core/combo/TARGET_linux-x86_64.mk.
|OK, I'll leave it here.
But again, it's unreliable to install boot.art by adding this phony package to PRODUCT_PACKAGES, because the build system needs the installed file $(ALL_MODULES.$(LOCAL_MODULE).INSTALLED) of the package to be in out/target/product/*/system to get the dependency established.
|Yes, it's in the build project now.
The rule to build it is in build/core/dex_preopt_libart.mk. The rule to install it is in build/core/dex_preopt_odex_install.mk. Basically my change installs boot.art as the .odex files of the boot jars, the same way as how we install the boot jars .odex files for libdvm-based dexpreopt.
|Oh these 2 deps won't work expected: they will just trigger the &quot;touch&quot; command in build/core/phony_package.
|Now boot.art is built to the staging directory $(DEXPREOPT_BOOT_JAR_DIR_FULL_PATH), which is out/target/product/generic/dex_bootjars for aosp_arm. That .art is then passed to dex2oatd as --boot-image=out/target/product/generic/dex_bootjars/system/framework/boot.art when we run dex_preopt on other apks and jars. However I got this kind of errors:
dex2oatd F  8657  8657 art/runtime/gc/space/image_space.cc:146] Failed to load image 'out/target/product/generic/dex_bootjars/system/framework/boot.art': Failed to open oat file 'out/target/product/generic/system/framework/boot.oat' referenced from image out/target/product/generic/dex_bootjars/system/framework/boot.art:

It seems somehow 'out/target/product/generic/system/framework/boot.oat'  got hard-coded into out/target/product/generic/dex_bootjars/system/framework/boot.art. I don't know why, for in my change we didn't pass this path to the above build command any longer.
Also It seems to me we shouldn't embed the build out  path into a file that would be installed to the device.
Any idea?
|Is it possible that LOCAL_DEX_PREOPT_IMAGE is set to any other value in an Android.mk?
|Why we need the above 2 lines? the dependency should be established in an implicit way:
.cc &lt;- $(DEX2OAT) $(LIBART_COMPILER) &lt;- .oat and .art
|Perhaps it's more efficient and more readable with:
$(patsubst $(PRODUCT_OUT)%,%,$(LOCAL_INSTALLED_MODULE))
|We are missing dependencies here:
We don't have dependency on $(LOCAL_DEX_PREOPT_IMAGE), as well as $(DEX2OAT_DEPENDENCY)
|If LOCAL_UNINSTALLABLE_MODULE is true, we can reset LOCAL_DEX_PREOPT to empty in dex_preopt_odex_install.mk, and use &quot;ifdef LOCAL_DEX_PREOPT&quot; as is consistent with the call to $(dexpreopt-one-file).
|extra trailing space
|I think it's slightly more efficient to use $(patsubst)
$(patsubst $(PRODUCT_OUT)%,%,$(TARGET_BOOT_OAT_OUT))
|I think we need to run &quot;mkdir -p $(dir $$@)&quot; here.
|Should be:
PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PROPERTY_OVERRIDES += persist.sys.dalvik.vm.lib=$(DALVIK_VM_LIB)
|Or just use:
PRODUCT_PROPERTY_OVERRIDES += \
    persist.sys.dalvik.vm.lib=$(DALVIK_VM_LIB)
This makes the product_config.mk a little bit cleaner.
|Move the line 28 to be enclosed here.
|I think if the module doesn't contain java code, we should reset LOCAL_DEX_PREOPT, just like what if LOCAL_UNINSTALLABLE_MODULE is true. Then later we use whehter LOCAL_DEX_PREOPT is set (and no other condition) to determine if we need further action.
|So $(installed_odex) rule is excluded for boot jars. I still don't see how the .odex files of the boot jars get installed. As I said in the other comment, previously the boot jars' odex files get installed by &quot;$(LOCAL_INSTALLED_MODULE): $(installed_odex)&quot; in base_rules.mk. Now you don't have them covered that way or by ALL_MODULES.$(LOCAL_MODULE).INSTALLED.
|No leading &quot;/&quot; now: the result of $(patsubst) will have a leading /.
|This makes me think more about how the boot.art should get installed. With this dependency, boot.art gets installed whenever a module is being dex-preopted. That's not good - building a module shouldn't get anything installed to out/target/product/*/system. boot.art should be installed at the installation stage.
Previously, .odex files of the boot jars are generated to a staging directory $(DEXPREOPT_BOOT_JAR_DIR_FULL_PATH) and all $(built_odex) have dependency on those files. .odex files of the boot jars are installed only by the rule &quot;$(LOCAL_INSTALLED_MODULE): $(installed_odex)&quot;.
So for boot.art, I think we should have some dependency like &quot;out/target/product/*/system/framework/core.jar: out/target/product/*/system/framework/boot.art&quot;.
|I think we should move this up to be enclosed by &quot;ifdef LOCAL_DEX_PREOPT&quot;
|This makes the $(LOCAL_DEX_PREOPT_IMAGE) (i.e. $(DEFAULT_DEX_PREOPT_IMAGE)) be built even if LOCAL_DEX_PREOPT is not set. So it should be enclosed by the &quot;ifdef LOCAL_DEX_PREOPT&quot; too.
Also, if the product is configured as libdvm-only, we shouldn't install boot.art, right?
|Let's move this to a separate makfile and include it where we call this function. &quot;include &lt;makefile&gt;&quot; is preferable over &quot;$(eval )&quot; for 2 reasons:
1) you don't need to escape $ in the included makefile so it's much more readable.
2) &quot;include&quot; is much faster than &quot;$(eval)&quot;.


The same for lots of functions defined then called with $(eval) in the art/ project.
|$(patsubst core, core-libart,$(TARGET_BOOT_JARS))
No $(foreach) is needed.

Also please add a comment why we need to replace core with core-libart here.
|Let's define a global (all-capital) variable in target/product/runtime_libart_default.mk and target/product/runtime_libdvm_default.mk, instead of grepping out here.
|Yeah, looks better.
|I think we should rename it to _dexpreopt-boot-jar-remove-classes.dex now.
|In build/core/main, we only enable WITH_DEXPREOPT for user builds. It seems we don't need this judgement here again.
|Why do need $(installed_odex) even if LOCAL_DEX_PREOPT is unset?
|Since you add $(installed_odex) to ALL_MODULES.$$(LOCAL_MODULE).INSTALLED, I don't think we still need this dependency.
|It's good to catch this!
|How about the boot jars? where is the rule to install the .odex files for them when libdvm.so is used?
|Where is PRODUCT_DEX_PREOPT_IMAGE_IN_DATA defined?
|We already have DEXPREOPT_BOOT_JARS_MODULES in dex_preopt.mk
|I don't see the definition of PARALLEL_ART_COMPILE_JOBS .
|Yeah, in that case, the user must do a top-level build, then all .odex files will be rebuilt due to the dependency on $(DEXPREOPT_BOOT_ODEXS)
|In the libdvm case, we have DEXPREOPT_BOOT_ODEXS, which points to the built .odex files of the boot jars. Then in package.mk and java_library.mk we have &quot;$(LOCAL_BUILT_MODULE): $(DEXPREOPT_BOOT_ODEXS)&quot; and &quot;$(built_odex) : $(DEXPREOPT_BOOT_ODEXS)&quot;. This makes sure if any boot jars gets rebuilt, all .odex will be re-generated.
|Please move the above block back to the art project - module definition shouldn't be in the core build system.
|Let's move it down to here.
|Please use PRIVATE_DEX_LOCATION
|The convention is to use PRIVATE_DEX_LOCATION .
|Actually start-emulator-program already set &quot;LOCAL_NO_DEFAULT_COMPILER_FLAGS := true&quot;. So with the new approach you don't need any change here.
|Then let's add the flags here, just after the above $(HOST_GLOBAL_LDFLAGS).
Please add a comment that &quot;-fPIE -pie&quot; only applies to executable on Linux.
|Why the 64-bit QEMU executable build will be broken? the flag will be guarded by  $(PRIVATE_NO_DEFAULT_COMPILER_FLAGS) here.
|That error appears only if -fPIE is applied to the emulator executables. You can run &quot;make -j64 showcommands host-native&quot;  and examine the compiler commands.
I guess you still have some extra local change?
I'll upload a new patch-set.
|This is unnecessary.
I think we can add &quot;-fPIE -pie&quot; to HOST_GLOBAL_LDFLAGS in build/core/combo/HOST_linux-x86.mk.
If you don't want to enable PIE for a module, just use &quot;LOCAL_NO_DEFAULT_COMPILER_FLAGS := true&quot; to disable the global flags set in build/core/combo/HOST_linux-x86.mk.
|OK, I didn't know that PIE can't be applied to shared library.
|Why not just use makefile include for the combination of board configs? and use the product inheritance to combine products? I don't see why they do not scale well..
|In general I don't like the idea of relying on analyzing the directory structure when loading product config - it slows down every make command you run.
|This can already be done with inherit-product in a more straightforward way.
|No, you can't change the board config on product's base, based on the current build system design. Currently all products of the same board config share the same out/target/product/&lt;device ( board config) name&gt;/ tree. This design makes all the native code (static libraries, shared libraries, executables) are reused if you do incremental build.
|AndroidBoard.mk is deprecated now - it's really has no difference than a regular Android.mk.
|This is NOT weird - it's so by design. Previously (in ics and earlier) the build system loaded all the product config files it could find in the source tree, even if you just select one product by running lunch. Even now if your run &quot;make dump-products&quot; or &quot;make product-graph&quot; the build system still needs to load all the product config. You can't load all the product config by a simple makefile &quot;incldue&quot;, which just overrides all the PRODUCT_* variables.
|apps_only does set TARGET_BUILD_APPS. The problem is, in special case an apps_only build needs libicuuc. This change fixes that case.
|Ideally we should use the conditional.
But we have to do this to fix the &quot;pseudo unbundled bulld&quot; in the platform source tree, e.g. the &quot;apps&quot; build target in master on the build page. Actually the build system doesn't prevent you from running tapas on an app (or a module) that's built against the platform. We use this feature to build a bundled app from the platform source tree so that we can release it to Play store before it's really unbundled.
On the other hand, if libcuuc is really used in an unbundled branch, the build will still fail due to the missing dependencies (e.g. libc).
|Btw, can we build this library against the NDK? It seems we already build the corresponding static library against the NDK. Any particular reason to not build the shared library the same way?
|same here.
|You don't need to build it as prebuilt. You can reference it from the source location in the makefile.
It saves a little bit build time.
|It won't work if you put it in a product configuration: product configuration only accepts PRODUCT_* ( a predefined list of variables in build/core/product.mk) variables.
However making it a board config variable should work.
|I don't like this. Our build system just does too many things during make's startup. The startup time has grown a lot.
Can we just use some constant here? or defer it to the build recipe?
|YOu can't reference $(LOCAL_PATH) in the build recipe.
You need to use the target-specific $(PRIVATE_PATH), which has been set up by $(BUILD_SYSTEM)/base_rules.mk.
|Check out this page	https://sites.google.com/a/google.com/android/nandroid/machine-setup, we need Xcode 4.5.2 and Command Line Tools since KLP (or perhaps earlier). I think the same applies to aosp-master.
|I remember we already have a bug for this but I couldn't find it.
|Yes, I'll clean up these 2 variables in a new CL.
|Let's remove full_aarch64 and just keep the aosp_aarch64.
(full_* is the historical name for the aosp products).
|Do we have TARGET_ARCH support for x86_64 yet?
|Fix is in.
This change is no longer needed.
|I have fixed the host/target required module mixture in the internal master. I'll do a cherry-pick.
|See cts/build/test_executable.mk
Btw, $(BUILD_CTS_EXECUTABLE) is not supposed to be included outside the cts/ dir: it may be not defined yet at this point.
|I guess it's a newly-added module? I couldn't find it in the source tree.
If so you should add it to build/target/product/embedded.mk, just next to sepolicy, I think.
|Oh they are also included in embedded.mk.
It seems we duplicate them in core.mk and should be removed.
|I don't know if such &quot;target-specific variable export &quot; exists..
But it seems to me we don't need it: you should pass it as a environmental variable from the build recipe directly.
|$(hide) MKBOOTIMG=$(BOARD_CUSTOM_MKBOOTIMG) ./build/tools/releasetools/ota_from_target_files ...
|Please address Doug's question about MKBOOTIMG as a command plus some args.
|This is not necessary: the order you assign the PRIVATE_ variables doesn't affect the order the flags appear in the linker command line.
|The order of the flags passed to the linker is defined in transform-o-to-static-executable, which you already changed.
|Yeah, but you can specify multiple --proto_path to protoc, protoc searches all the proto_paths to find the source files and construct the output path by replacing the proto_path with the --cpp_out path. That's too complex for makefile.
I have discussed this before with Wink. I can forward you the previous discussion.
|The build system doesn't like you to pass in a custom --proto_path: it must be $(TOP). The --proto_path option of protoc could affect the path of the output .pb.cc/.pb.h files, see http://code.google.com/apis/protocolbuffers/docs/reference/cpp-generated.html#invocation. If we allow the module to set different --proto_path, it will be very hard for the build system to figure out the correct path of the output .pb.cc/.pb.h. It's critical for the build system to know the exact locations of a c++ source file when the makefile is parsed.
|How about let the var point to the actual path? 
That will be more flexible in case we have some inherit hierarchy for the device, such as you can share init.rc in the base tuna dir for toro and maguro.
|We'd better move it close to the above assignment.
|But it's going to rebuild $(inc).list even if nothing is changed. That's not good.
The problem is that value change of a makefile variable does not trigger  a rebuild.
I've got a better idea, I think.
|We'd better move the libstlport.mk down here, just before 	include $(BUILD_SHARED_LIBRARY).
|Seems not true for properties. The build system just dump the properties into build.prop (or other property files) with duplicate items. So for read-only property (those starting with &quot;ro.&quot;), the first one takes precedence; for read-write property, the last one take precedence.
But I think it would be better to remove duplicates and only take the first item. I am going to make a change to achieve this.
|s/there/their
|It may be a good idea to add back the &quot;Android Build Cookbook&quot; here.
|Hmm, it seems I should change that file instead.
I'll move the CL to the internal development project.
|Where is insertkeys.py from?
You don't need to copy a python script to $(HOST_OUT_EXECUTABLES): just reference it from the source location.
|It's not good idea to use $(TARGET_BUILD_VARIANT) in the build recipe:
If you do incremental build between eng/userdebug/user (our build server does so), the module won't be rebuilt.
|I think you should change this flag only.
The build system assumes all LOCAL_PATHs are relative to the top of the source tree.
|Btw, you can use $(PWD) defined in build/core/main.mk to get the absolute path of the root of the source tree, so we can save the extra $(shell) call.
|How about Mac OS X?
|SGTM
|As Magnus said, typo in call the functions.
Wink, is com/android/internal/telephony/uicc/AdnRecord.aidl really needed in 	LOCAL_SRC_FILES? it's not in your original change.
|By convention, the above 2 variable names should be:
HOST_TOOLCHAIN_ROOT
HOST_SDK_TOOLCHAIN_PREFIX
|You should have this as the first line:
LOCAL_PATH:= $(call my-dir)

and all files in LOCAL_SRC_FILES are relative to that path.
|LOCAL_C_INCLUDES :=  external/libsepol/include external/libselinux/include
is preferred. No need to use LOCAL_PATH here.
|:= is preferred.
|Why do we need to include this at the beginning? 
LOCAL_PATH may be changed in the subdir Android.mks!
please move it to the bottom if there is no special reason.
|If you use LOCAL_EXPORT_C_INCLUDE_DIRS to export the include paths in the static library, then any module that uses the static library will automatically get those paths.
|For products of the same board, the build system tries to share built files as much as possible when you do incremental build. For example, if you do a  carrier1_maguro build first and then do a incremental carrier2_maguro build, the sepolicy won't get rebuilt.
|Could you change those PRODUCT_SEPOLICY_* variables to board config variables instead? Typically you should not use a PRODUCT variable to change how a module gets built. We only have a bunch of PRODUCT variables in a controlled way.
|Change the variable names and also define them in BoardConfig.mk, instead of a product config makefile.
|LOCAL_* variables are dedicated for the core build system.
By convention, you can use name like &quot;my_sepolicy_replace_paths&quot; here.
|And clean up all the temporary variables after their use.
|In the build system &quot;tzdata&quot; will be turned into a phony target, usually it's bad idea to have a file target depend on phony target.
Could you change it to the corresponding file target? such as $(TARGET_OUT)/usr/share/zoneinfo/tzdata.
How tzdata is used to build libc_common?
If there is no build time dependency, I'd like move the dependency to libc with &quot;LOCAL_REQUIRED_MODULES := tzdata&quot;, which makes sure whenever libc gets installed, tzdata will be installed as well.
|:: manually listing $(LOCAL_PATH)/file_contexts in the m4 command line yielded a mysterious expansion to vendor/samsung/maguro/proprietary/file_contexts rather than external/sepolicy/file_contexts. Clues?

That's because you can't use LOCAL_PATH in the build recipe -- the value of LOCAL_PATH will be changed when the build system include some other Android.mk. Instead, you should use  target-specific variable, something like:
$(LOCA_BUILT_MODULE): PRIVATE_PATH := $(LOCAL_PATH)
then you can use $(PRIVATE_PATH) in the build recipe.
Btw, PRIVATE_PATH should have been set up at this point by build/core/base_rule.mk in the build system, so you can just use it in the recipe.
|Why not merge the above 2 rules and skip the tmp target file_contexts.tmp?
|I don't think this and the following cases are necessary: they are searching in the intermrdiate dirs that are created during the build process.
|They were introduced in this commit:
commit fc0725ec5cc51053c06bf2c67755a5a57a5da621
Author: Shih-wei Liao &lt;sliao@google.com&gt;
Date:   Sat Jul 28 00:33:28 2012 -0700

    Install crt(begin&#124;end)_so.o to target library path.
    
    BUG=6886348.
|No, I don't think we need this.
LOCAL_AAPT_INCLUDE_ALL_RESOURCES means to include all locale/dpi resources. Here we prefer to including the resource according to the current product configuration.
|There must be a change in the build project too?
|I can't find the definition of TOOL_CFLAGS and TOOL_LDFLAGS.
|I think you need to move them to the makefile, presumably bulid/core/config.mk, because envsetup.sh is not a musthave to do a build. For example, our buildbots actually don't run envsetup.sh.
|Our buildbots do enable ccache.
We have only 1 buildbot on a machine and usually it uses the same repo client.
|The logic has been changed  a little bit by the Intel folks:
https://android-review.googlesource.com/#/c/39313/
Though the change is not in yet.
|Should be: TARGET_ARCH := arm
|TARGET_ARCH := arm
|It seems ARM_EABI_TOOLCHAIN_PATH is the same as ARM_EABI_TOOLCHAIN. Why do we need both?
|Then this is not needed any more.
|So the only difference between LOCAL_ENABLE_APROF and  LOCAL_ENABLE_APROF_JNI is the additional libaprof_jni?
If so, you can force LOCAL_ENABLE_APROF if LOCAL_ENABLE_APROF_JNI is true to reduce dup code:
ifdef LOCAL_ENABLE_APROF_JNI
LOCAL_WHOLE_STATIC_LIBRARIES += libaprof_jni
LOCAL_ENABLE_APROF := true
endif
ifdef LOCAL_ENABLE_APROF
LOCAL_SHARED_LIBRARIES += libaprof libaprof_runtime
endif
|extra blank line.
|Why not use execl(&quot;sh -c&quot; + &lt;strip command&gt;), or simpler system(&lt;strip command&gt;), rather than bother splitting the arguments?
|I don't think we need this line..
|AndroidBoard.mk is deprecated.
You can just replace it with a plain Android.mk.
|It's wired HTC is referenced here.
I see it's also in build/target/board/generic/BoardConfig.mk.
JBQ, do you have any idea?
|Can we move it to target/board/generic_mips/device.mk?
On the other hand, since libffi is in the LOCAL_SHARED_LIBRARIES of libdvm, libffi will get installed automatically with libdvm by the build system and you don't need to put it into PRODUCT_PACKAGES.
|Their nearest ancestor is core.mk, which is unfortunately the base of all builds.
|Why use an environmental variable? is there any var in the BoardConfig that indicates OpenGL HW emulation is enabled?
|Could you replace the tab indentation with space?
|It's really strange. Jesse may know more.
|Missing &quot;\&quot; at the end of the line.
|Don't remove $(hide) at the beginning of the command.
|Missing &quot;\&quot;.
|$(hide)
|Missing &quot;\&quot;.
|$(hide) and &quot;\&quot;.
|$(hide)
|ditto.
|ANDROID_PRODUCT_OUT is an environmental variable set in entsetup.sh. You should not rely on it here.
|Ok, I am fine with the checked in tgz file.
The problem with PRODUCT_COPY_FILES is that there is no wise way to figure out the intermediate dir in a product configuration file. Variables such as PRODUCT_OUT are calculated after the product configs are loaded.
So we have to use PRODUCT_PACKAGES instead.
I can help with this.
|I know nothing about the license issue. I just want to save a few build steps when you type &quot;make&quot;.
I'd like JBQ to make the call.
If we do need to check in the tgz file, we should do it in Android.mk, as I suggested.
|To install the license file, you have to rename the license file to NOTICE. Then we can install the binaries with BUILD_PREBUILT. That way the build system will take care of the license file automatically.
If we really do need to check in the tgz file, then you need to write an Android.mk that defines the rule to generate LOCAL_BUILT_MODULE and then include base_rule.mk. You can see examples such as external/wpa_supplicant_6/wpa_supplicant/wpa_supplicant_conf.mk
|This is definitely unacceptable.
Why not just check in the files inside the tar ball?
|Where are the above modules defined? I could not find them in the aosp-master tree.
|You don't need LOCAL_SHARED_LIBRARIES when building a static library.
|This overwrites the above
LOCAL_SHARED_LIBRARIES := libstlport
|I think &quot;optional&quot; is the correct tag.
On the other hand, we should add libjni_latinime to  LatimeIME's LOCAL_REQUIRED_MODULES, so if LatimeIME.apk gets installed, libjni_latinime.so will get installed too.
We should also remove &quot;LOCAL_JNI_SHARED_LIBRARIES := libjni_latinime&quot; from packages/inputmethods/LatinIME/java/Android.mk.
We need LOCAL_JNI_SHARED_LIBRARIES only if it's built as an unbundled app.
|Then we should have an unbundled branch.
In the unbundled branch use LOCAL_JNI_SHARED_LIBRARIES and in the pastry/master branches use LOCAL_REQUIRED_MODULES.
Otherwise we will get extra copy of the jni library in the system image or the apk itself.
|Yes.
|The assumption is incorrect.
We do need to package the jni libraryies into the apk sometimes, for example when we build apps that will be published in the Android market.
|We called that an &quot;unbundled&quot; apps, which should also be built against a given SDK (LOCAL_SDK_VERSION := 8, for example).
In that case, you should use LOCAL_JNI_SHARED_LIBRARIES.
|I am afraid you have to be in $TOP to run this script, since the make command use relative path build/core/config.mk.
|You don't need a dummy shared library.
Yes, you need a global variable to store the path of the generated header, and the rule to generate the header. They are module independent. All modules using the generated header can hook up the dependency by using LOCAL_GENERATED_SOURCES.
|If you use an intermediate dir independent of the module, then the header can be shared by all the modules:
HW_CONFIG_DEFS_HEADER_INTERMEIDATES := $(call intermediates-dir-for,SHARED_LIBRARIES,hw_config_defs_header,true)
|The above 2 lines are enough for the dependency.
|You don't need to add this dependency. The build system will add it with LOCAL_GENERATED_SOURCES.
|You can not enable dex-preopt on Mac.
Actually you can build emulator with dex-preopt with &quot;make PRODUCT-full-user&quot; on Linux.
See evaluation of WITH_DEXPREOPT in build/core/main.mk.
|Btw, in the internal master tree the logic has been changed to: any user builds on Linux will be with dex-preopt. (ie, the PRODUCT-xxx-user syntax is not needed any more).
|It seems no targets outside the file depend on the above targets. So we will create those targets with explicit make command?
|You don't need this.
|ditto
|Remove the above line, as well.
|Remove the above line, as well.
|Similarly, I think we should pass in $(HOST_OUT), instead of relying on $ANDROID_BUILD_TOP and hardcoded host/linux-x86.
|If it's host, it should be $outdir/host/common/...
|PRIVATE_CXX
|ditto
|They should be something like:
$(call dist-for-goals, cts, file1:[name of file1 in the dist dir])
The path before &quot;:&quot; is the source file to copy and the part following &quot;:&quot; is the dest file name in the dist dir.
|No. The dist-for-goal function have to know the exact file names.
|How about changing it to:
ifeq ($(strip $(TARGET_ARCH_VARIANT)),)
ie, default it to x86 only if it's not set yet.
|Done
|I think your change is equivalent to removing $(building_sdk) from $(current_build_config), so that if first &quot;make PRODUCT-xxx-xxx sdk&quot; then &quot;make PRODUCT-xxx-xxx&quot; (or vice versa) won't trigger a clean build. I do believe that such 2 builds are essentially different, so we still need it.
|Because Makefile function call is actually text expansion during the parsing phase, such recursion would also cause makefile bloating, I think. I don't see the advantage this function over the findleaves.py.
|You don't prune directories like out/, .repo etc, which would cause serious performance pitfall.
|Sorry, I am wondering where STRIP is defined.
|You'd better explicitly set those vars to empty in the else case, because the makefile will be included for multiple module. (Though it seems unlikely TARGET_ARCH will change across modules)
|You have to change the value of PRIVATE_ARM_MODE, instead of defining a new var. Because PRIVATE_ARM_MODE is a target specific var, it may vary with different targets.
|Hi Chih-Wei,

It seems PRIVATE_ARM_MODE is only used for logging purpose. (A bit weird to me).
How about to change binary.mk:
LOCAL_ARM_MODE := $(strip $(LOCAL_ARM_MODE))
ifeq ($(TARGET_ARCH),arm)
arm_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),arm)
normal_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),thumb)
else
arm_objects_mode :=
normal_objects_mode :=
endif

I think the effect is the same as your change.

thanks!
|I guess this is why utimes() is not used.
|$(SOONG_ANDROID_MK) has been taken out of the dependency graph.
|You need to add $(BVBTOOL) as dependency of system.img.
|Sounds good to me.
|I remember some of the make distributions had the bug fixed. But I think we may still need this.
|Where is this variable defined?
If it's a makefile variable, you need to export this variable from the makefile, in build/core/Makefile, with &quot;atree -v &quot; option.
|Unfortunately this does not work:
The build system loads the the product makefiles first. It uses the PRODUCT_DEVICE to figure out the board name and then load the BoardConfig.mk. So you can't use board config variable in product makefiles.
|But you can use board config variable in Android.mks. You can use LOCAL_REQUIRED_MODULES to pull in these two modules.
Let's say it's called by the recovery exectuable, then you can write in recovery's module definition:
ifeq ($(BOARD_CACHEIMAGE_PARTITION_SIZE),)
LOCAL_REQUIRED_MODULES := recovery-persisit recovery-refresh
endif
|Change to a less specific variable something like SOONG_SKIP_DEPENDENCY_CHECK?
I believe there are be more cases we can't have the complete dependency in the tree.
|no need.
|Will the tip SHA1 of this git project serve what your need?
|GEN isn't really a module class. The build system doesn't guarantee this will work in the future.
I would use ETC in this case.
I don't know how the output will be used. It looks to me it doesn't need to be a module, because it's not referenced anywhere else.
|That does not work - you can't have a target module  depend on a host module with LOCAL_REQUIRED_MODULES.
Probably better not make it a module, use direct path instead, something like:
$(TARGET_OUT_COMMON_GEN)/zlib_fingerprint : $(wildcard $(LOCAL_PATH)/src/*.[ch])
  &lt;build recipe&gt;
then use the path in build/core/Makefile to establish the dependency and add it to the target_files.zip.
|When and who will we update this number?
Can't we just use PLATFORM_SDK_VERSION?
|I am wondering how this min api level is used by Jack.
Note that A module with lower LOCAL_SDK_VERSION may import a static library with higher LOCAL_SDK_VERSION.
For example, android-support-v4 (with LOCAL_SDK_VERSION := 4) imports android-support-v4-api24 (with LOCAL_SDK_VERSION := current, 24 for N). android-support-v4 will be included by apps that target platform with API level 4. Is that OK?

This is similar to how we want to enable Java 8 language feature based on LOCAL_SDK_VERSION. See ag/879640.
|this isn't a LOCAL variable that can be set by Android.mk.
Please use something like my_min_sdk_version.
|I am wondering why ninja deletes the depfiles?
|oh, I missed this :)
|I was thinking to put the prebuilts in prebuilts/misc, because kati/makeparallel aren't really SDK tools. But that would still need to update most of the unbundled branch manifests. So I am ok to put it in prebuilts/sdk.
|There is still reference of KATI in build/core/main.mk
|+ctate
I am not sure if the framework treats /vedor/priv-app as install path for privileged apps.
|$(firstword $(mac_sdk_versions_supported))
|I am not familiar with this, but looks like we don't need this because we already have &quot;-mmacosx-version-min=$(mac_sdk_version)&quot; in HOST_GLOBAL_CFLAGS. See http://stackoverflow.com/questions/25352389/difference-between-macosx-deployment-target-and-mmacosx-version-min-compiler-op
|nit: add a variable to mac_version.mk so we don't spread this path in many places.
|Done
|Done
|Sorry, I missed that.
Doing a fix now.
|they are the same in this case.
|I would remove the use of temp var list_, with:
$(call transform-to-jack-filter-list,\
  $(call split-emma-filter-list,$(subst +,$(empty),$(1))))
|ditto
|How about
1) doing this in the core build system for prebuilt executables,
or 2) setting the executable bit on the source file?
|Sounds good.
|Should this be in build/kati/Makefile.ckati instead?
|Bug: 26294231
|Bug: 26294231
|I thought Vineeta had fixed all these warnings in that bug.
Let's use the same bug ID.
|ifneq ($(filter external/%,$(LOCAL_PATH)),)
  my_strict := false
endif
|IIRC, to use the main app's dictionary, Proguard requires the main app's classes.jar to be passed as -injars, not as -libraryjars, as the comment says.
As far as I know, if you don't pass the main app's classes.jar as -injars, the test app's references to symbols of the main app won't be rewritten with the obfuscated one: Proguard obfuscates only the -injars' symbols, not symbols it references from a library.

Yes, the output proguard.$(LOCAL_INSTRUMENTATION_FOR).jar is unused and probably we can remove that -outjars flag, if Proguard allows it.
|remove
|I don't have strong opinion. I prefer the legacy setup: it's simpler.
|In the previous implementation, we don't have proguard_dictionary as a dependency target. Instead we establish the dependency directly on $(link_instr_intermediates_dir.COMMON)/proguard.classes.jar.

Jack can also go that way.
|see here.
|Though I don't think we have any such cases in the source tree for now, but if it's a static Java library, it should be
$(jack_dictionary) : $(full_classes_jack)

Following the existing approach, we can also establish the dependency as: 
$(built_dex_intermediate) : $(link_instr_intermediates_dir.COMMON)/classes.dex
|Yes, we need to make sure the dependent uses the library's dictionary, not hard by setting up the dependency and LOCAL_PROGUARD_FLAGS in the dependent's Android.mk.
No existing use case for now. But I remember Narayan asked me for this kind of thing not long time ago.

If we have dependency on classes.noshrob.jack, that means we'll be also building all library's classes.noshrob.jack, which we don't build previously, in addition to classes.jack.

It's fine to leave it as is now. But probably put a note here.
|I found a problem here:
full_shared_jack_libs are the proguarded .jack files.
Won't that cause compilation error if a library is obfuscated? because the symbol references in the current module's source are original unobfuscated one.
That's why when jack is disabled, we link against the classes.jar, the file before Proguard processing.
|similar here.
|this is correct.
|This doesn't work. See my comment in patchset 3.
|ok, this is fine, if you prefer this explicit dependency on the dictionary file.
But don't bother to update the legacy setup.
|$(call all-makefiles-under,$(LOCAL_PATH))
which is much cheaper than first-makefiles-under.
|Maybe just fixed the cases where .logtags are added to LOCAL_SRC_FILES since we don't support them in generating native code yet?
|it's unfortunate we have to use recursion in makefile in such cases. I am wondering how much this CL adds to the makefile parse time?
|You don't need to to call $(shell) here: the build recipe itself is shell script. Use shell construct $$(...) instead.
|OK. I am fine to be cautious here. Running aapt on each apk shouldn't be a high cost for platform build.
|Serious players shouldn't be doing that (Baligh should have more say than I do). But you can't prevent individual persons from doing that. If people do that, what error message will they get?
|For platform build (system.img), shouldn't we always use $(PLATFORM_SDK_VERSION)?
Looks to me we only need the apk's minSdkVersion if the apk is about to be installed in older system, right?
In that case, we only need the dumped sdkVersion for unbundled build. You can write it as:

ifdef TARGET_BUILD_APPS
# Unbundled build
define get-package-min-sdk-version-int
$$($(AAPT) dump badging $(1) 2&gt;&amp;1 &#124; grep '^sdkVersion' &#124; cut -d&quot;'&quot; -f2 &#124; \
    sed -e s/^$(PLATFORM_VERSION_CODENAME)$$/$(PLATFORM_SDK_VERSION)/)
endef
else
# Platform build
define get-package-min-sdk-version-int
$(PLATFORM_SDK_VERSION)
endef
endif
|Please ignore this.  I just moved the comment up a little bit.
|For platform build (system.img), shouldn't we always use $(PLATFORM_SDK_VERSION)?
Looks to me we only need the apk's minSdkVersion if the apk is about to be installed in older system, right?
In that case, we only need the dumped sdkVersion for unbundled build.
|I couldn't find where ACP is changed when TARGET_BUILD_PDK is set...
|I see. I misunderstood it.
|Probably $(asm_objects) : PRIVATE_ARM_CFLAGS := $(normal_objects_cflags)

So we don't need to set it everywhere the rule is set up.
|I don't have a Mac to verify at this point... Did you try it on a Mac?
|.aidl ?
|Better to not call this function again for each source file here.
Just have this function return the generated cpp file, then you can collect all the generated cpp file in binary.mk, and then set up the PRIVATE variables.
|Another case.
The problem here is, the single target $(RenderScript_file_stamp) may generate multiple depfiles. Looks like Ninja's depfile attribute has to be one file?
|Two more cases in java.mk:
-include $(bc_dep_files:%.d=%.P)
-include $(aidl_java_sources:%.java=%.P)
|I was wondering why not just have something like &quot;.KATI_DEPFILE : $(addsuffix .P,$(basename $(aidl_gen_cpp)))&quot;?
In Ninja you have to associate the depfile with the target file, probably because so that Ninja can load the depfile right after the build recipe is executed?
|more git projects?
in theory build/soong should be the only additional project to build kati/makeparallel, right?
|why do we need USE_SOONG_FOR_KATI instead of just USE_SOONG?
|$(LOCAL_PATH)/libc

Better with:
include $(call all-makefiles-under,$(LOCAL_PATH)) \
        $(call all-makefiles-under,$(LOCAL_PATH)/libc)
|But if you don't uncompress the library, you won't be able to load it at run time.
|The same applies if the app is preloaded in the userdata.img.
|No, LOCAL_JAR_EXCLUDE_FILES and proguard_options_file are needed only if the module has Android resource.
|This setup looks awkward to me. I'd suggest you run &quot;mmma libcore art&quot; to get all things built.
|If you define two phony packages, one for host and one for target, you can use LOCAL_REQUIRED_MODULES without the direct dependencies. Something like:

include $(CLEAR_VARS)
LOCAL_MODULE := art-libartd-libopenjdkd-dependency
ifeq ($(ART_BUILD_TARGET_DEBUG),true)
LOCAL_REQUIRED_MODULES:= libopenjdkd
endif
include $(BUILD_PHONY_PACKAGE)

include $(CLEAR_VARS)
LOCAL_MODULE := art-libartd-libopenjdkd-dependency
ifeq ($(ART_BUILD_HOST_DEBUG),true)
LOCAL_REQUIRED_MODULES:= libopenjdkd
endif
LOCAL_IS_HOST_MODULE := true
include $(BUILD_PHONY_PACKAGE)
|just remove it.
|nit: You don't need this: optional is the default.
|It's already added here.
|No, adding it to LOCAL_SRC_FILES_arm won't work.
We should add $(LOCAL_PATH)/lib_src to LOCAL_C_INCLUDES_arm instead.
It's already listed in LOCAL_C_INCLUDES above, so we can just remove this line.
|This doesn't work for arm64 multilib build.
Looks like we can just remove the conditional here, because ARM_synth_constants_gnu.inc is only included by LOCAL_SRC_FILES_arm and it doesn't hurt for other builds.
|common_CFLAGS_arm or common_SRC_FILES_arm isn't referenced anywhere.
|You need also:
LOCAL_SRC_FILES_arm += $(common_SRC_FILES_arm)
LOCAL_CFLAGS_arm += $(common_CFLAGS_arm)
|I am not sure if the cflag and sources should also apply to arm64.
Given that it worked fine with arm64 without this change, probably they should.
+ccross,dwillemsen
|You are right. I mistook the conditional as &quot;ifeq ($(ARCH_ARM_HAVE_NEON),true)&quot; even before this change.
|nit: probably move this down to make it distinct that jack_lib doesn't need this variable.
|This store resources.arsc uncompressed.
|I am afraid the handle of resources here won't work with aapt.
In the classes.jar (which will be android.jar in the SDK package), we store the resources in res/ and uncompressed resources.arsc in the top dir. The jar will be eventually passed to &quot;aapt  -I&quot;, so that aapt can app's references of symbols of the framework resources;
But with jack now we store all the resources in rsc/res, and resources.arsc is compressed and stored as rsc/resources.arsc. I don't know if aapt will accept that.

The platform build is fine because the .jack is never passed to aapt in the build system. See how we set framework_res_package_export in build/core/package_internal.mk.
But once we move from android.jar to jack file in the SDK package, this will be a problem.
|Probably rename to all_cts_files_stamp .
|This won't work either. It just expands to $(CTS_TESTCASES_OUT), which is a directory and you can't use it as dependency.
You need to explicitly list all the apk files. Before your change https://android-review.googlesource.com/#/c/194843/1/CtsCoverage.mk, it did the right thing:
$(foreach c, $(CTS_COVERAGE_TEST_CASE_LIST), $(call intermediates-dir-for,APPS,$(c))/package.apk)

Did you change it because it doesn't cover all the apks you want? in that case you should add the missing apks to  CTS_COVERAGE_TEST_CASE_LIST, or use another variable to list  all the apks you need here.
|This is not good:
cts is a phony target, which make always takes out of date.
That means $(cts-test-coverage-report) will always be rebuilt even if everything is already up to date.
However, you can use the cts zip file as dependency here. But probably using the stamp file in the previous patchset is better.
|This won't work: $(wildcard) is executed when the makefile is parsed. At that time the .apk/.jar aren't built yet.
|Hmm, from the build system's perspective either is OK.
|I think with jack, building a common static library still works, but there is little build time saving. +Yohann to confirm. Sure it would still save you the duplicates in this change.

On the other hand, you can reuse all the LOCAL_ variables defined in the core-libart module, by not including $(CLEAR_VARS), something like:

... &lt;definition of core-libart&gt;
include $(BUILD_JAVA_LIBRARY)

ifeq ($(LIBCORE_SKIP_TESTS),)
# Reuse other LOCAL_ variables from module core-libart
LOCAL_DEX_PREOPT := false
LOCAL_MODULE := core-libart-testdex
include $(BUILD_JAVA_LIBRARY)

Sounds good to guard it by WITH_DEXPREOPT.
(sorry for the late response. I was OOO last week.)
|Please use $(generated_sources_dir)/$(TARGET_2ND_ARCH), otherwise it escapes the module's $(generated_sources_dir). That would make it harder to write cleapspec.
|YOu need to change here too.
|No, you don't need this prefix for TARGET_ARCH. It's only for TARGET_2ND_ARCH.
|ditto
|better to &quot;/&quot;, to just add a subdir in the $(generated_sources_dir). Probably also do the same for the TARGET_ARCH files:
$(generated_sources_dir)/$(TARGET_ARCH)/libsyscalls.c
v.s.
$(generated_sources_dir)/$(TARGET_2ND_ARCH)/libsyscalls.c
|THis conflicts with the same file for TARGET_ARCH.
You need to generate to a different path.
|$($(TARGET_2ND_ARCH_VAR_PREFIX)RS_TRIPLE_CFLAGS)
|$($(TARGET_2ND_ARCH_VAR_PREFIX)RS_TRIPLE_CFLAGS)
|These are global flags defined by the core build system, so you don't need RS_TRIPLE_CFLAGS or -isystem bionic/libc/kernel/uapi/asm-$(TARGET_ARCH) .
|I think you misunderstood it. We are doing it in two-step way. This step only generates the libsyscalls.c but not compiling it. The problem here is, the generators (gen_syscalls.sh and gen_constants.sh) need preprocessing of of some system headers by the compiler (and the global arch-specific cflags/includes)  to extract arch-specific constructs.
|Here is the 2nd step by adding $(my_gen) to LOCAL_GENERATED_SOURCES, and the generated .c will be compiled by the regular C/C++ build rules.
|No, the PRIVATE_CC here is used only to generate libsyscalls.c, but not to compile it. The compilation is still the &quot;normal compile&quot;.
What special about this module is, it needs to call the compiler (with the global flags) to generate libsyscalls.c and libconstants.c. The core build system doesn't provide such functionalities. The core build system only knows to call the compiler to do real compilation.
|Here is where PRIVATE_CC is used.
Why not use $(my_cc) here? because we use the deferred assignment (= instead of :=, so you can use $^,$@ etc in PRIVATE_CUSTOM_TOOL), and $(my_cc)'s value is changed later in the build system.
|This is using regular compile rules. The &quot;_$(TARGET_ARCH)&quot; suffix is used to exactly to solve the 64-vs-32 issue, so you don't include both the 32-bit and 64-bit versions in LOCAL_GENERATED_SOURCES.
|in that case the next line will be expanded to &quot;: &lt;deps&gt;&quot;. Probably make would just ignores such rules. It looks better to guard with &quot;ifdef RECOVERY_RESOUCE_ZIP&quot;.
|With this change, looks like we don't need to start the jackserver when we install $(JACK) any more.
|why do we need this if we run jack-admin directly from the source directory.
|Declare it as phony:
.PHONY : start-jack-server
|This command hangs on my clean checkout of the master tree:
master3$ prebuilts/sdk/tools/jack-admin start-server 2&gt;&amp;1
Launching Jack server java -Djava.io.tmpdir=/tmp -Dfile.encoding=UTF-8 -XX:+TieredCompilation -cp /usr/local/google/home/wangying/.jack-server/launcher.jar com.android.jack.launcher.ServerLauncher
&lt;it hangs&gt;

Do you have any idea what it's doing?
|Use &quot;-include&quot; the same way as the above jack config. We may have branches that don't have prebuilts/sdk in their manifest.
|You can define a new variable:
TEST_ART_RUN_TEST_ORDERONLY_DEPENDENCIES :=
ifeq ($(ANDROID_COMPILE_WITH_JACK),true)
TEST_ART_RUN_TEST_ORDERONLY_DEPENDENCIES := \
  setup-jack-server
endif

then add &quot;&#124; $(TEST_ART_RUN_TEST_ORDERONLY_DEPENDENCIES)&quot; to the end of each dependency declaration.
|This just expresses: make sure jack-admin is also installed when jack is installed, right?
If so, you can use LOCAL_REQUIRED_MODULES := jack-admin
|Probably use just the common &quot;LOCAL_PATH := $(call my-dir)&quot;.
|$(LOCAL_PATH)
|For variables referenced in the build recipe, it's better to use target specific variables:
setup-jack-server : PRIVATE_JACK_ADMIN := $(jack_admin_script)
setup-jack-server : PRIVATE_PATH := $(LOCAL_PATH)
....
  &lt;tab&gt;$(hide) $(PRIVATE_JACK_ADMIN) stop-server 2&gt;&amp;1 &#124;&#124; (exit 0)
  ...

So you don't need to worry that jack_admin_script or LOCAL_PATH be changed later in the build system.
|$(PRIVATE_PATH)
|This changes the behaviour when USE_CCACHE is not set.
|Sorry, I read it incorrectly. never mind.
|__ANDROID__
|This doesn't work. The substring operation works only in bash script.

Also I'd like to combine the change to trim down BF_BUILD_NUMBER in build/core/Makefile with this.
|How about putting all soong output files in a subdir?
|$(TOP) is always &quot;.&quot;. Looks unnecessary here.
|$(SOONG_ANDROID_MK)
|pass from here: SOONG_ANDROID_MK=$(SOONG_ANDROID_MK)
|Update this: maybe we can pass in from the kati command line.
|But COMBINED_BUILD_NINJA is 1:1 mapped to KATI_BUILD_NINJA.
|Looks unnecessary.
|For unbundled branches, it's normal to have a project in the manifest but without its full dependencies, as long as the dependency isn't required by the build.
This will be a big hurdle to run soong in ub branches.
|nit: (hide)
|Static java library and (shared) java library have the same link format at build time, just that they differ in how the they end up on the device:
For a shared Java library, we transform it to dex and install the dex to /system/framework/&lt;lib&gt;.jar, which is shared by all apks;
For a static Java library, we don't build dex file; instead any apk/jar linking against it will merge the static library's class files into its own .jar/.jack and then transformed to dex; that said every app gets its own copy of the static library.
Sometimes we want to compile a module against a static java library, but we don't want to merge the library's classes (we know the classes will be available by other means at runtime), so we link the static library as LOCAL_JAVA_LIBRARIES as opposed to LOCAL_STATIC_JAVA_LIBRARIES. That's totally fine with the current build system.
I think how you handle the static library here is correct.
|See here
|See also here.
|See here.
|We need to take multidex into account here.
If we generate multiple dex files for a module (for example in out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/), jack actually output multiple dex files: classes.dex, classes2.dex, ... 
But the build system uses only classes.dex as dependency, and use wildcard classes*.dex to collect all the generated dex files in the build recipe.
|This is the SDK stub jar that app is linked against when it has &quot;LOCAL_SDK_VERSION := current&quot;. Ideally the .toc would benefit us the most in this case. But unfortunately we are generating from .dex instead of the .jack file. For the stubs we don't have (not needed) dex file.
|I think you need to pass in the new flag &quot;--signapk_shared_library_path &quot; from here.
|I'd suggest to rename it to SIGAPK_JNI_LIBRARY_PATH .
|This is incorrect. What bitness to use is decided by the JDK's bitness, not how we build the host binaries. There is a build system variable HOST_JDK_IS_64BIT_VERSION for this. But I don't think we need to care about 32-bit JDK any more at this point. So we can just remove the 32bit support here.
|Same here. We don't need to support 32-bit JDK.
|This should be LOCAL_STATIC_JAVA_LIBRARIES too, so the users of this library don't need to add libprotobuf-java-nano as its own dependency.
|You cannot use PRIVATE_OTA_TOOLS in ifneq() here, because it's not available in the global context.
But we can use something like $(if $(RIVATE_OTA_TOOLS),$(hide) ...), but that way it will be evaluated only when the build recipe is executed.
I prefer ifneq() so it can be evaluated earlier at makefile parse time.
|Looks like bad idea to have two (almost) identical files in the system.img.
Would the following work?
LOCAL_SRC_FILES := dummpy.cpp  # build an empty .so
LOCAL_SHARED_LIBRARIES := libGLESv2  # with libGLESv2 in DT_NEEDED.
|No, make doesn't track files gone from makefiles.
This shouldn't be a issue in this case because our buildbots run clean build every time.
Even if you want to remove the obsolete files, you can't do it with $(shell), which is run every time you run make.
|remove
|You need this dependency. Looks like there was a mistake in your change: it should be ,out/target/product/dragonboard/provision-device, not
out/target/product/dragonboard/provision-device/provision-device
|add to the list: 
$(PRODUCT_OUT)/provision-device:provision-device
|then you don't need this.
|remove
|As Dan said, for presigned prebuilt apks we still need to run zipalign.
|remove
|I think it's better to keep this variable, in case new module definition would be inserted between.
|$(libart_jack)
|Yohann, Do you have any idea why .jar and .jack are mixed here?
|This should be for device, not host.
|Looks good to me.
|We can simply use bash substring operation:
echo $${USER:0:6}
|The makefile build system doesn't support the _$(arch) suffix.
|Won't these LOCAL variables without _$(arch) suffix will be duplicated in module definition with &quot;LOCAL_MULTILIB := both&quot;? not a big deal though.
|Where do these Android.mk in the intermediatesDir come from?
|Looks to me this function is unnecessary - we already gathered the list of modules in the caller GenerateBuildActions().
|$(TOP)
|This isn't used by the makefile build system. Is it just for debug?
|How is this file being used?
I am not sure if this is still needed.
|No hardcoded paths. You can call the function
$(call java-lib-files, guavalib dagger2-auto-common-host dagger2-auto-factory-host dagger2-auto-service-host  dagger2-auto-value-host, true)
The last argument &quot;true&quot; is for HOST modules.
|$(VENDOR_PARTITIONS_TARGET)
|This probably doesn't belong to the core build system. Do we have a project common to all brillo devices? I think it's better to move over there.
|YOu can't put it in a product makefile like brillo_base.mk. You should put it in an Android.mk, such as device/generic/birllo/Android.mk
|I see no bug. Read the comment.
- we hornor JAVA_HOME set up before the first run of this function.
- But we should reset JAVA_HOME that's set up by ourselves.
|Yeah, the jack team is talking about discontinuing javac/dx toolchain support soon, and this will be more true.
|Since this is only used inside define-jar-to-toc-rule, we can &quot;internalize&quot; by appending &quot;_&quot; to the function name.
|$(IJAR) as order-only depependency: &#124; $(IJAR)
|$$ is fine. Just put a note that it must be called with $(eval). (there are many such cases in this file)
|Unnecessary.
|From java_common.java: full_java_lib_deps := $(full_java_lib_deps) $(full_static_java_libs) $(LOCAL_CLASSPATH)

For static Java libraries, whose class files will be packaged into the current module, using the toc file probably is incorrect. Static libraries are part of the app that use them and their implementation matters.
|Looks like unnecessary to generate .toc for all the jar files. I think only the jars used as dependencies by other modules need .toc. They are classes.jar for target Java library and javalib.jar for host Java library. See _java-lib-full-dep in definitions.mk .
|Better a more specific variable name.
|No problem
|Probably you don't need the file name suffix at all.
|I am fine with this approach.
Alternatively we can have a &quot;touch&quot; rule to generate the headers from the $(aidl_gen_cpp). See rule of proto_generated_headers. But you need to know the path and file name of the header files.
|In theory this can be run in a sub-shell and the exported variable isn't visible to the next shell command.
|Don't we need to tell kati to not run ninja in the KATI_ENV_SH?
|like this
|why not also auto-export the aidl_gen_include_root? so any module linking against the current library will get it automatically.
|How did you pass in the variables in you test?
In makefile by default you can't override a command line makefile variable, but you can override an environmental variable.
So &quot;make LLVM_PREBUILTS_VERSION=3.9&quot; works but &quot;LLVM_PREBUILTS_VERSION=3.9 make&quot; doesn't.
|This will invalidate LOCAL_PATH defined in this file, and the following rules that depend on LOCAL_PATH won't work.
Please move it to the last line of this file as:
include $(call all-makefiles-under,$(LOCAL_PATH))
|You don't need to redefine these macros:
you can use the ones define in the parent Android.mk, if this file is included at the bottom of the parent Android.mk
|Usually we'd set up separate build targets on the build server for them.
|sounds good.
|If this is run on LC, you should take OUT_DIR passed in by LC.
LC can pass a bunch of arguments to the build commands:
OUT_DIR: storage for temporary files
DIST_DIR: persistent storage, where you can download files from the build page.
|This will just build the files required by clang-toolchain but not save them to the DIST_DIR, so you won't be able to download them from the build page.
|sounds good.
|With this you'll have a directory stage1 in the root of the source tree. It will be unattended after the build is done. Also actually on the build server the OUT_DIR is a symlink to some other partition, with this we might fill up the source tree partition quite quickly.
|This can also be passed in from LC, something like &quot;JOBS=%(j)s&quot;. which is cpu_count()*2 - 1.
|Sounds good.
|With this setup, &quot;make clang-toolchain&quot; will just build them but not save them on the build server. From the bug it looks like you want to save the build artifacts and so you can download them from the build page.

To package up modules to a zip file and save it on the build server, we have a tool build/core/tasks/tools/package-modules.mk. You can see example uses in vendor/google/build/tasks .
It probably doesn't work for host modules currently. But I can fix that easily.
|Sorry, never used this kind of things before: will the temporary file be deleted when diff() gets its name?
Hmm, I guess not because newfp.close() is executed only after the controlflow comes back from diff.
|No error message even if it really fails?
Probably you need to add some flag like &quot;-q&quot; to the tool.
|It is this block that hides the art test modules from &quot;make checkbuild&quot;.
|This change itself looks fine to me, but it doesn't help to make checkbuild cover the art test modules.
|You can get these information from $(zip_root)/SYSTEM/build.prop.
|Then can we put it in misc_info.txt?
Or just make a copy of build.prop in the META folder? I don't see why the build variant is special and needs its own file.
I don't have strong opinion. If it's ok with Tao, it's fine with me.
|uint32_t?
|Make doesn't have the restat feature. If the .toc file doesn't have a new timestamp after its build recipe was executed, make always tries to rebuild it whenenver you run make.
So we should use the .toc files as dependencies only if BUILDING_WITH_NINJA=true .
|I am wondering about Ninja's restat behavior:
If libc.so.toc has older timestamp than libc.so and no symbol change since the old .toc file, will Ninja always run the recipe of the .toc file?
If so, a nothing-to-do-build may not really do nothing.
|$(LOCAL_BUILT_MODULE).toc
|built_shared_library_tocs := $(adddsuffix .toc, $(built_shared_libraries)
|built_shared_library_tocs :=
|No filter-out.
|The host machine readelf and nm doesn't work on Mac with those flags.
Probably we should use the prebuilt toolchain tools, such as prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-readelf
|not necessary.
|I think we can remove the use of this by using makefile arguments. Probably Makefile arguments are more readable in this case.
Also it's better to split the subcommands, so that if the objdump command fails, it fails the build.
|We can make it a makefile parse-time decision (&quot;if..else..&quot; statement) instead of execute-time decision ($(if) call).
|This function now also modifies the underlying file.
|In that case do we need to distinguish those builds by the value of SANITIZE_TARGET?
Can we set ro.build.flavor to something like shamu-userdebug_asan_address?
Guang?
|Do we plan to set up builds on build server with other values of SANITIZE_TARGET?
|Don't do this: in incremental build we share the object files across build variants.
|This changed the &quot;USE_NINJA=false&quot; build behavior in unfavorable way.
Looks like we don't necessarily need to remove this if we never pass &quot;dist&quot; to ninja?
|I'd like to keep the USE_NINJA=false support before soong can fully take the responsibility. Especially when we are still using kati and unexpected behavior is discovered, we need  USE_NINJA=false to see how make works.

I found a couple of other behavior differences between USE_NINJA=false&#124;true. I'll upload a change.
|why do we call this given that &quot;-X&quot; has been passed to zip?
|Does SignApk take care of the uid/gid, universal timestamp stuff too?
|-X?
|-X?
|We may need it here, because for presigned apk we do run this function but without re-signing it with SignApk.
|Why do you need an empty res dir in that case?
|Move &quot;mkdir -p $(dir $@)&quot; here:
@rm -rf $@ &amp;&amp; mkdir -p $(dir $@)
|Add a comment why you need to touch.
|+Dehao
Is there a way to not take the working directory when calculating the build-id?
|This isn't needed now.
|You are generating the .cc files to $(intermediates) instead of $(generated_sources_dir). That's fine. The upside of this approach is that you can use the general generated cpp compilation rule and don't need to set up your own.
However for 64-bit multilib build, the 32-bit and 64-bit modules share the same $(generated_sources_dir), but they have different $(intermediates). That means you'll need to generate two copies of the .cc files separately.
|seems we can just hardcode .cc (or .cpp if you like it).
|Remove this conditional: Because you generate the .cc files into $(intermediates), we need to generate them separately for 32-bit and 64-bit modules in multilib build.
|$(basename $@).P
then you don't need PRIVATE_CPP_EXTENSION.
|You won't reach here with your change, because these targets aren't directory.
|Yes, I missed that :)
|Please add a comment about the empty input case.
|This makes it consistent with LOCAL_MODULE_TARGET_ARCH: empty input means it matches any arch.
|the system.img dependency covers the dependency.
|Probably change it to a more specific name?
By convention PRODUCT_* are reserved for the core build system, see build/core/product.mk
|ditto
|ifndef TARGET_BUILD_APPS
# Platform build, set up the dependency on system shared libraries.
installed_shared_library_module_names += $(my_system_shared_libraries)
endif
|No, it still needs to be guarded by LOCAL_SDK_VERSION, something like the fix on the left.
|Probably it's better to define a global variable something like TARGET_OUT_BREAKPAD and reference it here and dynamic_binary.mk.
See how TARGET_OUT_UNSTRIPPED is defined and used.
|why do you need to add it to target_files.zip? it's not needed by system.img, right?
You should create a separate zip and just store that zip on the build server $(call dist-files-for-goals).
|How does Goma handle that case? does it just skip the cache?
If so this change is probably unnecessary.
|OK, at least we can still use Goma's remote build workers.
|If you run mgrep &quot;droid *:&quot; in the internal tree, you'll find more dependency in the vendor tree (bad idea!).
With this change &quot;make checkbuild&quot; won't build them. Not a big deal though.
|Just realized Hamaji also added &quot;tests&quot; to vendor/google/build/ninja_config.mk.
|tests still makes a difference in the internal tree, see vendor/google/build/tasks/google_tests.mk
|This doesn't generate the target file $@, does it?
|Yes, just add .sym to breakpad_output.
Otherwise whenever you run make, it tries to build $@, which never gets generated.
|You don't need add this dependency and the followings.
Just add to its own black:
$(LOCAL_BUILT_MODULE) : $(breakpad_output)
|s/n/N
|Done
|Can we just add this flag to TARGET_GLOBAL_LDFLAGS?
|I missed this one: you also add the flag to 
$(TARGET_2ND_ARCH_VAR_PREFIX)TARGET_GLOBAL_LDFLAGS for multilib build.
On the other hand you can add the flag separately to TARGET_GLOBAL_LDFLAGS in all the build/core/combon/TARGET_linux-*.mk.
|You shouldn't do that. The build system is dependency based: if none of the dependency is changed, you shouldn't rebuild the target.
|In most cases we'd expect the src and the dest are not identical and this will be waste of time.
|ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
to be consistent with other checks of this variable.
|For all these check, could we just say:
ifneq ($(SANITIZE_TARGET),)
?
|I would remove this as well.
|No need. Please remove.
|This is the only difference from transform-host-cpp-to-o-no-deps, right?
|I'd probably just write it here as:
$(transform-host-cpp-to-o)
Or just call $(transform-host-cpp-to-o) in binary.mk
|We don't have realpath on Mac.
|Yes, we already have such a script in the source tree:
ndk/realpath
|Do you have a blueprint change that substitue the new BUILDDIR?
Otherwise I don't see where BUILDDIR is passed to build.ninja.
Also I guess build/soong/build.ninja.in should be changed accordingly too.
|no.
There is no DIST_DIR if you don't run &quot;make dist&quot;.
|The Kati pass would remove the file written by the outer make in that case.
|Ah yes, with &quot;make PRODUCT-sdk-win_sdk&quot; (I don't know why we had to support such things in the first place), in build/core/product_config.mk we added the unknown variant &quot;win_sdk&quot; to MAKECMDGOALS, and have PRODUCT-sdk-win_sdk depend on $(MAKECMDGOALS).
Without this change, the outer make build would fail because the win_sdk rule isn't visible to it.
|Sounds good to me. Shinichiro?
though I still don't get why we need to pass -j to ninja, which supposedly enables running jobs in parallel by default.
|Sounds like the number you get isn't deterministic - it depends on how many tokens remaining in the pipe when makeparallel is running.
In what situations you need to pass this number down to ninja?
I can imagine that if distributed backend (such as goma) is used, we may want to specify a number much bigger than the cpu cores as parallelism. In that case it's probably better to hard-code the parallelism in the build system, as KATI_REMOTE_NUM_JOBS_FLAG does now.
|we don't return the tokens in this function.
|yeah, if you don't have targets &quot;tests*&quot; you also want to cover.
&quot;tests&quot; is the umbrella target name used by all userdebug builds on the build server, so I think you are right.
|you can remove the pattern character %.
|remove this.
|my_prefix can be:
TARGET_
HOST_
HOST_CROSS_

so you can write $($(my_prefix)OS) .
|Maybe also mention &quot;make winsdk-tools&quot; to build all the windows tools?
|parsing
|Probably a more descriptive variable name?
|probably restrict it to target only.
The host case has been handled in lines 186-194.
|better move this up to line 195, before $(my_clang) is referenced.
|Move this forward too.
|It's better to calculate a list of concrete file targets, such as:
WIN_BINARIES := $(foreach t, $(WIN_TARGETS), ALL_MODULES.$(host_corss_$(t).INSTALLED))
|So that we don't have a file target depend on a phony target here. Otherwise the file target will always be rebuilt even if it's already up to date.
We also want to replace &quot;sdk&quot; with $(INTERNAL_SDK_TARGET) as dependency.
|change this to $(WIN_TARGETS) too.
|Now this function isn't called anywhere.
Previously this function is called in the following definitions of CLANG_HOST_GLOBAL_*FLAGS, and also in binary.mk (search for &quot;convert-to&quot;).
|Look at how tools_notice_file gets packaged in build/core/Makefile, those host_cross notice files will go nowhere.
In the existing system, we don't collect the windows notice files. So I think this is fine.
|we don't set it to HOST_.
|Looks like we can simply use:
ifeq ($(LOCAL_HOST_PREFIX),)
my_prefix := HOST_
else
my_prefix := $(LOCAL_HOST_PREFIX)
endif
|this isn't necessary.
|If we define a variable in base_rules.mk, we can reference it in binary.mk
|ditto
|It seems we don't need the complex streq here. Also we can factor this out, something like:
my_host_cross := $(filter HOST_CROSS_,$(my_prefix))
|where is the dependency setup of this target?
|In system/core/fastboot/Android.mk, we have
ifeq ($(HOST_OS),windows)
$(LOCAL_INSTALLED_MODULE): $(HOST_OUT_EXECUTABLES)/AdbWinApi.dll
endif

In which we need LOCAL_INSTALLED_MODULE to be the windows one.
Or perhaps we should remove all the use of LOCAL_INSTALLED_MODULE and LOCAL_BUILT_MODULE in Android.mks.
|Why in executables.mk we save both LOCAL_INSTALLED_MODULE and LOCAL_BUILT_MODULE, but here only LOCAL_INSTALLED_MODULE?
|same here.
|it can be more than one paths.
We need to replace $(space) too.
|we'll need to change this with your HOST_CROSS_ change.
Or can we move &quot;LOCAL_IS_HOST_MODULE := true&quot; from the *_internal.mk to *.mk ? That looks more natural.
|this isn't needed.
|ditto
|Oh, I missed the &quot;_linux&quot; in the following two lines...
|ah, I see it now.
It's not necessarily needed, right?
|why windows build doesn't need this library before this change? or perhaps you also want to fix mm/mmm build with the HOST_CROSS support?
|would it work if we set LOCAL_MODULE_HOST_OS in this file?
I guess you have tested that and it pulled in too much for windows build?
|yeah, we don't support 64-bit as TARGET_2ND_ARCH.
|I am afraid the file name gets too long, as $(ONE_SHOT_MAKEFILE) is usually long.
But I don't have strong opinion.
|Actually there are tons of variables can be passed in as environmental variables that affect the build rules.
But kati will regenerate the build.ninja and I think probably that's fine.
|Perhaps we calculate md5sum of the normalized (sorting the targets) string as the suffix?
In mkdb we calculate a checksum on the normalized make command line and a list of environmental variables/values.
|Ah, I didn't know kati has this support.
|ifneq ?
|It's better to use :=,
This gives a chance to reset the variable if it's not reset in clear_vars.mk :)
Also this variable wouldn't be recursively expanded if this is the first time it's defined.
|we can combine them to:
LOCAL_LDLIBS_linux := -lrt -lz
|I should remove these lines as well. they are moved to java_common.mk.
|moved to java_common.mk
|yeah. Only the target module framework.jar has this variable set.
It's good to unify all the cases.
|HOST_ ?
since these are enclosed by &quot;ifdef LOCAL_IS_HOST_MODULE&quot;.
|Yeah, but we don't have things like &quot;LOCAL_CFLAGS_mips +=&quot; in the core build system, in which it's repeatedly applied when the file is included.
This is one reason I prefer to use &quot;:=&quot; instead of &quot;+=&quot; in Android.mk when setting such variables.

I don't see an easy fix without causing other overhead.
Again, this isn't a big deal, since this file isn't included that much.
|It may not be a big deal, but LOCAL_CFLAGS_windows will be repeatedly appended with this and unused, when we are building non-windows :-)
|But not here.
|Hmm, looks like you'll need to escape here.
|I am worried about how will this scale.
You can define arbitrary board config variables that can affect how a module gets built.
|Also device_use_dlmalloc?
|Using the make build system's terminology, these are board config variables.
|Check this in goma.mk?
|Perhaps change to &quot;this works only with Google's Goma build infrastructure&quot; and give pointer to Goma if any is publically available.
|I couldn't find where this variable is used.
|good idea!
|That would make this file a little bit more complicated, because we &quot;include $(CLEAR_VARS)&quot; in this file.
Also I'd like to avoid that: these variables are really only for this file and it's unnecessary to be reset every time you define other kind of modules.
|Ah, I missed that and I didn't test this feature.
I need to think more about this.
|no, shared libraries are recorded separately in variables *_DEPENDENCIES_ON_SHARED_LIBRARIES.
|where is this variable defined?
|But this change goes into master, where I can't find the definitions of these macros.
|where is this defined?
|Hmm, you don't need to call $(filter) here.
The PRIVATE variable was removed by me, because I changed the dependency to :
$(dbus_generated_headers) : $(dbus_definition_paths)
which makes $^ be only the .dbus.xml files.
|You are right - $^ still includes everything.
|To use static pattern rule, I added the source path (relative to LOCAL_PATH) to the generated headers in this case.
|Yes, that's the convention in the Android build system.
|then added their dir to the include path here.
Does this work for you?
|sounds good. I'll update.
|static pattern rule is just for such cases.
I'll upload a new patchset.
|I agree.
|this variable is unnecessary.
You can get it with $(dir $@) in the build recipe.
|this doesn't work if we have more than one .dbus.xml file.
If you have multiple .dbus.xml files, a single .h file should depend on only the corresponding .dbus.xml file, right?
In that case you should use static pattern rule, similar to the .pb.h rule:
$(proto_generated_headers): $(proto_generated_sources_dir)/%.pb.h: $(proto_generated_sources_dir)/%.pb$(my_proto_source_suffix)
|should be my_export_c_include_dirs .
|I don't understand: why using the module name as your LOCAL_DBUS_PROXY_PREFIX doesn't work?
|Why not reuse the existing module definition? by adding the following lines:
ifneq ($(SANITIZE_TARGET),) # or it equals address?
LOCAL_CFLAGS += -DADDRESS_SANITIZER_LINKER
LOCAL_MODULE_STEM_32 := linker_asan
LOCAL_MODULE_STEM_64 := linker_asan64
endif
|Re 2): yes, we can.
I need to tune this file a little bit to handle the 32-bit v.s. 64-bit issue.
|oh, in LOCAL_POST_INSTALL_CMD we have to use $(LOCAL_INSTALLED_MODULE) instead of $@.
|The simplest and graceful way is:
ifeq ($(PRESANITIZE_TARGET),true)
LOCAL_POST_INSTALL_CMD = $(hide) ln -sf $(notdir $@) $(subst linker,linker_asan,$@)
endif

This will handles the multilib case automatically.
But it needs you to set PRESANITIZE_TARGET=true in the first normal make, because we build linker in only the first make.
|$$
|You don't need this.
The build system will set up dependency of system.img on $(ALL_MODULES.linker.INSTALLED).
|If you want mm/mmm/etc to also work, you indeed need this line.
|not needed.
|You don't need to escape here, since we don't change value of variable hide in this function and when the rule is executed.
But it still works with the escaping.
|$(hide) ln
|As we talked, this isn't needed.
|This is not good.
You should define asan.options as a separate module using $(BUILD_SYSTEM)/base_rules.mk like this init.environ.rc, and then have init.environ.rc depend on asan.options with LOCAL_REQUIRED_MODULES.
|Hmm, why do we change this title? I think the old is better.
|Hmm, how about simply &quot;Building 64-bit system&quot;?
|oh, this should be a class from framework.jar, not core-libart.jar.
|In libcore/JavaLibrary.mk I don't see core-libart has dependency on okhttp. How can core-libart reference okhttp classes without the dependency?
Oh, it's framework.jar, not core-libart that references okhttp. Anyway you can't just change the -bootclasspath without establishing dependency on okhttp.jar.
Sounds like we should add okhttp to TARGET_DEFAULT_JAVA_LIBRARIES in build/core/config.mk, instead of modifying the bootclasspath?
|How about jack?
|Continue the previous code review:
We should remove this. This will override any other include path and make the build non-hermetic.
|You don't need this for static libraries.
|ditto
|Could you change it to two or four spaces instead?
|We don't have this variable any more.
|You shouldn't need this. Our prebuilt toolchain takes care of that.
You can't depend on things installed on the build machine.
|unused.
|unnecessary.
|we can't generate file to the source tree.
We should generate to the intermediate directory in out instead.
|Oops, you are right.
|I didn't know that.
It seems $(wildcard) itself doesn't sort, but its implementation calls glob() that does the sorting.
That means results of $(wildcard) are only locally sorted if multiple globbing patters are provided. But this doesn't matter.
|Thanks for the information.
|But recovery_resources_private is assigned with only one directory here.
|Hmm, this indicates the author used to think there might be more than one items.
I am not the original author.
+tbao
|No, the task .mk files are not for configuration.
If we want to support multiple recovery resource dirs, we should expilcitly define a new board config variable, something like TARGET_RECOVERY_RESOURCE_DIRS, and have the build system respect it.
|Actually you can install extra binaries built from source to the recovery image by setting the module's LOCAL_MODULE_PATH with:
LOCAL_MODULE_PATH := $(TARGET_RECOVERY_ROOT_OUT)/&lt;subidr&gt;
and add the module's name to PRODUCT_PACKAGES of the product you are building.
This is the most common way how modules get built into system.img and other images.
|Shouldn't we combine this with the new variable? say if no TARGET_RECOVERY_RESOURCE_DIRS is specified, use this as the default?
|Regarding (2): no, you can't install files built from source by just copying them to the recovery directory without establishing dependency. Why do you need extra binaries and libraries in the recovery.img but not install them to the ramdisk?
It seems to me by design Android only allows to customize the resources at this point. Tao has more say than I do on this.
|Yes, we should remove the $(foreach) call.
|ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
to be consistent with other checks of this variable.
|Do you need to add the path to my_c_includes?
If the headers are included from $(generated_sources_dir), something like #include &quot;dbus-bindings/foo/adaptors.h&quot;, then you don't, because $(generated_sources_dir) is automatically added by the build system.
|You'll need to do something similar, otherwise you'll get duplicate rules for multilib modules, because this file is included twice for both 32-bit and 64-bit build.

(Ideally these things should be moved out of this file and be added to higher-level makefile, but not in this change.)
|why not also grep out these files?
|What is this prefix for?
I'd like to keep the number of LOCAL variables as small as possible.
|No, you don't need it.
|For build tools the convention is to define a const in build/core/config.mk and use the const here.
Probably DBUS_GENERAOTR in config.mk.
|You have to use target specific variables in the build recipe, if the value of the variables vary based on the file it's being built.
See http://www.gnu.org/software/make/manual/make.html#Target_002dspecific for target-specific variables.
|Probably move to a function in definitions.mk, similar to $(transform-proto-to-cc)
|This change in fact disabled the CleanSpec.mk mechanism, if you have ever run a clean build.
|I'd like to move this to the next assignment, so that both cases end in consistent way (without &quot;;&quot;).
|nit: move this up to next to the &quot;endif&quot; line.
|I am not sure if the fstab file is always named that way.
For example for aosp_arm, TARGET_DEVICE is generic, but we don't have fstab.generic - instead we have fstab.goldfish.
Perhaps we should have a board config variable to specify this, if it doesn't use fstab.$(TARGET_DEVICE).
|Really?
I think I changed it from &quot;cp -Rf&quot; to async to just prevent the broken symlink error.
|but it's created again here.
|I see. That's the error because you are trying to overwrite existing dir with symlink; while &quot;rsync -a&quot; was to fix symlink overwriting broken symlink.

Probably better to write a python script to do the copy, so you can select whatever to copy.
|See here.
|Shouldn't we check if $BOARD_BUILD_SYSTEM_ROOT_IMAGE is empty?
|The build process doesn't use this, right?
A build doesn't necessarily run build/envsetup.sh.
|this two variables will never evaluate to the same.
|Done
|Argh, I just tested that the command was really printed when I ran &quot;make showcommands&quot;, but didn't test if it's really hidden without showcommands.
I'll move definition of hide.
|and remove this line.
|Move the conditional and assignment up here.
|You don't need $(subst) here. It's better to write it as:
ifneq ($(USE_DEX2OAT_DEBUG), false)
DEX2OAT := $(DEX2OATD)
endif
DEX2OAT_DEPENDENCY += $(DEX2OAT)
|why do we need to keep this?
|This is good. I think we can also do so in androidbp.
|Perhaps by adjusting where ninja.mk is included in main.mk, or reordering some inclusion, we can build ckati with $(BUILD_HOST_EXECUTABLE) in Android.mk?
|That way if your run &quot;make all droid&quot;, the build recipe will be run independently twice.
You can use an intermediate target to fix this:
.PHONY: all
all: $(KATI_OUTPUTS)
  &lt;build recipe&gt;

droid fastincremental $(ANDROID_TARGETS): all
|Hmm, I have never used make's .INTERMEDIATE feature.
How is this different from:
$(KATI_OUTPUTS): $(KATI) FORCE
  @echo Running kati to generate build.ninja...
  @$(KATI) --ninja ...

or as simple as
$(shell $(KATI) --ninja ...)
?
|Oh, we need an intermediate target because $(KATI_OUTPUTS) includes two files.
|Done
|Done
|This doesn't work:
make doesn't expand &quot;$(var)&quot; inside the string value.
You'll get the literal \&quot;$(shell cat $(OUT_DIR)/build_number.txt)\&quot; in the compilation command lines.
|why not use $(BUILD_FINGERPRINT_FROM_FILE) like others?
|This is should be put next to the source file, such as in prebuilts/tools/common/m2/Android.mk
|How can Android Studio relies on things built by the platform build system? given that Android Studio itself isn't built by the platform build system.
If you just define these prebuilt modules but no other things depend on them, the build system won't build them.

Yes, if you indeed need to build them as BUILD_PREBUILT, please add Android.mk to their source dir.
|ditto
|Hmm, I used to see other such uses of BUILD_NUMBER (or the root of the uncertainty, &quot;date&quot;)in some Android.mks, e.g to generate a unique ID and pass to the compiler as a macro.
|Better to move to $(PRODUCT_OUT).
We don't rewrite if mkdb is used.
|Sorry, I forgot that $(CLANG) evaluates to &quot;prebuilts/../ccache prebuilts/.../clang&quot; when ccache is enabled.
$(lastword $(CLANG)) should work in both cases.
|You don't need the last line of &quot;$(GEN):&quot;.
Just switch the first and second line:
$(GEN): PRIVATE_CUSTOM_TOOL = $&lt; $(CLANG) $@
$(GEN): $(LOCAL_PATH)/gen_syscalls.sh
|Please use $(local-generated-sources-dir), which is multilib friendely.
|we should use Android's own clang with $(CLANG), not whatever clang installed on the build machine.
|You need to use $@ here. GEN may be redefined elsewhere.
|Depend on $(LOCAL_PATH)/gen_syscalls.sh.
Then you can rewrite the command line as:
$(GEN): PRIVATE_CUSTOM_TOOL = $&lt; $(PRIVATE_CC) $@
and you don't need PRIVATE_PATH any more.
|not sure if it's good to mention a specific device name in an external  project.
|Actually the convention is to build module into their intermediate directory and add new rule to copy it to the $(PRODUCT_OUT) if necessary. Especially for packaging rule with staging files in the intermediate dir, that way you can avoid absolute path in the build recipe. Absolute path is considered bad, because it makes it harder to replay the command.
If there is no other reason, I'd prefer not ot make this change.
|Hmm, I forgot about the fact linker is a static executable.
On the other hand, is it possible to make this a runtime decision? e.g. passing an option when the linker is called? or make linker_asan a symlink of linker and in the code see  if the executable is called as &quot;linker_asan&quot;?
|You don't need this, if we rebuild the linker with name linker_asan.
|nit: we mixed hardcoding flags in this file, and using constants defined in the config.mk.
|Yes, space is preferred.
|We build everything seen by the build system if you run checkbuild. See go/android-build-commands.
|Rebased.
Also fixed reference of possibly nonexistent envrionmental variable ANDROID_HOST_OUT in art/test/dexdump/run-all-tests.
|Sounds good. I'd appreciate if you add in this change.
|It seems that's not the the case on Mac.
I changed IsRegular() to use the same pattern as this.
|Why do we only check &quot;srcs&quot; for the static library module?
|Probably also check &quot;exclude_srcs&quot;?
|This means $(2) will be regenerated whenever you run make.
|it seems unlikely we would need these variants.
We can add them only when we really need them.
|should be LOCAL_C_INCLUDES.
|In Go are you able to append to a slice while ranging over it? Will the newly appended elements be ranged over?
|Perhaps aesthetically we can add indentation here and strim the lines in expect()?
Also the formatting details (such as the last blank line) would make the test fragile.
|Sounds good.
|The extra bootstrap time should be fine.
I am worried that a user would be confused if he/she sees the bootstrap error and doesn't know what to do. :-)
I think only the build system developers should concern these tests. If a test fails, it's a build system programming error.
|I am not sure if it's good idea for every end user to run these tests.
|You don't need to add it here.
|If you want to put it into the sdk-repo-windows-build-tools-&lt;build-number&gt;.zip, this is necessary.
But if you just want to build clang.exe when you run &quot;make winsdk-tools&quot;, this isn't needed.
|If you want to build clang.exe when you run &quot;make winsdk-tools&quot;, this is the only place you need to change.
|I think it's more convenient to just use an environmental variable that you can export in your shell:
ifneq ($(ANDROID_NO_TEST_CHECK),true)
...
|Please move it up here, before inheriting from any other products.
|The convention is to put the above overriding at the bottom.
|This is wrong file.
You should add them to target/product/aosp_arm64.mk and target/product/aosp_mips64.mk separately, if the permission file only applies to these two products.
|Sorry, I am a bit confused: which implicit dependencies are you talking about? why it doesn't handle the removing Android.mk?
|Ah, that explains it. With this change:
- if a/b/Android.mk doesn't exist, the dependency looks like:
build.ninja -&gt; fileListFile -&gt; dir a/b
- if a/b/Android.mk exists, the dependency is:
build.ninja -&gt; a/b/Android.mk.

Thanks!
|With your latest patchset, it is now run in $(SOONG_OUT_DIR), even deeper in $(OUT_DIR).
After looking at handleLocalPath(), can we use filepath.Rel(top, w.androidMk) here too?
|We don't need this.
I don't think DISABLE_AUTO_INSTALLCLEAN was ever used either.
|# The files/dirs to delete during an objclean.
|Please use $(TARGET_OUT_INTERMEDIATES) and $($(TARGET_2ND_ARCH_VAR_PREFIX)TARGET_OUT_INTERMEDIATES), to take care of both obj and obj_arm in case of multilib bulid.
|Moving this looks a bit awkward.
|Let's not move TARGET_OUT_DATA.
Instead define the new variable directly to  $(PRODUCT_OUT)/$(TARGET_COPY_OUT_DATA), something like:
ifeq ($(SANITIZE_TARGET),address)
target_out_shared_libraries_base := $(PRODUCT_OUT)/$(TARGET_COPY_OUT_DATA)
else
target_out_shared_libraries_base := $(TARGET_OUT)
endif

I changed the variable to lowercase because this variable shouldn't be used anywhere else.
|Don't need this.
|still here.
|Ah, I was thinking this behavior is on by default. I just double-checked that I was wrong.
|We need this because this is called with &quot;make -rR&quot;, right?
|Any other consideration than efficiency to use -rR?
|remove this
|Thanks. I saw the other pending change by ccross.
|What is this for?
|Please remove it from build/core/clear_vars.mk
|Yes, I think so.
LOCAL_SANITIZE is supposed to be Android.mk settable. We should use an internal variable to distinguish the auto-generated module variants.
|Why do we need this new variable?
It looks like we can use just LOCAL_SANITIZE.
|I think the above else block can be removed, if we manipulate some variables to have the first block handle both cases.
|I don't remember the exact reason why we put the image files inside the target_files.zip, but it has been so only very recently. In our practice, we generate a separate signed signed-&lt;product&gt;-img-&lt;build_number&gt;.zip file, which contains only signed image files, not other target files.
Are these two sets of signed images identical?
Baligh? Tao?
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

&gt; Abandoned
 &gt; 
 &gt; I'm not having any luck with this. I'll just leave it as something
 &gt; we should do in soong.

Which directory are you running mm in? I can try. In theory nothing should prevent you from doing mm/mmm, as long as all the dependencies are buildable.
|Patch Set 2:

&gt; liblog was what I was testing with (after fixing a few things
 &gt; locally).
 &gt; 
 &gt; I had try putting the hack in:
 &gt; multilib.mk
 &gt; module_arch_supported.mk
 &gt; envsetup.mk
 &gt; 
 &gt; Each approach caused issues with resolving other modules. The first
 &gt; was host java modules because 2ND_HOST_JAVA_INSTALL_PATH (or
 &gt; whatever the name was) didn't exist, the last was because it could
 &gt; no longer find the target modules, and I don't remember for the
 &gt; middle one.
I think you need to overwrite only for c/c++ modules.
|Patch Set 2:

&gt; &gt; liblog was what I was testing with (after fixing a few things
 &gt; &gt; locally).
 &gt; &gt;
 &gt; &gt; I had try putting the hack in:
 &gt; &gt; multilib.mk
 &gt; &gt; module_arch_supported.mk
 &gt; &gt; envsetup.mk
 &gt; &gt;
 &gt; &gt; Each approach caused issues with resolving other modules. The
 &gt; first
 &gt; &gt; was host java modules because 2ND_HOST_JAVA_INSTALL_PATH (or
 &gt; &gt; whatever the name was) didn't exist, the last was because it
 &gt; could
 &gt; &gt; no longer find the target modules, and I don't remember for the
 &gt; &gt; middle one.
 &gt; I think you need to overwrite only for c/c++ modules.
c/c++ host modules, when USE_MINGW is set.
|Uploaded patch set 4.
|Patch Set 4: Code-Review+2
|Patch Set 2:

(3 comments)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

An accidentally added blank line was removed in PS2.
|Patch Set 2:

LGTM
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

TBR
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

Sounds good.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

(2 comments)
|Patch Set 3: Code-Review+2

SG
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

USE_MINGW has only very limited support.
No body has ever tried to build a target module with USE_MINGW, I guess. But it's still good if this fixes your mm build.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

&gt; Which lead to ASAN explosion: b/19778891
Can we disable ASAN for this module?
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

LGTM
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 3:

(7 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

SG
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2:

(6 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1:

Please change it to linux-x86. For historical reason we actually store both x86 and x86_64 binaries in linux-x86, so that you wouldn't mess up the makefiles.
Please also add the Mac OS prebulit.
|Patch Set 2:

&gt; I think I will just disable relocation table packing on mac os for
 &gt; now.

I'd suggest not to do that.
If you just need a Mac Prebuilt, I can generate one for you.
|Patch Set 3:

&gt; &gt; I'd suggest not to do that.
 &gt; &gt; If you just need a Mac Prebuilt, I can generate one for you.
 &gt; I would appreciate it (not sure if it builds on mac though).

Unfortunately libelf doesn't build on Mac.
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Torne, the chromium_org aidl build rule is broken due to restructure of prebuilts/sdk/tools in https://android-review.googlesource.com/147779 .
I wasn't expecting anything calls those prebuilt tools directly from prebuilts/sdk.
Here I added a workaround just for the chromium_org build rule, for I believe in the next release external/chromium_org will be gone.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

&gt; I've only tested this on my dev machine. The existing tests rely on
 &gt; a binary which is added as a resource to a host-side jar via a
 &gt; dependency on:
 &gt; $(HOST_OUT_EXECUTABLES)/sepolicy-analyze
 &gt; 
We can remove the unnecessary dependency on libc++ for this binary:
https://android-review.googlesource.com/147724
 &gt; which generates output in out/host/linux-x86/bin/sepolicy-analyze
 &gt; when I make and run the tests.  Presumably any issues with
 &gt; portability here also need to be addressed there?  Which systems do
 &gt; we need to worry about as far as unzipping and running? I'll defer
 &gt; to Ying as to what the proper approach is.
|Patch Set 1:

On the other hand, you can take this change as an example to package up libc++.so, by calling function copy-files-with-structure:
https://android-review.googlesource.com/#/c/145960/2
which takes care of the 32-bit-vs-64-bit issue and directory structure issue, so that the executables can be run just in place after the package is unzipped.

 &gt; &gt; I've only tested this on my dev machine. The existing tests rely
 &gt; on
 &gt; &gt; a binary which is added as a resource to a host-side jar via a
 &gt; &gt; dependency on:
 &gt; &gt; $(HOST_OUT_EXECUTABLES)/sepolicy-analyze
 &gt; &gt;
 &gt; We can remove the unnecessary dependency on libc++ for this binary:
 &gt; https://android-review.googlesource.com/147724
 &gt; &gt; which generates output in out/host/linux-x86/bin/sepolicy-analyze
 &gt; &gt; when I make and run the tests.  Presumably any issues with
 &gt; &gt; portability here also need to be addressed there?  Which systems
 &gt; do
 &gt; &gt; we need to worry about as far as unzipping and running? I'll
 &gt; defer
 &gt; &gt; to Ying as to what the proper approach is.
|Patch Set 1:

&gt; Sorry, accidental posting.
 &gt; 
 &gt; cts/hostsidetests/security/Android.mk is what does the packaging,
 &gt; so LD_LIBRARY_PATH will need to be set in either case, since it
 &gt; feels wrong to give the hostside test knowledge of the cts
 &gt; structure.

Sounds good to me to use LD_LIBRARY_PATH.
|Patch Set 1:

&gt; I tried it with copy-files-with-structure and that works too, of
 &gt; course, but our executable is built using BUILD_HOST_EXECUTABLE,
 &gt; which should always have the same bitness as HOST_OUT_SHARED_LIBRARIES,
 &gt; right?
No, they are unrelated.
BUILD_HOST_EXECUTABLE can produce 32-bit or 64-bit binary, per module's configuration and also decided by global variable HOST_PREFER_32_BIT.
HOST_OUT_SHARED_LIBRARIES is the 64-bit library path; 2ND_HOST_OUT_SHARED_LIBRARIES is the 32-bit library path.
If the module doesn't specify LOCAL_MULTILIB itself, it's bitness is just decided by HOST_PREFER_32_BIT. That's the case for sepolicy-analyze. In that case you can use the following to reference the libc++:
$(HOST_LIBRARY_PATH)/libc++$(HOST_SHLIB_SUFFIX)
 
 &gt; 
 &gt; If so, then the only issue to be addressed is unsuk's regarding
 &gt; non-linux systems, which could be done by doing a uname check
 &gt; similary to the one that is already in the file:
 &gt; HOST=`uname`
 &gt; if [ &quot;$HOST&quot; == &quot;Linux&quot; ]; then
 &gt; OS=&quot;linux-x86&quot;
 &gt; elif [ &quot;$HOST&quot; == &quot;Darwin&quot; ]; then
 &gt; OS=&quot;darwin-x86&quot;
 &gt; and change LD_LIBRARY_PATH to DYLD_LIBRARY_PATH, assuming those are
 &gt; the only two options about which we need to worry.
|Patch Set 2: Code-Review+1
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(4 comments)
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

Let's get this in first.
|Patch Set 2: Code-Review+2
|Patch Set 3:

(7 comments)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

Sorry, I don't have +2.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

Thanks!
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2

Isn't that linux doesn't care about &quot;b&quot; or &quot;t&quot;?
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(7 comments)
|Patch Set 1:

(2 comments)
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 2:

(4 comments)
|Uploaded patch set 4.
|Patch Set 5: Code-Review+2
|Patch Set 6:

NOt sure what happened: it seems all changes in Patch Set 5/4/3 are reverted in PS6.
|Patch Set 7: Code-Review+2
|Patch Set 8: Code-Review+2
|Patch Set 8:

Sorry, I didn't see it had been rebased again.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

Unfortunately I have to step back:
It turns out many static modules use libselinux's header files but not explicitly establish the dependency with LOCAL_STATIC_LIBRARIES.
SO I just remove the troubled line that causes the warning.
|Patch Set 5:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1:

&gt; Delivered to devtools, we 'have to'
 &gt; 
 &gt; The following blame in system/core/libcutils/Android.mk has me
 &gt; concerned this is all wrong-minded:
 &gt; 
 &gt; c796ed97 (Ying Wang                       2013-04-10 17:27:35 -0700
 &gt; 132) # TODO: remove liblog as whole static library, once we don't
 &gt; have prebuilt that requires
 &gt; c796ed97 (Ying Wang                       2013-04-10 17:27:35 -0700
 &gt; 133) # liblog symbols present in libcutils.
 &gt; c796ed97 (Ying Wang                       2013-04-10 17:27:35 -0700
 &gt; 134) LOCAL_WHOLE_STATIC_LIBRARIES := libcutils liblog

Yes, there was an effort to split liblog out of libcutils.
But it turned out there were third-party prebuilt shared libraries referencing liblog symbols but with only libcutils in their elf dynamic section. Not sure if there are still such prebuilts in the tree.
|Patch Set 1:

&gt; - Do we want to be the evil empire today and drop LOCAL_WHOLE_STATIC_LIBRARIES
 &gt; from libcutils shared library target build? Using it would be an
 &gt; admission that the split was wrong-minded.
I'd like to do that . But it would run into runtime error if there is still prebuilt that was linked against only libcutils but using liblog symbols.
 &gt; - In this CL, it appears ok to have libcutils, and/or liblog, added
 &gt; separately on an as-need basis. This is the side-effect of the
 &gt; split.
 &gt; - Do we (the royal we) _want_ to get a cleanup where include
 &gt; libcutils.so, liblog.so and others in the development tools
 &gt; packaging to stop using static libraries on the associated tools?
 &gt; (at this point, does not block this CL, merely gets a vein
 &gt; throbbing in Elliott's forehead).
SGTM
|Patch Set 1:

&gt; &gt; - Do we want to be the evil empire today and drop
 &gt; LOCAL_WHOLE_STATIC_LIBRARIES
 &gt; &gt; from libcutils shared library target build? Using it would be an
 &gt; &gt; admission that the split was wrong-minded.
 &gt; I'd like to do that . But it would run into runtime error if there
 &gt; is still prebuilt that was linked against only libcutils but using
 &gt; liblog symbols.
 &gt; &gt; - In this CL, it appears ok to have libcutils, and/or liblog,
 &gt; added
 &gt; &gt; separately on an as-need basis. This is the side-effect of the
 &gt; &gt; split.
 &gt; &gt; - Do we (the royal we) _want_ to get a cleanup where include
 &gt; &gt; libcutils.so, liblog.so and others in the development tools
 &gt; &gt; packaging to stop using static libraries on the associated tools?
 &gt; &gt; (at this point, does not block this CL, merely gets a vein
 &gt; &gt; throbbing in Elliott's forehead).
 &gt; SGTM

Btw, the internal bugs related to splitting liblog are:
https://b.corp.google.com/u/0/issues/8580410
https://b.corp.google.com/u/0/issues/8587800
|Patch Set 1:

(1 comment)
|Patch Set 1:

&gt; danalbert: is this true? i thought you had to add the shared libc++
 &gt; recently?

There was a hack that added libc++.so to the otatools package. If we have to add more, we need do it in a better way. I'll make a change for that.
|Patch Set 1:

https://android-review.googlesource.com/#/c/145960/
With that CL, you should be able to add more host shared libraries to the package easily.
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

If it's dependency of zipalign, you'll make it buildable in windows build too. You'll need to add external/libselinux to sdk/build/windows_sdk_whitelist.mk.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

&gt; Q: _who_ is responsible for the SDK tools, such that they would be
 &gt; interested in one _less_ requirement for STATIC library references
 &gt; to this tool?

The SDK team, i.e. Xav's team. I don't know it's exactly who, though.
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1:

You may need to fix unbundled branch by adding external/compiler-rt to their repo manifest.
|Patch Set 1: Code-Review+2
|Patch Set 1:

&gt; &gt; You may need to fix unbundled branch by adding external/compiler-rt
 &gt; &gt; to their repo manifest.
 &gt; 
 &gt; Why don't they need it already if it's used on the target?

Their target code may be java only, while they still need to build host tools like aprotoc.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

The pipeline is much longer: we'll use the the class files processed by emma and proguard, if they are enabled.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2

I agree. If we had LOCAL_EXPORT_C_INCLUDE_DIRS early, we wouldn't need LOCAL_COPY_HEADERS and get into such situation.
|Patch Set 2: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

Thanks for taking this!
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 3:

There are many other modules (host tools etc) defined in prebuilts/sdk. I am wondering how they will be added with the python script.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

&gt; fyi: this isn't the only such error. there are very many :(

In which file?
I only saw error in this file and could be fixed by this CL.
Note that if the package is referenced only in the method body, javadoc doesn't care it.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2

(2 comments)

The CL itself LGTM.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review-2

This will break many testing tools.
You can define the new names as alias of the old names.
|Patch Set 1:

Aha, I was thinking you guys must be graduates of mathematics.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

LGTM
|Patch Set 1:

LGTM
|Patch Set 1:

I remember the build system needs the include path to be $(TOP) to work properly. I'll find the previous discussion and forward to you.
|Patch Set 1: Code-Review+1

So we can't build icu4j as static library and link it in core-libart.jar, because the circular dependency between them.
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1

Hmm, as far as I can recall, that flag has always been set in the core build system.
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

Yes, looks like we need to add it to only runtime_libart.mk.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review-2

This won't work when you switch between build variants.
Build variants aren't meant to distinguish between debug/release build types. 
There are TARGET_BUILD_TYPE for that purpose. However in practice the build system always assumes  TARGET_BUILD_TYPE to be &quot;release&quot; - even if you explicitly set it to &quot;debug&quot;, the release flags are always applied. This is intentional. 
Similar attempts have been made several times. I can forward you the explanation from the original author of the build system.
|Patch Set 2:

Isn't it the same?
Could you give an example it should return 1 but return 0?
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

LGTM
That's correct: ANDROID_BUILD_TOP is a shell variable set up by lunch. It's not required to run envsetup.sh and lunch to do a build.
On the other hand, all build commands are run from the root of the source tree.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1

The Android.mk change LGTM.
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review-1
|Patch Set 3: Code-Review+1
|Patch Set 1:

&gt; This patchset was reverted in change: I64b868cdfb3571de5e8b01e4257b5dfa9ee44d0d

Sorry, I didn't see your comment on Mar 20.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

Yes, BOARD_HAS_TF_CRYPTO_SST isn't set for grouper. That means keymaster/Android.mk has never been used for grouper.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2

Feel free to submit this and other changes.
They are huge changes and I need more time to take close look.
|Patch Set 2: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2:

&gt; Hi Ying,
 &gt; 
 &gt; Another patch https://android-review.googlesource.com/#/c/127930/
 &gt; in ndk did the same thing, but it uses different flags &quot;-f elf64,
 &gt; -f elf32 -m x86&quot;.

I am not expert of these flags. +Andrew
Feel free to upload new change, if we need to change any of the flags.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

In PS2 we use PRODUCT_SYSTEM_SERVER_JARS to identify system server jars and build only 64-bit odex files for them.
With PS2, we don't need to change the system server jar's Android.mk.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Abandoned

The build system knows what are system server jars. So we don't need this change now.
|Patch Set 1: Code-Review-1

Yes, it's for unbundled apps build.
I believe when we changed it to use the NDK when NDK only supports arm and also only some unbundled apps for arm required this project.
|Patch Set 1:

&gt; &gt; Yes, it's for unbundled apps build.
 &gt; &gt; I believe when we changed it to use the NDK when NDK only
 &gt; supports
 &gt; &gt; arm and also only some unbundled apps for arm required this
 &gt; &gt; project.
 &gt; 
 &gt; Ok. This raises couple of questions. Setting LOCAL_SDK_VERSION here
 &gt; results in the modules always using the prebuilt ndk version of
 &gt; libc regardless of the target type. Is this the intended behaviour.
 &gt; There's also places where the LOCAL_SDK_VERSION != 9 (
 &gt; external/giflib ) although this looks like more a mistake than
 &gt; intentional
LOCAL_SDK_VERSION is set to the lowest api level the library can be built against.
 &gt; Are unbundled builds indicated through TARGET_BUILD_APPS being set?
Yes.
 &gt; If so I think we would probably benefit from adding a check for
 &gt; that before setting LOCAL_SDK_VERSION.
We could do that. 
But I don't see  problem if we link against the NDK even for platform build.

 &gt; 
 &gt; .... This all manifested itself as I have created a Tiny manifest
 &gt; for the upstream toybox project but simply removing prebuilts/ndk
 &gt; will break the arm target builds
 &gt; 
 &gt; https://github.com/trevd/android_vendor_toybox
Why do you need to remove prebults/ndk?
With LOCAL_SDK_VERSION, a module can built merely against the NDK. That usually means you need much less git projects in your manfiest.
|Patch Set 2:

&gt; &gt; Uploaded patch set 2.
 &gt; 
 &gt; Obviously this patch address the issue in zlib. However there's
 &gt; around 90ish other instance where LOCAL_SDK_VERSION appears to be
 &gt; used the mark a module as available to unbundled build types ( e.g
 &gt; to use the ndk ) . There's no doubt a cleaner solution to be had by
 &gt; addressing this behaviour in the build system

We can force to build against the platform for platform build in the core build system.
Nick, do you think if that's necessary?
|Patch Set 2: Code-Review+1

I have filed a bug for a core build system change.
Meanwhile this CL LGTM.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)
 &gt; 
 &gt; won't we get a merge conflict if we remove the dead comment in this
 &gt; change, given that we didn't internally? might be easier for
 &gt; everyone if we just have a follow-up change?
done
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2

Thanks!
|Patch Set 2:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2:

&gt; 11 hours on job. Several aosp/goog master build sdk, mac and win
 &gt; failures to be fixed. Have to pick up my wife from the airport.
 &gt; Must leave. Will check in time and logistics permitting with N9 at
 &gt; airport to see review comments and hopefully adjust/clear this
 &gt; build fix.
 &gt; 
 &gt; Not sure if this Android.mk needs a complete rewrite or if the
 &gt; heuristics in place is borken or not based on the one comment.
Feel free to submit this change. I can clean it up a little bit later.
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2:

(5 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

&gt; I'm not sure i understand the &quot;dummy&quot; terminology. Why is this a
 &gt; dummy ? wouldn't tempzip or intermediatezip be more intention
 &gt; revealing names ?

That's because zip or jar doesn't support to build an empty zip file, so we need to add a dummy file to the zip file and then delete it from the zip file immediately.
|Patch Set 4:

(5 comments)
|Patch Set 6:

(2 comments)
|Patch Set 7: Code-Review+2
|Patch Set 9:

(2 comments)
|Patch Set 9:

&gt; &gt; do you really need pattern matching for zipalign ? won't it be
 &gt; &gt; easier for the build system (or wrapper script) to expand
 &gt; wildcards
 &gt; &gt; instead ?
 &gt; 
 &gt; I believe it will be less clearer in build system; but I do not
 &gt; really know how to write makefiles.
 &gt; 
 &gt; &gt; I'm just trying to avoid more code in zipalign, which
 &gt; &gt; suffers from a distinct lack of unit tests to begin with...
 &gt; 
 &gt; I think they are better of in zipalign. I can add some unit test to
 &gt; as a separate change...

For an apk built from source, yes the build system knows what so files will be added to the apk;
But for a prebuilt apk, the build system will need to get the information from the prebuilt itself for example by running &quot;unzip -l&quot;.
I prefer to doing it in zipalign to avoid this extra complication.
|Patch Set 10:

&gt; (1 comment)

How about adding a dedicated flag, which accepts integer alignment as parameter, just for aligning the so files?
That way we can combine the two calls to zipalign.
|Patch Set 14:

Please also update the README.txt file.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

Dan is moving gdbclient out of envsetup.sh:
https://android-review.googlesource.com/131860
https://android-review.googlesource.com/131831
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 1:

(1 comment)

Otherwise LGTM
|Patch Set 2: Code-Review+1
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1

OK, I don't see other easy way to replace it.
|Uploaded patch set 1.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 4:

&gt; Add DO NOT MERGE?

done
|Patch Set 4: Verified+1
|Patch Set 1: Code-Review+2

When will you submit this change?
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

Thanks!
|Patch Set 3: Code-Review-2

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 5: Code-Review+1

I'd like Ed to take a look too.
|Patch Set 6: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

I agree with Narayan.
If you really want to install an apk without build system touching it in very rare case, you can use PRODUCT_COPY_FILES to install it.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

&gt; is there a bug for the real fix for this?

I don't know what is a real fix. 
Lots of things will break if we disallow binary
linked against NDK with indirect dependency on platform libraries.
It seems only the latest arm64 and mips linker changed their behavior to do such transitive symbol check.
Dan and I have discussed before. We didn't see a feasible better fix.

 &gt; is there a bug for the real fix for this?
|Patch Set 1:

&gt; davidxl: seems like we're missing a linker option here. (or i'm
 &gt; misunderstanding something.) we *do* want the linker to warn us if
 &gt; the .so we're creating is missing dependencies, but we *don't* want
 &gt; it to transitively check the libraries we're linking against.
I believe &quot;--allow-shlib-undefined&quot; just does what you described.
The option name may be a little confusing.
I just tested adding a unresolvable symbol to libjpeg and the linker did fail with that flag.

See the manual page &quot;man ld&quot;:

--allow-shlib-undefined
       --no-allow-shlib-undefined
           Allows or disallows undefined symbols in shared libraries.  This switch is similar to --no-undefined except that it determines the behaviour when the undefined symbols are in
           a shared library rather than a regular object file.  It does not affect how undefined symbols in regular object files are handled.

           The default behaviour is to report errors for any undefined symbols referenced in shared libraries if the linker is being used to create an executable, but to allow them if
           the linker is being used to create a shared library.

           The reasons for allowing undefined symbol references in shared libraries specified at link time are that:

           Â·   A shared library specified at link time may not be the same as the one that is available at load time, so the symbol might actually be resolvable at load time.

 &gt; 
 &gt; aiui, the default is transitive checking and this option means no
 &gt; checking, and there's no way to get what we want?
 &gt; 
 &gt; (the problem is that the system libc and the NDK libc don't contain
 &gt; the same set of symbols. there's more in the system libc, and a
 &gt; system library might refer to these, but your NDK-built library
 &gt; can't (but it can refer to a system library that transitively pulls
 &gt; in the system libc symbols).)
|Patch Set 1:

&gt; &gt; davidxl: seems like we're missing a linker option here. (or i'm
 &gt; &gt; misunderstanding something.) we *do* want the linker to warn us
 &gt; if
 &gt; &gt; the .so we're creating is missing dependencies, but we *don't*
 &gt; want
 &gt; &gt; it to transitively check the libraries we're linking against.
 &gt; I believe &quot;--allow-shlib-undefined&quot; just does what you described.
 &gt; The option name may be a little confusing.
 &gt; I just tested adding a unresolvable symbol to libjpeg and the
 &gt; linker did fail with that flag.
 &gt; 
 &gt; See the manual page &quot;man ld&quot;:
 &gt; 
 &gt; --allow-shlib-undefined
 &gt; --no-allow-shlib-undefined
 &gt; Allows or disallows undefined symbols in shared libraries.  This
 &gt; switch is similar to --no-undefined except that it determines the
 &gt; behaviour when the undefined symbols are in
 &gt; a shared library rather than a regular object file.  It does not
 &gt; affect how undefined symbols in regular object files are handled.
 &gt; 
It does not affect how undefined symbols in regular object files are handled.
 &gt; The default behaviour is to report errors for any undefined symbols
 &gt; referenced in shared libraries if the linker is being used to
 &gt; create an executable, but to allow them if
 &gt; the linker is being used to create a shared library.
 &gt; 
 &gt; The reasons for allowing undefined symbol references in shared
 &gt; libraries specified at link time are that:
 &gt; 
 &gt; Â·   A shared library specified at link time may not be the same as
 &gt; the one that is available at load time, so the symbol might
 &gt; actually be resolvable at load time.
 &gt; 
 &gt; &gt;
 &gt; &gt; aiui, the default is transitive checking and this option means no
 &gt; &gt; checking, and there's no way to get what we want?
 &gt; &gt;
 &gt; &gt; (the problem is that the system libc and the NDK libc don't
 &gt; contain
 &gt; &gt; the same set of symbols. there's more in the system libc, and a
 &gt; &gt; system library might refer to these, but your NDK-built library
 &gt; &gt; can't (but it can refer to a system library that transitively
 &gt; pulls
 &gt; &gt; in the system libc symbols).)
|Patch Set 1:

LGTM
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+1

then we will be good with only this change.
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

Can we submit this CL now?
I don't see submit button...
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2

ok, I was trying to avoid a new LOCAL variable.
But it's fine with me if we really need it.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

&gt; If this works, it is fine with me. I just want to make sure that
 &gt; bcc_compat/llvm-rs-cc end up in the final windows package.

Yes, nothing changed to the final windows p ackage.
|Patch Set 1: Code-Review+2
|Patch Set 1:

It's not a good practice.
I'd suggest to include just external/boringssl, and submit the change only after external/boringssl is added to the manifest.
|Patch Set 1:

The plan sounds good.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

I've tested this fixed master Java breakage on Mac.
|Patch Set 1:

Previously we add &quot;ifeq ($(HOST_OS),linux)&quot; everywhere hostdex module is defined. This just tries to do it in a central place. We never support hostdex on Mac, do we?
|Patch Set 2: Code-Review+1

But we still want to delete empty directories left after we delete all the class files. I am thinking writing a python script for that, for I couldn't find zip option to do such thing.
This CL can be a workaround, if it blocks something.
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(3 comments)
|Patch Set 3: Code-Review+2
|Patch Set 1:

Chih-hung, you added the wrong Ying Wang.
My ldap is wangying@google.com.
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

LOCAL_EXPORT_C_INCLUDE_DIRS is the variable. This change is switching to LOCAL_EXPORT_C_INCLUDE_DIRS so we don't need to hardcode the include path in the user Android.mks any more. Unfortunately it's not used previously so we need to clean up all the references of &quot;external/openssl&quot; in LOCAL_C_INCLUDES.
mgrep shows a dozen or so projects with such references.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+1

LGTM but I'd like Elliott to take a look too.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

PS3 with all jack-related stuff removed and conflict resoved.
Narayan, could you help test it with the apache-http hacks reverted?
Thanks!
|Patch Set 3: Verified+1
|Uploaded patch set 4.
|Patch Set 4: Verified+1

Updated with ignoring &quot;Nothing to do&quot; error.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 3:

I agree with Dan. If possible we should fix the Android.mks. (Eventually after we switch to clang for everything, we should remove the filtering from the core build system).
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1

I'd like Andrew to take another look.
|Patch Set 4: Code-Review+2
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Verified+1 Code-Review+2

Rebased.
|Patch Set 1:

I don't understand: those flags were checked in a couple of days ago. But why it starts breaking the build only today?
|Patch Set 1: Code-Review+2

Oh, maybe that's because we didn't really have a host module built by clang before your today's change.
|Patch Set 1:

It seems there are more issues with host clang build on Mac. Can we revert your change to enable LOCAL_CLANG for llvm/clang for now?
|Patch Set 2: Code-Review+2
|Patch Set 2:

Add the number to the commit message?
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Verified+1 Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 4:

Yes, I am working on core build system fix.
Hopefully I'll get it done in a couple of days.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

It's great if it also works on Mac.
(Yes, I remember Dan tried similar approach but it didn't work on Mac.)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

Since we don't have TARGET_CPU_VARIANT specific compilation flags in build/core/combo/arch/mips[64]/, this change only affects --instruction-set-variant of dex2oat.
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2

Yes, that's a bug introduced by https://android-review.googlesource.com/#/c/114130/1
|Patch Set 1: Code-Review+2
|Patch Set 3:

(3 comments)
|Patch Set 3:

(3 comments)
|Patch Set 4: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+1

Chih-hung's suggestion looks good too, if we never want to support mixed clang/gcc in multi-arch build.
|Patch Set 3: Code-Review+1
|Abandoned

We have switched to prebuilt emulator in prebuilts/android-emulator/
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review-1

(1 comment)
|Removed the following approvals:

* Code-Review-1 by Ying Wang &lt;wangying@android.com&gt;

|Abandoned
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review-1

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

Brian, do you have any concern about this cleanup?
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1

With https://android-review.googlesource.com/#/c/118287/1 we have removed DALVIK_VM_LIB and David's fix isn't needed any more.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Abandoned
|Patch Set 2: Code-Review+1
|Patch Set 1:

Yes, I think by default it's on.
|Patch Set 1:

It shouldn't be built in win_sdk build. Where did you see it built it?
Projects seen in win_sdk build are white-listed in development/build/windows_sdk_whitelist.mk and sdk/build/windows_sdk_whitelist.mk
|Patch Set 1:

Oh, that breakage isn't in the MUSE_MINGW windowns build actually. The win_sdk build target actually calls make twice: the first make is just a linux SDK build, which recursively do a MINGW build of only the windows SDK tools. The breakage you found happened in the first make:
out/host/linux-x86/obj32/EXECUTABLES/valgrind_intermediates/coregrind/m_debuglog.o
(You can see the output is linux binary.)

It breaks the win_sdk build because the build server is running checkbuild on this target.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

I assume module apachehttp will be added in another change.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 8:

That's because this change doesn't trigger rebuild of $(export_includes).
In build/core/binary.mk, we have:
$(export_includes) : $(LOCAL_MODULE_MAKEFILE)
LOCAL_MODULE_MAKEFILE here evaluates to external/openssl/Android.mk, not including the modified config makefiles here.
We need a cleanspec in that case.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 6: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

Dmitriy, as we talked yesterday, I think the better fix is to include run-on-host.mk only once, for example from the top bionic/Android.mk.
|Patch Set 1:

LTGM
|Patch Set 2:

I have a bug https://b.corp.google.com/issue?id=18465297 to clean up the build system support of libdvm. After that is done, I think we can set DALVIK_VM_LIB to always libart and you don't need to check if these variables are set or not.
I plan to get it done this week.
On the other hand, I see no problem with this change.
|Patch Set 1:

https://android-review.googlesource.com/#/c/116575/ will make this unnecessary.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

Thanks for cleaning up!
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 3: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

LOCAL_EXPORT_C_INCLUDES_DIRS was added a couple of releases ago. It's definitely preferred to use LOCAL_EXPORT_C_INCLUDES_DIRS over hard-coding the path in the user Android.mks.
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(4 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 1:

What build command the art automated build uses is broken?
|Patch Set 1:

Ah ok, I didn't expect you to directly &quot;make &lt;symlink&gt;&quot;.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

$(hide) added.
I'll take care of other cases in the tree.
|Patch Set 2: Verified+1
|Uploaded patch set 3.
|Patch Set 3: Verified+1 Code-Review+2

Clean rebase.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

(3 comments)

LGTM, but it would be better to remove the dangling PRIVATE_LIBCXX (and the cruft left over in ancient time)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1

I'd like David to take a look before merging the patchset.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+1
|Patch Set 3: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

You need my other CL as well:
https://android-review.googlesource.com/98653
|Patch Set 1:

We really want to control the number of LOCAL_* variables. We've got ~200 (build/core/clear_vars.mk) so far. More LOCAL_* variables, it's more confusing to the users. Also it introduce smakefile loading overhead. I'll add a new LOCAL_* variable only if you expect it's an option will be widely used.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review-1

We used to have a flag BUILD_TINY_ANROID, which is now replaced by a product build/target/product/embedded.mk.
You should just create a product config that inherits embedded.mk.
|Patch Set 1: Code-Review+2

You don't need to. A module will bring in all the dependencies in LOCAL_SHARED_LIBRARIES.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+1

Here is the context why we had to include libgcc twice:
https://b.corp.google.com/issue?id=8247455
Want to make sure this change won't break that.
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

+ctate, who reported the original Mac malfunction.
Did you test it on a Mac (perhaps both remotely and locally)?
I can try it if you haven't done it yet.
|Patch Set 1:

It prints literally on Mac:
\e[0;32m#### make completed successfully (3 seconds) ####\e[00m
Sounds good to me to do the decoration on only Linux.
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

I don't know why your lost +2. I've added you back.
|Patch Set 1:

(3 comments)

Also please remove all the .diff files.

This is great. Thanks for tidying it up!
|Patch Set 3: Code-Review+2
|Patch Set 1:

(2 comments)

Also I don't see any chance that a device doesn't have ro.product.device. ro.product.device comes from makefile variable TARGET_DEVICE, which must be set by the product configuration, otherwise the build system is unable to locate the BoardConfig.mk.
How did you guys see such case?
|Patch Set 1: Code-Review-1
|Patch Set 1:

Oh, yes, for sprout ro.product.device will come from oem.img, which isn't necessarily flashed on a device. But ro.hardware isn't necessarily the same as TARGET_DEVICE in the build system. Maybe we can use ro.hardware only if ro.product.device isn't avaible.
Or maybe we should switch to &quot;DEVICE=$(get_build_var TARGET_DEVICE)&quot; for both tapas and platform build. That means you need to run lunch before running gdb_client, to make sure the lunch target is the device you want to debug.
|Patch Set 1:

The problem is that you can install to device B a binary built for device A, such as tapas build. You need a way to tell adb_client what device A is.
|Patch Set 1:

As I said in the comment, it can be other arch variants. The name may also change in the future. To check if it's tapas build or not, you are already dependent on the build environment, against your purpose of &quot;make lunch target irrelevant&quot;. So if you want to support gdb_client for binaries built by tapas, it won't be worse to get  $DEVICE from the build system.
|Patch Set 1:

Yes.
|Patch Set 1:

To be clear, a &quot;tapas user&quot; means the user has run tapas before running gdbclient.
|Patch Set 2:

(1 comment)

Otherwise LGTM
|Patch Set 3: Code-Review+2
|Patch Set 1:

I guess that's because the PDK repo manifest doesn't include the new gcc git project. Just file a bug to android-build-team@ to add the project instead of reverting.
|Patch Set 1:

I just uploaded a CL to add the project.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)

I have been hesitant to add such dependency, because it usually means lots of unnecessary rebuild when makefile change. For example, if frameworks/base/Android.mk is modified, almost all Java code will be recompiled with this change.
 &gt; Okay, this one is a little less aggressive (and actually behaves
 &gt; properly). Turns out I can't rely on the original makefile being
 &gt; the second to last element in MAKEFILE_LIST, but apparently there's
 &gt; a LOCAL_MODULE_MAKEFILE that does what I need it to.
 &gt; 
 &gt; SInce LOCAL_MODULE_MAKEFILE is updated on a call to my-dir, this
 &gt; won't work properly if someone includes a makefile that calls
 &gt; my-dir, then defines more modules in the outer makefile. There are
That's fine, if we don't clear LOCAL_MODULE_MAKEFILE. (We shouldn't do that anyway.)
$(my-dir) should be called only once in an Android.mk before including any other makefile. By convention it's the first effective line in an Android.mk.
But yes, LOCAL_MODULE_MAKEFIILE would be incorrect if an Android.mk doesn't call $(my-dir) at all. I'd like treat that like a user error.


 &gt; other issues with this pattern, so if there are uses of this we
 &gt; should just fix them.

 &gt; I would love a way to make each target depend on the command line
 &gt; that builds it, rather than having to depend on the makefile that
 &gt; defines it (since that means each target also depends on the build
 &gt; flags of the other modules in the file...). Ninja does this, but I
 &gt; don't think there is a way to work it in to our system without
 &gt; significant effort.


 &gt; Okay, this one is a little less aggressive (and actually behaves
 &gt; properly). Turns out I can't rely on the original makefile being
 &gt; the second to last element in MAKEFILE_LIST, but apparently there's
 &gt; a LOCAL_MODULE_MAKEFILE that does what I need it to.
 &gt; 
 &gt; SInce LOCAL_MODULE_MAKEFILE is updated on a call to my-dir, this
 &gt; won't work properly if someone includes a makefile that calls
 &gt; my-dir, then defines more modules in the outer makefile. There are
 &gt; other issues with this pattern, so if there are uses of this we
 &gt; should just fix them.

Makefile doesn't have built-in mechanism to track build flag changes.
I used to make a small change to track compiler flag change:
https://googleplex-android-review.googlesource.com/#/c/314852/
But it increased makefile parse time by around 25% in my test, presumably by the call of $(shell md5sum), so I didn't get it in.
|Patch Set 2:

&gt; &gt; I have been hesitant to add such dependency, because it usually
 &gt; &gt; means lots of unnecessary rebuild when makefile change. For
 &gt; &gt; example, if frameworks/base/Android.mk is modified, almost all
 &gt; Java
 &gt; &gt; code will be recompiled with this change.
 &gt; 
 &gt; This could be scaled back more if need be. We could remove it from
 &gt; the java.mk and friends (I'm not familiar with the Java side of our
 &gt; build system, so I don't know if it's necessary there). I think the
 &gt; important ones are binary.mk and (host_)?shared_library_internal.

 &gt; &gt; I have been hesitant to add such dependency, because it usually
 &gt; &gt; means lots of unnecessary rebuild when makefile change. For
 &gt; &gt; example, if frameworks/base/Android.mk is modified, almost all
 &gt; Java
 &gt; &gt; code will be recompiled with this change.
 &gt; 
 &gt; This could be scaled back more if need be. We could remove it from
 &gt; the java.mk and friends (I'm not familiar with the Java side of our
 &gt; build system, so I don't know if it's necessary there). I think the
 &gt; important ones are binary.mk and (host_)?shared_library_internal.

Sounds good.
|Patch Set 2:

I worried about frameworks/base/Android.mk because it's gigantic. But you guys may be right: I just checked the git log and it seems the change wasn't as frequent as I had thought.
|Patch Set 2:

I am fine with the dependency for Java now. But you need to address my comments in clear_vars.mk.
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2

Cool!
I was wondering if they were still in use when I added the multilib stuff.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

No, this will break unbundled build. srhines has checked in prebuilt libc++ to prebuilts/sdk/tools.
|Patch Set 1:

This doesn't build on Mac:
prebuilts/clang/darwin-x86/host/3.5/bin/clang++ -I bionic -I external/libcxx/include -I external/llvm -I external/llvm/include -I external/llvm/device/include -I external/libcxx/include -I external/llvm/lib/MC -I out/target/product/generic/obj/STATIC_LIBRARIES/libLLVMMC_intermediates -I out/target/product/generic/gen/STATIC_LIBRARIES/libLLVMMC_intermediates -I libnativehelper/include/nativehelper  -isystem system/core/include -isystem hardware/libhardware/include -isystem hardware/libhardware_legacy/include -isystem hardware/ril/include -isystem libnativehelper/include -isystem frameworks/native/include -isystem frameworks/native/opengl/include -isystem frameworks/av/include -isystem frameworks/base/include -isystem out/target/product/generic/obj/include -isystem bionic/libc/arch-arm/include -isystem bionic/libc/include -isystem bionic/libc/kernel/uapi -isystem bionic/libc/kernel/uapi/asm-arm -isystem bionic/libm/include -isystem bionic/libm/include/arm -c    -fno-exceptions -Wno-multichar -msoft-float -ffunction-sections -fdata-sections -funwind-tables -fstack-protector -Werror=format-security -D_FORTIFY_SOURCE=2 -fno-short-enums -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -include build/core/combo/include/arch/linux-arm/AndroidConfig.h -I build/core/combo/include/arch/linux-arm/ -DANDROID -fmessage-length=0 -W -Wall -Wno-unused -Winit-self -Wpointer-arith -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -DNDEBUG -g -Wstrict-aliasing=2 -DNDEBUG -UDEBUG  -D__compiler_offsetof=__builtin_offsetof -Werror=int-conversion -Wno-unused-command-line-argument -nostdlibinc  -target arm-linux-androideabi    -target arm-linux-androideabi -Bprebuilts/gcc/darwin-x86/arm/arm-linux-androideabi-4.8/arm-linux-androideabi/bin    -fvisibility-inlines-hidden -DANDROID -fmessage-length=0 -W -Wall -Wno-unused -Winit-self -Wpointer-arith -Wsign-promo -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -DNDEBUG -UDEBUG  -nostdlibinc  -target arm-linux-androideabi   -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing  -fno-rtti   -DANDROID_ENGINEERING_BUILD -DANDROID_TARGET_BUILD -finline-functions -D_GNU_SOURCE -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -O2 -fomit-frame-pointer -Wall -W -Wno-unused-parameter -Wwrite-strings -Dsprintf=sprintf -fno-exceptions -fPIC -D_USING_LIBCXX   -fno-rtti -Woverloaded-virtual -Wno-sign-promo -std=c++11  -MD -MF out/target/product/generic/obj/STATIC_LIBRARIES/libLLVMMC_intermediates/MCInstPrinter.d -o out/target/product/generic/obj/STATIC_LIBRARIES/libLLVMMC_intermediates/MCInstPrinter.o external/llvm/lib/MC/MCInstPrinter.cpp
ld: library not found for -lgcc_s
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [out/host/darwin-x86/obj/EXECUTABLES/llvm-tblgen_intermediates/llvm-tblgen] Error
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: -Code-Review

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

The build system sets HOST_PREFER_32_BIT=true when you run &quot;make sdk&quot;.
Tested with sdk build (lunch sdk-eng &amp;&amp; make sdk.)
|Patch Set 1:

LGTM. But TARGET_CPU_SMP is always set. see build/core/config.mk:519
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 4: Code-Review+2
|Patch Set 5:

I don't like all those checks scattered in the files. Can we get the existing cases fixed and ask in your announcement the people not to specify the libraries ?
|Patch Set 5:

In the other CL I was asking to get them fixed.
That's fine. I'll get it cleaned when I have time.
|Patch Set 5: Code-Review+2
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 3: Code-Review+1
|Patch Set 3: -Code-Review
|Patch Set 3: Code-Review-2

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(3 comments)

Otherwise LGTM
|Patch Set 5: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

There are references of LEGACY_USE_JAVA6 also in build/core/combo/javac.mk, build/core/config.mk and build/envsetup.sh.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Yes, that's right.
But we already have sdk 20 in the internal source tree long time ago. It just didn't merge to aosp. I am not sure if this change will conflict with the future merge. +Bill and Qiwen.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 2:

It's not news ccache doesn't work well with clang (see https://android-review.googlesource.com/#/c/102928/).
Andrew's proposal sounds good to me if it works.
|Patch Set 2:

Assuming we can't remove '-Wa,--noexecstack' from the cflags, I made this change https://android-review.googlesource.com/111311 according to http://petereisentraut.blogspot.com/2011/05/ccache-and-clang.html. It worked in my tests. But I am not sure if &quot;-Qunused-arguments&quot; would hide real useful warnings/errors.
According to http://clang.llvm.org/docs/UsersManual.html: &quot;-Qunused-arguments    Don't emit warning for unused driver arguments&quot;
|Patch Set 2:

You don't need this any more. I have fixed it in the build system.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

Fixed typo in commit message in patchset 2.
|Uploaded patch set 3.
|Patch Set 3:

PS3 takes srhines's suggestion. Verified: -Wno-unused-command-line-argument works as well.
|Patch Set 3: Verified+1
|Patch Set 3: Verified-1

Oh, gcc doesn't recognize &quot;-Wno-unused-command-line-argument&quot;:
cc1: error: unrecognized command line option &quot;-Wno-unused-command-line-argument&quot; [-Werror]
cc1: all warnings being treated as errors

So It seems  I need to add to the clang cflags only.
Btw, what's the difference between -Wno-unused-command-line-argument and -Qunused-arguments?
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Verified+1 Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

Mac doesn't have utility realpath.
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

OK, sgtm.
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 3:

(5 comments)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 5: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 2:

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 4: -Code-Review
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 5:

(1 comment)
|Uploaded patch set 1.
|Patch Set 2: Verified+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

(1 comment)

+srhines and andrewhsieh
Andrew used to add code static analysis (WITH_SYNTAX_CHECK) to the build system.
Not sure if this can be covered by that?
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 5:

(1 comment)
|Patch Set 7: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)

LG.
Yes, it's leftover when we built clang from source.
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2

LG
It seems you need to rebase your client, since I saw some of the lines were already added in your previous CL https://android-review.googlesource.com/#/c/109111/
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2

I just clicked the rebase button on gerrit.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review-1

USE_CLANG_PLATFORM_BUILD is just for that purpose.
See build/core/binary.mk
|Patch Set 1:

LOCAL_CLANG takes precedence over USE_CLANG_PLATFORM_BUILD.
|Patch Set 1:

Yes.
|Patch Set 1: Code-Review+2
|Patch Set 1:

Shouldn't it also be controlled by a global variable?
For Java coverage, we use EMMA_INSTRUMENT, which by default is disabled.
|Patch Set 1:

NATIVE_COVERAGE sounds good to me.
You may want to follow the logic of setting LOCAL_EMMA_INSTRUMENT in package_internal.mk: disable it only if a module explicitly sets `LOCAL_COVERAGE := false`
|Patch Set 2:

(1 comment)

You need to do clean build when you flip the global flag.
|Patch Set 2:

Yes, put a note where you put the instructions of using NATIVE_COVERAGE/LOCAL_NATIVE_COVERAGE. Also you need to notify the build team to disable incremental build when you set up a build target with this flag on on the build server.
|Patch Set 2:

(2 comments)
|Patch Set 3:

(1 comment)

Otherwise LGTM
|Patch Set 4: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

I guess this won't do what you want.
What makes you update prebuilt aapt in the aosp branch?
If you are in unbundled branch, you should be using the internal lmp-dev prebuilt, which has been daily updated.
|Patch Set 5: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick.
|Patch Set 2:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 3: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review-1

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 4: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

It should be just alias of aosp_arm64.mk and isn't necessary to add. We intended to deprecate the full_* products and replace them with aosp_*. You can see what other aosp_* products do is just inheriting the corresponding full_* product.
Sorry for the confusion.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)

Thanks for doing this!
|Patch Set 2: Code-Review+2
|Patch Set 2: -Code-Review
|Patch Set 2:

(1 comment)

Thanks for doing this!
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick.
|Patch Set 1:

(1 comment)

Otherwise LGTM
|Patch Set 2: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 2:

It's not a heavy module. Not a big deal.
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

I believe Leandro has verified the built binary.
|Patch Set 1:

&gt; Note: I haven't check a Clang-based build with this patch, what is
 &gt; the recommend way to test this case?
Clang is enabled per module. There are more than a dozen modules are built by clang now. You don't need any extra command line to build them. But you need to run &quot;make checkbuild&quot; to make sure it covers everything. Also you may want to run &quot;make BUILD_HOST_64bit=true&quot; to test the 64-bit host build.
 &gt; 
 &gt; Also, I believe that rebuilding the emulator from sources with the
 &gt; platform build (i.e. by defining BUILD_EMULATOR=true in your
 &gt; environment before 'make') will generate a broken binary (i.e. one
 &gt; that doesn't boot a system image, reasons unclear).
 &gt; 
 &gt; I'll try to prepare a patch to external/qemu that enforces the use
 &gt; of the 4.6 toolchain in the mean time. Please do not submit this
 &gt; until this is submitted. That's why I'm putting a -1 for now here.
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Verified+1 Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick from internal master.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick from internal master.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Tested on both aosp-master and internal lmp-dev.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

No such thing. We only build R.java, which actually doesn't contain anything about the asset, though we pass LOCAL_ASSET_DIR to the aapt command line. In the second call of aapt, the files in LOCAL_ASSET_DIR are added to the apk.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 4: Code-Review+2
|Patch Set 4: Verified+1
|Patch Set 1:

https://android-review.googlesource.com/#/c/102393/
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

I think it will be much simpler to have LOCAL_CLANG default to true instead of adding a new LOCAL_GCC. Modules requiring gcc just set &quot;LOCAL_CLANG := false&quot;.
|Patch Set 2:

(4 comments)
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Abandoned

Fixed by the Dalvik team the other way.
|Patch Set 1:

Does this put constraint on what build machine the AOSP users can use?
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)

Just remove the three lib64*.
They are not referenced in the source tree anyway.
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Cherry-picked from lmp-dev.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Verified+1
|Patch Set 1:

This breaks Mac build, for readlink on Mac doesn't know &quot;-f&quot;.
I am going to revert it.
|Patch Set 1: Reverted

This patchset was reverted in change: Iafb126a6200e259f4176d903bacf8d3de28c6d97
|Patch Set 2: Code-Review+2

Btw, you can also add it to CleanSpec.mk in bionic or art, or any other project, so you don't need to wait for my +2.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

Yes. I'll update the build system.
|Patch Set 1:

My change is in. Now TARGET_OUT_DATA_NATIVE_TESTS always points to the directory of the primary arch.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 2: Code-Review+1

I'll give +2 if Andrew is ok with this.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2

Thanks for the fix!
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

I am afraind mm/mmm won't install the symlink. We need to set up a bit more dependency in the build system change for this purpose:
$(LOCAL_MODULE) : $(my_symlink)
|Patch Set 1:

Yes, in your other change in the build system we need 1 more line. I just replied to that change.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)

To address the mm/mmm issue.
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1:

I think we can do it in a more efficient way. I'll upload a new patchset.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 12: Code-Review+2
|Patch Set 11:

(2 comments)

This explained the build error:
cp: cannot stat `out/target/product/grouper/obj/PACKAGING/art-run-tests_intermediates/DATA': No such file or directory
make: *** [out/target/product/grouper/obj/PACKAGING/google_tests_intermediates/google_tests.zip] Error 1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

I think without that line javac may look up class files in the host JDK's jar file.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 11:

(1 comment)
|Patch Set 12: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 3: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2:

Hmm, out of curiosity, why not just rename core-libart to core? Do we still need to keep core.jar?
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Patch Set 3: Verified+1 Code-Review+2

Fixed a comment in PS3.
|Change has been successfully merged into the git repository.
|Patch Set 1:

Sounds good. Let's delete them.
|Patch Set 2:

I thought Brian was talking about modules guarded by &quot;ifeq ($(WITH_HOST_DALVIK),true)&quot;. Not sure about the others.
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2

Glad to see it's gone.
Sure it helped a lot during the transition!
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3:

Yes, this change reduces the length by 17 bytes, more than enough for Jean-Luc's original bug: it's reduced from 99 to 82 chars.
|Patch Set 3: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

It seems the NDK's libstlport build script is in ndk/build/tools/build-cxx-stl.sh, which doesn't use the Android platform build system, or even the source in external/stlport. The NDK has its own fork of stlport in ndk/sources/cxx-stl/stlport/. Need Andrew or digit's confirmation.
|Patch Set 1:

It seems the NDK's libstlport build script is in ndk/build/tools/build-cxx-stl.sh, which doesn't use the Android platform build system, or even the source in external/stlport. The NDK has its own fork of stlport in ndk/sources/cxx-stl/stlport/. Need Andrew or digit's confirmation.
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 5:

With the CLs system/extras and frameworks/native I don't see other error.
|Patch Set 5: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 5:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Patch Set 4: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Reverted

This patchset was reverted in change: Id7ea4803ab52659c1316ea9f1babf8117b667441
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+1

Sorry I didn't know art uses HOST_ARCH.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Yes, actually I already saw the conflict when I was testing this change on the internal master.
I'll take care of the merging conflict.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Patch Set 4: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1:

Unless you remove the host libdvm.so from the build system, otherwise we'll need this change.
|Abandoned
|Restored

I still see host libdvm.so being built as x86_64 if I switch to multilib host build.
Now this blocks my change to switch to 32-bit-by-default host multilib build.
|Patch Set 1:

As I said, as long as this Android.mk is visible to the build system, checkbuild will build it.
This change doesn't prevent you from removing WITH_HOST_DALVIK. It just states the fact that the host libdvm only builds for x86 but not x86_64.
|Patch Set 1:

With my upcoming change https://android-review.googlesource.com/97200, HOST_ARCH will be always x86_64  and HOST_2ND_ARCH will be always x86. 
This change isn't really about WITH_HOST_DALVIK.
After you remove WITH_HOST_DALVIK from everywhere else, we are going to remove the guard here too, right? (Why would you leave a dead reference here? Even if you leave it here, it won't build without this change.)
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 3:

(8 comments)
|Patch Set 5: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+1

This fixed the grok build on mirror-aosp-master.
|Patch Set 1:

I don't have +2 in this project.
Brian do you have?
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

Sorry, I am not familiar with those files.
But the makefile change LGTM.
|Patch Set 2:

Yes, but that would be incorrect in a 32-bit only build.
We need to explicitly differentiate the cases:
ifeq ($(TARGET_IS_64_BIT),true)
 LOCAL_CFLAGS_64 += -DTARGET_ARCH=$(TARGET_CPU_ABI)
 LOCAL_CFLAGS_32 += -DTARGET_ARCH=$(TARGET_2ND_CPU_ABI)
else
 LOCAL_CFLAGS += -DTARGET_ARCH=$(TARGET_CPU_ABI)
endif
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Yes, I tested with &quot;make sdk sdk_repo&quot;.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 8:

(1 comment)
|Patch Set 9: Code-Review+1
|Patch Set 1: Code-Review-1

(2 comments)
|Patch Set 1: -Code-Review
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Change has been successfully merged into the git repository.
|Patch Set 2:

It seems me better to move to device/generic/qemu/. You can file a bug to android-build-team@ to get the new project created.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review-1

Please move it to target/product/emulator.mk instead.
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

Need +2. I already get +2 from Brian in the internal master branch. Thanks!
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Verified+1

Just clean rebase. Not sure why gerrit said there was merge conflict.
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 3:

Isn't the result install path the same? I think it's cleaner to use LOCAL_RELATIVE_PATH.
|Patch Set 3:

Oh, That's hacky. Do we ever allow to mix 32-bit and 64-bit libs in the same dir?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 1:

(1 comment)

The change itself looks fine to me. I'd like Colin to take a look too.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick.
|Change has been successfully merged into the git repository.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

It seems the host libdvm doesn't build in x86_64.
I got lots of -Wint-to-pointer-cast error with this change.
|Patch Set 1: -Code-Review
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1:

I'd like Xav or anyone from the SDK team to take a look first.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2:

I have updated the prebuilt ccache in https://android-review.googlesource.com/#/c/66622/.
I built it from source downloaded from http://ccache.samba.org/download.html.
Not sure if that version includes your fix of &quot;@&quot; parameters.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Cherry-pick from internal master.
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 3: Code-Review+2
|Patch Set 3: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 2:

(1 comment)
|Patch Set 2:

I've got some rough idea to build 32-bit libraries alongside the 64-bit ones. I'll do some experiments before sending out a change for review.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

TBR
verified.
|Change has been successfully merged into the git repository.
|Patch Set 1:

Ah, I didn't know what the upstream repository is and how it got ported to Android. Torne, could you take care of this?
Thanks!
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review-1

We have fixed this bug in another way in our internal branch. I'll cherry-pick the change to aosp.
Thanks!
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 9.
|Patch Set 8:

(1 comment)
|Patch Set 8:

(1 comment)
|Uploaded patch set 10.
|Patch Set 8:

(1 comment)
|Patch Set 10: Verified+1 Code-Review+1
|Change has been successfully merged into the git repository.
|Patch Set 3:

This is a big change. I'll need some time to give a thorough review.
|Patch Set 5:

(14 comments)
|Patch Set 5:

(2 comments)
|Patch Set 5:

(2 comments)
|Patch Set 7:

(5 comments)
|Patch Set 8:

(4 comments)
|Patch Set 5:

(1 comment)
|Patch Set 9:

(7 comments)

Brian, Do you mind if I continue the work to improve the change? That might save you some time :-). (I guess I understand how the build system should run dex-preopt for either vm now. If I have anything unclear, I'll ask you.)
|Uploaded patch set 12.
|Patch Set 12:

(2 comments)

Brian, I have 2 questions for you.
Thanks!
|Uploaded patch set 13.
|Patch Set 13:

OK, I got it work now. Tested all 4 VM combinations.
|Patch Set 13: Verified+1

&gt; LGTM, but did you revert part of my change to art where I added
 &gt; back the target boot image rules? do you just need to upload that?

Yes, I have updated the change to art.
|Patch Set 13: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review-1

This is no longer needed.
|Patch Set 1: Code-Review+2
|Patch Set 1: -Code-Review

Oh, let me reexamine the implementation.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

I ran a clean build with &quot;make -j48 showcommands host-native&quot; successfully with the new patchset. The -fPIE was applied to all modules except the emulator modules with LOCAL__NO_DEFAULT_COMPILER_FLAGS.
|Patch Set 2:

+Andrew.
Yes, the -fPIE conflicts with &quot;-fno-PIC.
I believe the QEMU modules are built with the &quot;-fno-PIC&quot; for some reason. Andrew may know more about it.
|Patch Set 2: Verified Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

Nick explained to me the security benefit of the new flags. But I'd like our compiler expert to take a look as well.
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review-1

(6 comments)
|Uploaded patch set 1.
|Patch Set 1:

This cherry-pick fixed the master-gpl build.
|Abandoned

This change is incomplete.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1:

We need this in aosp to fix the master-gpl build.
Thanks.
|Abandoned

Not sure why gerrit created a new change instead of a new patchset.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2

Clean cherry-pick to fix build.
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1:

Brian, could you give +2 for this as well?
It's cherry-picked from internal master to fix build.
Thanks.
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1:

We need this to fix the &quot;apps&quot; build target in master on the build page.
Thanks.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2

Those tools aren't used in the build process.
Good to know the prebuilt python is universally available!
|Patch Set 2: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 2:

Ah, I was thinking this is in the build project, otherwise I wouldn't have clicked the submit button :-)
Brian is right, these tools are currently used in the art project.
Personally I would prefer to not doing lint in the build process. Perhaps presubmit check is a good phase to do lint but we don't have such check yet.
|Patch Set 4:

(2 comments)
|Patch Set 5:

(2 comments)
|Patch Set 5:

(1 comment)
|Patch Set 2: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 4:

I strongly suggest to use different module name.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Hmm, the aosp platform version was used to be set to a fake version like &quot;4.3.2.1.000.000&quot; in the past, supposedly to not break some app's version check. Perhaps we should change it to something similar in this change. &quot;4.4.3.2.1.000.000&quot;?
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

LGTM
|Patch Set 1:

LGTM
I don't see either +1 or +2 button...
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review-1

ARMv5TE config is still needed for apps-only build: you can build an app's native code against the NDK targeting an armv5 device.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+1
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Abandoned

That change looks good.
|Patch Set 1:

(1 comment)
|Patch Set 1:

I am not sure if the difference is significant enough to add a new TARGET_ARCH. Why not make it a TARGET_ARCH_VARIANT of x86? I can see you duplicated most of the x86 config files (the same here) and it will be harder to maintain.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 3:

+our compiler expert. I am not sure if the difference is significant enough to add a new TARGET_ARCH.
Why not make it a TARGET_ARCH_VARIANT of x86? I can see you duplicated most of the x86 config files and it will be harder to maintain.
|Patch Set 3: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

Tested on both Linux and Mac.
|Patch Set 1: Verified+1
|Patch Set 1:

Thanks guys for addressing the license issue!!
|Change has been successfully merged into the git repository.
|Patch Set 1:

LGTM
|Patch Set 3:

It sounds like we should fix the modules that have those problem, instead of making it partial NDK r8..
Which modules have these errors?
|Patch Set 3:

Is it OK to use symlink for the cxx-stl dirs, if they are the same as ones in r8? It may slow down the bloat of the git project :-).
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+1
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 2: Code-Review+2

Sure
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2

You need only submit the aosp commit and it will be auto-merged to the internal master shortly.
|Patch Set 2: Code-Review+2
|Patch Set 9: Code-Review+1
|Patch Set 10: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review-1

We already have mgrep.
|Patch Set 1: Code-Review+1
|Patch Set 2:

It seems to me we should add them to TARGET_GLOBAL_CFLAGS and TARGET_GLOBAL_LDFLAGS in build/core/combo/TARGET_linux-x86.mk
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

Ok, I just gave a try.
It fails because lots of variables in $(BUILD_CTS_EXECUTABLE) are not defined yet at this point. However BUILD_CTS_EXECUTABLE itself is indeed available at this point. That seems a bug to me.
So the question for the CTS guys is: should we allow to define cts tests in directories outside the cts git project? 
If so, we should fix the bug and make sure &quot;include $(BUILD_CTS_EXECUTABLE)&quot; works everywhere; If not, we should make BUILD_CTS_EXECUTABLE not available at all outside the cts project.
|Patch Set 1:

Unfortunately the build system doesn't work well if you reference C/C++ source files with &quot;../&quot;. The workaround is to define a static library in the dir where the source code lives, and then define in cts the executable that links in the static library.
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

Ping?
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1:

Maybe we have some concern about the size of the image file?
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

Why do we need this?
This CL defeated my build cache mechanism: with build cache we avoid building libwebviewchrome.so from source; instead it's built as a prebuilt with $(BUILD_PREBUILT). But with this change, it pulls in tons of chromium gyp-generated static libraries.
|Patch Set 1:

OK. I am making a change to fix the build cache.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2:

(2 comments)
|Patch Set 3: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2:

+ Our compiler experts
I am not sure if we need 2 $(PRIVATE_TARGET_FDO_LIB)s both before and after the shared libraries.
|Patch Set 4:

Does the same apply to core/combo/TARGET_linux-mips.mk?
I don't see that flag in TARGET_linux-x86.mk, though.
|Patch Set 6: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

LGTM
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

I don't like it. It adds more to the already painfully long start time. It takes 5s to run &quot;time find vendor -maxdepth 6 -path '*/grouper/BoardConfig.mk'&quot; with cold file system cache in my latest master tree. Note that these &quot;finds&quot; will be run even when you run mm/mmm.
|Patch Set 1:

Ok, let's set it to 4.
|Patch Set 2: Looks good to me, approved


|Patch Set 3: Code-Review+2
|Patch Set 3: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 3: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: (2 inline comments)


|Patch Set 1:

I think we'd better print out an error or warning message if a given directory does not exist. Otherwise misspelling just goes in unconsciously. Instead the fix should go to the Android.mk that provides the wrong path.

Btw, I could see dir frameworks/base/docs/html in aosp-master. Which branch are you in?
|Patch Set 1: I would prefer that you didn't submit this


|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 1:

I just uploaded a new change
https://android-review.googlesource.com/#/c/37803/
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 4: (3 inline comments)

Thanks for you good job.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1

This is cool!
|Patch Set 2: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

How about native code?
See LOCAL_PROTOC_OPTIMIZE_TYPE in build/core/binary.mk.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Abandoned
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

$(PRODUCT_OUT)/obj/ETC/mac_permissions.xml_intermediates
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1:

Oh, Stephen is more correct :-)
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review-1

I don't think we need this: the build system discourages using of absolute path.
|Patch Set 1: Code-Review+2
|Patch Set 1:

Could anyone from the SDK team give a +2?
The build has been broken for a few hours.
Thanks.
|Patch Set 1: Verified+1

This indeed fixed the build :-)
I'll let Raphael figure out a better fix.
thanks!
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Cherry-picked from aosp-master to fix build.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 2: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1:

Xav, do you mind +2 on these 3 CLs?
I verified the CLs and there was no change in the SDK build results.
Thanks!
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1 Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

Ok, I will re-upload its dependency change with the same ChangeId.
GOod to know that trick.
|Abandoned

Moved to a new Change-Id.
|Patch Set 1: Code-Review+2
|Patch Set 5: Looks good to me, but someone else must approve

Actually I don't understand the meaning of &quot;DO NOT MERGE&quot; here. Does it mean to not merge into the internal tree?
|Patch Set 5: (1 inline comment)


|Patch Set 1: Code-Review+2
|Patch Set 1:

I don't know much about these flags, But I want to let you know that some the host binaries will be shipped in the SDK package, so they may be run on a variety of machines.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review-1

I just submitted a right fix:
https://android-review.googlesource.com/#/c/52190/
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1:

I guess you'll need to go through the source tree and make sure they are not used.
In our internal master, I saw at least ARCH_ARM_HAVE_TLS_REGISTER is used in a couple of projects.
In the root of the tree just run &quot;mgrep ARCH_ARM_HAVE_&quot;
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review-1

No, you don't need remove the &quot;debug&quot; tags.
If some CLs in the build system get merged to aosp, the warning will disappear..
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1

Cool.
Then we don't need to build these prebuilts with &quot;include $(BUILD_HOST_PREBUILT)&quot; at all (such as prebuilts/tools/common/commons-compress/Android.mk), and we can remove references to all these prebuilts in the makefiles.
|Patch Set 1:

LGTM
|Patch Set 2: Code-Review+1
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1:

+Doug. I am not sure if this is necessary, for we really have lots of variable that can be customized.
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 3:

I don't see why this change fixed the build error?
|Patch Set 3: Code-Review-1

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Change has been successfully merged into the git repository.
|Patch Set 1:

Sorry, why do we need to clear TARGET_GCC_VERSION when you rerun envsetup.sh? Other variables such as $TARGET_PRODUCT, $TARGET_BUILD_VARIANT are sticky too.. 
In my understanding these variables should be reset only if you rerun lunch.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Uploaded patch set 2.
|Patch Set 2: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 2: (1 inline comment)


|Patch Set 3: (1 inline comment)


|Patch Set 4: Looks good to me, but someone else must approve


|Patch Set 4: (2 inline comments)


|Patch Set 5: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 2: (2 inline comments)


|Patch Set 4: Looks good to me, but someone else must approve


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified

I have tested it.
|Change has been successfully merged into the git repository.
|Patch Set 1:

Just do a few makes in a row:
$ make
$ make
$ make
...
You will see in the 2nd and later builds, seapp_contexts is always rebuilt.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 3: (1 inline comment)


|Patch Set 3: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 4: Looks good to me, but someone else must approve

But before I give +2, I'd also like to see +1 from Doug.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Verified

(1 inline comment)


|Change has been successfully merged into the git repository.
|Patch Set 1:

I think it's fine.
I don't see better way to install the .o files to the device.
|Patch Set 1: Looks good to me, approved; Verified

Manual merge to fix cts build.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

Thanks, Ard.
I will update the clean step.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved; Verified

Cherry-picked from the internal jb-mr1-dev to fix the extra cts_dalviktests_tf files outside the out directory.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

LGTM
|Patch Set 1:

LGTM
|Patch Set 4: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve

(1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 2: (1 inline comment)


|Patch Set 2: (1 inline comment)


|Patch Set 3: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

Yes.
I am thinking of HAVE_SELINUX as an external variable (environmental variable or makefile variable) set outside the build system. As far as that's true, we are fine.
However it won't work if we set HAVE_SELINUX in BoardConfig.mk, which is loaded later than the product config fiiles.
|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved; Verified

Clean rebase.
|Change has been successfully merged into the git repository.
|Patch Set 2:

Yes, we'd better set &quot;HAVE_SELINUX=true&quot; outside the makefile.
One ugly fix is to remove the &quot;ifeq&quot; conditional from build/target/product/core.mk and it will work because all the module definitions are already guarded by the conditional in external/sepolicy/Android.mk. But I really don't like that for there is an ongoing effort to remove dangling module names in PRODUCT_PACKAGES.
|Patch Set 2:

Yes, the intermediate object files will be shared.
So you'll need a clean build if you flip the flag.
|Patch Set 1: Looks good to me, approved


|Patch Set 3: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve

LGTM
JBQ, I'd like you to take a look as well.
THanks.
|Patch Set 2: Looks good to me, approved


|Patch Set 3: (1 inline comment)


|Patch Set 3: Looks good to me, approved


|Patch Set 4:

Sorry, I was thinking only the generic device uses the default setting.
I should have checked all the BoardConfig.mk before giving +2.
Thanks, JBQ!
|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

FYI
In our internal master branch, we have stopped use of the linker script armelf.x and armelf.xsc
|Patch Set 3: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve

I'd like JBQ to take a look too.
|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

I think we should be safe regarding the length of the import includes.
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

Hi Andrew,
  With https://android-review.googlesource.com/#/c/37553/ we are moving to Mac SDK 10.6 now. qemu is the only module that explicitly wants 10.5. Do you think we can move to 10.6 too?
  Btw, with this change the emulator can not start on my Mac 10.6 desktop. It crashes with &quot;Bus error&quot;. Very appreciated if you can investigate.

Thanks.
|Patch Set 1: Abandoned

Superseded by https://android-review.googlesource.com/39861
|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 2:

Actually I have almost the same change pending for a while:
https://android-review.googlesource.com/#/c/37640/
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 5: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

As a host executable, emulator is actually built in all builds.
|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 4:

BoardConfig.mk variables should be available to all Android.mks.
Which BoardConfig.mk did you set HAVE_SELINUX?
I will take a shot.
|Patch Set 4:

Actually the emulator build uses build/target/board/generic/BoardConfig.mk.
As far as I can see, build/target/board/emulator/BoardConfig.mk is not used by any product currently.
|Patch Set 5: Looks good to me, but someone else must approve

For the makefile.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 3: (3 inline comments)


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Do not submit

If you want to use a Java library as static library, you must build it as static library with &quot;include $(BUILD_STATIC_JAVA_LIBRARY)&quot;.
 You can't use a shared Java library as a static library: though the build will success with this change, but it will fail at run time. Dalvik doesn't like duplicate classes in 2 places.
|Patch Set 1: Looks good to me, but someone else must approve

I'd like Eric to take a look too.
I am not sure if we can manually change the translation.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

Thanks for your contribution anyway.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve

Just curious -- why call an external tool inside a native program? If the tool fails, it's confusing what's going on because the command line and execution environment are opaque to the user.
|Patch Set 2: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

Sorry, I don't have a machine to verify.
|Patch Set 1: Verified

Thanks!
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve; Verified


|Patch Set 1: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1:

I should hold on util the aapt change get approved..
|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 3: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

The changes are already in prebuilts/ndk/ in the internal master. Do we still need to check into the obsolete prebuilt/ndk?
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: (3 inline comments)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve

LGTM for the Android.mk
|Patch Set 2: Looks good to me, but someone else must approve

For the makefiles.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

You have to cherry-pick https://review.source.android.com/20078, as well.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Patch Set 2: (2 inline comments)


|Patch Set 1: I would prefer that you didn't submit this

The variable should have unambiguous meaning: either relative to LOCAL_PATH or relative to the top, but not both.
I have a change that fixes the disgusting but not fatal build errors:
https://review.source.android.com/23137
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

Thanks for catching this.
|Patch Set 1: I would prefer that you didn't submit this

Rafael is correct.
How about adding a variable such as BOARD_CREATE_TUNA_HDCP_KEYS_SYMLINK to device/samsung/tuna/BoardConfig.mk?
It's more scalable than listing all derived device names.
|Patch Set 1:

All derived devices get the tuna BoardConfig.mk variables automatically. So no further changes.
|Patch Set 2: Looks good to me, approved


|Patch Set 2:

No need.
device/samsung/tuna/BoardConfig.mk is included by both device/samsung/toro/BoardConfig.mk and device/samsung/maguro/BoardConfig.mk.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

I like it.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

Is it possible to move the SDK stuff to somewhere in the sdk git project? so you guys don't need my +2.
Thanks.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 4: I would prefer that you didn't submit this

(8 inline comments)


|Patch Set 5: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved; Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified

Manual merge to fix build.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved; Verified

Manually merged to fix build.
|Change has been successfully merged into the git repository.
|Patch Set 1:

JBQ, the proper JDK will be selected only after you rerun lunch. Otherwise the default Java will be used.
It's in envsetup.sh that sets JAVA_HOME and PATH to select the JDK.
|Patch Set 1:

Oh one more note:
 envsetup.sh sets JAVA_HOME only if it isn't already set.
So if you are switching from froyo to a later branch, or vice versa in the same terminal, late invocations of lunch won't set the correct JAVA_HOME for you..
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: I would prefer that you didn't submit this

(2 inline comments)


|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: (2 inline comments)


|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

Why do we need this?
The convention is that unbundled apps should be built in the default configuration, which in Gingerbread is generic.
|Patch Set 3: (1 inline comment)


|Patch Set 3: (1 inline comment)


|Patch Set 3: (1 inline comment)


|Patch Set 3:

We should add &quot;LOCAL_REQUIRED_MODULES := libjni_latinime&quot; to packages/inputmethods/LatinIME/java/Android.mk with this change.
|Patch Set 3:

Yes.
Unbundled build needs LOCAL_JNI_SHARED_LIBRARIES, while the full build needs LOCAL_REQUIRED_MODULES.
|Patch Set 3:

Correct.
|Patch Set 4: Looks good to me, approved

Yes, the shared library will be packaged in the apk because of LOCAL_JNI_SHARED_LIBRARIES. That's expected.
|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 1: I would prefer that you didn't submit this

Please use BUILD_PREBUILT and then add the module name to PRODUCT_PACKAGES.
A good example is frameworks/base/data/etc/Android.mk.
|Patch Set 3: I would prefer that you didn't submit this

(1 inline comment)

To avoid installing unnecessary JNI libraries, the right fix is to remove the &quot;user&quot; tag, or remove it from the product config, or remove it from LOCAL_JNI_SHARED_LIBRARIES.
|Patch Set 3: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1:

https://review.source.android.com/21239 is a better fix, I think.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: (3 inline comments)

We can share only 1 copy of the header for all the modules.
|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 3: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 3: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1:

Manual merge from internal branch.
|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 3:

Isn't that we can omit $(call ) if there is no argument?
|Patch Set 3:

Yes, I'd like them to be unified. But please change your commit message - It's not incorrect.
|Patch Set 4: Looks good to me, approved


|Patch Set 5: Looks good to me, approved


|Patch Set 6: Looks good to me, approved


|Patch Set 6:

Please verify and submit it.
So you don't need to rebase it again and again.
|Patch Set 6: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

Dup of https://review.source.android.com/22054?
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 6: Looks good to me, approved


|Patch Set 7: Looks good to me, approved


|Patch Set 8: Looks good to me, approved


|Patch Set 5: Looks good to me, approved


|Patch Set 6: Looks good to me, approved


|Patch Set 7: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, but someone else must approve

Yes, it's really a bad idea to reference c/cpp source code with &quot;../&quot; -- the object files will spill out from its private intermediate directory.
But I am not sure if the file is really unnecessary.
|Patch Set 1: Looks good to me, approved


|Patch Set 8: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved


|Patch Set 1: Abandoned

The change was cherry-picked from another branch. But somehow my local client got screwed.
A new change was uploaded.
|Patch Set 5: Looks good to me, approved


|Patch Set 5: Looks good to me, approved


|Patch Set 1: Abandoned
|Patch Set 1:

Never saw such use case before.
Maybe you can use $(BUILD_PREBUILT), with LOCAL_MODULE_PATH to specify the destination path. How about the LOCAL_MODULE_CLASS? ETC? EXECUTABLES? SHARED_LIBRARIES?
|Patch Set 1:

No, because zoneinfo is in build/core/legacy_prebuilts.mk.
|Patch Set 2: (2 inline comments)


|Patch Set 2:

Then to hook up the dependency, you have to add the module names to the specific PRODUCT_PACKAGES, eg core.mk, generic_x86.mk, or else.
|Patch Set 3: (2 inline comments)


|Patch Set 4: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 3: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

LGTM
|Patch Set 1: Looks good to me, approved


|Patch Set 1:

There are 2 more CLs need to be cherry-picked:
60293914c19681fcb6c933d53561f40af032bbda
33c0d952fcba713f00c1cafc8213274e642aee4c

Thanks!
|Patch Set 1: (1 inline comment)


|Patch Set 2: (1 inline comment)


|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

JBQ, I think you are right.
Any module Android.mks that are included after this one would be affected.
I will send out a fix.
|Patch Set 1:

You are right.
I have fixed it in the internal source tree but it's not merged into the aosp tree yet.
|Patch Set 1: (2 inline comments)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Verified

(1 inline comment)


|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Patch Set 2: I would prefer that you didn't submit this

Before your change, the assumption is that the prebuilt apk in LOCAL_SRC_FILES is already signed, while LOCAL_CERTIFICATE is used for bookkeeping purpose. I don't think we should break the assumption. Otherwise, you may sign again on an apk that's already signed.

You should assign the apk (with whatever key) before adding it to LOCAL_SRC_FILES.
|Patch Set 2:

You have to sign it before putting it into LOCAL_SRC_FILES.
How do you build an apk without signing it? If you build it with the android platform build system, it should be signed with some of the platform keys. Otherwise you can sign it manually.
|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 4: Looks good to me, but someone else must approve


|Patch Set 1: I would prefer that you didn't submit this

I could not see 'all' was added by e334d255.
I don't see the necessity we need such a pseudo-goal: &quot;$make all&quot; in your change equals to &quot;$make&quot;.
|Patch Set 1: Looks good to me, approved

Yes, I found more about &quot;all&quot; in the build system.
It seems there once was such a pseudo-goal in it, but for some unknown reason it disappeared.
I think it's fine for us to have it back.
Thanks.
|Patch Set 1: I would prefer that you didn't submit this

First there is a problem in the change:
If a function is redefined in more than 1 vendor definitions.mk, then which definition will be used is not deterministic.

I am not sure why do we need such a mechanism? if you want to change the global behavior of a function, just change its definition in the global definitions.mk; if you want to change the behavior specific to some module, you can add new function or rule in the global makefile.
|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

The original commit is 64b00e3f, which was approved by you :-)
It seems the flag has gone in our internal tree.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1: (1 inline comment)


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

tI got &quot;submit not permitted&quot; on the aosp branch.
What's wrong?
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 3: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 7: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 1:

Picked from the internal master.
|Uploaded patch set 2.
|Patch Set 1: (1 inline comment)


|Patch Set 2: Verified; Looks good to me, approved


|Change has been successfully merged into the git repository.
|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved

It looks fine to me.
They are arch-specific flags, so the combo makefile is the right place to put them, I think.
JBQ, how do you think?
|Patch Set 1: Verified; Looks good to me, approved

merged from internal master.
|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, but someone else must approve

I don't have +2 of platform/sdk.
Xav must have.
|Patch Set 1: Looks good to me, but someone else must approve

I don't have +2 of platform/sdk.
Xav must have.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2:

Why do we need new tags? which make the tags even harder to understand.
The straightforward way to me is something like:
ifeq ($(TARGET_SHELL),mksh)
include system/core/mksh/Android.mk
else
include system/core/sh/Android.mk
endif
|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1: Abandoned

test
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, but someone else must approve


|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 1:

Hi Anthony,
  I believe the var $(building_sdk) exists only for distinguishing such 2 builds. 
 Also the set of targets built for SDK is very different from that of a usual build. So if you don't clean the output before switching to another kind of build, the new build will have some unwanted targets in its output, such as what will be in system.img.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 3: No score; I would prefer that you didn't submit this


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 3: Looks good to me, but someone else must approve


|Patch Set 1: Looks good to me, approved


|Patch Set 1:

I am not sure if it's a good idea to set TARGET_ARCH from lunch. I can only see it be set in product config files or default to arm in envsetup.mk.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 1: Looks good to me, approved


|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)


|Patch Set 1:

By &quot;target specific var&quot; I meant the makefile target to be built, not the target platform. See http://www.gnu.org/software/automake/manual/make/Target_002dspecific.html#Target_002dspecific
You can find the definition of PRIVATE_ARM_MODE in build/core/binary.mk, whose value varies depending on the obj file you are building.

By the way, as Patrick said, PRIVATE_ARM_MODE is set to &quot;thumb&quot; for non-arm mode. I think that's the desired behavior, so your change is unnecessary.
|Patch Set 1:

Hi Chih-wei,
 Sorry, I didn't notice that you are using &quot;=&quot; instead of &quot;:=&quot;.
Anyway that's a bit confusing, as the build system uses recursive assignment very rarely.
So your change's effect is:
Previously compiling host c/c++ outputs something like:
target thumb C++: libandroid_runtime &lt;= frameworks/base/core/jni/Time.cpp
with your change, it becomes:
target C++: libandroid_runtime &lt;= frameworks/base/core/jni/Time.cpp
That's different from what you described. Also I don't think     the former output is misleading.
|Patch Set 1: No score

Ah, after another look, I understand your point. But I still have some concern about defining new var using recursive assignment. Let me check if there are better ways to do..

thanks!
|Patch Set 1: (1 inline comment)


|Patch Set 1: (1 inline comment)


|Patch Set 1:

It looks good to me.
|Patch Set 2: (1 inline comment)


|Patch Set 2:

yes, please add the else part.
thanks.
|Patch Set 3: Looks good to me, approved


|Patch Set 6: Looks good to me, approved


|Patch Set 7: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: Verified; Looks good to me, approved

I just verified it on my Mac box.
|Patch Set 1: Looks good to me, approved


|Patch Set 1: (1 inline comment)


|Patch Set 3: Looks good to me, approved


|Patch Set 4: Looks good to me, approved


|Patch Set 4: Verified


|Change has been successfully merged into the git repository.
|Patch Set 1: Looks good to me, approved


|Patch Set 2: Looks good to me, approved


|Patch Set 2: No score; Looks good to me, approved


|Patch Set 1: Abandoned

Just a test.
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 5:

(1 comment)
|Patch Set 7: Code-Review+1

I'll give +2 after Tao take another look.
|Patch Set 7: Code-Review+2
|Patch Set 7:

(1 comment)
|Patch Set 7:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged by Ying Wang
|Patch Set 1: Code-Review+2

LG
Let's clean the build system if you get time to do that.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

Saw your other change in build.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged by Ying Wang
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+1
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 3:

(3 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Probably better just call the prebuilt in place.
|Patch Set 1: Code-Review-1

&gt; &gt; Probably better just call the prebuilt in place.
 &gt; 
 &gt; no, the kernel calls lzop, and it assumes it's in shell PATH.
You can export the path in place.
Don't bother to set up the makefiles: you need to take care if it's run in Linux or Mac.
Also we are moving to call prebuilts in place for the prebuilts/sdk/tools too, to simplify our build logic.
|Patch Set 1:

&gt; &gt; &gt; &gt; Probably better just call the prebuilt in place.
 &gt; &gt; &gt;
 &gt; &gt; &gt; no, the kernel calls lzop, and it assumes it's in shell PATH.
 &gt; &gt; You can export the path in place.
 &gt; &gt; Don't bother to set up the makefiles: you need to take care if
 &gt; it's
 &gt; &gt; run in Linux or Mac.
 &gt; &gt; Also we are moving to call prebuilts in place for the
 &gt; &gt; prebuilts/sdk/tools too, to simplify our build logic.
 &gt; 
 &gt; in Brillo, building kernel is part of the build. Are you saying,
 &gt; before building kernel, I need to export the patch to lzop? Also,
 &gt; we cannot change kernel code.

Just export path before calling the kernel build system.
I believe that's how this prebuilt is called already by the android-auto kernel builds.
|Patch Set 1:

&gt; &gt; &gt; &gt; &gt; &gt; Probably better just call the prebuilt in place.
 &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; no, the kernel calls lzop, and it assumes it's in shell
 &gt; PATH.
 &gt; &gt; &gt; &gt; You can export the path in place.
 &gt; &gt; &gt; &gt; Don't bother to set up the makefiles: you need to take care
 &gt; if
 &gt; &gt; &gt; it's
 &gt; &gt; &gt; &gt; run in Linux or Mac.
 &gt; &gt; &gt; &gt; Also we are moving to call prebuilts in place for the
 &gt; &gt; &gt; &gt; prebuilts/sdk/tools too, to simplify our build logic.
 &gt; &gt; &gt;
 &gt; &gt; &gt; in Brillo, building kernel is part of the build. Are you
 &gt; saying,
 &gt; &gt; &gt; before building kernel, I need to export the patch to lzop?
 &gt; Also,
 &gt; &gt; &gt; we cannot change kernel code.
 &gt; &gt;
 &gt; &gt; Just export path before calling the kernel build system.
 &gt; &gt; I believe that's how this prebuilt is called already by the
 &gt; &gt; android-auto kernel builds.
 &gt; 
 &gt; need guideline to create the CL, seems there are couple options
 &gt; 1. I can change setup.sh to export path, is it right way?
 &gt; 2. I took a look at CLANG_CXX, seems this is pre-defined, and other
 &gt; components just use CLANG_CXX, we cannot do it for kernel.
 &gt; any suggestions?

In device/generic/brillo/kernel.mk,
$(MAKE) -C $(TARGET_KERNEL_SRC) O=$(realpath $(KERNEL_OUT)) ARCH=$(KERNEL_ARCH) CROSS_COMPILE=&quot;$(KERNEL_CROSS_COMPILE_WRAPPER)&quot; KCFLAGS=&quot;$(KERNEL_CFLAGS)&quot;
        $(MAKE) -C $(TARGET_KERNEL_SRC) O=$(realpath $(KERNEL_OUT)) ARCH=$(KERNEL_ARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE) headers_install;

change to:
PATH=$(abapath external/lzop/prebuilts/linux-86/bin):$PATH $(MAKE) ...
|Patch Set 2: Code-Review+1
|Patch Set 4:

(2 comments)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick.
|Patch Set 2:

(1 comment)
|Patch Set 6:

&gt; Ying,
 &gt; 
 &gt; Since Todd is +1 for this change, can we merge it?
 &gt; 
 &gt; Regards
 &gt; Yong

Has the framework added support of privileged apps in /vendor/priv-app?
+ctate
|Patch Set 6: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

PS2 just reformated by removing unnecessary tabs.
|Patch Set 2:

(1 comment)
|Patch Set 3:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick from internal gerrit.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherrypick from internal gerrit.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

This is great.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

You need to verify your change. Have you verified it?
I don't see target with sandybridge in the source tree so I can't do it myself.
|Patch Set 2: Code-Review+2
|Patch Set 1:

&gt; build folks: is the absence of whole static library support on the
 &gt; Mac a known problem?

What error did you get with LOCAL_WHOLE_STATIC_LIBRARIES?
The build system just treat it as LOCAL_STATIC_LIBRARIES, as linker option &quot;-force_load&quot; is not supported for linking executables.
|Patch Set 1:

&gt; Maybe we should just pass the .o files from the LOCAL_WHOLE_STATIC_LIBRARIES
 &gt; .a files directly to the linker?  I think that should solve the
 &gt; issue - global symbols from .o files inside a .a file will be
 &gt; stripped if there are no references to symbols in that .o file, but
 &gt; global symbols in top level .o files should never be stripped.

That's how we implemented LOCAL_WHOLE_STATIC_LIBRARIES for linking Mac shared libraries (but not executables) in branches like jb-dev. If this is really needed, I can make a change.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

Better to put it into a subdir, e.g. build/tools.
|Patch Set 2: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)
 &gt; 
 &gt; The event-log-tags.h file is dependent on what will be installed.
 &gt; So a package using a FOO_BAR_LOG_TAG define needs to depend on the
 &gt; modules that declare that in their logtags file.
 &gt; 
 &gt; But that doesn't even help with checkbuild, since you're building
 &gt; components that won't be installed.
 &gt; 
 &gt; So this probably should be a generated header per-module, and
 &gt; follow the normal exported c include scheme.

Hmm, with my limited knowledge of logtags, looks like we kinda want global assignment of tag IDs to avoid conflict. Probably we can remove the restriction that event-log-tags includes only logtags of installed modules? instead to include everything (of course exclude things from vendor, device subtrees etc).
|Patch Set 1:

&gt; Wouldn't this also mean that touching any logtag file in the whole
 &gt; system would cause every single file that uses logtags to
 &gt; recompile?

No, only source files that indeed include the generated header file, because of the order-only dependency &quot;$(ALL_C_CPP_ETC_OBJECTS): &#124; all_copied_headers&quot;. This is how copy_headers.mk works.
|Patch Set 1:

&gt; &gt; Wouldn't this also mean that touching any logtag file in the
 &gt; whole
 &gt; &gt; system would cause every single file that uses logtags to
 &gt; &gt; recompile?
 &gt; 
 &gt; No, only source files that indeed include the generated header
 &gt; file, because of the order-only dependency &quot;$(ALL_C_CPP_ETC_OBJECTS):
 &gt; &#124; all_copied_headers&quot;. This is how copy_headers.mk works.

Ah, I read your comment incorrectly. You are right: every single file that uses logtags will be recompiled.
|Patch Set 1:

We can easily turn this change into per-module header generation.Per-module header also makes inter-project references of logtag a bit harder, like the one in https://android-review.googlesource.com/196239
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(7 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 9:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 4:

&gt; +wangying. there was a similar problem yesterday with aidl files
 &gt; and generating both java and native stuff that's wanted in very
 &gt; different parts of the tree.

If it just generate header files, I don't think there would be problem like that case.
Once the header generator tool is ready, file a bug and I'll take care of the build system support.
|Patch Set 4:

&gt; @wangying: here is the tool :-)
 &gt; 
 &gt; while read num tag stuff; do
 &gt; [ -n &quot;${num##\#*}&quot; ] &#124;&#124; continue
 &gt; echo &quot;#define ${tag^^}_LOG_TAG ${num}&quot;
 &gt; done &lt; event-log-tags &gt; event-log-tags.h

I uploaded the build system change: https://android-review.googlesource.com/197954
|Patch Set 2: Code-Review+2

Thanks guys!
|Patch Set 3:

(3 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 6: -Code-Review

Sorry one more thing: you now need to add $(AAPT) as dependency when $(sign-package) is called in build/core/prebuilt_internal.mk.
In other cases, the dependency is already there.
|Patch Set 7: Code-Review+2
|Patch Set 8: Code-Review+2

I'd also like Baligh to take a look at the releasetools change.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1:

LGTM
|Patch Set 2:

LGTM
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Topic set to lex-yacc-.c
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Abandoned
|Uploaded patch set 1.
|Topic set to lex-yacc-.c
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to lex-yacc-.c
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to lex-yacc-.c
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to lex-yacc-.c
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+1

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 3: Code-Review+1
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 3: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

&gt; thanks. i modified CtsApiCoverage to find apk/jars contained in a
 &gt; directory and then modified the CtsCoverage.mk to pass in
 &gt; CTS_TESTCASES_OUT. this is working for me locally

But the dependency isn't set up correctly: now you depend on a directory, which may exist before the apks/jars get built.
|Patch Set 3:

&gt; Some more context on this: Once CTSv1 has built the tests, it
 &gt; creates a file called stamp. In this CL we depend on that stamp and
 &gt; once it is created we look though CTS's test out directory and
 &gt; filter out the apks/jars in Java.
 &gt; 
 &gt; Moving forward with CTSv2, we dont have stamp but we do have a
 &gt; variable which holds all the test artifacts which are tagged with
 &gt; LOCAL_COMPATIBILITY_SUITE. We can then depend on the artifacts in
 &gt; that list and generate the coverage.

Yes, having dependency on the stamp file works in that case.
|Patch Set 3:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 6: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 4: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(3 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Uploaded patch set 7.
|Patch Set 7:

(1 comment)

I verified PS7 generates arch-specific libconstants.c and libsyscalls.c. However the generated libconstants.c doesn't compile because of value type mismatch.
|Patch Set 7:

(2 comments)
|Patch Set 9: Code-Review+1
|Patch Set 9:

(2 comments)
|Patch Set 9:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(3 comments)
|Patch Set 3:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1:

(4 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

&gt; (Same as on ART CL): Not sure what's best here. Could argue that if
 &gt; we can't get the dependencies that are newer (and so induce the
 &gt; update), we should list all dependencies then (to see what they
 &gt; are).

They are already in the build command, if you run &quot;make showcommands&quot;.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1

&gt; In interactive terminals, this echo will be restricted to a single
 &gt; line, so usually it only includes the output file.
 &gt; 
 &gt; Is it actually important to know all of the dependencies in this
 &gt; case? If it's a local build, you can ask ninja for this information
 &gt; via the command line (or turn on ninja explain to see why something
 &gt; is being rebuilt)

You can also check the detailed build command in the build.log.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Do we still need this change? I couldn't find 25-static-routes.conf defined in any Android.mk.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2:

&gt; Thanks for the fix!
 &gt; 
 &gt; Is it preferred to always have &quot;LOCAL_IS_HOST_MODULE := true&quot; for
 &gt; BUILD_HOST_*?

No, it's not necessary unless you call local-generated-sources-dir etc.
See their definitions and comments in build/core/definitions.mk.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

&gt; It would probably be better to not define __BRILLO__ on host.  That
 &gt; symbol should be used to mean &quot;we're on Android, but without
 &gt; framework&quot; for the most part.

Move to TARGET_GLOBAL_CFLAGS?
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 5:

(2 comments)
|Patch Set 6: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 8: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2:

(5 comments)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(3 comments)
|Patch Set 4: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 6: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

&gt; &gt; &gt; Maybe we should keep this &quot;in sync&quot; with Mips64, which moved to
 &gt; &gt; &gt; 1.5G (https://android-review.googlesource.com/149635).
 &gt; &gt;
 &gt; &gt; (Oh, and ngeoffray was contemplating an even larger size for that
 &gt; &gt; for the emulator-based testing).
 &gt; 
 &gt; Yeah we need something larger. Is 16GB (low hand of Nexus devices?)
 &gt; doable?

Note that we don't build sparse img files for the emulator builds, see TARGET_USERIMAGES_SPARSE_EXT_DISABLED in the BoardConfig.mks.
That means unnecessarily big partition sizes may waste our build server storage.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 3: Code-Review+2
|Patch Set 3:

Alex, please also drop a new SignApk.jar to prebuilts/sdk/tools/lib/signapk.jar, so the unbundled builds can take this change as well.
|Patch Set 3:

&gt; Sure. How do I build the signapk.jar for dropping into
 &gt; prebuilts/sdk/tools/lib/? What lunch setting, for example?

You can download from the build page go/ab.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

With change we can revert https://android-review.googlesource.com/#/c/160665/ .
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

I think we can also remove the conditional include in build/tools/Android.mk now.
|Patch Set 2:

(3 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 6:

(1 comment)
|Patch Set 6:

(5 comments)
|Patch Set 7: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2

TBR
|Patch Set 1:

&gt; LGTM, but what changed that this broke now? I don't really see how
 &gt; switching to clang makes this flag any different. Was gcc ignoring
 &gt; it completely?

yeah, not even a warning.
|Patch Set 2: Code-Review+2

&gt; Ying:
 &gt; 
 &gt; This jar can be needed for javac/javadoc but should not be
 &gt; transformed into a .jack and should not be given into jack
 &gt; classpath.
 &gt; Does it feels right to you if is used with
 &gt; LOCAL_CLASSPATH := prebuilts/sdk/tools/jack-annotations.jar
Yes, sounds good.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3:

&gt; &gt; True, with an order only dependency + gcc header deps only files
 &gt; &gt; that include arm_neon.h would get rebuilt.  With this version
 &gt; every
 &gt; &gt; arm/arm64 file would get rebuilt when arm_neon.h changed.
 &gt; 
 &gt; I think that nobody includes arm_neon.h directly. It may be
 &gt; inserted by the compiler, but I would have to dig further down.
 &gt; 
I am wondering how the compiler could know to include arm_neon.h from $(TARGET_OUT_HEADERS)/clang/arm_neon.h? given that we only add &quot;-I $(TARGET_OUT_HEADERS)&quot; to cflags.
I ran strace on the clang++ command line compiling external/skia/src/opts/SkBitmapProcState_matrixProcs_neon.cpp and it turned out it's the prebuilts/clang/host/linux-x86/3.8/bin/../lib/clang/3.8.243773/include/arm_neon.h that got included.

 &gt; One other issue that might pop up here too, is that Intel also uses
 &gt; arm_neon.h in their x86 builds. I know we have had to change
 &gt; NEON-related build rules for them in the past.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review-2

(1 comment)
|Patch Set 1: Code-Review+2

Ouch, I guess you are the first to ever use a COMMON_GEN.
|Patch Set 1:

(7 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 3:

(2 comments)
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

I'm from the build team :)
|Patch Set 6: Code-Review-1

We should always copy the file to make sure the target file get a new timestamp; otherwise after a successful make a nothing-to-do-make will always try to update the target file.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1:

(3 comments)
|Patch Set 3: Code-Review+1
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)

Nice
|Patch Set 1: Code-Review+1

Look at art/Android.mk we have:
adb shell setprop persist.sys.dalvik.vm.lib.2 libartd.so
This fix seems to be correct.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1

Looks fine to me.
But I'd also like David and Bill to take a look this change.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(6 comments)

Sorry, I missed this when I was OOO.
|Patch Set 2:

(1 comment)
|Patch Set 3:

(3 comments)
|Patch Set 3:

&gt; (3 comments)

I made a patchset which follows more conventions in other transform-... macros.
|Uploaded patch set 4.
|Patch Set 4: Code-Review+1 Verified+1

I did tests in internal master angler-userdebug build, &quot;make winsdk-tools&quot; and shamu-eng build on Mac.
|Patch Set 6: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

TBR
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

Rebased.
|Patch Set 1: Code-Review+2
|Patch Set 1:

&gt; Ying: this does not need a prebuilt like zipalign, since it only
 &gt; depends on system/core now, right?

Unbundled branches don't have system/core in their manifests.
But I think we can skip the remove-timestamp step for unbundled build (TARGET_BUILD_APPS).
PDK build also uses prebuilt, see prebuilts/sdk/tools/Android.mk. I think we can skip that step for PDK build too.
|Patch Set 1:

&gt; Ying: this does not need a prebuilt like zipalign, since it only
 &gt; depends on system/core now, right?

Also factor out the common code with zipalign to a library, instead making copy.
|Patch Set 3:

(1 comment)

There seems still substantial duplicate code between ziptime and zipalign. Can we make the new ZipEntry/ZipFile base classes and extend them in zipalign to reduce the duplicates?
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

Interestingly with this change &quot;lunch &lt;target&gt;&quot; is broken on Mac. It's seen by ctate.
The issue is, on Mac the default javac is /usr/bin/javac, which is a symlink to /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javac, for which we don't have /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/../lib/tools.jar.
Without this change, find-jdk-tools-jar.sh returns /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javac and the $(wildcard) in config.mk doesn't error out, and lunch can proceed and then in set_java_home() in envestup.sh we can set up the right JAVA_HOME and the java/javac binary;
But with this change, config.mk errors out right away after it gets the nonexistent ../lib/tools.jar and lunch can't proceed.

The root cause is the interdependency: lunch relies on config.mk to get values of build variables; while config.mk relies on lunch to set up the JAVA_HOME and PATH. The best I can suggest is to set up JAVA_HOME and PATH in your .bash_profile and not rely on envsetup.sh/lunch.
|Patch Set 1:

&gt; We only need HOST_JDK_TOOLS_JAR much later when building doclava,
 &gt; can we move it out of config.mk somewhere it won't get run by lunch
 &gt; but will get run for a build?

Yeah, we can fix it in that way. But I don't see a good place to  put these variables and people see their definition may be confused.
Instead I made it explicit not to check the host JDK tools when config.mk is called from env_setup.sh in https://android-review.googlesource.com/180070 .
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

I don't know why haeberling or alann isn't valid username when I was trying to add them as reviewers.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2 Verified+1

OK, I am submitting this change now.
We can come back when we have more ASAN builds.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

I think you just need to update the prebuilts in prebuilts/sdk/tools/{linux,darwin}/bin/zipalign
For unbundled branches, we use prebuilt zipalign.
Sorry, I didn't think of this before hand.
|Patch Set 1:

&gt; &gt; I think you just need to update the prebuilts in
 &gt; prebuilts/sdk/tools/{linux,darwin}/bin/zipalign
 &gt; &gt; For unbundled branches, we use prebuilt zipalign.
 &gt; &gt; Sorry, I didn't think of this before hand.
 &gt; 
 &gt; How would we change master-art or master-art-host to use the
 &gt; prebuilt?
 &gt; 
 &gt; (I assume this in the end doesn't apply to Brillo etc, as they'd
 &gt; never need to align anything until the framework is included?)

No, for platform build we should still use zipalign built from source.
Do we build the target java libraries but not any apk in these branches?
If so, yes, you need to add dependency project of zipalign with Dan's change.
|Patch Set 2: Code-Review+1
|Patch Set 3:

(3 comments)
|Patch Set 3:

(2 comments)
|Patch Set 6: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

&gt; How bad is the slowdown if you only call normalize-paths if the
 &gt; path contains &quot;..&quot;?
It only took only very slightly more time in my tests.
Looks like $(shell) on a python script is much more expensive than builtin $(findstring).
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2 Verified+1

I verified this patch fixed the libdl.so link error.
|Patch Set 2: Code-Review+2

&gt; make does care, but nothing used ifdef $(LOCAL_MODULE).blah until
 &gt; after we switched to ninja

That kati change was to address bug 24985980.
There is also a build system change I need to cherry-pick.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

I don't think you can make change to release branch. You should submit it to a upstream dev branch and then ask Bill to push to the release branch.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick from internal master.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

Unfortunately LOCAL_STATIC_LIBRARIES isn't transitive in the current build system. That means if you have &quot;LOCAL_STATIC_LIBRARIES := liblog&quot; in the module definition of libselinux.a, any thing that links libselinux.a won't get liblog.a automatically. You have to add liblog.a to the executable/shared library that links libselinux.a.
|Patch Set 2:

&gt; So Ying, should we stick with WHOLE archive, or just update the
 &gt; transient references like in init?

If the static library is selinux specific, I'd suggest to add as whole archive to libselinux.a; otherwise add to the end points where the symbols need to be resolved.
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Update the tests?
|Patch Set 2: Code-Review+2
|Patch Set 1:

target/board/generic_x86/BoardConfig.mk doesn't have TARGET_CPU_VARIANT either.
|Patch Set 3:

&gt; &gt; arm/arm64 uses 'generic' instead of 'default' (at least in
 &gt; bionic).
 &gt; &gt; x86 falls back to the 'generic' name in the makefiles too if the
 &gt; &gt; variant isn't understood
 &gt; 
 &gt; These are ART/dex2oat variants, which are totally orthogonal. All
 &gt; our architectures support &quot;default,&quot; but only arm64 does (where
 &gt; it's the same as &quot;default&quot;; don't know why that was introduced).
 &gt; 
DEX2OAT_TARGET_CPU_VARIANT falls back to &quot;default&quot; in build/core/config.mk, if TARGET_CPU_VARIANT isn't set.
The other use of TARGET_CPU_VARIANT is in bionic/libc. However it's only used for arm and arm64, see bionic/libc/arch-arm/arm.mk; For x86, TARGET_ARCH_VARIANT is used, see bionic/libc/arch-x86/x86.mk.
That said this change won't make any difference for the build behavior.

 &gt; I also somewhat doubt that the build system understands all the
 &gt; variants ART knows (!= takes advantage of). Take a look into the
 &gt; ARM instruction-set-features, for example.
 &gt; 
 &gt; It was originally the intent of irogers to try to be as similar to
 &gt; C compilers with this, but the build system support never got as
 &gt; complicated. I can go and clean up our side in a follow-up, if you
 &gt; or Ying want me to...

Sounds good to clean up.
|Patch Set 3:

&gt; &gt; DEX2OAT_TARGET_CPU_VARIANT falls back to &quot;default&quot; in
 &gt; &gt; build/core/config.mk, if TARGET_CPU_VARIANT isn't set.
 &gt; 
 &gt; Sure, but the whole setup isn't mirrored for the 2ND_ARCH, which
 &gt; was the bug here. I thought it better to be explicit (as arm64 and
 &gt; mips64 do), but I can also just change that, if you want to.

 let's default $(TARGET_2ND_ARCH_VAR_PREFIX)DEX2OAT_TARGET_CPU_VARIANT to &quot;default&quot;, consistent with setup of DEX2OAT_TARGET_CPU_VARIANT.

 &gt; &gt; DEX2OAT_TARGET_CPU_VARIANT falls back to &quot;default&quot; in
 &gt; &gt; build/core/config.mk, if TARGET_CPU_VARIANT isn't set.
 &gt; 
 &gt; Sure, but the whole setup isn't mirrored for the 2ND_ARCH, which
 &gt; was the bug here. I thought it better to be explicit (as arm64 and
 &gt; mips64 do), but I can also just change that, if you want to.
|Patch Set 4: Code-Review+2
|Patch Set 4:

This was done in https://android-review.googlesource.com/#/c/175756/
|Abandoned
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2:

(4 comments)
|Patch Set 3:

(1 comment)

Also note that in external/opencv3 the shared library libopencv_java has .aidl (and also java files) in its LOCAL_SRC_FILES that previously gets ignored. we need to clean them up.
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

LGTM
I'd like tbao to take a look at the build_image.py too.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Verified with checkbuild this time.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Reverted

This patchset was reverted in change: I925dae6a2d07792c61fcd3b6fd8718391ab993f8
|Patch Set 1:

&gt; This patchset was reverted in change: I925dae6a2d07792c61fcd3b6fd8718391ab993f8

This change breaks the FrameworksCoreTests build, because it has a resource file name org/apache/harmony/tests/java/lang/test#.properties, for which jar mistakes # as the the line comment start mark.
We need to quote the arguments. A new change was uploaded: https://android-review.googlesource.com/175954
|Patch Set 1: Code-Review+2 Verified+1

Investigating build breakage.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2:

Bertrand talked to me offline and we agreed to rename them to BRILLOW_XXX.
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

I am OOO.
Tao, feel free to +2 if it's fine with you.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

This will break build in unbundled branches, because bionic/libstdc++ isn't available in those thin branches.
I don't know ld examines indirect dependency libraries at build time.
|Patch Set 2:

(2 comments)
|Patch Set 2:

But if you treat the warning as error, it will still break pseudo-unbundled build (e.g. &quot;tapas skia &amp;&amp; make&quot;) in the full platform source tree. Note some teams do use such pseudo-unbundled build, i.e. &quot;apps&quot; targets on the build page.
Perhaps the fundamental fix is to pass &quot;-L&lt;path-to-the-ndk-lib&gt;&quot; when linking libskia, but it's hard to pass that flag from libexpat to libskia.
|Patch Set 1:

&gt; Use CUSTOM_TARGET_LINKER, then in core/binary.mk set my_linker with
 &gt; $(CUSTOM_$(my_prefix)$(LOCAL_2ND_ARCH_VAR_PREFIX)LINKER) if it
 &gt; exists.  That will work for CUSTOM_HOST_LINKER, CUSTOM_TARGET_2ND_LINKER,
 &gt; etc.

You can also override from command line make variables, something like:
$ make TARGET_LINKER=&lt;...&gt; 2ND_TARGET_LINKER=&lt;...&gt;
|Patch Set 2: Code-Review+2
|Patch Set 1:

You can't submit a change to a release branch.
+byi to see if he can merge it.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: -Code-Review

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; Actually, I think this only affects things that would live on the
 &gt; system partition. In that case, I think our normal tests would
 &gt; still be built correctly so that we can test them. It would be good
 &gt; to verify that.

Yes, I have tested:
The .so files are still being built to out/target/product/*/obj/APPS/*_intermediates/renderscript/, just that we don't install them to system.img.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

&gt; I think the missing target in question should be added to
 &gt; PARSE_TIME_MAKE_GOALS in a vendor specific Makefile (just like
 &gt; vendor/google/build/ninja_config.mk). Let me revert this for now?

grok-index is very special. It's built in mirror-aosp-master but witout vendor/google. Let me make the fix by removing the dependency on MKCMDGOALS.
|Patch Set 1:

&gt; &gt; I think the missing target in question should be added to
 &gt; &gt; PARSE_TIME_MAKE_GOALS in a vendor specific Makefile (just like
 &gt; &gt; vendor/google/build/ninja_config.mk). Let me revert this for now?
 &gt; 
 &gt; grok-index is very special. It's built in mirror-aosp-master but
 &gt; witout vendor/google. Let me make the fix by removing the
 &gt; dependency on MKCMDGOALS.

I have fixed the makefile. You can resubmit your change now.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

Weird, I don't see Verified button in this project...
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

&gt; This is going to break anybody who has sourced envsetup.sh

Yeah, fortunately  MODULES-IN has been in for only one day.
I don't want to bother keeping the short-live compatibility :)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

Good catch.
|Patch Set 1: Code-Review+1

&gt; Is there some reason I'm missing why kati needs to see all the
 &gt; goals if there are any PARSE_TIEM_MAKE_GOALS?

I can think of one case it's better to use all the goals:
make &lt;known_parse_time_goal&gt; &lt;new_parse_time_goal_not_listed&gt; 
Maybe that's extreme.
|Patch Set 1: -Code-Review

Do you see anything not working correctly if we pass all the goals to kati?
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review-1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 1: Code-Review-1

(2 comments)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 4:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 9: Code-Review+2
|Patch Set 1:

(4 comments)

I remember wiley asked me before if the build system supports objective c/c++, and then later he prefers to rewrite with Python instead.
Given that I am not sure how long we will continue supporting Mac OS build, I would rather remove the existing object C rules.
|Patch Set 1:

&gt; (4 comments)
 &gt; 
 &gt; I remember wiley asked me before if the build system supports
 &gt; objective c/c++, and then later he prefers to rewrite with Python
 &gt; instead.
Or it seems we can just rename the .mm files to .cpp?
 &gt; Given that I am not sure how long we will continue supporting Mac
 &gt; OS build, I would rather remove the existing object C rules.
|Patch Set 1:

&gt; I started down the path of writing the tool that I needed to work
 &gt; on Mac in Python, but then we decided to adopt Binder going forward
 &gt; on Android, and the tool became less important.
 &gt; 
 &gt; I believe Scott wants these changes because for the time that we
 &gt; support Mac build, he would like his unittests to run on Mac, where
 &gt; he does his development.  This use case is sort of orthogonal to
 &gt; the tool I was working on.

Probably port the code to c++ if it's possible.
There has been discussion in the Android team about discontinuing platform build on Mac OS. It puts heavy burden on the developers to maintain the Mac OS build, given the lack of tools (or version lagged) on Mac OS.
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

Previously this was used to disable arm64 clang target build.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

&gt; Actually, this won't work because launchcontrol won't ever run
 &gt; envsetup.

That's correct.
I don't know when the clockwork started building kernel inside the platform source tree, which must use recursive make. Recursive make is known harmful and usually not allowed by the platform build system.
If you really want to do that, you need to change your kernel build script to use the correct toolchain, not depend on the platform build system variables.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1

(1 comment)

I didn't even know the existence of this doc :)
|Patch Set 2: Code-Review+1

I don't have +2 in this project. +xav
|Patch Set 1:

&gt; Once https://android-review.googlesource.com/#/c/145231 clears,
 &gt; this CL serves as an example only and will be abandoned.

You need to add BoardConfig.mk:
TARGET_ANDROID_FILESYSTEM_CONFIG_H := device/htc/flounder/android_filesystem_config.h
Otherwise flounder_lte won't get it, 
because for flounder_lte its  $(TARGET_DEVICE_DIR) is device/htc/flounder/flounder_lte.
|Patch Set 1:

&gt; Does anyone happen to know off the top of their heads if we still
 &gt; need aidl to run on Windows any more?  I'm not certain of all the
 &gt; ways in which we run the tools.

Yes, aidl needs to run on Windows.
We ship aidl.exe in the SDK package. Majority of Android app developers are on Windows, I believe.
|Patch Set 4: Code-Review+2

(2 comments)
|Patch Set 5: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1:

(3 comments)

Also we may not want to checkbuild the windows target...
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 4:

(9 comments)

There must be a matching change in development/build/tools/windows_sdk.mk.
|Patch Set 4:

In general it's good to remove the recursive make call and make win_sdk a more normal build target.
|Patch Set 6:

(2 comments)
|Patch Set 8: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

Thanks for catching this!
I didn't know we also store information about .logtags of non-java modules.
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2

I believe you need rebase again...
|Patch Set 5: Code-Review+2
|Patch Set 6: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1

(3 comments)

I don't have +2 in this project.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

This is dependent on the build system change:
https://android-review.googlesource.com/#/c/167424/
|Patch Set 1:

&gt; No, this change doesn't depend on anything that isn't already
 &gt; checked in. That change depends on this change

you are right. I was thinking you disabled clang for windows build in that CL.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(3 comments)
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 4: Code-Review+2

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: -Code-Review

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 6: Code-Review+2
|Patch Set 2:

&gt; Shouldn't cleaning source paths and preventing code outside of
 &gt; srcdir or builddir take care of that?
 &gt; 
 &gt; Though if builddir itself had a '..', that could still hit this

In the makefile build system, we convert &quot;../&quot; to &quot;dotdot/&quot; in the output path :)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Hi Shinichiro,
  Looks like the new kati has a bug. The aosp_arm ninja build is broken, e.g. in https://android-build-uber.corp.google.com/builds/aosp-master-linux-aosp_arm-eng_ninja/2188935/logs/build_error.log .
kati expands something like &quot;-I LOCAL_SHARED_LIBRARIES -I += &quot; to the LOCAL_CFLAGS.
Look at the source makefile in system/webservd/Android.mk:

  LOCAL_C_INCLUDES += \
    $(webservd_root) \
    $(webservd_root)/gen \
    external/gtest/include \

  LOCAL_SHARED_LIBRARIES += \
      libchrome \

looks like kati doesn't stop the &quot;LOCAL_C_INCLUDES +=&quot;  at the new line after the continual \.
|Patch Set 3:

(3 comments)
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

The new patch doesn't install the init.rc as a separate module. It also takes care multilib and custom images.
Tom, could you test this patch?
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

TBR
|Patch Set 1:

(5 comments)
|Patch Set 6:

(1 comment)
|Uploaded patch set 7.
|Patch Set 7:

(2 comments)
|Patch Set 7:

(2 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Patch Set 12: Code-Review+2

Sorry, I didn't see you had uploaded new patchset.
PS12 now is essentially the same as PS9.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick from internal master.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Cherry-pick from internal master.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

This is a cherry-pick from internal master.
|Patch Set 1:

There was a bigger change in internal master that also did this. This change will conflict with that change.
Let me try to cherry-pick those changes to aosp.
|Patch Set 1: Code-Review+2

LGTM. I don't think we would ever go back to cygwin build.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 4: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 4:

(4 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

&gt; &gt; &gt; &gt; i meant symbolic links to /data for the lib directories, so
 &gt; we
 &gt; &gt; &gt; &gt; wouldn't need two linkers at all...
 &gt; &gt; &gt;
 &gt; &gt; &gt; You mean /system/lib -&gt; /data/lib ?
 &gt; &gt; &gt; Then how would non-instrumented binaries work?
 &gt; &gt;
 &gt; &gt; ah, so it's not the entire OS then, just a larger than usual
 &gt; &gt; fraction of it?
 &gt; 
 &gt; Yes. The entire OS with a few exceptions :)
I don't know how the linker works at runtime, but I am wondering if we can pass runtime option to the linker? something like:
-Wl,-dynamic-linker,&quot;/system/bin/linker -asan&quot;
|Patch Set 4:

(1 comment)
|Patch Set 5:

(2 comments)
|Patch Set 6: Code-Review+1

(1 comment)

Otherwise the Android.mk LGTM,
|Patch Set 7: Code-Review+1
|Patch Set 7:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(2 comments)
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

&gt; (1 comment)
 &gt; 
 &gt; I've addressed your comments in the updated version of the
 &gt; &quot;Android.mk tweaks&quot; CL.
 &gt; 
 &gt; If you'd prefer to see it all in one change, I'll give up on
 &gt; preserving the baseline generated files and just squash everything
 &gt; into this CL.

Yes, please. I'd like to just review the final files :-)
|Patch Set 3:

(3 comments)
|Patch Set 4: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 3: Code-Review+2
|Patch Set 1:

(3 comments)

I am uploading a new patchset.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+1 Verified+1
|Patch Set 2:

I think so. I have tested it on aosp_arm build.
|Uploaded patch set 1.
|Patch Set 1:

I added this support because now Chris has a use case.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1

To clarify: this just adds icu4j as dependency of the docs module. It doesn't add more to the built docs.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

LGTM
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

&gt; &gt; wangying will correct me if i'm wrong, but my belief is that the
 &gt; &gt; &quot;eng&quot; tag means &quot;just eng builds&quot; whereas the &quot;debug&quot; tag means
 &gt; &gt; &quot;userdebug and eng builds&quot;.
 &gt; 
 &gt; Yes, that's my understanding too.
 &gt; 
 &gt; LOCAL_MODULE_TAGS=eng will include it in &quot;eng&quot; and &quot;test&quot; builds
 &gt; while LOCAL_MODULE_TAGS=debug will include it *also* in &quot;userdebug&quot;
 &gt; builds (still present in &quot;eng&quot; and &quot;test&quot;.)
 &gt; 
 &gt; I guess my main question is whether it's relevant to include it in
 &gt; &quot;userdebug&quot; builds too, since right now we only seem to need it in
 &gt; &quot;eng&quot; builds.
 &gt; 
 &gt; I'm leaning towards deferring this patch until it's actually
 &gt; needed, but I wanted to see what your opinions are before I decide
 &gt; to abandon it and leave it for later.
 &gt; 
 &gt; Cheers,
 &gt; Filipe

Yes, a module tagged as &quot;eng&quot; will be installed in only eng build;
a module tagged as &quot;debug&quot; will be installed in both userdebug and eng build.
|Patch Set 1:

(7 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Limit static executable on Linux in PS2.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1:

&gt; Thanks for letting me know the change! I still prefer my fix even
 &gt; if the static executable works on Mac. We should let the dynamic
 &gt; loader know the prebuilt library path by DT_RPATH or
 &gt; LD_LIBRARY_PATH environment variable. Currently, I think neither is
 &gt; used so binaries in out/host/linux-x86/bin may have an ABI issue in
 &gt; future. For example, if a versioned symbol in prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.15-4.8//x86_64-linux/lib64/libgcc_s.so.1
 &gt; is updated, I think we'll see the same issue in all binaries in
 &gt; out/host/linux-x86/bin.

Many (noticeably the SDK tools) of the host binaries need to work outside the Android source tree.
That requires prerequisite on the host machine and it makes little sense to embedded rpath of Android source tree.
|Patch Set 1:

&gt; &gt; Thanks for letting me know the change! I still prefer my fix even
 &gt; &gt; if the static executable works on Mac. We should let the dynamic
 &gt; &gt; loader know the prebuilt library path by DT_RPATH or
 &gt; &gt; LD_LIBRARY_PATH environment variable. Currently, I think neither
 &gt; is
 &gt; &gt; used so binaries in out/host/linux-x86/bin may have an ABI issue
 &gt; in
 &gt; &gt; future. For example, if a versioned symbol in prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.15-4.8//x86_64-linux/lib64/libgcc_s.so.1
 &gt; &gt; is updated, I think we'll see the same issue in all binaries in
 &gt; &gt; out/host/linux-x86/bin.
 &gt; 
 &gt; Many (noticeably the SDK tools) of the host binaries need to work
 &gt; outside the Android source tree.
 &gt; That requires prerequisite on the host machine and it makes little
 &gt; sense to embedded rpath of Android source tree.

Also note that almost all host binaries have switched to libc++.so built from source and we also ship libc++.so in the SDK package.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

Colin suggested to move to KATI_LD in build/core/ninja.mk.
We already have other global ld flags there and this make the static ctati an Android specific thing.
|Abandoned
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 5: Code-Review+2

LG if you have tested it.
|Patch Set 6: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Though this worked with the example in https://android-review.googlesource.com/#/c/162098/1,
I am puzzled by &quot;jar -C&quot; in my test case:
$ jar cf tmp.jar build/core/Makefile
$ jar uf tmp.jar -C &quot;out/host/common/obj/JAVA_LIBRARIES/smalilib_intermediates&quot; &quot;resources/smali.properties&quot; -C &quot;external/smali/smali&quot; &quot;build.gradle&quot; -C &quot;external&quot; smali/smali/runantlr.sh -C &quot;external&quot; smali/smali/runjflex.sh
$ unzip -l tmp.jar 
Archive:  tmp.jar
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  2015-07-29 12:14   META-INF/
       68  2015-07-29 12:14   META-INF/MANIFEST.MF
    77719  2015-07-29 10:41   build/core/Makefile
       31  2015-07-29 11:23   resources/smali.properties
     4798  2015-06-19 10:54   build.gradle
     3273  2015-06-19 10:54   runantlr.sh
     2089  2015-06-19 10:54   runjflex.sh
---------                     -------
    87978                     7 files

I'd expect the runantlr.sh be added as smali/smali/runantlr.sh and runjflex.sh as smali/smali/runjflex.sh.
The above result can't be explained by &quot;man jar&quot;.

Do you guys have any idea?
|Patch Set 1:

&gt; Yes, this is because the jar tool is idiotic. &quot;-C&quot; options are
 &gt; global, they do not apply only for the following argument. For each
 &gt; entry in the jar file, it will compare the absolute path of the
 &gt; file
 &gt; to *every* prefix specified by &quot;-C&quot; and arbitrarily choose the
 &gt; first that the absolute path starts with. So here,
 &gt; &quot;external/smali/smali&quot; applies to build.gradle, runantlr.sh and
 &gt; runjflex.sh.
Ah, that explains it! The manual of jar totally missed that part.
 &gt; 
 &gt; In other words, it's best not to have &quot;overlapping&quot; &quot;-C&quot; options
 &gt; that are prefixes of each other.
 &gt; 
 &gt; This also implies that i'll just have to make copies of all
 &gt; resources i want. sigh.
|Patch Set 1:

OK, I am abandoning this change.
|Abandoned
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3:

&gt; Ying, is there a LOCAL_HOST_PREFER_32BIT? This is pretty, pretty
 &gt; ugly.

I guess you mean a variable that can be defined in the top-level art/Android.mk, so any host modules in this dir are 32-bit only on Mac?
Unfortunately our build system doesn't support dir/git-project based control variables. They are only module based.
|Patch Set 3:

(1 comment)

I have uploaded a smaller change, which also takes care of the dalvikvm symlink creation:
https://android-review.googlesource.com/160830
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4: Code-Review+2
|Patch Set 4: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

TBR
|Patch Set 1: Code-Review+1

In general I think it's bad idea to build all the combinations in a single make.
Instead I'd prefer to use a variable to control what configuration to use for the current build, and for a build only build single configuration.
But art's build has gone so far it's hard to switch the scheme at this point, I guess.
|Patch Set 1:

&gt; &gt; In general I think it's bad idea to build all the combinations in
 &gt; a
 &gt; &gt; single make.
 &gt; &gt; Instead I'd prefer to use a variable to control what
 &gt; configuration
 &gt; &gt; to use for the current build, and for a build only build single
 &gt; &gt; configuration.
 &gt; &gt; But art's build has gone so far it's hard to switch the scheme at
 &gt; &gt; this point, I guess.
 &gt; 
 &gt; ? These are exactly the variables that control what will be
 &gt; built...

I was reading the build-art-multi-executable function in art/build/Android.executable.mk, which expands to every possible combination with multiple nested loop. That really scared me.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 4:

Should we disable jack for all hostdex in the build system? What's plan for the future of hostdex?
|Patch Set 4:

&gt; I think the plan is to build all dex with Jack, no matter if they
 &gt; are host or target.
 &gt; 
That means for every host static Java library needed by a host dalvik library,
you'll need to add a new hostdex variant.
That's probably not scalable.
Maybe the host static Java library should set up rules to build both classes.jar and class.jack, like how we handle the target static Java libraries.


 &gt; Hopefully Jack will be default soon in OASP so this will be
 &gt; detected before submit.
|Patch Set 9: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

I don't know why we need junit v.s. juni-target, junit-hostdex v.s. junit-target-dex. But I am sure Kenny knows :-)
|Patch Set 1:

(1 comment)

This brings extra complexity to the makefile build system while we can already define two separate modules with the existing functionalities.
If it's only for the bp-to-mk translation, I'd prefer https://android-review.googlesource.com/#/c/157414 that generates two Android.mk modules.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 8:

(1 comment)
|Patch Set 11:

(1 comment)
|Patch Set 11: Code-Review+1
|Patch Set 13: Code-Review+2
|Patch Set 14: Code-Review+2
|Patch Set 3: Code-Review+2

No, that's fine, if you don't want to hardcode the path.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

Not sure how it got there...
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1:

I don't see any change.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; This won't stop building the libraries in 64-bit, right?

No. 
But the 64-bit libraries will be built only if you run mm/mmm, or required by other modules.
HOST_PREFER_32_BIT behaves the same way.
|Patch Set 1:

&gt; &gt; &gt; This won't stop building the libraries in 64-bit, right?
 &gt; &gt;
 &gt; &gt; No.
 &gt; &gt; But the 64-bit libraries will be built only if you run mm/mmm, or
 &gt; &gt; required by other modules.
 &gt; &gt; HOST_PREFER_32_BIT behaves the same way.
 &gt; 
 &gt; Normally mm is our preferred way of operation, though.
 &gt; 
 &gt; But it's the Mac, so I don't care too much...
It's fine to build both 32-bit and 64-bit libraries on Mac, even though only the 32-bit ones are used if you run the executables.
Probably this is preferred, as it ensures 64-bit still builds and later on you can easily switch back to 64-bit if it's allowed...
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; do we need the same for $(PRODUCT_OUT) in BUILD_FINGERPRINT_FROM_FILE?

$(PRODUCT_OUT) should have been created at that point for $(PRODUCT_OUT)/previous_build_config.mk. But I think it's safer to create again.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

&gt; &gt; lol. it's because you have a file &quot;signal.h&quot; in this directory,
 &gt; and
 &gt; &gt; when &lt;unistd.h&gt; tries to #include &lt;signal.h&gt; it actually gets
 &gt; your
 &gt; &gt; &quot;signal.h&quot; instead.
 &gt; &gt;
 &gt; &gt; [+wangying] because that seems surprising to me.
 &gt; 
 &gt; That is hilarious. Thanks for figuring it out, and sorry about the
 &gt; wasted time. I can definitely rename the file while wangying@
 &gt; figures out what's going on.

The build system always adds $(LOCAL_PATH) to your LOCAL_C_INCLUDES, and it comes before the system include paths.
|Patch Set 3:

(4 comments)
|Patch Set 4:

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 6: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)

Otherwise I don't have problem with this change.
|Patch Set 5: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1

I'll give +2 once your linker change is in.
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2:

&gt; (1 comment)
 &gt; 
 &gt; wangying: are LOCAL_COPY_HEADERS_TO and LOCAL_EXPORT_C_INCLUDES
 &gt; mutually exclusive?
No, they are not mutually exclusive.
 &gt; can we add the latter to external/expat without
 &gt; removing the former until we've had chance to fix existing callers?
Sounds good.
|Patch Set 4: Code-Review+1
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

LGTM
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

I don't see verify or submit button, probably because it's a release branch and not supposed to accept new change from gerrit.
+byi
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2

Updated with the latest code.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)

Actually I used to propose the following solution for the compiler flags dependency tracking. Unfortunately it added up to 25% make start-up time, so I didn't get it checked in.

commit 899d8d1f0cfb7936cb5efd943e876974ac87402e
Author: Ying Wang &lt;wangying@google.com&gt;
Date:   Wed May 29 19:14:26 2013 -0700

    Track compiler flags dependency.
    
    Bug: 9038177
    Change-Id: I84d6f01adf2120c03590e8e4f8c3229ce0cdfb44

diff --git a/core/binary.mk b/core/binary.mk
index 931e422..dff1cef 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -902,3 +902,14 @@ endif
 
 # Make sure export_includes gets generated when you are running mm/mmm
 $(LOCAL_BUILT_MODULE) : &#124; $(export_includes)
+
+###########################################################
+# Flags dependency
+###########################################################
+dep_flags := $(LOCAL_CFLAGS) $(LOCAL_CPPFLAGS) $(LOCAL_CONLYFLAGS) $(LOCAL_ASFLAGS)
+dep_flags_md5 := $(word 1, $(shell echo $(dep_flags) &#124; $(MD5SUM)))
+flags_dep_file := $(intermediates)/$(dep_flags_md5).flags.dep
+$(flags_dep_file) :
+       $(hide) rm -f $(dir $@)*.flags.dep &amp;&amp; mkdir -p $(dir $@) &amp;&amp; touch $@
+
+$(all_objects) : $(flags_dep_file)
|Patch Set 2: Code-Review-1
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)

Actually we can simplify it a little bit.
I'll upload a new patchset.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

I am curious why the error doesn't manifest without SANITIZE_TARGET=address?
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+1 -Verified
|Patch Set 3: Code-Review+2
|Patch Set 2:

(1 comment)

The test cases look good!
|Patch Set 3: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 5: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

Fixed a typo in PS2.
|Patch Set 1:

checkbuild should have already covered tests.
Which module did you see not covered by checkbuild?
|Patch Set 1: Code-Review-1

I know what's going on now:
In art/Android.mk we have:
# Don't bother with tests unless there is a test-art*, build-art*, or related target.
art_test_bother := false
ifneq (,$(filter %tests test-art% valgrind-test-art% build-art%,$(MAKECMDGOALS)))
  art_test_bother := true
endif

That means the art tests are visible to the build system only when  one of &quot;%tests test-art% valgrind-test-art% build-art%&quot; is on the make command line.

This change won't help. You'll need to add checkbuild to that list so the tests get exposed when you run &quot;make checkbuild&quot;.
|Patch Set 2: Code-Review-1

You don't need any change here, or explicitly add dependency of checkbuild on anything.
If you want to check the art-test modules, what you need to do is to expose the module definitions when you run &quot;make checkbuild&quot;.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

LGTM
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 5:

(3 comments)
|Patch Set 7: Code-Review+2
|Patch Set 8: Code-Review+2
|Patch Set 9: Code-Review+2
|Patch Set 11: Code-Review+2
|Patch Set 5:

(3 comments)
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 9: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 5: Code-Review+1

Dan, do you have any concern?
|Patch Set 2: Code-Review+1

&gt; wangying: is the DIST_DIR given to us by the build server
 &gt; guaranteed to be an absolute path?

You can find it in the build command at the top of the build.log, such as:
 DIST_DIR=/buildbot/dist_dirs/git_master-fastbuild_linux-hammerhead-serdebug/2026744 
Though currently DIST_DIR given by the build server is absolute path, we'd better not assume it's guaranteed.
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1:

LGTM
|Patch Set 2:

(3 comments)

Nice!
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1

Let's see if Colin has any concern.
|Patch Set 5: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 2:

LGTM
|Patch Set 2:

(1 comment)
|Patch Set 2:

LGTM
|Patch Set 1: Code-Review-1

Unfortunately this is a trade-off we had to make, otherwise engineers (especially framework developers) tend to breaks test apps submitting a change without doing a checkbuild.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

&gt; can you move this to lollipop-mr1-cts-dev branch?

There is no lollipop-mr1-cts-dev branch for the build project. The lollipop-mr1-cts-dev manifest points the build project to lollipop-mr1-release. That explains why I can't submit this change.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch master as commit f054bd34b64247a8e411c60ded9c62f971dccfe9
|Abandoned

I have submitted the change to aosp-master. You guys can cherry-pick it to whatever branch that's upstream of lollipop-mr1-cts-dev.
|Patch Set 1: Cherry Picked from branch lollipop-mr1-release.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)

I am afraid this will bloat the system.img size too much. On what builds/devices do you want to enable this build?

Also did you ever try a build? I am not sure how well it interacts with custom rules in Android.mk, though generated source files in $(local-generated-sources-dir) should be fine now.
|Patch Set 1:

&gt; &gt; (2 comments)
 &gt; &gt;
 &gt; &gt; I am afraid this will bloat the system.img size too much. On what
 &gt; &gt; builds/devices do you want to enable this build?
 &gt; 
 &gt; Could we put all the instrumented .so on /data?
sounds like a good idea.
Can we build a overlay folder structure in /data that can be applied to a normal build?

 &gt; I guess we will start with clusterfuzz devices, i.e. N5/6/9.
 &gt; 
 &gt; &gt; Also did you ever try a build? I am not sure how well it
 &gt; interacts
 &gt; &gt; with custom rules in Android.mk, though generated source files in
 &gt; &gt; $(local-generated-sources-dir) should be fine now.
 &gt; 
 &gt; I marked a bunch of targets for sanitization and ran build (32-bit
 &gt; only though, for now), it succeeded but it looks like something
 &gt; went slightly wrong as com.google.bluetooth is segfaulting at
 &gt; startup, but everything else works fine. I'll investigate.
 &gt; 
 &gt; Could you point me to something you think could fail? I can't just
 &gt; enable asan for everything without a significant cleanup.

I don't have a specific case. 
But in general if the intermediate dir of a module (by call to local-intermediates-dir or intermediates-dir-for) is directly referred to in an Android.mk,
or if an Android.mk refers to variables set up by the core build system after &quot;include $(BUILD_SHARED_LIBRARIES)&quot; to do postprocessing,
we'll have hard time auto-generating modules.
|Patch Set 1:

(1 comment)

&gt; (1 comment)
 &gt; 
 &gt; &gt; &gt; &gt; (2 comments)
 &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; I am afraid this will bloat the system.img size too much. On
 &gt; &gt; what
 &gt; &gt; &gt; &gt; builds/devices do you want to enable this build?
 &gt; &gt; &gt;
 &gt; &gt; &gt; Could we put all the instrumented .so on /data?
 &gt; &gt; sounds like a good idea.
 &gt; &gt; Can we build a overlay folder structure in /data that can be
 &gt; &gt; applied to a normal build?
 &gt; 
 &gt; Could you elaborate? Are we still in the one-make-invocation mode?
 &gt; Is it as simple as re-writing LOCAL_MODULE_PATH for instrumented
 &gt; .so to /data/lib?
No, we'll do a separate ASAN build and the result can be applied to a normal build.
Here is what I was thinking:
We set up a separate build target on the build server with &quot;SANITIZE_TARGET=true&quot;. The build system will build only ASAN enabled modules (and their dependencies) and package them in a zip file. The zip file will be in a structure that you can push to a device's data partition. Basically that's how the testing team builds and runs other tests.
With this approach the only build system change is to install a module to out/target/product/.../data if ASAN is enabled.

 &gt; 
 &gt; &gt;
 &gt; &gt; &gt; I guess we will start with clusterfuzz devices, i.e. N5/6/9.
 &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; Also did you ever try a build? I am not sure how well it
 &gt; &gt; &gt; interacts
 &gt; &gt; &gt; &gt; with custom rules in Android.mk, though generated source
 &gt; files
 &gt; &gt; in
 &gt; &gt; &gt; &gt; $(local-generated-sources-dir) should be fine now.
 &gt; &gt; &gt;
 &gt; &gt; &gt; I marked a bunch of targets for sanitization and ran build
 &gt; &gt; (32-bit
 &gt; &gt; &gt; only though, for now), it succeeded but it looks like something
 &gt; &gt; &gt; went slightly wrong as com.google.bluetooth is segfaulting at
 &gt; &gt; &gt; startup, but everything else works fine. I'll investigate.
 &gt; &gt; &gt;
 &gt; &gt; &gt; Could you point me to something you think could fail? I can't
 &gt; &gt; just
 &gt; &gt; &gt; enable asan for everything without a significant cleanup.
 &gt; &gt;
 &gt; &gt; I don't have a specific case.
 &gt; &gt; But in general if the intermediate dir of a module (by call to
 &gt; &gt; local-intermediates-dir or intermediates-dir-for) is directly
 &gt; &gt; referred to in an Android.mk,
 &gt; &gt; or if an Android.mk refers to variables set up by the core build
 &gt; &gt; system after &quot;include $(BUILD_SHARED_LIBRARIES)&quot; to do
 &gt; &gt; postprocessing,
 &gt; &gt; we'll have hard time auto-generating modules.
|Patch Set 1:

&gt; &gt; (1 comment)
 &gt; &gt;
 &gt; &gt; &gt; (1 comment)
 &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; &gt; (2 comments)
 &gt; &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; &gt; I am afraid this will bloat the system.img size too much.
 &gt; &gt; On
 &gt; &gt; &gt; &gt; what
 &gt; &gt; &gt; &gt; &gt; &gt; builds/devices do you want to enable this build?
 &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; Could we put all the instrumented .so on /data?
 &gt; &gt; &gt; &gt; sounds like a good idea.
 &gt; &gt; &gt; &gt; Can we build a overlay folder structure in /data that can be
 &gt; &gt; &gt; &gt; applied to a normal build?
 &gt; &gt; &gt;
 &gt; &gt; &gt; Could you elaborate? Are we still in the one-make-invocation
 &gt; &gt; mode?
 &gt; &gt; &gt; Is it as simple as re-writing LOCAL_MODULE_PATH for
 &gt; instrumented
 &gt; &gt; &gt; .so to /data/lib?
 &gt; &gt; No, we'll do a separate ASAN build and the result can be applied
 &gt; to
 &gt; &gt; a normal build.
 &gt; &gt; Here is what I was thinking:
 &gt; &gt; We set up a separate build target on the build server with
 &gt; &gt; &quot;SANITIZE_TARGET=true&quot;. The build system will build only ASAN
 &gt; &gt; enabled modules (and their dependencies) and package them in a
 &gt; zip
 &gt; &gt; file. The zip file will be in a structure that you can push to a
 &gt; &gt; device's data partition. Basically that's how the testing team
 &gt; &gt; builds and runs other tests.
 &gt; &gt; With this approach the only build system change is to install a
 &gt; &gt; module to out/target/product/.../data if ASAN is enabled.
 &gt; 
 &gt; Will that work for executables, like /system/bin/mediaserver? They
 &gt; would need to go to /system and replace the executables in the
 &gt; first build.
I don't really know. 
If that doesn't work, the two-make-in-a-row (&quot;make &amp;&amp; make SANITIZE_TARGET=true&quot;) will also needs very little build system change.


 &gt; 
 &gt; &gt;
 &gt; &gt; &gt;
 &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; I guess we will start with clusterfuzz devices, i.e.
 &gt; N5/6/9.
 &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; &gt; Also did you ever try a build? I am not sure how well it
 &gt; &gt; &gt; &gt; &gt; interacts
 &gt; &gt; &gt; &gt; &gt; &gt; with custom rules in Android.mk, though generated source
 &gt; &gt; &gt; files
 &gt; &gt; &gt; &gt; in
 &gt; &gt; &gt; &gt; &gt; &gt; $(local-generated-sources-dir) should be fine now.
 &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; I marked a bunch of targets for sanitization and ran build
 &gt; &gt; &gt; &gt; (32-bit
 &gt; &gt; &gt; &gt; &gt; only though, for now), it succeeded but it looks like
 &gt; &gt; something
 &gt; &gt; &gt; &gt; &gt; went slightly wrong as com.google.bluetooth is segfaulting
 &gt; at
 &gt; &gt; &gt; &gt; &gt; startup, but everything else works fine. I'll investigate.
 &gt; &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; &gt; Could you point me to something you think could fail? I
 &gt; can't
 &gt; &gt; &gt; &gt; just
 &gt; &gt; &gt; &gt; &gt; enable asan for everything without a significant cleanup.
 &gt; &gt; &gt; &gt;
 &gt; &gt; &gt; &gt; I don't have a specific case.
 &gt; &gt; &gt; &gt; But in general if the intermediate dir of a module (by call
 &gt; to
 &gt; &gt; &gt; &gt; local-intermediates-dir or intermediates-dir-for) is directly
 &gt; &gt; &gt; &gt; referred to in an Android.mk,
 &gt; &gt; &gt; &gt; or if an Android.mk refers to variables set up by the core
 &gt; &gt; build
 &gt; &gt; &gt; &gt; system after &quot;include $(BUILD_SHARED_LIBRARIES)&quot; to do
 &gt; &gt; &gt; &gt; postprocessing,
 &gt; &gt; &gt; &gt; we'll have hard time auto-generating modules.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

+baligh,tbao to confirm the release signing  process.
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2

Thanks Mark!
|Patch Set 1: Code-Review-1

This would break the build if PATH isn't set up (i.e. you don't run lunch to select product).
|Patch Set 1: Code-Review+2

&gt; &gt; This would break the build if PATH isn't set up (i.e. you don't
 &gt; run
 &gt; &gt; lunch to select product).
 &gt; With this change we can use the command as the other DISTTOOLS. In
 &gt; build_image.py [1] the other commands, such as build_verity_tree,
 &gt; are also assumed to be available in the PATH, why would this
 &gt; command be different?
 &gt; 
 &gt; [1] https://android.googlesource.com/platform/build/+/master/tools/releasetools/build_image.py

OK, this used to strike us. I had forgotten that since then we have set up the PATH in the makefile before calling build_image.py.
|Patch Set 1: Verified+1
|Patch Set 1:

Vince, I am not the owner of these projects.
My only concern is, don't add them to the platform branch manifest if the platform build doesn't need them.
|Patch Set 1: Code-Review+1

&gt; I am very familiar with the build system, but Ying tells me that
 &gt; such transitive dependencies are not tracked.  Ying?

That's correct.
Hopefully the new build system in development will track transitive dependencies.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2:

RE-uploaded the change based on the latest gralloc.
Request to re-review
|Uploaded patch set 2.
|Patch Set 1:

These apis were added so that we could change the visibility of the wallpaper from the Launcher. When the Launcher is displayed on the screen, the wallpaper is also alive and consumes CPU. The Launcher is unable to all the onVisibilityChanged as the WallpaperManager does not support the same.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2:

This change does not change the behaviour of the existing API.

It ensures that the scaling factor is decided based on the actual width and height of wallpaper 
instead of the deltaw and deltah. 

Without this change, for screen resolutions like WSVGA(1024*600), (1366*768) etc; the wallpaper was displayed with a black bar at the top and bottom of the screen.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

Mathias,

Does this imply that we need the HWC to invoke copybit in gingerbread ?
|Patch Set 1: Abandoned

No longer needed
|Uploaded patch set 2.
|Patch Set 2: Abandoned

Merged as #16158
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2:

Can you please review the updated patchset?
|Patch Set 1:

1) MSM component behavior is correct according to OMX spec. nStride and nSliceHeight are correct fields to populate. 

2) OMAP sets zero value for stride and sliceheight on video decoder output port and thatâ€™s the reason for crash. OMAP behavior is not compliant with OMX spec

3) StageFright is doing a similar rounding operation (align to 16 bytes) with PV SW codecs when height and width are not aligned to 16 bytes and passing rounded values as render height and width
|Uploaded patch set 2.
|Uploaded patch set 2.
|is Gsm is legacy code so i retained it. This method wasnt used internally earlier. Now with my code changes it will be used from Ril but isGsm will not be sent. So I added the dataAvail check for such cases
|These are random values added to match the size of RIL_SignalStrength_v6 .
If the size of this message is not same as RIL_SignalStrength_v6 , parsing in reference ril will break or we need to add additional length validity check in reference-ril
|only one of the three &quot;if&quot; case will be valid at a time.  So onComplete message will be used only once. I will change the code to 
if (efMWIS !=null) { ...}
else if efCPHS_MWI != null) {...} 
else if ((efMWIS == null) &amp;&amp; (efCPHS_MWI == null)) {..}
|Logic is slightly different for Gsm &amp; Cdma. For GSM the voicemail count is written into the SIM , local value updated and count stored in preferences only if sim write fails.

For CDMA, ( no UIM write as UIM does not support this file id) ,  the count local value is updated and count is always stored in preferences
|code bug. as per standards it is 99 for cdma &amp; 255 for Gsm. But 0xff was in cdma in the original Google code , so I did not edit and retained the same as part of this change. Internally we had a discussion thread to change it.
|yes. will do.
|Defining an invalid value will let telephony know that rsrp is not valid and rsrp should be ignored for signal strength determination
|Valid range recommendation -20dB to + 30dB. Invalid value 255
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 1:

Depends-on:https://android-review.googlesource.com/#/c/40512/
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 1: Abandoned

Squashed with https://android-review.googlesource.com/#/c/40671/
|Patch Set 1:

Depends on https://review.source.android.com/#change,17395
that has RIL_LTE_SignalStrength defined
|Uploaded patch set 2.
|Patch Set 2:

Rebased the changes on GingerBread
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2: I would prefer that you didn't submit this

Upload messed up , will reupload
|Uploaded patch set 3.
|Patch Set 3:

Uploaded correct files . Code same as patch 1
|Uploaded patch set 4.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: (1 inline comment)


|Uploaded patch set 4.
|Patch Set 4: (2 inline comments)


|Patch Set 4: (1 inline comment)


|Patch Set 4:

Logically these are two different changes.

But minor code changes I made in TP_UDH like using the voicemail count in updateMessageWaitingIndicator are needed here. Hence the dependency or will have to replicate the same code changes again in this review id
|Patch Set 4:

Dependency cannot be reversed reason being to store voicemail count , need the voicemail count first . Voice mail count for GSM is implemented in 

https://review.source.android.com/#patch,sidebyside,17394,3,telephony/java/com/android/internal/telephony/gsm/SmsMessage.java

If you still think it needs to be done separately I can break changes in 17394 to 1. changes for voicemail count , 2. TP-UDH specific changes only
|Uploaded patch set 5.
|Patch Set 5:

Dependency removed
|Patch Set 5:

Dependency removed
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 11: (2 inline comments)


|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 1:

Yes protobuf is an ideal candidate for the ims interface. It saves considerable weeks of development effort. Modifying message contents  and adding new messages  to the interface without breaking backward compatibility is easily done.
|Patch Set 1:

As for the Nexus One/S, I can see they fail this tests with as it was. (not due to this fix) when I test each item separately.

All these tests can be failed when OEM changes the key arrangement for user convenience.
For example, CTS assumes that â€œAâ€� would be never assigned to the same key with â€œ1â€�. 
But â€˜Aâ€™ can be placed at the most top-left with AZERTY(modified qwerty) with the sub-key â€˜1â€™ at the same time.   
So we modified the test case that can be passed with both normal qwerty and azerty based on common sense.

This fix may not be appropriate to be merged and 
However, We needed your opinion that this failures does not mean violation of the compatibility but just a CTS case issue.

we're working on the code fix as you suggested and will push the code ASAP.
|Patch Set 1:

Looks good to me.
MIN_MATCH cannot be static variable.
|Patch Set 1: Looks good to me, but someone else must approve

LGTM

it passes with every type of keypad we're supporting now.
thanks for your elaboration.
|Patch Set 1:

I've just used git clone for this small change.
I'll use repo in the future.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Looks good to me, but someone else must approve

Due to carrier's requirement on Audio OEM has to add the user scenario like Eclair. 

NORMAL -&gt; VABRATE -&gt; SILENT (by volume down)
SILENT -&gt; VIBRATE -&gt; NORMAL (by volume up)

With this case, CTS fails for AudioMangerTest.
Can we get a waiver on this failure for this specific version?
|Patch Set 1:

Patch Set 1: Looks good to me, but someone else must approve
Due to carrier's requirement on Audio OEM has to add the user scenario like Eclair.
NORMAL -&gt; VABRATE -&gt; SILENT (by volume down) SILENT -&gt; VIBRATE -&gt; NORMAL (by volume up)
With this case, CTS fails for AudioMangerTest. Can we get a waiver on this failure for this specific version?
|Patch Set 1: Abandoned

thanks
|Patch Set 1: Abandoned

thanks
|Patch Set 1: Abandoned

thanks
|Patch Set 1: Abandoned

thanks
|Patch Set 1:

This change depends on the following changes

https://review.source.android.com/#change,20229

https://review.source.android.com/#change,20232

https://review.source.android.com/#change,20233
|Patch Set 1:

This change depends on the following changes

https://review.source.android.com/#change,20229

https://review.source.android.com/#change,20231

https://review.source.android.com/#change,20232
|Uploaded patch set 4.
|Uploaded patch set 6.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 6.
|Uploaded patch set 2.
|Patch Set 2:

This change depends on the following change.

https://review.source.android.com/#change,20038
|Patch Set 2:

This change depends on the following change.

https://review.source.android.com/#change,20038
|Uploaded patch set 3.
|Patch Set 1:

This change depends on the following change.

https://review.source.android.com/#change,20038
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 1:

This change depends on the following changes

https://review.source.android.com/#change,20229

https://review.source.android.com/#change,20231

https://review.source.android.com/#change,20233
|Uploaded patch set 2.
|Patch Set 1:

This change depends on the following changes

https://review.source.android.com/#change,20231
https://review.source.android.com/#change,20232
https://review.source.android.com/#change,20233
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Abandoned

change# 20224 already existing.
|Patch Set 1:

No problem.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2:

Depends-on: 23571
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

Depends-on: 44980
|Abandoned

Abandoning this change, as the change addresses this issue.

https://android-review.googlesource.com/#/c/57674/
|Patch Set 1: Restored

Will upload new patch on ICS
|Uploaded patch set 2.
|Patch Set 2:

Depends-on: 23545
|Patch Set 2: Abandoned

Since directory structure has changed, abandoning this change.

New change uploaded -https://android-review.googlesource.com/#/c/44975/
|Patch Set 1: Abandoned

Since directory structure has changed, abandoning this change

Uploaded new change - https://android-review.googlesource.com/#/c/44981/
|Patch Set 1: Restored

will upload new patch for ics
|Uploaded patch set 2.
|Patch Set 2: Abandoned

Since directory structure has changed now, abandoning this change.

Uploaded new change - https://android-review.googlesource.com/#/c/44974/
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Uploaded patch set 3.
|Uploaded patch set 2.
|Patch Set 1:

Thank you.
I confirmed the patch set https://review.source.android.com//#change,23531 .
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2:

Thank you for approval and merge.
|Patch Set 2:

Thank you for approval.
|Done
|Good point! I just moved this function without any changes and did not see this issue. Fixing it in next patchset.
|Done
|Done
|Done

For fstab leaking I have uploaded an additional patch on top of this one: https://android-review.googlesource.com/#/c/65700/.
|Yes, I will do the cleanup myself. I will upload the patch together with the NetBSD version for getline().
|Yes, you are right. When I wrote this fix I had an older version of limits.h. I cannot reproduce it on the latest tree either.
|Uploaded patch set 2.
|Abandoned
|Uploaded patch set 2.
|Abandoned
|Uploaded patch set 2.
|Patch Set 2:

This patch has also been sent to the Linux Kernel and merged in maintainer's branch:https://lkml.org/lkml/2012/9/13/576 .
|Abandoned
|Patch Set 1:

This patch has also been sent to the Linux Kernel and merged in maintainer's branch: https://lkml.org/lkml/2012/9/13/570.
|Uploaded patch set 2.
|Abandoned
|Patch Set 1:

This patch has already been sent to the Linux Kernel and merged in maintainer's branch: https://lkml.org/lkml/2012/9/20/497.
|Abandoned
|Abandoned
|Patch Set 1:

This has already been upstreamed and abandoned because it is no longer needed on the latest Android tree: https://android-review.googlesource.com/#/c/42500/1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5:

Rebased on top of its dependency: https://android-review.googlesource.com/#/c/42790/. No code changes from the previous patchset.
|Uploaded patch set 2.
|Patch Set 2:

Fixed memory leaks.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Use NetBSD version instead of OpenBSD.
|Uploaded patch set 4.
|Patch Set 4:

ps4: handle reentrant.h header file in the same way as extern.h from https://android-review.googlesource.com/#/c/42874/ (move to upstream-netbsd and use bionic-specific include guards)
|Uploaded patch set 5.
|Patch Set 5:

ps5: add a basic test for getline
|Uploaded patch set 6.
|Patch Set 5:

() rebase

() update copyright for the getline test

() remove Depends-on from commit message since the dependency was merged
|Patch Set 7: Looks good to me, but someone else must approve

Updates look OK to me. Thanks for updating this!
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 2:

Rebased with no code changes.

Uploaded the cleanup patch to be merged after getline.
|Uploaded patch set 2.
|Patch Set 2:

Use NetBSD version instead of OpenBSD.
|Uploaded patch set 2.
|Patch Set 2:

Updated psignal function prototype according to reviews and man psignal.
|Patch Set 2: I would prefer that you didn't submit this

Will upload NetBSD version.
|Uploaded patch set 3.
|Patch Set 3:

Use NetBSD version instead of OpenBSD.
|Uploaded patch set 4.
|Patch Set 4:

Change patch so that psignal.c has no local changes.
|Patch Set 4: Abandoned

Sorry about this.. Seems that my tool that was using psignal did not fail even if psignal did not work properly...
|Patch Set 4:

Thanks for making the change!
|Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)

No longer reproducible. Will abandon.
|Patch Set 1: Abandoned

No longer reproducible.
|Uploaded patch set 2.
|Patch Set 2:

Fixed whitespace issue.
|Patch Set 1: Abandoned

Duplicate upload.
|Uploaded patch set 2.
|Patch Set 2:

I will submit another one to fix the build error.
|Uploaded patch set 3.
|Patch Set 1: Looks good to me, but someone else must approve


|Patch Set 1:

Jean, Yes. I saw Jelly Bean had the proper fix changes for this issue.
|Uploaded patch set 2.
|Patch Set 1:

Robert, I will send you the logs in an email.
|Patch Set 1: Abandoned
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|right, it is not being used. however, if OEM wants to use this to query what is the current configuration set in modem, they can, so am leaving it.
|Done
|For cdma, currently supported ID range is 0x1000 to 0x1004.  I see your concern if range is increased in future.  However, because currently supported IDs are limited, this would be a good start to enable OEM for cdma CMAS support.

See my change in https://android-review.googlesource.com/#/c/46887/

manager.enableCellBroadcastRange(
                                SmsEnvelope.SERVICE_CATEGORY_CMAS_PRESIDENTIAL_LEVEL_ALERT, //0x1000
                                SmsEnvelope.SERVICE_CATEGORY_CMAS_TEST_MESSAGE); //0x1004
|Done
|cleaned up differently.
|cleaned up.
|Done
|Done
|Done
|Done
|Done
|Done
|Extracted common functions from Sim/RuimSmsInterfaceManager to their parent
class IccSmsInterfaceManager.  Please review patch 2.
|Done
|Done
|Done
|Done
|Done
|per Conley's comment in patch 2, got rid of the change in patch 3 to avoid the conflict in google's internal source tree.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2: (3 inline comments)


|Uploaded patch set 4.
|Patch Set 4:

rebased and added Bug ID, please review/approve.
|Uploaded patch set 2.
|Patch Set 1: (1 inline comment)


|Uploaded patch set 3.
|Patch Set 2: (1 inline comment)


|Uploaded patch set 4.
|Patch Set 4:

rebased to the tip
|Uploaded patch set 5.
|Patch Set 5:

Hi Jake, In our solution, it is actually not the RIL, but rather the WMS module in modem that looks up next TP-MR to be used from SIM @power up and supplies when TP-RD is 0.  And RIL is just a pass through.  When MO SMS failes, failed TP-MR value is propagated from WMS -&gt; RIL -&gt; Telephony.

What you said about &quot;I suspect that at least some vendor RILs may be assigning a value to TP-MR regardless of the value passed in the PDU.&quot; may be true, and those vendors must fix their RIL if they want this change to take effect in setting TP-RD and TP-MR correctly.

We'll fix the white spacing.

So, are you satisfied with my response or do you have any other concern?

Thanks,
Rika
|Patch Set 5:

Just to be clear... So, when TP-RD is 1, TP-MR is not overwritten by WMS.  Only when TP-RD is 0, next (or new) TP-MR is assigned by WMS.

I am not sure what you meant by behavior is unknown when TP-MR is 0.  Maybe you meant when TP-RD is 0?
|Uploaded patch set 6.
|Patch Set 5:

(3 comments)
|Patch Set 6:

rebased and addressed comments.  Please approve.  Thanks.
|Uploaded patch set 2.
|Patch Set 2:

Hi Jake, please note that this change is necessary not only for reducing power consumption, but also to fix a bug of CMAS not showing up which happens when:

1) User has opted out to receive CMAS Amber notification.
2) modem has its own duplicate detection enabled.
3) modem receives CMAS Amber notification from the network.
4) modem sends it to the app
5) CellBroadcast app filters out the CMAS AMBER and does not display to user as user opted out to receive it in step 1.
6) User now wants to receive CMAS AMBER, and enables it in preference.
7) modem receives CMAS Amber notification which was duplicate of earlier one from stop 3, hence duplicates it and does not send it to the app.

Here, user never received CMAS Amber since modem duplicated.

So, this is why we need to actually send enable/disable commands to the modem.  With this fix it then becomes:

1) User has opted out to receive CMAS Amber notification.
2) CellBroadcast app sends disable Amber to the modem.
3) modem has its own duplicate detection enabled.

here b/c modem actually disabled AMBER, it does NOT receive it from the network

4) User now wants to receive CMAS AMBER, and enables it in preference.
5) CellBroadcast app sends ENABLE Amber to the modem.
6) modem receives CMAS Amber notification
7) modem sends it to the apps
8) CellBroadcast app displays CMAS Amber to the user.
9) modem receives another CMAS Amber, but determines it is duplicate and ignores it.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

rebased.  Wink/Jake, please review.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

Hi Wink, I added more comments per your request.  Will you please take a look again?  Thanks!
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Patch Set 4:

Hi Wink

For cdma, currently supported ID range is 0x1000 to 0x1004. I see your concern in RIL.java if range is increased in future. However, because currently supported IDs are limited, this would be a good start to enable OEM for cdma CMAS support.

See my change in https://android-review.googlesource.com/#/c/46887/

manager.enableCellBroadcastRange(
SmsEnvelope.SERVICE_CATEGORY_CMAS_PRESIDENTIAL_LEVEL_ALERT, //0x1000
SmsEnvelope.SERVICE_CATEGORY_CMAS_TEST_MESSAGE); //0x1004

Also, we have been supporting OEM with CDMA CMAS for a while..since gingerbread days.  Changes were uploaded to codeaurora site, but only recently we uploaded to aosp.  Jake added Cdma CMAS support from JB, but enable/disable APIs were still not supported.
|Patch Set 4:

Wink, FYI, the log will look like this:

02-01 22:04:00.887 D/CDMA    (  463): [RuimSmsInterfaceManager] enableCdmaBroadcastRange
02-01 22:04:00.897 D/CDMA    (  463): [RuimSmsInterfaceManager] Calling setCdmaBroadcastConfig with 1 configurations
02-01 22:04:00.897 D/RILJ    (  463): [0328]&gt; RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG with 5configs : 
02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4096, 4096] ENABLED
02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4097, 4097] ENABLED
02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4098, 4098] ENABLED
02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4099, 4099] ENABLED
02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4100, 4100] ENABLED
02-01 22:04:00.897 D/RILJ    (  463): [0328]&lt; RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG 
02-01 22:04:00.897 D/CDMA    (  463): [RuimSmsInterfaceManager] Added cdma broadcast subscription for MID range 4096 to 4100 from client com.android.cellbroadcastreceiver
02-01 22:04:00.907 D/CDMA    (  463): [RuimSmsInterfaceManager] Calling setCdmaBroadcastActivation(true)
02-01 22:04:00.907 D/RILJ    (  463): [0329]&gt; RIL_REQUEST_CDMA_BROADCAST_ACTIVATION
|Patch Set 4:

re pasting for better result:

02-01 22:04:00.887 D/CDMA    (  463): [RuimSmsInterfaceManager] enableCdmaBroadcastRange

02-01 22:04:00.897 D/CDMA    (  463): [RuimSmsInterfaceManager] Calling setCdmaBroadcastConfig with 1 configurations

02-01 22:04:00.897 D/RILJ    (  463): [0328]&gt; RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG with 5configs : 

02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4096, 4096] ENABLED

02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4097, 4097] ENABLED

02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4098, 4098] ENABLED

02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4099, 4099] ENABLED

02-01 22:04:00.897 D/RILJ    (  463): CdmaSmsBroadcastConfigInfo: Id [4100, 4100] ENABLED

02-01 22:04:00.897 D/RILJ    (  463): [0328]&lt; RIL_REQUEST_CDMA_SET_BROADCAST_CONFIG 

02-01 22:04:00.897 D/CDMA    (  463): [RuimSmsInterfaceManager] Added cdma broadcast subscription for MID range 4096 to 4100 from client com.android.cellbroadcastreceiver

02-01 22:04:00.907 D/CDMA    (  463): [RuimSmsInterfaceManager] Calling setCdmaBroadcastActivation(true)

02-01 22:04:00.907 D/RILJ    (  463): [0329]&gt; RIL_REQUEST_CDMA_BROADCAST_ACTIVATION
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 4:

(4 comments)
|Patch Set 6:

Wink/Jake, This change goes with change in CellBroadcast App.  Please also review the change for CellBroadcast app again as well:

https://android-review.googlesource.com/#/c/46887/
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Rebased. Got rid of &quot;- Turn on CMAS Presidential&quot; from commit text since it's already merged on aosp.

Got rid of &quot;- Added ServiceStateListener. Upon in service or emergency&quot; since it should already in Google's internal tree.
|Uploaded patch set 4.
|Patch Set 3:

(7 comments)
|Uploaded patch set 2.
|Abandoned

replaced with https://android-review.googlesource.com/#/c/45564/
|Uploaded patch set 2.
|Patch Set 1: (1 inline comment)


|Uploaded patch set 3.
|Patch Set 3:

just rebased, haven't addressed comments yet.
|Uploaded patch set 4.
|Patch Set 2:

(2 comments)

Wink, addressed your comments, please review the latest patch.  Thanks, Rika
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)

Jake, comments addressed in latest patch 5.  Please approve/merge.  Thanks!
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(2 comments)
|Uploaded patch set 4.
|Patch Set 4:

Hi Jake,

Addressed your comments.  Also, tested with your test code (https://android-review.googlesource.com/#/c/49461/) and all test cases passed.  Please approve.

Thank you,
Rika
|Uploaded patch set 2.
|Patch Set 2:

rebased to tip, please review.
|Uploaded patch set 2.
|Patch Set 2:

Hi Wink,

I have expanded the commit text per your request.  Please review and approve the change.

As noted in commit text, unless connectTimeReal is what getDurationMillis() uses to calculate call duration.  So, without the fix, UI will show call duration as zero and it looks as though UI is frozen since it stays as zero.  Similarly, fix is needed for holdingStartTime, so getHoldDurationMillis will return correct value.

Thanks,
Rika
|Patch Set 2: Abandoned

no longer needed.  fix was done in telephony layer by https://android-review.googlesource.com/#/c/40448/
|Patch Set 1: Abandoned

using old change
|Uploaded patch set 2.
|Patch Set 2:

fixed per the review comment.  Please approve.  Thanks.
|Patch Set 1: (1 inline comment)


|Uploaded patch set 2.
|Patch Set 1:

Our internal automated test cases where any parameter values can be passed to PUBLIC SDK APIs found those errors.  

Without valid range check for enable/disableCellBroadcastRange(), test showed force close (com.android.phone has stopped unexpectedly).  This was due to Illegal arguments SmsManager api for enable/disable broadcasts caused &quot;Out of memory&quot;.  Since those are public sdk apis, to prevent hacker to pass invalid arguments to cause device to crash, it is necessary to validate the arguments.

Also test showed device hang while executing copyMessageToIcc API.  SmManager.copyMessageToIccEf() is synchrozied function (underneath uses mLock) meaning, it waits for response from RIL. In case of invalid arguments to the function (pdu null), RIL bails out and does not return response hence causing hang as wait on mLock is never released.  So, it is necessary to check for valid pdu.
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40448/
|Patch Set 1: Restored

abandoned wrong one.
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40481
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2: (1 inline comment)


|Patch Set 3: Abandoned

replaced with https://android-review.googlesource.com/#/c/40456/
|Patch Set 1: Abandoned

duplicate detection will be handled in modem instead.
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40456/
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40470/
|Patch Set 1: Abandoned

not applicable to jb
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40448
|Patch Set 1: Abandoned

replaced with https://android-review.googlesource.com/#/c/40439/
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

I don't think that was the correct patch as it seemed to just be for strace. Is there another patch? I see your point about the shrinker though.
|Patch Set 1:

Ah yes. This is completely unneeded
|Abandoned

Unneeded. Already printed out elsewhere
|Patch Set 1:

After discussion, we're going to try to get rid of this internally. If clients *really* want the size of the handles and don't want to pass it in, they can walk the scattergather list.

Alternatively, would wrapping this to walk the scattergather list be acceptable?
|Abandoned

Bad idea
|Patch Set 1:

Clients may need to know if a buffer is cached or not to do cache operations. They don't want to pay the penalty to sync unless the buffer is going through the cache.
|Patch Set 1:

Clients who are using the buffers may not be the same one allocating them. The video driver for example may take an arbitrary fd allocated somewhere else and import it to get the handle back. It sounds like the expected use case is to be passing around all metadata (flags and buffer size).

As an explanation by one of the driver writers:

&quot;
Since the passed Fd represents a particular allocation of an ION buffer, I feel that the ion_handle imported from that Fd should be able to be queried for things such as size.  It only invites errors to have the user pass a size as well as the Fd, which should already know the size of the buffer it refers to.  Passing around metadata is unnecessary (since the data is already known by the allocation) and invites errors.
&quot;
|Abandoned

Bad idea
|Abandoned

Generic map_kernel function now
|Abandoned

Old branch
|Abandoned

Old branch
|Abandoned

Old branch
|Abandoned
|Abandoned
|Abandoned
|Uploaded patch set 2.
|Patch Set 2: Abandoned

remove
|Thank you for your opinion.
In my opinion, because the &quot;length&quot; variable is declared as a &quot;byte&quot;, this part does not need to be modified. 
Would you please consider again?
|Uploaded patch set 2.
|Patch Set 2:

Appreciate your opinion. 
I modified the source code as your opinion.
A little bit of time has passed since the first Modified. But any comments(code review) did not receive. 
When could I be able to receive any comments for Modified?
Please, check the Modified And give me feedback. plz..
I'm waiting for your opinion... 
I want to receive code review as soon as possible.  
Thank you.
|Uploaded patch set 3.
|Patch Set 3:

Appreciate your opinion. 
I modified the source code as your opinion. 
Please, Confirm this source..
Thank you.
|Patch Set 3:

(1 comment)

I replied about line 506

Please check the comment.

And....

I have not tested  the other casts of (byte) which are assigning to integers.

Therefore I hope that the change about any other casts (byte,int)  will be proceed internally at Google.

Thnak you.
|Uploaded patch set 4.
|Patch Set 4:

I understand your intention. 

I modify this line 506.(readByte() -&gt; readUnsignedByte()). 

Also, I change &quot;length&quot; variable declaration to &quot;int&quot; from &quot;byte&quot;.

Thank you.
|Uploaded patch set 2.
|Patch Set 2:

Appreciate your opinion. 
I modified the source code as your opinion.
A little bit of time has passed since the first Modified. But any comments(code review) did not receive. 
When could I be able to receive any comments for Modified?
Please, check the Modified And give me feedback. plz..
I'm waiting for your opinion... 
I want to receive code review as soon as possible.  
Thank you.
|Patch Set 2:

I understand your opinion.
I will abandon My commit.
Thank you your reply.
|Abandoned

Duplicate with other commit. 

https://android-review.googlesource.com/#/c/42091/
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Rebased
|Patch Set 2: Abandoned
|Done.
|Done
|Done
|Done
|Done
source code for generic luni implementation is in libcore/luni directory.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|The analysis for invoke_static bytecode here is before the actual code generation of the invoke-static bytecode. The purpose of the analysis here is to just be able to check the invoke to see if this invoke is a kIntrinsicAbsDouble. if it is an inlined abs double method, then the store_method_addr_ is set to true in the AnalyzeInvokeStatic. In the later code generation for this inlined invoke, a 64bit constant value is used and the store_method_addr_ setting to true will enable this value will be loaded from the constant literal area.
|Done
|seems arm and arm64 still share part of the implementation for GenInlinedAbs and the arm and arm64 are in different directory. To avoid duplicate same copies of code to each implemetation and reduce the change scope, probably it's simpler to leave GenInlinedAbs virtual.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|the &quot;lea -4($esp), %esp&quot; at line 154 and &quot;lea 4(%esp), %esp&quot; at line 159 are a pair. These two esp adjustment seems from our legacy code and might be removed safely. We will do further testing.

The purpose of &quot;lea 4(esp), %esp&quot; at line 149 is to recover the esp update due to the x86 function calling convention, which is correct and should be remained.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+1

unit test added.
|Patch Set 3: -Code-Review

Thanks for review. This is an optimization we ported from x86 dalvik code since divides take many cycles and are fully blocking, anything to not take divide path can lead to an overall win.
This is a work in progress since we need to port the rest of dalvik divide optimization. Will update the patch with the rest of algorithm done in dalvik.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Code-Review+1
|Patch Set 2: -Code-Review

(3 comments)
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)

rebased and will submit new patch set.
|Uploaded patch set 4.
|Patch Set 4: Code-Review+1

Addressed review comments from Ian and Mark and rebased.
|Patch Set 11: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Patch Set 1:

(4 comments)

Ian, Thanks for the review. I have addressed your review comments and will submit new patch set. Thanks!
|Uploaded patch set 2.
|Patch Set 2: Code-Review+1
|Patch Set 2: -Code-Review

(8 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(4 comments)

Thanks Vladimir for your review comments. comments addressed and please see updated patch set.
|Uploaded patch set 5.
|Patch Set 5: Code-Review+1
|Uploaded patch set 2.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)

Addressed Serguei's comments.
|Patch Set 1: (1 inline comment)


|done, please check the patch set 5#. Thanks!
|done, please help to review the patchSet 2#.
|done, please review the patchSet 3#
|Abandoned
|Abandoned
|Restored
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1: Code-Review+1
|Abandoned
|Patch Set 1: Abandoned
|Patch Set 1: Restored
|Abandoned
|Uploaded patch set 2.
|Abandoned
|Abandoned

abandon this patch since no need in 4.2 anymore.
|Abandoned

duplicated with: https://android-review.googlesource.com/41567
|Uploaded patch set 2.
|Patch Set 2:

duplicated as https://android-review.googlesource.com/48660
|Uploaded patch set 2.
|Uploaded patch set 2.
|Abandoned

update in: https://android-review.googlesource.com/#/c/50683/
|Abandoned

duplicated as: https://android-review.googlesource.com/41620
|Abandoned
|Patch Set 1:

same as https://android-review.googlesource.com/#/c/49133/ for JB MR1
|Uploaded patch set 2.
|Abandoned
|Abandoned
|Patch Set 1:

update: https://android-review.googlesource.com/50258
|Abandoned
|Uploaded patch set 2.
|Abandoned
|Abandoned
|Abandoned

dupliacate: https://android-review.googlesource.com/#/c/41530/
|Uploaded patch set 2.
|Uploaded patch set 3.
|Abandoned
|Abandoned
|Uploaded patch set 2.
|Abandoned
|Abandoned
|Abandoned
|Abandoned
|Abandoned
|Abandoned

no plan for upstream as author said
|Abandoned
|Abandoned
|Abandoned
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 2: Abandoned
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 2.
|Patch Set 1: Abandoned

not relevant to upstreaming anymore because there is a new version of the library that fixes the issue the patch in question was addressing
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Abandoned

abandon patches related with VGA resolution
|Patch Set 1:

depends on the patch in frameworks/av:
https://android-review.googlesource.com/41710
|Uploaded patch set 2.
|Patch Set 2: Abandoned

abandon patches related with VGA resolution
|Uploaded patch set 2.
|Patch Set 1:

On behalf of Niciarz, Sebastian:
I do agree with the comment from Sunil that this patch does more/less the same as existing NFC_CUSTOM_CONFIG_INCLUDE macro.

There is however a subtle difference : with the original solution a vendor would have to modify the nfc_target_custom_config.h directly in the libnfc-nxp folder. Intel preferred a solution where the nfc custom config header is completely outside of AOSP (so we do not have to rebase it anytime we upgrade to new Google dessert). We also find this kind of solution as more scalable : it can support easily multiple different platforms from the same vendor, and more over it is also good for easy differentiation of configurations across multiple vendors.
|Patch Set 1:

Could you please share the more details about the way to achieve this: &quot;We should then just modify the existing customer config to live outside of libnfc-nxp&quot;? We'll abandon our patch once yours uploaded.
|Uploaded patch set 2.
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Uploaded patch set 2.
|Patch Set 2: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Location area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Patch Set 1: Abandoned

Bluetooth area, waiting until the next major release
|Uploaded patch set 2.
|Patch Set 1: Abandoned

it's already merged in https://android-review.googlesource.com/38141
|Uploaded patch set 2.
|Patch Set 1: Abandoned
|Patch Set 1: Abandoned

fixed in https://android-review.googlesource.com/#/c/40729/ by Elliott
|Thanks for the comments. Will fix them in next patch.
|It is still needed. Without it, it will have the following build error:

host C: checkseapp &lt;= external/sepolicy/tools/check_seapp.c
external/sepolicy/tools/check_seapp.c:11:25: fatal error: sepol/sepol.h: No such file or directory
compilation terminated.
make: *** [out/host/linux-x86/obj/EXECUTABLES/checkseapp_intermediates/tools/check_seapp.o] Error 1
|Without the LOCAL_C_INCLUDE, the following error occurs:

host C: checkfc &lt;= external/sepolicy/tools/checkfc.c
external/sepolicy/tools/checkfc.c:3:25: fatal error: sepol/sepol.h: No such file or directory
compilation terminated.
make: *** [out/host/linux-x86/obj/EXECUTABLES/checkfc_intermediates/tools/checkfc.o] Error 1
|Patch Set 1: (2 inline comments)

LOCAL_C_INCLUDE is still needed.

I will fix the other in next submit.
|Patch Set 4: (1 inline comment)


|we are testing the SW decoder path. you can simply enable it by define macro USE_SOFTWARE_DECODER
|according MPEG4 ISO/IEC 14496-12:2004(E) standard, 'stts'(decoding-time-to-sample box) is madatory. 
thus, syntax 'stts', version and entry_count is must. 
if entry-count is zero, the time-to-sample table can be ignored when writing.
James, for &quot;detected much earlier&quot;, do you mean detect before writing 'stts'?
I am not sure whether it's ok to remove the whole 'stts'.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Patch Set 1:

it does not occure on Galaxy Nexus. it seems Galaxy Nexus has done much optimization, as it also can import video with non-16 align width
|Patch Set 1:

(1 comment)
|Abandoned

the redefinition of LOG_TAG is fixed in LP5.0;
the crash issue is still exist in LP5.1.
|Patch Set 1:

Hi, tenghui,
Excuse me for late response, the website can't be accessed every time on my side.
 You can reproduce it with following steps:
1. import a image file
2. add transition
3. add effect
4. start preview playback, it shall show green frame

Actually, not all the combinations of transition and effect shall have green frame, and unfortunately I forget the combination which reproduce this issue.
If you can’t reproduce it on your side, we can postpone this problem until we get further progress.
|Abandoned

will checker later
|Patch Set 1: (1 inline comment)


|Abandoned

will checker later
|Uploaded patch set 2.
|Patch Set 2:

Adding correction to package name as this was also Austauschdienste when it should have been Exchange-Dienste.
|Uploaded patch set 3.
|Uploaded patch set 2.
|Patch Set 2:

All this is, is a rebase as the patch was several commits behind.
|Patch Set 1:

Abandoning this change as Change-Id: Ie011cbf74a08f760ccd93ca37fa2b437b7063462 has since been merged which does the same job.
|Abandoned

See bug report http://code.google.com/p/android/issues/detail?id=41475 for further info.

Change 370980c52867864e1b0acd9f132e527fb6b2adee has since been merged which does the same job.
|Uploaded patch set 2.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

Please ignore Patch Set 2, this was uploaded in error. My changes are in Patch Set 3. Thanks. Emma S.
|You're right. I'll abandon this commit to let it stay as-is.

Thank you for reviewing this.
|Of course I haven't seen this case in the user dictionary.
As I know, this is only happened by programming mistakes(when the wrong(or not exist) column is explicitly specified).
But if the columnIndex is -1, cusor.getString(columnIndex) makes IllegalStatementException.
So, I think this is must be checked -1 or not like cursor.
|Abandoned

The files modified in this patch are no longer present in Android 4.4.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Abandoned

This source file has been changed in master branch.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Abandoned
|Uploaded patch set 2.
|Uploaded patch set 3.
|Abandoned

I'm sorry but I made a dependency.
So I abandon this commit.
|Abandoned

You're right that a correctly written ContentProvider should return a Cursor with a single [&quot;_data&quot;] column, but a buggy provider may return something like [&quot;_id&quot;,&quot;_data&quot;].  The code in the tree today handles this second buggy case by being liberal in what it accepts.
by Jeff Sharkey.
|'any' instead of 'whatever'?
|Not sure if it is better but we have a method &quot;NamingTools.getBinaryName()&quot; that does this.
|We should probably rename it: it existed before the JPackage was introduced (we replaced the separator constant but did not change the parameter name).
|UserFormatter is the formatter you should use each time you need to print a message to the user (e.g. reporting). SourceFormatter is used to print names as in the source (e.g. for the refining of string literals or the matching of proguard rules). Both have the same implementation.
|Use Jack.getUserFriendlyFormatter()
|Not sure it is a good idea. The method with the &quot;false&quot; boolean throws a JPackageLookupException while with &quot;true&quot; it does not. I would be clearer with two different methods.
|nit: @Nonnull? (and idem for the other fields?)
|Done
|Done
|I removed it
|Done
|Done
|Done
|Done
|Done
|Done
|Done, maybe we should rename the method &quot;fillDexPlan&quot; as well.
|In order not to fail after the first error, I don't see another way to do it right now.
|Done
|It was linked to the fact that JackAbortException needed a cause. I removed it.
|Done
|Not really related to this patch but this is not really homogeneous with other getMethodId methods which would be annotated @Nonnull and throw a LookupException.
|nit: classpath
|This looks similar to endVisit(JDefinedClOrI), would it be possible to extract a common method?
|There is already a Transformation step called ChangeEnclosingPackage. Maybe we could use it.
|@Nonnull
|@Nonnull
|nit: put this in LV?
|nit: Shrobbed
|I added a feature
|Agreed but we have other visitors like this, the AstChecker for instance.
Which constraints would you want me to add?
|Done
|Done
|Done
|I removed with the rebase
|Done
|(this is not related to the other comment, I just forgot to send the draft)
|Or should we move this to a different schedulable?
|I added it to support the ExpressionSymplifierTest which does not use a toolchain.
|Done
|Done
|Comment it out instead?
|Done
|Done
|Only anonymous types can be declared in dead code.
To explain a bit more what I am doing: &quot;loadedLocalTypes&quot; contains all the inner types (in dead code or not), &quot;types&quot; contains all the types that will be emitted. Here we remove from the packages the loadedLocalTypes that are in this compilation unit but will not be emitted.
|nit: re-update commit message :p
|I don't think this separator is useful anymore but there should probably be a new constraint between the IAG and the Keeper.
|Done
|Could you add &quot;Bug: 25075831&quot;?
|Done
|Done
|Done
|Yes, I replaced it.
|Yes and eclipse formats it that way. I manually put it back.
|Done
|Done
|Done
|Done
|Done
|It is related to the JSR305 annotations I added: as a consequence, there was a warning here.
|Idem
|Idem
|Its not easy to do it in a transformation step since we do not have a way to access a class's subclasses. I do not know a way to do this other than visiting all the types.
|Done
|Done, sorry I wrote that a bit too quickly :p
|Ok, this was c/c from the TransformationStep Remove. Maybe we should clean them up.
|This method is used to clone a JParameter ref. We have to retrieve the cloned parameter in order to create a cloned JParameterRef which points to the clone JParameter. I agree that it need more investigation: what if two parameter have no name? I'll think about it.
|Not sure if I had to change the commit message since in Carnac the IAG already was in its own typeplan, but I didn't since it was a cherry-pick.
|Done
|Done
|Done
|Done
|Done
|Not sure it contains the same information, Version has buildId and codeBase while JillApiToolChain has a compiler version. The other information are the same.
|I don't understand. Do you want me to refer to the field values? Something like &quot;to encode {@link #values} in jayce format&quot;?
I could also use &quot;{@link Set}&amp;lt;{@link OriginDigestElement}&amp;gt;&quot; if you prefer.
|He will need to see the doc of OriginDigestElement, not Set.
|The javadoc looks good but I don't think that's what we want since the link go the &quot;Set&quot; javadoc which probably not what the user will need to see.
|This was the name of the class where the bug was found. I can change it but I have to regenerate the reference files.
|Because I wanted to visit ExternalTypes.
|Would it better to create a special adapter?
|Because I add markers on types that are not necessarily in the package that I am visiting.
|Done
|ExtendingOrImplementingClassMarker only contains subClasses while this marker contains Classes and Interfaces. I can also create a marker that contains only interfaces, I just wanted to validate the algorithm first.
|Done
|Need patch on reportables
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I put a concurrentIO since a null return value means the &quot;dir&quot; was not a valid directory (it was removed or replaced) or an IO error occurred (probably but not necessarily linked to another thread). I did this mostly to be similar to DirectFS.list() which was handling the same problem.
An empty directory will return an empty array, not null.
|The doc says: &quot;The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs.&quot;
|This is done the same way than in com.android.sched.vfs.DirectFS.list()
|This is not what was done above. Should I change both?
|Done
|There are no changes here, I just extracted the inner class from the NameKeeper.
|After some more thinking, the link is that both visitors are potentially modifying fieldAccesses and methodCall. The IAG cannot be in the same plan than another visitor taht does this. Maybe we could rename the separator to reflect this?
|For instance, there is the TryStatementSchedulingSeparator which is a separation between SwitchEnumSupport and the TryCatchRemover. When looking at the implementation, it is understandable since the SwitchEnumSupport does add TryCatchStatements.
We also have the AssertionTransformerSchedulingSeparator which is a separation between AssertionTransformer and FieldInitializer, which is because the AssertionTransformer adds InitializationExpression.
Here we have no justification for this separation, I just want to ensure that the IAG is alone in its plan.
|After thinking, the link is that both visitors are potentially modifying fieldAccesses and methodCall. The IAG cannot be in the same plan than another visitor taht does this. Maybe we could rename the separator to reflect this?
|Add some explanations on the changes in the &quot;jack&quot; and &quot;jack-admin&quot; scripts?
|+s
|+s
|+s
|What do I do instead?
|I synchronized on 'loaded' instead of the JCorILoader to avoid deadlocks since the LocalManager locks on JCorILoader then the JType while the NameKeeper locks the JType then the JCorILoader.
|I did this because assert does not work with volatile. I'll remove it when I'll remove the volatile then.
|I used the 'Double-check locking' to avoid unnecessary synchronization but it also works with a simple synchronization (and without the volatile).
|@CheckForNull?
|why ':'? There is no ':' on line 134.
|Done
|Done
|Done
|Or jThis.getName() since we know it is not null here? (both seem to work)
|Done
|Done
|Need to be after IncDecRemover, CompoundAssignmentRemover and ConcatRemover but before InnerAccessorSchedulingSeparator
|I removed this.
|Done
|I'd say that the 3) (this one) is better (in term of parallelism) because as the IAG is synchronized, there won't be much parallelism on it anyway.
|Yes but since we visit outer classes only, it doesn't need to be.
|To sum up:
1) IAA runs on JSession instead of JType (it stays not synchronized)
3) IAG runs on JType instead of JMethod (it stays synchronized).
|Because we visit the member types of 'type' as well.
|Yes, I hadn't anticipated this but I don't think it is possible otherwise with the 1st method. The TypeLegalizer that run in this plan checks that the methocall has the same number of parameters than the methodId so it is not even possible to split this visitor in two.
|(Sorry I responded in the common history)
Yes, but I thought I could add a third visitor on JMethod which would update the call site but it is not possible due to the TypeLegalizer.
|Moved from wrapper marker
|Moved from wrapper marker
|The wrapper formatter is probably not useful anymore. I'll remove it in another patch.
|nit: calls
|nit: space
|There is already a testSuite called ObfuscationWithDebugInfoTests. Maybe we should merge them (or maybe not :p).
|I added:
-keepnames class ** {
  *;
}
Otherwise proguard won't keep parameter names.
|Done
|I use it in the grammar. I thought it might be better to add a return value to the setter. I'll do this instead then.
|nit: no &quot;.&quot; at the end (not sure it is necessary to add it but sometimes there is one and sometimes not).
|nit: no &quot;.&quot; at the end.
|nit: no &quot;.&quot; at the end.
|nit: no &quot;.&quot; at the end.
|nit: no &quot;.&quot; at the end.
|nit: no &quot;.&quot; at the end.
|nit: no &quot;.&quot; at the end.
|I removed it.
|Done
|Yes we do, it prevents the method to be renamed afterwards. We could add a KeepNameMarker instead.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Will be done
|Done
|It can be both. Do you think I should find a way to differentiate those cases?
|Done
|Done
|Done
|Done
|Patch Set 6:

(4 comments)
|Patch Set 7:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+1
|Uploaded patch set 1.
|Patch Set 4: Code-Review+1

(1 comment)
|Patch Set 5: Code-Review+1
|Patch Set 2: Code-Review+1
|Change has been successfully merged by Delphine Martin
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Patch Set 5:

(5 comments)
|Uploaded patch set 7: Patch Set 6 was rebased.
|Patch Set 7: Code-Review+2

Seif +2 (Approved before rebase)
|Uploaded patch set 8.
|Patch Set 7:

(1 comment)
|Uploaded patch set 9.
|Patch Set 7:

(1 comment)
|Patch Set 9:

(3 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Patch Set 12:

PS12 is a rebase
|Uploaded patch set 13.
|Uploaded patch set 14.
|Uploaded patch set 15.
|Patch Set 15:

ERROR: Static method int add(int v1, int v2) in com.android.jack.java8.staticmethod.test001.jack.I not supported in Android API level less than 24
|Uploaded patch set 16.
|Patch Set 16:

New output is:
ERROR: /usr/local/google/home/delphinemartin/work/jack-wip-dev/toolchain/jack/jack-tests/tests/com/android/jack/java8/staticmethod/test001/jack/StaticMethod.java:20: Static method int add(int v1, int v2) in com.android.jack.java8.staticmethod.test001.jack.I not supported in Android API level less than 24
|Patch Set 16:

Sorry wrong output
|Patch Set 16:

ERROR: /usr/local/google/home/delphinemartin/work/jack-wip-dev/toolchain/jack/jack-tests/tests/com/android/jack/java8/staticmethod/test001/jack/StaticMethod.java:20: Static method int add(int v1, int v2) not supported in Android API level less than 24
|Patch Set 2: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Change has been successfully merged by Delphine Martin
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 4:

(2 comments)
|Patch Set 6: Code-Review+1
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(2 comments)
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

Done
|Patch Set 6:

(2 comments)
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)
|Uploaded patch set 8.
|Patch Set 9: Patch Set 8 was rebased
|Patch Set 9: Code-Review+2 Verified+1

Approved before rebase
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Code-Review+2 Verified+1

Approved before rebase
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 3: Code-Review+1
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned
|Patch Set 2: Code-Review+1
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(7 comments)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 4:

(1 comment)
|Uploaded patch set 8.
|Patch Set 6:

(1 comment)
|Patch Set 8: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

(3 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 4: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4:

(1 comment)
|Patch Set 4: Code-Review-1

Not good for now but we might be able to do something better with the ExtendingOrImplementingClassMarker marker in (http://r.android.com/183693 - Modified MappingApplier to avoid name collision)
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4:

The CSV is used by the FinallyRemover and FieldInitMethodCallRemover. As for the FieldInitMethodCallRemover, it is not used in the same method, it only works since the $init() method has no parameter...
|Uploaded patch set 5.
|Patch Set 5:

Done
|Uploaded patch set 6.
|Patch Set 6:

PS6 is a rebase
|Patch Set 6: Verified+1
|Uploaded patch set 7.
|Patch Set 7: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

Done in http://b/26787028
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Reverted

This patchset was reverted in change: I4d11723d93d8554118230d3a1cf91b3b072d4505
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(5 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 2:

Done in 26785442
|Uploaded patch set 7.
|Patch Set 7: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Patch Set 7: Reverted

This patchset was reverted in change: I1854a2b9c7f2c2aa2cdfcc898820e45ee5b8afb6
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(8 comments)
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1

Approved before rebase
|Uploaded patch set 1.
|Patch Set 1: Code-Review-1
|Uploaded patch set 2.
|Patch Set 2:

This was done the same way as in com.android.jack.api.v01.impl.Cli01ConfigImpl
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(1 comment)
|Abandoned

Replaced by I28e7ee0589d3968ad053978010c4dad72ac45029
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1: Reverted

This patchset was reverted in change: Idf238e497052cb983fd56f50a36f0f7998240fa8
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 1: Code-Review+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to jack-1.1-mr7
|Uploaded patch set 1.
|Topic set to jack-1.1-mr7
|Patch Set 1: Reverted

This patchset was reverted in change: I8970875832253a72717263ad2486ec6fa7ff27c5
|Uploaded patch set 1.
|Uploaded patch set 2.
|Topic set to jack-1.1-mr6
|Patch set 3: Commit message was updated.
|Topic jack-1.1-mr6 removed
|Topic set to jack-1.1-mr6
|Patch Set 4: Code-Review-1

Wrong version for jill
|Uploaded patch set 1.
|Uploaded patch set 1.
|Topic set to jack-1.1-mr6
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1:

(3 comments)
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(5 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1

Approved before rebase
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Patch Set 3:

(3 comments)
|Uploaded patch set 4.
|Patch Set 4: Code-Review-1
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Uploaded patch set 6.
|Patch Set 3:

(1 comment)
|Patch Set 6: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

The 3rd method will also decrease parallelism since the generator will have to run on JSession.
|Patch Set 1:

Yes, but I thought I could add a third visitor on JMethod which would update the call site but it is not possible due to the TypeLegalizer.
|Patch Set 1:

(1 comment)
|Abandoned

Replaced by I5a2ed9a5974fcb1f1e27ccd1d34e0a125f41459a
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch set 3: Commit message was updated.
|Patch Set 3: Code-Review+2 Verified+1

Self +2 (Approved before nit)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 5:

(1 comment)
|Patch Set 6: Code-Review+1
|Patch Set 8: Code-Review+1
|Patch Set 8: -Code-Review Verified-1

Some old tests in ObfuscationWithDebugInfoTests are failing. We should either fix this or annotate them with @KnownIssue.
|Patch Set 8:

(1 comment)
|Patch Set 8: Verified+1

This is actually not linked to this CL. I am investigating this.
|Patch Set 9: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4: Verified+1
|Uploaded patch set 5: Patch Set 4 was rebased.
|Patch Set 5: Code-Review+2 Verified+1

Self +2 (Approved before rebase)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 6:

(7 comments)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2

Self +2 (Approved before nit)
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

Self +2 (Approved in ub-jack)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1

Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to jack-1.1-mr6
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review-1
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4: Patch Set 3 was rebased.
|Patch Set 4: Code-Review+2 Verified+1

Self +2 (PS4 is a rebase)
|Patch Set 4:

(2 comments)

Done in https://android-review.googlesource.com/#/c/177913/
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Will be refactored, used only in ub-jack-brest
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(4 comments)
|Uploaded patch set 9.
|Patch Set 9: Code-Review-1
|Uploaded patch set 10.
|Patch Set 10:

(2 comments)
|Uploaded patch set 11.
|Patch Set 10:

(3 comments)
|Uploaded patch set 12.
|Patch Set 11:

(5 comments)
|Uploaded patch set 13.
|Abandoned

Will be refactored, used only in ub-jack-brest
|Patch Set 13:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Patch Set 1: Cherry Picked from branch ub-jack.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(1 comment)
|Patch Set 2: Cherry Picked

This patchset was cherry picked to branch ub-jack-brest as commit 55da27095daf538e77003c7a7b25af1cd34430e0
|Patch Set 2: Code-Review+2
|Done
|Done
|Done
|Done
|Done
|Done
|Thanks for your reviewing, I have done a revision.
|Yes, it's indeed simpler to add check of surface shown here, but there is a little side effect that it would increase chances of retry times, it means that it would increase method execution time of screenshotApplications() that would impact UI performance such like activity launch time, HOME/BACK key response time.

It's a trade-off of performance(UI faster) and user experience(no black thumbnail), so I try to use an another check of screenshotSurfaceReady outside of original retry mechanism to keep retry mechanism as original to make sure not to impact UI performance and just reduce chances that WM return all black bitmap to make user experience better.

However, I think this impact of performance would be not serious in most casees, and make code simpler is also important. I will apply your comment in the latest PatchSet and Thanks for your remark.
|Done
|Done
|Done
|Done
|Thanks for your reminding, it's a careless typing error, I have corrected it.
|Done
|Done
|Done
|Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(6 comments)

Thanks for your reviewing and commenting, I have revised one on patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

L MR1 release has resolved these symptoms, no need this patch, abandon it.

AOSP bug-fixed patch:
192d60488f392198d5139183c9541115b0565c9c Handle keyguard dismiss flags correctly
ca0a124da0aaa3383b7648e3114a7be277800c3a Dismiss insecure keyguards if FLAG_SHOW_WHEN_LOCKED
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Uploaded patch set 4.
|Patch Set 5: Commit message was updated
|Uploaded patch set 6.
|Patch Set 6:

Hi Olawale,

We have ever met two or three issues from our internal User Trial Issue
Report System which symptom is system_server native crash, its call
stack is as below log snippet,

Root Cause Analysis: signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr e7f1d828

Call Stack: 
#00 pc 000c0952 /system/lib/libskia.so
#01 pc 000c0c47 /system/lib/libskia.so (SkRegion::contains(int, int) const+36)
#02 pc 0002090c /system/lib/libdvm.so (dvmPlatformInvoke+112)
#03 pc 00057429 /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+428)
#04 pc 00029da0 /system/lib/libdvm.so
#05 pc 000326a4 /system/lib/libdvm.so (dvmMterpStd(Thread*)+76)
#06 pc 0002fbc0 /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+232)
#07 pc 0006d0e9 /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, std::__va_list)+336)
#08 pc 00055655 /system/lib/libdvm.so
#09 pc 00054549 /system/lib/libandroid_runtime.so
#10 pc 00068ebb /system/lib/libandroid_runtime.so (android::NativeInputEventReceiver::consumeEvents(_JNIEnv*, bool, long long, bool*)+490)
#11 pc 0006900d /system/lib/libandroid_runtime.so (android::NativeInputEventReceiver::handleEvent(int, int, void*)+52)
#12 pc 00016461 /system/lib/libutils.so (android::Looper::pollInner(int)+584)
#13 pc 00016525 /system/lib/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+92)
#14 pc 0007089d /system/lib/libandroid_runtime.so (android::NativeMessageQueue::pollOnce(_JNIEnv*, int)+22)
#15 pc 0002090c /system/lib/libdvm.so (dvmPlatformInvoke+112)
#16 pc 00057429 /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+428)
#17 pc 00000214 /dev/ashmem/dalvik-jit-code-cache (deleted)

We found the root case is crash at SkRegion::contains and after further
traced device log, we think the reason is the race condition happened on
different thread acceess mTouchExcludeRegion simultaneously and cause 
memory corrupted.

03-13 17:38:43.738 956  974  D      libc-fault-recovery-native     M=0x40095188 B=0x400951e8 F=0x39303237 P=0x799f3898 I=7
03-13 17:38:43.738 956  974  F      libc  Fatal signal 11 (SIGSEGV) at 0x32343144 (code=1), thread 974 (WindowManager)
03-13 17:38:43.738 956  974  V      WindowStateAnimator   DESTROY SURFACE Window{428043f8 u0 com.htc.launcher/com.htc.launcher.Launcher}

Because we traced device log and found before this native crash, WMS was
performing layout and the user touched the screen (there was incoming 
touch event down and up) at the same time, and then immediately there 
was printed native crash call stack and crash was SkRegion::contains 
place, so we think at this symptom time, race condition is happened on 
mTouchExcludeRegion.contains(x, y) of 
StackTapPointerEventListener.onPointerEvent() called.

Whereas we found that writing of mTouchExcludeRegion is called by 
setTouchExcludeRegion() from WMS performing traversal and protected
by mWindowMap lock, reading of mTouchExcludeRegion is called by
onPointerEvent() from another system_server UI thread but not 
protected by mWindowMap lock. Thus, we had come out in this solution 
to resolve these issues.

Thank you!
|Patch Set 6:

ï¼ˆCorrect comment text layout disorder of previous oneï¼‰

Hi Olawale,

We have ever met two or three issues from our internal User Trial Issue Report System which symptom is system_server native crash, its call stack is as below log snippet,

Root Cause Analysis: signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr e7f1d828

Call Stack: 
#00 pc 000c0952 /system/lib/libskia.so #01 pc 000c0c47 /system/lib/libskia.so (SkRegion::contains(int, int) const+36) 
#02 pc 0002090c /system/lib/libdvm.so (dvmPlatformInvoke+112) 
#03 pc 00057429 /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+428) 
#04 pc 00029da0 /system/lib/libdvm.so 
#05 pc 000326a4 /system/lib/libdvm.so (dvmMterpStd(Thread*)+76) 
#06 pc 0002fbc0 /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+232) 
#07 pc 0006d0e9 /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, std::__va_list)+336) 
#08 pc 00055655 /system/lib/libdvm.so 
#09 pc 00054549 /system/lib/libandroid_runtime.so 
#10 pc 00068ebb /system/lib/libandroid_runtime.so (android::NativeInputEventReceiver::consumeEvents(_JNIEnv*, bool, long long, bool*)+490) 
#11 pc 0006900d /system/lib/libandroid_runtime.so (android::NativeInputEventReceiver::handleEvent(int, int, void*)+52) 
#12 pc 00016461 /system/lib/libutils.so (android::Looper::pollInner(int)+584) 
#13 pc 00016525 /system/lib/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+92) 
#14 pc 0007089d /system/lib/libandroid_runtime.so (android::NativeMessageQueue::pollOnce(_JNIEnv*, int)+22) #15 pc 0002090c /system/lib/libdvm.so (dvmPlatformInvoke+112) 
#16 pc 00057429 /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+428) 
#17 pc 00000214 /dev/ashmem/dalvik-jit-code-cache (deleted)

We found the root case is crash at SkRegion::contains and after further traced device log, we think the reason is the race condition happened on different thread acceess mTouchExcludeRegion simultaneously and cause memory corrupted.

03-13 17:38:43.738 956 974 D libc-fault-recovery-native M=0x40095188 B=0x400951e8 F=0x39303237 P=0x799f3898 I=7 
03-13 17:38:43.738 956 974 F libc Fatal signal 11 (SIGSEGV) at 0x32343144 (code=1), thread 974 (WindowManager) 
03-13 17:38:43.738 956 974 V WindowStateAnimator DESTROY SURFACE Window{428043f8 u0 com.htc.launcher/com.htc.launcher.Launcher}

Because we traced device log and found before this native crash, WMS was performing layout and the user touched the screen (there was incoming touch event down and up) at the same time, and then immediately there was printed native crash call stack and crash was SkRegion::contains place, so we think at this symptom time, race condition is happened on mTouchExcludeRegion.contains(x, y) of StackTapPointerEventListener.onPointerEvent() called.

Whereas we found that writing of mTouchExcludeRegion is called by setTouchExcludeRegion() from WMS performing traversal and protected by mWindowMap lock, reading of mTouchExcludeRegion is called by onPointerEvent() from another system_server UI thread but not protected by mWindowMap lock. Thus, we had come out in this solution to resolve these issues.

Thank you!
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Abandoned

AOSP has already fixed it in internal branch and will release in next source update. No need for this workaround already.
|Patch Set 2:

However, I found that it seems if doesn't move stack to bottom on case of move task to back, seems this kind of key dispatching ANR of reason no focus window would still have the change to be happened if focus app doesn't set to next resumed app. 

Moreover, it seems that it's more reasonable that make consistent behavior of both cases of move task to bottom and move task to top.
|Uploaded patch set 1.
|Patch Set 1:

Yes, it's the same purpose as Seunghyun Lee's patch,  https://android-review.googlesource.com/#/c/114833, I'll abandon this duplicate patch, and thanks for your code review.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

OK, I'll abandon this patch, and thanks for your code review.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 3: Commit message was updated
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

Hi Olawale,

Thanks for your review.

We have ever found an issue of black screenshot thumbnail that happens on if the most top one or one of them is not surface shown in all target including captured windows.

This patch is used to avoid above mentioned situation and hope that it's able to reduce the black thumbnail phenomenon.
|Patch Set 7:

Hi Olawale,

Sorry to correct some inaccuracies of my previous comment.

I mean that I have ever found that if all of target including captured windows(surfaces) are not surface shown, it will cause return screenshot bitmap from SurfaceFinger is an all black bitmap. 

It's not sure if sometimes SurfaceFlinger will skip doing screenshot if it detects that all surfaces aren't shown in target composite surfaces. 

Thus, this patch is use to avoid this circumstances of return an all back bitmap from WindowManager, if once WindowManager return all black screenshot bitmap, it will always cause black thumbnail in Recent APP UI, it's bad for user experience. So, for this kind of situation, I use this patch to return NULL instead, and hope that it can reduce black thumbnail cases in Recent App UI.

Thanks.
|Patch Set 7:

(1 comment)
|Uploaded patch set 8.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)

Thank you for your review. I've made the change.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Patch Set 6:

Thanks for your review, I have done rebase.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(3 comments)
|Patch Set 4:

Hi Olawale, Craig, 

Yes, I think that there is no need this patch now, because now that we have the solution of &quot;Call Surface.release() for starting windows&quot;, after applying this patch, the case of starting window leakage should no longer occur.

Call Surface.release() for starting windows: https://android.googlesource.com/platform/frameworks/base/+/49a2edf92ab9b02762a2c183809fdee55b0fcf40

Hence, I've abandoned this patch later, and thanks a lot for your review.
|Abandoned

Now do not need this patch already!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5: Commit message was updated.
|Uploaded patch set 6.
|Patch Set 7: Commit message was updated
|Patch Set 8: Commit message was updated
|Patch Set 9: Commit message was updated
|Patch Set 10: Commit message was updated
|Patch Set 10:

Thanks for your guidance, I've done a correction.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Patch Set 4: Commit message was updated
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 6: Commit message was updated
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 5: Commit message was updated
|Uploaded patch set 6.
|Patch Set 4:

(3 comments)
|Patch Set 6:

Thanks for your guidance, I've done a correction.
|Uploaded patch set 1.
|Abandoned

duplicate one
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Abandoned

OK, It's fine and thank you, too.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 2: Patch Set 1 was rebased
|Patch set 3: Published edit on patch set 2.
|Uploaded patch set 1.
|Patch Set 1: Cherry Picked from branch jb-dev.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Abandoned
|Patch Set 1:

You can see this issue in the &quot;CtsVerifier --&gt; Camera Intents&quot; test screen.
|Abandoned
|This function is not called directly from our plugin. It is called from the common login jar, so we cannot adjust the message from our plugin
|Done
|Removed the project parameter.
|The RestMethod is decided by the method name in getDefaultRestMethod, so we already know at this point that the method name starts with the prefix.
|Done
|Done
|Done
|Done
|Done
|Added getProject method.
|The overriden guessResourceName in LIST only creates a non-null resource name if the type is assignable from Collection or CollectionResponses.
|Done
|Changed to just call getDefaultRestMethod(psiMethod).getHttpMethod() from getHttpMethod.
|For the validation of the rest signatures, the param name is not used to construct the rest signature (ApiMethodConfig#getRestfulSignature). The endpoint code generate the restsignature normally then removes the param name during the validation. In this case, we don't need the rest signature for anything else other than their validation, so I don't bother adding it. However in getRestfulSignature we remove the params in {} because they could be set in the &quot;path&quot; attribute of @ApiMethod.
|Added methods to check that.
|Changed.
|Changed.
|Done
|The colors were specified by the PMs
|Done
|I don't want to have to use a static initializer.
|I did not explicitly remove this line. When I moved the plugin under google directly this line was removed. And when I built android studio with ant script, the login plugin was available in the build.
|I think I got the colors from the Manfred at different times and that's what the ux team gave him, maybe there were 2 different ux people...
|Done in https://android-review.googlesource.com/#/c/108840/2/src/com/google/gct/idea/appengine/validation/RestSignatureInspection.java
|Ooops, this is should have been removed. The null check was added here for testing purposes when I was trying to use a VirtualFiles (that contained endpoint classes) to test the generated signatures. That is not being done anymore. Removed.
|So that in validateRestSignatureUnique, we would not save the rest signature generated for that method in the Map&lt;String, PsiMethod&gt; restfulSignatures.
|The bug was filed because the exception is logged and looks like a bug. It is displayed like this in the console:

java.io.IOException: User authorization failed (Request cancelled.)
        at com.google.gct.login.CancellableServerReceiver.waitForCode(CancellableServerReceiver.java:110)
        at com.google.gct.login.GoogleLogin$AndroidUiFacade.obtainVerificationCodeFromExternalUserInteraction(GoogleLogin.java:600)
        at com.google.gdt.eclipse.login.common.GoogleLoginState.logInWithLocalServer(GoogleLoginState.java:334)
        at com.google.gct.login.GoogleLogin$1.run(GoogleLogin.java:332)
        at com.intellij.openapi.progress.impl.ProgressManagerImpl$TaskRunnable.run(ProgressManagerImpl.java:471)
        at com.intellij.openapi.progress.impl.ProgressManagerImpl$6.run(ProgressManagerImpl.java:281)
        at com.intellij.openapi.progress.impl.ProgressManagerImpl$2.run(ProgressManagerImpl.java:178)
        at com.intellij.openapi.progress.ProgressManager.executeProcessUnderProgress(ProgressManager.java:209)
        at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:212)
......
|Done
|Done
|The AndroidUiFacade#obtainVerificationCodeFromExternalUserInteraction already logs the error.
|Done
|The style guide says to expand the import statements: https://source.android.com/source/code-style.html#fully-qualify-imports
|The intellij platform does the import of setting using dialogs (ImportSettingsAction). Our code is going to run in the background and would not have the same 'flow' as they do now.
|Intellij just overrides the settings files. We would probably have a set of default settings and this detail has not been ironed out yet.
|Lol! I wasn't ready for this cl to be reviewed yet. I am still cleaning up. Did I add you as a reviewer? Sorry, I try not to do that unless I am ready for it to be reviewed.
|Added todo item to utilize the marker in ImportSettings when the code is merged.
|This extension point if for settings that have contents in actual files. It is these files that we export. In the scenerio where a settings file exist where the plugin that uses the file does not, the file would just be ignored.
|Done
|Done
|The caller is the the common login API. I don't want to touch it if I don't have to.
|It looks ok. The decision was to make the look constant.
|That depends on the status of the users after a user signs out:
- If there a users available (but no active user) the sign out button will be visible but disabled
- If there a no users available, the sign out button will be hidden.
|Done
|Moved login dependent jars into studio/cloud/login/lib
|Done
|Done
|Done
|We probably should not mention google3. We could just use {@link LocalServerReciever}
|Standard to use braces:
https://engdoc.corp.google.com/eng/doc/devguide/java/styleguide.shtml?cl=head#s4.1-braces
|Why this assignment?
|Please fix the indentation. One more below.
|Change the 'login' module to 'google-login' module. Changes in https://android-review.googlesource.com/#/c/100150/7
|Done
|Removed &quot;this&quot;.
|Done
|Done
|Made addLoginListener package-private.
|Done
|Thought the items in the DefaultListModel had to be of the same type.
|Removed &quot;.&quot;
|Done
|Updated to use the getPreferredScrollableViewportSize of JBlist.
|Done
|Done
|isSelected doesn't always correctly return true if the current value is selected.
|Added a todo
|Done
|That is part of the UX teams requirement.
|Done
|Done
|The order matters here because when you add a user (which is done below), that new user becomes the active user. And that would replace the last stored active user.
|prepareImage translates the image into renderable pixels. Without it the users' images would not show the first time the login panel is opened.
|Done
|Changed to use ImageIcon.
|I would have to make the inner class static to make it static which would not be good.
|I am not sure how relevant adding a parent would be because GoogleLogin is neither a component nor a com.intellij.openapi.project.Project and can be called from anywhere, not only from components. Also the login is a feature that affects the whole of Android Studio, not just a particular project.
|I agree with above and for us to implement this the right way, the UiFacade which is in the common Google Login jar will have to be refactored. I will add a todo here and we can change the  common Google Login jar and update this.
|You are right. The only way to log in right now is using the login button. But once this is public, users of the GoogleLogin API can call logIn() and not from a ui component.

The GoogleLogin#logIn opens up an external browser.

I will just be calling a version of the MessageDialog that is constructed without a parent.
|Done
|Made static.
|Its for the ActionButton, which is for the button on the main toolbar.
|No, this is just to get a handle to updateUi(), so that it can update the button when there is a log in/out event, which can only happen after construction of the GoogleLoginActionButton is completed.
|Can you please point me to an example of an application service?
|Done
|Will update in subsequent cl.
|Exits, if there is no active user.
|In a Linux system, the System root preference node will be under /etc. For Android Studio to be able to make the required directory under /etc, it will have to run as a sufficiently authorized user (typically root) and change the permission to /etc to be world writeable. My guess is that most of the the time, it will be the same user logging into to Android Studio with different accounts.
|Done
|Changed to use callbacks.
|Changed to use callbacks.
|Done
|Changed.
|Updated javadoc.
|Done
|Function now throws an exception.
|Done
|Done
|Done
|Done
|Removed.
|Removed.
|Done
|Will move as suggested in a follow up cl.
|Done
|Changed the contract and the function so that function must be called from EDT.
|The network connections are now done from a background thread in GoogleLoginUtils#getUserInfo.
|In GoogleLoginState#logIn, errors are logged through AndroidUiFacade#showErrorDialog which is passed into GoogleLoginState when its being created. Right now, the actually signing in to Google services is done on an external browser. We provide the user with the url.
|Probably should have mentioned that we are relying on a common GoogleLogin jar that only supports single login (not multi-login), so here we are simulating each user login in individually. It would have been great if the the GoogleLogin jar allowed us to initialize all the users at once.
|The set of allUsers is just a collection of all the users that were logged in to Android Studio before it was shut down. GoogleLogin supports multilogin, so GoogleLoginPrefs.getStoredUsers() gets this list from the datastore.
|This was part of the Design Doc that this would be available for external plugins. The App Engine deploy feature that is the first customer for the GoogleLogin would need this.
|Didn't know about  PersistentStateComponent. Added a todo, to look into using  PersistentStateComponent instead.
|Done
|The default pref is now an empty string. Removed the null check.
|Done
|Done
|Updated the code to get the set of users and then checks if &lt;code&gt;user&lt;/code&gt; is an entry.
|Done
|Removed &quot;my&quot; prefix.
|Removed.
|Removed.
|Done
|Done
|Done
|Done
|Don't need to be updated about the text changes in codeTextField, checks done with doValidate()
|Done
|Done
|The GoogleLogin only sends out event when a user actively logs in or logs out.
|Done
|Done
|Done
|The button is initialized when it is created and the subsequent state of the button depend on what happens when the button is clicked. The button is only disabled when a user signs out and that can only be done when the button is pressed. So I updated the code to change the state of the button if a user's signs out attempt is successful.
|These fonts are selected by the UX team and the PM. They want it to always be this.
|@yole How can I make the component left justified. This statement doesn't do it. The components still come out centralized.
|Lol! No good reason. It was probably from an earlier design I didn't clean out properly.
|Done
|Removed.
|Changed.
|Done
|Added TODO  reminder.
|Done
|Oops! Added the jars.
|Done
|Done
|Done
|This should be called by the GoogleLoginPlugin (when we it is separated from gct) when the plugin is shutting down.
|Done
|Updated statement.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Added javadoc.
|Removed, not needed.
|Done
|Done
|Done
|Done
|Done
|ourBundle gets set as a soft reference to bundle which get set by ResourceBundle.getBundle(BUNDLE_NAME).
|Done
|Done
|If the user removes the @Api annotation, the inspection would be called again and a new visitor would be created with the isEndpoint set to fault. So the endpoint checks would not be run in this case.  However  this check would assume Foo.Boo (where Boo is a class in Foo) is an endpoint class if Foo is and endpoint class  which is incorrect, so I'll remove it.
|Done
|The annotation attribute values are strings, so they will only be in double-quotes.
|Done
|This function is used to parse annotation field values and they will always be in double-quotes. E.g. 

@Api (name=&quot;apiName&quot;)

would be returned as &quot;&quot;apiName&quot;&quot; when parsed.
|This test is removed in Patch 2
|Done
|Done
|Done
|Done
|Yes, the action here is AndroidBuildProjectAction and that triggers a gradle build if the project is a gradle project.
|Uploaded patch set 1.
|Patch Set 1:

Screenshots are in the bug.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Published edit on patch set 1
|Patch Set 2:

Updated the logout prompt message.
|Abandoned

Created a new cl with the requested changes.
|Uploaded patch set 1.
|Abandoned

Duplicated cl
|Uploaded patch set 1.
|Abandoned

Duplicated cl
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

This is the redline doc https://folio.googleplex.com/1333-android-studio---sign-in/redlines/  that specifies the image size. You might need to resize the icons to match this.
|Patch Set 3:

A few things like the &quot;Add Account&quot; were changed after this doc. The dimensions were not updated though.
|Uploaded patch set 1.
|Patch Set 1:

This cl is a duplicate of https://android-review.googlesource.com/#/c/108840/3 with the comments addressed.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 3:

(8 comments)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 3:

(1 comment)
|Patch Set 7: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Ping!
|Uploaded patch set 2.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

Created a local build and all works well.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Depends on https://android-review.googlesource.com/#/c/108521/
|Abandoned

Moved to new branch: studio-1.0-dev
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Addressed comments from https://android-review.googlesource.com/#/c/108172/ here.
|Patch Set 2:

I can move the cl after its been approved to the 1.0 branch.
|Patch Set 2:

ping!
|Uploaded patch set 3.
|Patch Set 3:

Forgot I could cherrypick the cl before it was approved. Moved cl to studio-1.0-dev branch.
|Patch Set 3:

Ooops! Missed your comment, only saw yole@. Will address them now.
|Abandoned

Error with local repo. Cl moved to https://android-review.googlesource.com/#/c/110691/
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Not needed.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Moved cl to login repo https://android-review.googlesource.com/#/c/109794/
|Uploaded patch set 1.
|Patch Set 1:

This cl is a duplicate of https://android-review.googlesource.com/#/c/109130/ that has been moved to the login repo.
|Patch Set 1: Verified+1
|Patch Set 1:

Hello, the fix for the build fail has been merged (https://android-review.googlesource.com/#/c/109452/). Can you please revert this cl? Thanks.
|Uploaded patch set 1.
|Patch Set 1:

This cl is not ready to be moved and the files will move when the login plugin is moved.
|Patch Set 1:

This cl is ready to be reviewed. Pictures of updated colors for the login panel are in https://code.google.com/p/android/issues/detail?id=76073
|Abandoned

Moved to login repo.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Abandoned

Not needed.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Abandoned

Not needed.
|Patch Set 1:

(1 comment)
|Patch Set 1:

Yes, I signed in and restarted and made sure the credentials were uploaded correctly.
|Uploaded patch set 1.
|Patch Set 1:

studio-1.0-dev doesn't seem to be available in idea repo. I am getting this error when I do a sync:

error: in `sync`: revision studio-1.0-dev in platform/tools/idea not found

I put this change in a studio-1.0-dev branch yesterday and repo uploads were failing. 

What branch should I put this cl in?
Thanks.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch idea13-1.0-dev as commit 546a618c9492a13b1360286b29900ccdf973fd41
|Uploaded patch set 1.
|Patch Set 1:

Depends on https://android-review.googlesource.com/#/c/108477/
|Patch Set 1:

Ping!
|Patch Set 1:

After it is approved, I can merge it to the studio-1.0-dev branch.
|Patch Set 1:

No changes. But this cl is dependent on https://android-review.googlesource.com/#/c/108523/ and https://android-review.googlesource.com/#/c/108477/. These cls are in 2 separate repos.
|Patch Set 1: Verified+1
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch studio-1.0-dev as commit 9ad9957ae889b52c2cd0cd2995c5dcfb64b64131
|Patch Set 1: Reverted

This patchset was reverted in change: Ic281e19eb22e45ef313e03f779944aa2e8d50221
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1 Code-Review+2

Moved from https://android-review.googlesource.com/#/c/108521/ for change to studio-1.0-dev branch.
|Patch Set 1: Code-Review+2

(1 comment)

We'll probably need to cherrypick this change after the login plugin has been moved.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Moved this cl to the studio-1.0-dev branch (https://android-review.googlesource.com/#/c/108840/). Address the comments in the new cl.
|Patch Set 2:

(3 comments)
|Abandoned

This cl has been moved to the studio-1.0-dev branch in this cl https://android-review.googlesource.com/#/c/108840/
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1:

Can I cherrypick this cl into the studio-1.0-dev branch after its merged?
|Patch Set 1:

We used to have +2 but not now. Thanks.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch studio-1.0-dev as commit 5f3966e0d6ef13c76bfe9c63f00964df43714bf1
|Patch Set 1:

Do we still need to merge this into idea1333?
|Uploaded patch set 1.
|Patch Set 1:

Not ready for review.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

This cl is ready for review.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Abandoned

Ported cl over to platform/tools/studio/google/cloud/tools.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

b/17550572
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Patch Set 3:

Add a new test.
|Patch Set 3:

No it wasn't. The test was not covering the name default name being an empty string and when the user specified name was an empty string.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Ping! :)
|Patch Set 1: Verified+1
|Patch Set 2:

Can we make the Generate Cloud Endpoint from Java class context menu only show up for java classes in an App Engine Module?
|Patch Set 2: Code-Review+2

Will show context menu in only App Engine project is subequent cl.
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+2

Previously approved.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+2

Previously approved.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2: Verified+1
|Patch Set 9: Code-Review+2
|Patch Set 12:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

Ping!!!
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2: Verified+1

Previously approved.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

This cl is ready to be reviewed.
|Patch Set 2:

(2 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Patch Set 5: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

The features that were added to the sign out dialog are as follows:
- Change the non-signed in buttons from &quot;Add Account&quot; and &quot;Sign Out&quot; to a single &quot;Sign in...&quot; button
- Change the text of the dialog to include a &quot;Learn more&quot; link
|Uploaded patch set 3.
|Patch Set 3: Verified+1

Previously approved. Just changed the color of the sign in messaged.
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Added following: Mouse hover icon over an inactive user should be â€œhandâ€�
|Patch Set 2:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Just deleted some code that is no longer in use.
|Patch Set 2: Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 1:

This cl is dependent on the following cls that are not in the master branch:

https://android-review.googlesource.com/#/c/101850/
https://android-review.googlesource.com/#/c/95391/4

We can succesffuly create a build when this cls are included in a repo based off of the master branch
|Patch Set 1:

Yes please.
|Patch Set 1:

Sorry for the break, merged dependey cl.
|Patch Set 1: Reverted

This patchset was reverted in change: I6f033f8beca294e6659ba4b8ff52d7381a413d11
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 3:

Did a sync.
|Patch Set 3:

The cl for the adjustment in the build script is https://android-review.googlesource.com/#/c/100150/. This is the cl that got merged and then reverted.
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

This cl is not final.
|Patch Set 1:

This is a temporary cl for now, just trying to do local builds for internal testing.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 7:

(2 comments)
|Uploaded patch set 9.
|Patch Set 8:

(3 comments)

This cl is dependent on https://android-review.googlesource.com/#/c/101850/
|Patch Set 9:

Ping!
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(4 comments)

This is great. Thanks Ben.
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 5: Verified+1
|Patch Set 5:

Let me know when this is ready to be merged and I'll merge it.
|Patch Set 6: Code-Review+2
|Patch Set 6: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Verified+1 Code-Review+2

Previously approved. Moved new icons to login/resources/icons after merge.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Doing it in insertion order will not make the users order alphabetic. But this way, it mimics what is done in gmail.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5:

(3 comments)
|Uploaded patch set 7.
|Patch Set 7:

Updated servlet api to 3.0.1. This is ready to be merged. Thanks.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

Ping!
|Uploaded patch set 2.
|Patch Set 2:

Rebase cl. Thanks.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(8 comments)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

The changes also include fixing a bug where the users' images' were not getting displayed the first time the google login panel was opened.
|Uploaded patch set 2.
|Patch Set 2:

Also fixed the bug where the active user was not being preserved when Android Studio was restarted.
|Patch Set 2:

(3 comments)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

No longer need. Task done in another cl.
|Uploaded patch set 1.
|Patch Set 1:

The added jars are needed for:
javax.servlet-api-3.1.0.jar -&gt; LocalServerReceiver
jackson-core-asl-1.9.11.jar -&gt; GoogleLoginState
google-http-client-jackson-1.18.0-rc.jar -&gt; Userinfoplus and Oauth2
google.login.jar -&gt; updated
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+1

This cl is ready to be merged. Can someone please help me do this since I do have those rights :) Thanks.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1

(2 comments)
|Patch Set 1:

Ping!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 9:

This cl has been merged and updated. It has the preliminary Google Login ui that only shows the user name, email and picture.
|Uploaded patch set 10.
|Patch Set 9:

(33 comments)
|Patch Set 10:

Hey Dmitry, I added some comments and the one in GoogleLogin.java should address your comment above. Thanks.
|Patch Set 9:

(1 comment)
|Uploaded patch set 11.
|Patch Set 9:

(1 comment)
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Patch Set 9:

(1 comment)
|Uploaded patch set 15.
|Patch Set 15:

Friendly Ping!
|Uploaded patch set 16.
|Uploaded patch set 17.
|Patch Set 15:

(11 comments)
|Uploaded patch set 18.
|Patch Set 15:

(8 comments)
|Uploaded patch set 19.
|Patch Set 15:

(2 comments)
|Patch Set 19:

Hey Norman, I have added a todo for this and we can chat about it and make the necessary changes if needed. I am not sure I agree with using the system root depending on the definition of &quot;user&quot;.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 6:

(6 comments)
|Uploaded patch set 9.
|Uploaded patch set 10.
|Patch Set 8:

(2 comments)

Added a note to removed the google oauth jars :)
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Patch Set 2:

(6 comments)
|Uploaded patch set 4.
|Patch Set 4:

Updated cl after merging with &quot;Adding Endpoint Api name inspection.&quot; cl (https://android-review.googlesource.com/#/c/73197/4)
|Patch Set 4: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Code-Review+1

Made changes per comments.
|Patch Set 2:

(3 comments)
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2:

Updated cl.
|Patch Set 1:

(11 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(7 comments)
|Patch Set 4: Code-Review+1
|Uploaded patch set 5.
|Patch Set 5: Code-Review+1

Hey Siva, I added the AOSP header. Thanks.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 3: Commit message was updated
|Abandoned
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 1.
|Abandoned

Mistake
|Restored

Temporary
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

Sorry for the multiple cls for the same thing. repo/gerrit/my hands don't seem to be working today.
|Patch Set 2:

Changes checked into internal-repo in https://googleplex-android-review.git.corp.google.com/#/c/757890/
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)

Updates service.xml. Can you take a look please. Thanks.
|Abandoned

Sorry for the multiple cls for the same thing. repo/gerrit/my hands don't seem to be working today.
|Patch Set 1: Cherry Picked from branch studio-1.3-dev.
|Abandoned

Duplicate
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Patch Set 3: Cherry Picked

This patchset was cherry picked to branch studio-master-dev as commit 222aa914529b0f7a554f83b0329eca064cb2d052
|Abandoned

Moved cl to studio-master-dev branch
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned
|Patch Set 1:

Wrong branch, should push to &quot;marshmallow-cts-dev&quot;
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Error because tasks failing to suspend is taken care in the suspend.c Line 151.

The error propagates till there.
|Suggest: check_wakeup_reason()

we would need to add this to the header file as well?
|Instead of creating a new method, it will be better to add it as a property and then call getProperty for the same
|This wasn't missing earlier. It wasn't stored as a part of battery properties. They were just printed in the dmesg. Line 258-263 in the old file. This is making sure that the value is stored and can be used by the framework.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|There is no central place for this. Guarding it to check if it is defined sounds right. Will make that change for all the extra definitions.
|There are 5 places where we have added the #defines namely:

BTU_STACK_LITE_ENABLED (2)
NFC_STANDALONE (2)
USERIAL_DEBUG

The first two are gki related which will be removed soon. I think those can be ignored for now. I have shifted this one to nfc_target.h

What could be done is, I could remove this patch from the topic, and then add it later when GKI is removed? Such that it doesn't require additional work which will be removed eventually?
|Done
|I have defined few and left few of the platform specific ones as defined.
|Changed the coccinelle script to be more specific
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch android-3.18 as commit 7ccfbeceea23c64d110cf8f77803f12d0bcee787
|Patch Set 1: Cherry Picked from branch android-3.14.
|Patch Set 1: Code-Review+2 Verified+1
|Abandoned

A similar patch has been submitted to android-3.18. Abandoning this.
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 3: Code-Review+2 Verified+1

min_sampling_delay should never be set more than the boostpulse_duration. But this doesn't hurt. LGTM
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 4: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Cherry Picked from branch android-3.10.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch android-3.18 as commit 246667e899473fece2c7ae7579943ca94a3acdb0
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Cherry Picked from branch android-3.14.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch android-3.14 as commit 87ae7641a1bfd064993b2b92e365b72fbf2effa1
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 3: Patch Set 2 was rebased
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Patch Set 6: Patch Set 5 was rebased
|Patch Set 6: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Patch Set 4: Commit message was updated
|Patch Set 2:

Shouldn't we shift this to Android-3.18 and not experimental?
|Patch Set 2: Cherry Picked

This patchset was cherry picked to branch android-3.18 as commit eec8dd712dabe7ebb3fc1d12db6f224d23a31558
|Abandoned

Merged in common/android-3.18
|Patch Set 1: Cherry Picked from branch experimental/android-3.18.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 2:

will need to be cherry-picked to android-3.18 too.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Abandoned

Merged
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Added a change it. Wasn't able to submit the previous patch.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Uploaded patch set 1.
|Change has been successfully pushed.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2
|Patch Set 3: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Abandoned

Merged internally for future Android releases.
|Abandoned

Merged internally for future android release.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Abandoned

Moving to Master.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased
|Uploaded patch set 5.
|Patch Set 6: Patch Set 5 was rebased
|Patch Set 6: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 4: Verified+1
|Change has been successfully merged into the git repository.
|Patch Set 1: Code-Review+1
|Patch Set 1:

Works for me too
|Patch Set 4:

I have submitted a patch(https://android-review.googlesource.com/#/c/205243/) which checks if the battery device exists. This should solve the problem in Qualcomm devices. Abandoning this change. Feel free to get back if it doesn't work.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch set 4: Commit message was updated.
|Patch Set 4: Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 3: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

I have cherry-picked this from the angler kernel. I thought it makes sense to keep things uniform.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Abandoned
|Patch Set 1: Code-Review+1

I don't have +2 capabilities.
|Uploaded patch set 1.
|Patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+1
|Abandoned

Tried to add the change Id, but it uploaded a new change. Abandoning this, we can submit the new one. Thanks!
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 4: Code-Review+2
|Patch Set 4: Verified+1
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch set 2: Commit message was updated.
|Patch Set 1: Code-Review+2
|Patch set 2: Commit message was updated.
|Patch Set 1: Code-Review+2
|Patch set 2: Commit message was updated.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(5 comments)
|Patch Set 1:

There isn't a specific bug for this particular change. While I was testing the feature on different devices, I realized that the earlier patches will not work for devices which supporting single policy for multiple cores. Attaching the generic bug for the same.
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Presubmit-Ready+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Presubmit-Ready+1
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Abandoned
|Abandoned

Change has been merged.
|Patch Set 2: Verified+1 Autosubmit+1 Presubmit-Ready+1 Code-Review+2
|Removed Autosubmit+1 by Ruchi Kandoi &lt;kandoiruchi@google.com&gt;

|Patch Set 3: Commit message was updated.
|Patch Set 3: Autosubmit+1
|Patch Set 2: Verified+1 Autosubmit+1 Presubmit-Ready+1 Code-Review+2
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Removed reviewer Andre Eisenbach.
|Removed reviewer Myles Watson.
|Uploaded patch set 2.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Patch Set 9: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Removed reviewer Andre Eisenbach.
|Removed reviewer Myles Watson.
|Uploaded patch set 2.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2: Patch Set 1 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Patch Set 10: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2: Patch Set 1 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12.
|Patch Set 11:

(1 comment)
|Patch Set 12: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 3.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Patch Set 8: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8.
|Patch Set 7:

(2 comments)
|Uploaded patch set 9.
|Patch Set 5:

(1 comment)
|Uploaded patch set 10: Patch Set 9 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 11: Patch Set 10 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 12: Patch Set 11 was rebased.
|Patch Set 12: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Patch Set 8: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Patch Set 2: Verified+1 Code-Review+2
|Change has been successfully merged by Ruchi Kandoi
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Patch Set 2:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Removed Presubmit-Verified-1 by Treehugger Robot &lt;treehugger-gerrit@google.com&gt;

|Patch Set 7: Presubmit-Ready+1
|Uploaded patch set 8: Patch Set 7 was rebased.
|Patch Set 9: Commit message was updated.
|Uploaded patch set 10.
|Patch Set 10: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to nfc-data-type-changes
|Patch Set 1: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Uploaded patch set 1.
|Topic set to De-Bluetoothify
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Verified+1
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to De-Bluetoothify
|Uploaded patch set 2: Patch Set 1 was rebased.
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Uploaded patch set 1.
|Topic set to De-Bluetoothify
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Change has been successfully merged by Ruchi Kandoi
|Hashtag added: code-cleanup
|Agreed. But I think it's better to use GLESvalidate::textureTarget() to do the validation.
|GLSharedGroup is the object which can be accessed by multi-threads. ShaderData is owned by the GLSharedGroup, and it also can be accessed by multi-threads. It's better to keep all accessing thing in the GLSharedGroup object where the mutex is used for the protecting.
|Add some fields to save more information of the Shader object.
|When the GLSurfaceView using EGL API to get RGB888 config, it may get a RGBA8888 config. This happens in the emulator with Intel integrated graphics card acceleration, since there is no exact RGB888 config in the graphics card and it could be compatible.
|How about put the parameters' checking before using gl2b
|Some GL parameters' value are static. If we get the static values during the initial time, we can save the time during running.
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

This is a simple patch. I just want to use it to discuss the issue here. With deqp test tool, we can see there're many GLES API conformance issues. We used to rely on host part to guard the conformance of each API. But it's not a good idea. Not all the host GL libraries are stable enough. Besides, it also do harm to the performance. Switching between guest mode and host mode is expensive. We'd better add more code in the guest to reduce it. And this will benefit all kinds of image.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

We find this bug in Android emulator. Currently, Android emulated GPU supports &quot;GL_OES_EGL_image_external&quot; extension. But Apps cannot use it because of missing query result of glGetString(GL_EXTENSIONS). Although we upload a patch &quot;https://android-review.googlesource.com/#/c/120230/&quot; to enable the extension with glGetString(GL_EXTENSIONS), we think a &quot;NULL&quot; pointer handler should be added here.
|Patch Set 1:

David and Richard, thank you for your comments. I will upload the patch to the Chromium project, later.
|Patch Set 1: Code-Review+1

Looks good to me.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)

This patch including the following things:
1. Add parameters validation to the Shader APIs.
2. Add more fields in the ShaderData which is the shader object.
3. Keep all the accessing operation of ShaderData in GLSharedGroup where mutex is used for protecting multi-thread.
4. Fix the fail test cases in dEQP:
  1) functional.negative_api.shader.shader_source
  2) functional.negative.api.get_active_attrib
|Uploaded patch set 2.
|Patch Set 2:

Maybe the patch is too big. I plan to divide it into several. This one can be used to pass the &quot;dEQP-GLES2.functional.negative_api.shader.shader_source&quot; test case.
|Patch Set 1:

I think the commit message isn't very clear.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)

When the GLSurfaceView using EGL API to get RGB888 config, it may get a RGBA8888 config. This happens in the emulator with Intel integrated graphics card acceleration, since there is no exact RGB888 config in the graphics card and RGBA8888 could be compatible with RGB888.
Due to this problem, the &quot;API Demos/Graphics/OpenGL ES/*&quot; cannot work with Intel integrated card.
|Patch Set 1:

I see. I think it's better to let Android GPU emulation handle this. Thank you for the advice.
|Abandoned

It' better to let Android GPU emulation handle this case
|Uploaded patch set 1.
|Patch Set 2:

I agree with Vince and Digit. Thank you.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

This can fix the unstable HWUI issue
|Uploaded patch set 1.
|Patch Set 2:

We test the latest AOSP_x86_64_eng build image with some 32-bit APKs. And if we don't use this patch, all of them will crash.
|Uploaded patch set 1.
|Patch Set 1:

Just notice Jason has uploaded another patch to solve the same problem:
https://android-review.googlesource.com/#/c/179304/
So, I'm going to abandon mine.
|Abandoned

Just notice Jason has uploaded another patch to solve the same problem:
https://android-review.googlesource.com/#/c/179304/
So, I'm going to abandon mine.
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Sorry about that. My previous patch only takes care of GLES2.0. But cubemap is using GLES1.1. So I update the GLES1.1 in this patch. Currently, GLEncoder and GL2Encoder are two independent objects. Can we  rewrite the code to extract the common part of these two objects? It will make maintaining and debugging easier.
|Uploaded patch set 1.
|Patch Set 1:

Just notice Lizhe has a patch solving the same problems. Lizhe, could you please merge my idea in this patch with yours and upload that patch to the AOSP? Thanks.
|Uploaded patch set 1.
|Patch Set 1:

Some files are not used by the current implementation of GL emulation guest part. Can we just remove them?
|We have separeate mk file for silvermont (arch-x86/silvermont/silvermont.mk), so compat file should be directly added in silvermont.mk.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Thanks for comments! New test actually fails, so I will provide corrected patch soon.
|Uploaded patch set 4.
|Patch Set 4:

I've added copyright notes and fix for segfault, tests are ok now.
|Uploaded patch set 1.
|Patch Set 1:

NaN test fails on x86 and arm.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

I've removed dl* functions from android-L. 
P.S. Just to make it clear, is it right that starting with android-L we don't support backward compatibility for dl* functions? E.g., I see the function dlmallopt that doesn't have any analogues in android-L. 
I want to mention also that I've checked ndk r10 libraries and found that libc.a still contains dl* functions.
|Patch Set 2:

Ok, so, should I also remove dlposix_memalign from android 17-19?
|Uploaded patch set 3.
|Patch Set 3:

Done.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

Sorry, I've just fixed extra tubs.
|Patch Set 3:

We don't support old Atom for 64-bit that is why we don't need Atom part in cache.h for 64-bit. 
Corresponding performance issue: I've tested these memset implementations on Silvermont. They show good enough performance in comparison with slm versions.
If you plan to add new versions of these functions I think you can just replace old ones.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Thanks, Mingwei! I've added AES and SSE4 flags to Sandybridge.
|Patch Set 6: Code-Review-1

(1 comment)

Script generates excessive symbols for x86 (I don't know about arm), but I'm not sure that hard coding of missing symbols in script is a better solution than mine. Actually, I've checked (for silvermont and haswell) that only popcount symbols are missing and it has an explanation as starting with slm popcount is supported in HW. That is why I believe that for now having a two-symbols list is better, at least it's crystal clear.
|Patch Set 6: -Code-Review

We've moved all arch variant specific things into arch variant specific makefiles. Compat file is not common for all variants, so I suppose it should be included only into makefiles corresponding to affected archs instead of checking all variants in common file.
|Patch Set 6:

Ok, while only popcount is missing lets check ARCH_X86_HAVE_POPCNT in x86.mk.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

This implementation is obtained from 64-bit sse4-memcmp-slm.S that shows good performance on slm devices.
|Uploaded patch set 3.
|Patch Set 3:

I've fixed tabs (in 32-bit version too) and changed memcmp16.h. About cache.h: it's just a standard file that we use in such functions like memcmp, memset etc. As just one define from cache.h is needed here I've added it directly in memcmp16 implementation.
|Uploaded patch set 1.
|Patch Set 1:

Legacy code (built without -march=slm) should be supported on slm platforms too. It means that we should include missing popcount symbols in dynamic library because apps take symbols from libc.so. As it was mentioned this problem is also described in bionic/libc/tools/genlibgcc_compat.py.
|Uploaded patch set 1.
|Abandoned

Sorry, I was wrong, I've found a case where null-testing is necessary.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

It is a correctness fix. The new test differs from the old one - it tests another part of the algorithm. I have perfomed testing for 32-bit (on host) and I see that the test fails for the old version of memmove:
[ RUN      ] string.memmove_cache_size
bionic/tests/string_test.cpp:934: Failure
Value of: memcmp(ptr2, ptr1, 2 * len)
  Actual: -129
Expected: 0
[  FAILED  ] string.memmove_cache_size (3 ms)
|Patch Set 2:

I can observe same failure on emulator too.
|Nope, that definitely makes more sense.  That was a consequence of how quickly I've gotten sick of staring at this file!
|Done
|Done
|EXE has to be specified, though.  In the 3 argument case it is specified explicitly, and in the 2 argument case I take the PID on line 1024.
|Originally this reference to $PTEMP was $3 or $2 depending on which # of arguments were provided.  Even if we can't find the value of the PID anywhere in the next 3 if statements, I don't want to lose the original value.  Before I added the 2 argument case, the echo on line 1043 just used $3 instead of $PTEMP, but I don't want to make another if statement deciding which of $3 or $2 to print (or use in the ps &#124; grep line).  If you think there is a way I can make this behavior clearer, I'd be happy to change it.
|The dlsym reference doesn't work without it, but it may be that there's a better way to do this that will fix both of the situations instead of two different fixes.
|I can do that.  I expected that this wasn't going to be a passable solution, since I wasn't sure what other effects it would have, so it should be easy enough to migrate to another function.
|Done
|Yeah, I realized this is really kind of confusing to explain without saying things like &quot;the function that returns the function that returns the desired value&quot;.
|I thought so too, since my failure is a 0x0 null pointer.  The reason I'm modifying a copy and not the actual st_value is because I can't--SEGV_ACCERR.  I suspect this is because the symbol table is part of the ELF file, and the dynamic linker shouldn't modify that.  However, I may be mistaken in that understanding.  If I could just modify st_value, it would be much easier.
|Presumably the fact that it is allocated on the stack.  Since I can't use malloc in the linker, I guess I just have to learn to use the linker allocator!
|It appears not to work, so I'll tackle that next.
|It always exits at the ASSERT_EQ on line 107, so I haven't seen this yet, but I'll add it.
|...Apparently?  I've been working on this file too but in a different branch, and I didn't think I mixed them up...
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Well, I thought that the static keyword meant that we would only have a single copy of this variable at any given time, and ATRACE_TAG_NOTREADY will never be a valid tag value that we might get from property_get, so I thought that, even in a multithreaded program, there would only ever be one copy even between threads.  The check will happen in each constructor, but I must be missing something in my understanding of static between threads.
|In the lower comment on EINTR, I mention that I think that would be one situation where O_CLOEXEC would be useful, so I think that it would be.

I can't help but think it would be really nice to open this file once, though, and just close it once when it's done, but I won't pretend to have a really clear idea of what the implications of that might be in this context.
|Why is it inlining it?  I don't have them declared as inline anymore (but perhaps I should?).

I wasn't sure if stdio was sensible, so they're really there as a placeholder for whatever would be preferred.  If nothing would be, I can combine these two into an abort.
|Done
|The iovec struct requires a length argument for the string, so it doesn't solve the problem I was trying to solve, i.e. allocating only enough for the exact size.  The only way I could find to actually figure out how many digits the PID was would be to just /= 10 until &lt; 1 and keep a count, and I wasn't sure if that would be worth the trouble.

There may be another way, but I am not familiar with it and didn't find it looking around.
|Well, I know it's the errno value you get if someone interrupts you, like if I were to hit ctrl+C during one of these write calls.  Right now, I just handle that dumbly below by printing the error, but if the write has been interrupted I'm guessing at the very least I want to close the file (which I think O_CLOEXEC would handle if I enable it), or even do more, like clean up the write somehow.
|Done
|Oh, meant bitwise since this is always going to be true unless one doesn't exist.  Plus the != 0 you added above.
|Okay, I will.
|Done
|Done
|Done
|Ignorant copy-paste from atrace.  Not sure why they did it...
|So do you mean to give it a default value (-1 maybe) right here and then open it up where i check if it's -1 (and then I guess check again?).
|Done
|I know that you told me previously that I didn't need to specifically enumerate which kind of contention situation it is, so they could all be the same, but otherwise I'm not sure.  I'm not sure what information would be interesting here, since I thought the general idea was to see how much time was being wasted in pthread_mutexes, and I'm not sure if there's more specific information that would be desired (like which mutex, where, etc.).
|Done
|Because in C++ classes in school they didn't make a big deal out of the importance of trying to obscure things in the source files, so it's not my first instinct to think of these things. :)
|Done
|Done
|Done, and just wanted to clarify that this is because even though atrace's tracing is called &quot;ScopedTrace&quot; as well, that we can't link against it and it simplifies the tracing implementation overall by keeping it (mostly) consistent.
|Done
|Previously it was only two of them, but I had to add the same tag checking into the destructor that exists in the constructor because all of this moving around exposed a bug that existed before that hadn't been showing up (i.e. trying to write to the trace file after the trace was done), so now all 4 of the member variables are needed in both the constructor and destructor.
|I don't think it should ever be, but upon further inspection it appears that __system_property_serial returns -1 on error, so it is already the established way of conveying an invalid serial.
|Oh, yes, with the last few changes to what is in the header and what is in the cpp, this is now possible.
|Done
|Done
|Done
|Never, removed this check
|Removed
|Replaced with a smaller size in newer patch set.  (writev requires me to know the length of the string in question as well, and itoa isn't supported)
|Added checks for write errors here and below.
|I closed the file here because we open it each time, so closing it seems sensible as well.  (Though perhaps there's a way to avoid doing all this opening and closing that I don't know.)

I'm not totally sure how to help developers debug it, though.  I think I might not be totally understanding the question.
|Done, removed and replaced with ATRACE_TAG_BIONIC.
|I don't distinctly remember having a conversation about that.  I know there was some uncertainty, at least on my part, about exactly what the appropriate response to one of these critical failure points would be, and a discussion of how stdio isn't reliable for error reporting, so unless there's some distinct reason why this shouldn't be reported to the log, I would think __libc_fatal would be preferred.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|The UI is helpful in that it will match and sum all segments corresponding to the substring you type in, so &quot;Contending for&quot; will bring up both and show them as both a sum of the differently named events as well as a sum of all of them.

In the case where your substring matches more than one label, it won't show all of the individual segments' information underneath, but as soon as you type the whole name that only matches one label, they show up.
|Done
|Done
|Done
|Done
|I was also wondering why it was letting me do this...
|Done
|Done
|I was going to ask if you thought I should make this a function as well, but figured you'd probably say something in the CR if you thought it was a good idea :)
|Done
|Oh, meant to make this 0.  I wrote this before we talked.
|The failure happens deep in the guts of these functions within allocate_obj (system_properties.cpp).  

if (pa-&gt;bytes_used + aligned &gt; pa_data_size) {
    return NULL;
}

^This check is true, since it's simply checking if the object will fit. It won't, seeing as we are just adding and adding until we hit the limit (PROP_AREA, #defined in _system_properties.h).
|I'm not actually seeing a difference between having it there and not having it there, but I put it back in on the assumption that it will be a good idea to ensure things are printed as expected.
|The two ideas I'm thinking are either to return some value from the ProcessLine function to say that the line was not a recognized bit of output (like maybe return true when it finds a line it recognizes and false otherwise, and then print &quot;line&quot; on false), or to have ProcessLine print unrecognized lines.  The former seems preferable since the latter could add a lot of output where it isn't wanted.
|It's definitely hard to get used to!
|I do, it's just that python's scoping-via-whitespace makes this annoying difficult to decipher.
|I wanted a regex that won't match anything at first, since until these are set they are still going to be checked in the ProcessLine function (i.e. in a case where the ABI line comes in the wrong order).  $a was the answer that stack overflow gave for something that won't match anything (since when will a single line have anything after the end of it), but if there's a better option for that here, I can do that.
|Done
|Because I've had too many classes in C recently and not enough in C++!
|Do you mean to remove /system/bin from $OUT_EXE_SYMBOLS?  That's what my change to envsetup.mk did, but I'm not sure exactly where I should be stripping it.
|I am providing the full pathname for this argument (i.e. /system/xbin/crasher).
|What would be a better name? Something like OUT_EXE_SYMBOLS_DIR?
|This will go into the tombstone file, while ALOGE will not.  I use _LOG when there is a log_t in scope and ALOGE when there isn't.

Sorry, responded to this question on a previous patch but I guess I forgot to submit the draft.
|Should I be setting this symbol.ARCH to match a selection I pull out of the abi regex?  Is it even necessary if we're not matching register lengths?  I left it for now but it isn't used anywhere else in here.
|I removed these register lines because they also seemed useful specifically for detecting the ABI, but if they were also wanted as part of the output, I'll put them back.  I'm not sure what parts of this are useful.
|Done
|Done
|I think this is the last residual git branch confusion change...  knock on wood.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3:

(4 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; (1 comment)

I know, actually this is just in here right now while I test to make sure I'm doing what I think I'm doing.  That's why it's WIP--I'm taking these duplicate checks out after.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7: Commit message was updated.
|Patch Set 7:

(4 comments)
|Patch Set 7:

(2 comments)
|Patch Set 7:

&gt; (1 comment)

So, just to verify that I understand what needs to happen, I need to update the proper address somewhere (presumably the plt) after the constructors are called within the linker so that the loader gets the proper address when it attempts to get the address for foo?
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Uploaded patch set 15.
|Uploaded patch set 16.
|Patch Set 16:

(1 comment)
|Uploaded patch set 17.
|Uploaded patch set 18.
|Patch Set 18:

&gt; test fails on run-on-host, it is unable to dlopen libtest_ifun (is
 &gt; there something with -bsymbolic missing from the makefile?)

It's possible.  I can't build right now at all because of some errors in art/runtime so I need to figure that out before I can test.  This is all dependent in some way on -Bsymbolic not being there, though, so it's possible.  I had to add -Wl,-shared to transform-o-to-shared-lib-inner in build/core/combo/TARGET_linux-x86_64.mk and build/core/combo/TARGET_linux-x86.mk.  I didn't upload those changes because Dan is working on all that.
|Uploaded patch set 19.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 4:

(9 comments)
|Patch Set 5:

(4 comments)
|Patch Set 1:

(9 comments)
|Patch Set 8:

(13 comments)
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 13.
|Patch Set 13:

(1 comment)
|Uploaded patch set 14.
|Patch Set 14:

(14 comments)
|Uploaded patch set 15.
|Patch Set 15:

(7 comments)
|Uploaded patch set 16.
|Uploaded patch set 17.
|Patch Set 17:

(2 comments)
|Uploaded patch set 18.
|Patch Set 18:

(2 comments)
|Uploaded patch set 19.
|Patch Set 19:

(1 comment)
|Uploaded patch set 20.
|Uploaded patch set 21.
|Patch Set 21:

(4 comments)
|Uploaded patch set 22.
|Uploaded patch set 23.
|Patch Set 23:

&gt; (2 comments)
 &gt; 
 &gt; lgtm (modulo comments). testing now...

I can't actually open the traces because I'm doing this testing remotely via chromebook, but I've been grepping the html of the presence (or lack thereof) of the &quot;contending for pthread mutex&quot; segments.  It looks good from here, but if the traces look strange let me know and I'll fix them tomorrow when I'm in the office.
|Uploaded patch set 24.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)

&gt; (1 comment)

I changed it to 0, but the -1 might be better since that would be an obvious sign that the entry point was through this case.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Patch Set 1:

&gt; hmm. although i said i thought this was a good idea, i'm now
 &gt; wondering how many people still need to decode stacks from old
 &gt; builds. there's also a --arch argument (though i'm not entirely
 &gt; sure who uses that and when). so we might need to just call
 &gt; UpdateAbi from the constructor for now?

My change doesn't really have anything to do with that.  The symbol.ARCH change shouldn't actually affect anything because it won't set anything as 32 or 64 bit until it sees and decodes the ABI line, so it was an unused initial value.  And the other change just fixes how ADB wouldn't be able to decode a 32 bit trace after it has done a 64 bit one.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

&gt; (1 comment)

Oh, sorry, this is part of it too.  It fails when a name starts or ends with &quot;.&quot;, if there are 2 periods in a row, or if the name is empty.  I wrote a fix for those cases and discovered that it then begins to fail when there are too many added (around 850 properties seems to fill it).
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(2 comments)
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)
|Uploaded patch set 7.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 4:

&gt; (ps4 is a rebase on top of your &quot;Revision: &quot; change so i can test
 &gt; this. you'll need to abandon your local copy.)

Ah I was in the process of doing this right now!  But ok, I'll just abandon and sync.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 5: Commit message was updated.
|Uploaded patch set 6.
|Patch Set 6:

(2 comments)
|Uploaded patch set 7.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)

...whoops.  Yes.  Though it worked when I ran it, so I must be testing improperly.
|Patch Set 1:

&gt; &gt; (1 comment)
 &gt; 
 &gt; ...whoops.  Yes.  Though it worked when I ran it, so I must be
 &gt; testing improperly.

Wait, sorry, misunderstanding.  I've been consistently messing up git by getting branches confused.  I didn't mean to upload this one because it's not done yet (obviously).  Should I abandon this change or just wait and use the same change-id once I figure out where /system/bin is being appended?
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)

(another comment I just realized I hadn't sent like 2 days ago)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 8:

(2 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 6:

&gt; ps6 fixes the build by fixing all the other machine.cpp files ---
 &gt; whenever you make a change, you need to do a global search and
 &gt; replace. you really should consider switching to Eclipse or
 &gt; something similar.
 &gt; 
 &gt; there's still a problem though. look at the output of &quot;adb shell
 &gt; crasher thread-abort&quot; with and without your change...

 &gt; ps6 fixes the build by fixing all the other machine.cpp files ---
 &gt; whenever you make a change, you need to do a global search and
 &gt; replace. you really should consider switching to Eclipse or
 &gt; something similar.
 &gt; 
 &gt; there's still a problem though. look at the output of &quot;adb shell
 &gt; crasher thread-abort&quot; with and without your change...

I'm using sublime which supports that, I just hadn't figured out how to do it outside of a single file until right now.  If you really think I should use Eclipse I will, I just really really don't like IDEs and would greatly prefer an editor that is only an editor.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Patch Set 10:

&gt; i still don't see the line telling me where the tombstone is, even
 &gt; though the tombstone file is actually created.
 &gt; 
 &gt; ~/local-disk/aosp/system/core/debuggerd$ adb shell rm
 &gt; /data/tombstones/*
 &gt; ~/local-disk/aosp/system/core/debuggerd$ adb shell ls
 &gt; /data/tombstones
 &gt; ~/local-disk/aosp/system/core/debuggerd$ adb shell crasher abort
 &gt; crasher: built at 12:45:46!@
 &gt; crasher: init pid=12295 tid=12295
 &gt; 06-12 19:46:40.791 12295 12295 F libc    : Fatal signal 6
 &gt; (SIGABRT), code -6 in tid 12295 (crasher)
 &gt; 06-12 19:46:40.895 12203 12203 I DEBUG   : *** *** *** *** *** ***
 &gt; *** *** *** *** *** *** *** *** *** ***
 &gt; 06-12 19:46:40.895 12203 12203 I DEBUG   : Build fingerprint:
 &gt; 'Android/aosp_mako/mako:4.4.3/OPENMASTER/eng.enh.20140610.135359:eng/test-keys'
 &gt; 06-12 19:46:40.895 12203 12203 I DEBUG   : Revision: '11'
 &gt; 06-12 19:46:40.896 12203 12203 I DEBUG   : ABI: 'arm'
 &gt; 06-12 19:46:40.896 12203 12203 I DEBUG   : signal 6 (SIGABRT), code
 &gt; -6 (SI_TKILL), fault addr --------
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     r0 00000000  r1
 &gt; 00003007  r2 00000006  r3 00000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     r4 b6f39280  r5
 &gt; 00000006  r6 00000002  r7 0000010c
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     r8 b6f11da8  r9
 &gt; 00000000  sl 00000000  fp bef5fb0c
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     ip 00003007  sp
 &gt; bef5fa40  lr b6ece5cd  pc b6ef3f4c  cpsr 000d0010
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d0  ffffffffffffffff
 &gt;  d1  ffffffffffffffff
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d2  0000000000000032
 &gt;  d3  0000000000000039
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d4  0000000000000000
 &gt;  d5  0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d6  0000000000000000
 &gt;  d7  0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d8  0000000000000000
 &gt;  d9  0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d10 0000000000000000
 &gt;  d11 0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d12 0000000000000000
 &gt;  d13 0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d14 0000000000000000
 &gt;  d15 0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d16 0000000000000000
 &gt;  d17 0000000000000fff
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d18 0000000000000000
 &gt;  d19 0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d20 0000000000000000
 &gt;  d21 0000000000000000
 &gt; 06-12 19:46:40.963 12203 12203 I DEBUG   :     d22 0000000000000000
 &gt;  d23 0000000000000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     d24 0000000000000000
 &gt;  d25 0000000000000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     d26 0000000000000000
 &gt;  d27 0000000000000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     d28 0000000000000000
 &gt;  d29 0000000000000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     d30 0000000000000000
 &gt;  d31 0000000000000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     scr 00000000
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   : backtrace:
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #00 pc 00038f4c 
 &gt; /system/lib/libc.so (tgkill+12)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #01 pc 000135c9 
 &gt; /system/lib/libc.so (pthread_kill+52)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #02 pc 00014073 
 &gt; /system/lib/libc.so (raise+10)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #03 pc 00010ba1 
 &gt; /system/lib/libc.so (__libc_android_abort+36)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #04 pc 0000f470 
 &gt; /system/lib/libc.so (abort+4)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #05 pc 00000c53 
 &gt; /system/xbin/crasher
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #06 pc 0000f351 
 &gt; /system/lib/libc.so (__libc_init+44)
 &gt; 06-12 19:46:40.964 12203 12203 I DEBUG   :     #07 pc 00000900 
 &gt; /system/xbin/crasher
 &gt; ~/local-disk/aosp/system/core/debuggerd$ adb shell ls
 &gt; /data/tombstones
 &gt; tombstone_00
 &gt; ~/local-disk/aosp/system/core/debuggerd$

I just had this working before lunch, but it's not working for me any more either...  I assume I must have accidentally reverted my change or something because I swear I had it printing!
|Uploaded patch set 11.
|Patch Set 11:

&gt; ps11 not expected to fix the &quot;Tombstone in: &quot; bug, right?

No, my build is currently broken so I haven't been able to actually _do_ anything...  Dan tried to help me but he says it looks like a problem upstream, so I guess I'm blocked by something in chromium.
|Patch Set 11:

&gt; or if it's a v8 thing. or i saw a third chromium one this week too,
 &gt; which also didn't go away until i removed out/...

Yep, that appeared to fix it! Thank you.
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Patch Set 14:

&gt; (read to the end of my previous review comment.)

Oh whoops I got confused by that.  I thought it was informational and not a directive.  Fixing now.
|Uploaded patch set 15.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 3: Commit message was updated
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)

log is set to null when LOG_ERROR is called, which is why I added that special case.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; I don't think you can use TARGET_CPU_ABI. That variable will always
 &gt; be the name of the &quot;primary&quot; ABI of the given device. It doesn't
 &gt; get changed back and forth (remember that the file is parsed only
 &gt; once).
 &gt; 
 &gt; You could however do something godawful like
 &gt; 
 &gt; TARGET_CFLAGS_64 += -DTARGET_ARCH=$(TARGET_CPU_ABI)
 &gt; TARGET_CFLAGS_32 += -DTARGET_ARCH=$(TARGET_2ND_CPU_ABI)
 &gt; 
 &gt; This will assume that TARGET_CPU_ABI is always 64 bit, but this
 &gt; wouldn't be the only place that assumes that.

So, does that mean adding those -D defs in each .mk that defines TARGET_CPU_ABI (aka at least one for each value of the variable), or is there a sort of top-level one I could use?
|Patch Set 2:

(3 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

&gt; this patch doesn't use ABI_STRING anywhere.

I forgot to add [WIP] to the title
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Thanks for the changes.
 &gt; Would you mind also updating the commit message?

Any commit message guide? 
I wrote commit message by my TAM guide. 
If have a guide, let me know. 
THX. :)
|Patch Set 3: Commit message was updated
|Patch Set 3:

Thanks for your kindness. 
commit message updated.
|Patch Set 3:

By the way, (not question about this commit)
My other commit sometimes fail on auto-verifier.
Is there anyway to re-verify?
If you've some ways, please let me know.. :)
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned

duplicated with https://android-review.googlesource.com/#/c/95745/
|Uploaded patch set 2.
|Patch Set 2:

&gt; (2 comments)

Changed the code that use spaces intead of tabs. 
Also changed commit message that &quot;start&quot; -&gt; &quot;try to start&quot;.

Please review. :)
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1:

Requested LG TAM to cherry-pick this commit. 
Please review and let me know if needed.
|The functions in mirror::Array include DCHECK statements that depend on specific type checking. I did not want to include this in that location without those statements, so I felt that it was safer to put it where it is primarily used.
|Expanded benchmarking information will be posted in buganizer.
|The limitation no longer applies.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

Files were uploaded that were not intended to be public changes.
|Uploaded patch set 1.
|Abandoned

Files were uploaded that were not intended to be public changes.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)

Explaining the location of the function.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

(1 comment)
|Patch Set 6:

(1 comment)
|Or two separate clicks (they don't need to be within any particular time span).
|Not currently; I'll add this.
|I'm trying to make sure that whenever two string resources have the same key, they have the same value for the translatable attribute, so that when a resource item is deleted, we don't need to check whether it is marked translatable=false.
|This would be useful, but probably another CL?
|Done
|Done
|Done
|setXmlAttribute makes all of its changes in a write command action.
|This is pretty cool!
|Done
|Done
|Done
|No longer a TODO because we're not editing values directly in the table.
|Done
|Done
|OK
|Done
|Done
|Done
|Done
|That's how it is for me, too; I think it's because the design view doesn't know how to display a JBSplitter.  I had to create the panel in another form and copy it over.
|Done
|Done
|I moved this out of StringResourceTableUtil because the number of arguments kept growing.
|Done
|Done
|Done
|Done
|The text is still being trimmed; I just moved the trimming into getValue (line 67) so the cell detail panel also does not show extra space around the text.
|Done
|Done
|1. TerminalSessionVirtualFileImpl does have its own file type, but it extends FakeFileType, and switching to that saves me from having to implement a few methods =)

2. Maybe this is a naive question, but why is it better to hold a reference to the AndroidFacet rather than to the LocalResourceRepository?  It seems like the former contains the latter and also keeps around a lot of other information we don't need.

The reason I can't store just the StringResourceData is that the editor uses the modification count of the repository to determine when to recompute the data (which - for resource-intensive projects like DashClock - is slow enough that I can notice when a refresh occurs, so I don't want to do this unnecessarily).

3. That would be misleading, though?  This is just a file that keeps around the local repository and furnishes it on request; it doesn't know that it will be used by strings editor to show translations.
|Done
|Done
|To be honest, I've never used a WeakHashMap before. From the documentation, I think this will prevent the repositories from being kept around unnecessarily, but let me know if there's something else I need to do here.
|I didn't follow the above exactly, but it gave me some ideas for cleaning up the code: I had LocalResourceRepositoryAsVirtualFile extend LightVirtualFile instead of VirtualFile (which was considerably simpler!) and stored the file in the LocalResourceRepository itself.
|Done
|Taking out the invokeLater gives me this error:

[   8873]  ERROR - plication.impl.ApplicationImpl - Access is allowed from event dispatch thread only.
Details: Current thread: Thread[ApplicationImpl pooled thread 4,4,main] 1929566243

(rest of error message not copied)
|I think I just copied this try-catch from AllocationsEditor.  I'll take it out.
|Done
|Done
|After playing around with this, I think your suggestion is a little simpler than using the enum, so I switched over to the three separate methods =)
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|The tree set is so that the locales will be sorted alphabetically in the table. Comparing by the locale label was just an oversight on my part (I didn't notice that Locale already has comparators defined).
|Done
|Done
|Done
|We don't know the number of locales yet, so I don't think I can use newHashMapWithExpectedSize here.
|Done
|Done
|Didn't know about this.  It's definitely simpler.
|Done
|Done
|Done
|Done
|Done
|Done
|Maybe we can avoid this issue by, instead of taking the if statement out altogether, replacing it with something like

if (!text.equals(myTag.getValue().getText())

The problem I was running into was that the case when myTag has subtags does not capture all of the cases when the raw XML value is different from the plain old value.
|If the raw XML value was, say,
  two\nlines
then getRawXmlValue() would return
  two
  lines
(turning \n into a newline character)
but if it was
  &lt;b&gt;two&lt;/b&gt;\nlines
then getRawXmlValue() would return
  &lt;b&gt;two&lt;/b&gt;\nlines
(preserving the \n).
|As it turns out, the result of getRawXmlValue() when there was HTML mark-up in the string was exactly what I want to display, so I always need to have access to this value.
|Renamed because Task.Modal has a protected field called myProject.
|When playing around with resizing the table, I realized that resizeToViewportWidth prevented me from having multiple translation columns expanded simultaneously, which I think is more annoying than needing extra clicks to collapse columns.  We could later add menu options to expand all/collapse all translation columns if that seems like it would be useful.

expandToViewportWidth makes the table wider if it doesn't fill its parent and doesn't care if the table is already too wide.
|Done
|Done
|Done
|The allocation tracker file editor also starts a task to parse the allocation data (AllocationsEditor.parseAllocationsFileInBackground), and I found that an error is thrown if the queue call is not on the UI thread.
|Done
|Done
|Done
|Done
|IntelliJ says that all three modifiers are redundant for interfaces.
|Added a comment.
|Done
|The reason I did this is that when I was working on allocation tracker, the UI editor became increasingly cluttered with the code for setting up the various components, and it became easier to use a separate utility class for each major component.
|Done
|Done
|Done
|Done
|If you don't remove the focus border, it appears when you deselect a cell with ctrl+click. I didn't notice until I started selecting/deselecting multiple rows.

On second thought, keeping the focus border may be a good thing, since it's a visual indicator that focus is in the table. I'm just going to delete the cell renderer stuff.
|Done
|The unused fields are a label for the filter text box and some containers.  I think I need them for the layout.
|Done
|Done
|Since I reset everything else, I think it makes sense to also reset the filter field.  The reason I fire the filter listener here is because it's also used to show/hide the individual rows under the group headers.
|Deleting this because it messes with clicking/selecting in the stack trace pane.
|Could make private but not static.
|Done
|Done
|Tried using UIUtil instead.
|Changed. I think I started doing this because I was getting NPEs from initializing some things too early, but the code has changed a lot since then and it doesn't make sense anymore.
|Done
|Done
|Done
|Done
|Should I file a bug about this?
|TableViewSpeedSearch expects a TableView, which is a subclass of JBTable, but my JBTable isn't a TableView.
|Done
|Got it.
|It does.
|Was necessary when I was setting the default widths only if the table was large enough.
|Done
|Done
|Done
|The purpose of these fields was to make sure column information wasn't saved until a particular resize/reorder was finished. I went back and looked at the original AllocationPanel, which doesn't bother to do this check, so I took it out.

How important is is that we use BaseTableView? It doesn't have an option to save the column ordering separately from the column widths - not a big deal, but it is a little inefficient.
|Yes, that's the difference.
|Ah, I see.
|Something like
if (column.sampleData == 0) {...}
?  I'm a bit confused why that would be better?
|Done
|Done
|I think this is the only line in common.
|Done
|When I tried to take this out of the invokeLater(...) block, I got an error about this needing to happen on the AWT dispatch thread.
|Done
|Indeed.
|Done
|Done
|Done
|Done
|Done
|This code prevented the user from selecting within the stack trace pane.
|Probably not worth using builder pattern just to be able to chain these calls?
|Not using ColoredTableCellRenderer because it caused some unexpected behavior such as ignoring the column class when aligning text.
|Done
|Done
|Done
|Done
|Done
|Done
|One thing I forgot to ask - this method checks for matches separately on the class and method names. This struck me as slightly confusing (e.g., the line &quot;java.lang.Integer.valueOf&quot; in a stack trace is matched by &quot;Integer&quot; and by &quot;valueOf&quot; but not by &quot;Integer.valueOf&quot;) but I didn't want to change it without knowing if there's a reason for doing the filtering this way.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I only need the getString(ByteBuffer, int) method, which is already public.  Do you think it would be better to access it through an existing public subclass of ChunkHandler, e.g. HandleViewDebug.getString(...), or create my own subclass?  The latter seems like overkill, but if I used HandleViewDebug and its visibility was later changed, that would break my code.
|Done
|Done
|Done
|Done
|Deleted because resources folder no longer necessary.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6: Verified+1

(1 comment)
|Uploaded patch set 7.
|Patch Set 7: Verified+1

(1) Fixed bug where I was using the clipped value instead of the full value to check whether an edit had been made.
(2) Made edit panel immediately reflect changes made directly in strings.xml.
|Patch Set 7:

(3 comments)
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 9: Verified+1

Reorganized the code, still need to fix the issues noted in the commit message.
|Patch Set 9:

(6 comments)
|Uploaded patch set 10.
|Patch Set 10: Verified+1
|Patch Set 10:

(2 comments)
|Uploaded patch set 11.
|Patch Set 11: Code-Review+2 Verified+1

Already approved.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(4 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2 Verified+1

Already approved.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Verified+1

Just a rebase.
|Uploaded patch set 3.
|Patch Set 2:

(4 comments)
|Patch Set 3: Verified+1

(1 comment)
|Patch Set 3:

(3 comments)
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Patch Set 5: Code-Review+1 Verified+1
|Uploaded patch set 6: Patch Set 5 was rebased.
|Patch Set 6: Code-Review+1 Verified+1

Just a rebase.
|Patch Set 6:

(2 comments)
|Uploaded patch set 7.
|Patch Set 7: Code-Review+2 Verified+1

Previous patch already approved.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4: Patch Set 3 was rebased.
|Patch Set 4: Code-Review+2 Verified+1

Just a rebase.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Patch Set 5: Code-Review+2 Verified+1
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4.
|Patch Set 4: Code-Review+2 Verified+1

Previous patch already approved.
|Patch Set 3:

(2 comments)
|Uploaded patch set 5.
|Patch Set 5: Code-Review+2 Verified+1

Just a rebase.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Patch Set 6: Code-Review+2 Verified+1

Just a rebase.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Patch Set 7: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

This is still very preliminary work, but I thought you might be interested to see how I think we could create editors not tied to individual files.

This is patterned on the approach used by the IntelliJ resource bundle editor.
|Uploaded patch set 2.
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 6.
|Patch Set 6: Verified+1

(1 comment)
|Uploaded patch set 7.
|Patch Set 6:

(3 comments)
|Patch Set 7: Verified+1
|Patch Set 7:

(1 comment)
|Uploaded patch set 8.
|Patch Set 8: Verified+1
|Uploaded patch set 9: Patch Set 8 was rebased.
|Patch Set 9: Verified+1

Just a rebase.
|Uploaded patch set 10.
|Patch Set 10: Code-Review+2 Verified+1
|Uploaded patch set 2.
|Patch Set 2:

(14 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1

(2 comments)
|Uploaded patch set 4.
|Patch Set 4: Verified+1

Fixed a divide by zero error in StringResourceTableUtil.
|Uploaded patch set 5.
|Patch Set 5: Verified+1

Took out a magic number.
|Uploaded patch set 6.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Patch Set 7: Verified+1

(1 comment)

Makes table display strings exactly as they appear in the XML files.
|Uploaded patch set 8.
|Patch Set 8: Verified+1

Replaced int constants for width of header cells with enum.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Patch Set 9: Verified+1

Just a rebase.
|Patch Set 9:

(3 comments)
|Uploaded patch set 10.
|Patch Set 10: Verified+1
|Patch Set 9:

(1 comment)
|Patch Set 10:

(25 comments)
|Uploaded patch set 11.
|Patch Set 11: Verified+1
|Uploaded patch set 12: Patch Set 11 was rebased.
|Patch Set 12: Code-Review+1 Verified+1

Just a rebase.
|Patch Set 11:

(3 comments)
|Uploaded patch set 13.
|Patch Set 13: Code-Review+1 Verified+1

Made the formatting changes Siva pointed out.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Patch Set 14: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Commit message was updated
|Abandoned

Approach problematic due to writing to .alloc file and non-unique thread ids.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 3: Commit message was updated
|Patch Set 4: Commit message was updated
|Abandoned

Approach is problematic because of writing to .alloc file and non-unique thread ids.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 3: Commit message was updated
|Patch Set 3: Verified+1

Accidentally broke the link in the commit message in patch set 2 by adding a period.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 16.
|Patch Set 16: Verified+1
|Patch Set 16:

(11 comments)
|Uploaded patch set 17.
|Patch Set 17: Verified+1
|Uploaded patch set 18.
|Abandoned

No longer using this approach to showing a grouped view.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

I realized I was doing some massive reorganizing while trying to switch out a JBTable for a TreeTable, so I thought it might be a good idea to split the reorganization into a separate CL. Even if I don't end up doing the grouped view, this may be preferable to having everything in AllocationsViewPanel?
|Patch Set 1:

(4 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 2:

(3 comments)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 3:

(4 comments)
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

(3 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 3:

(7 comments)
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Patch Set 5:

(6 comments)
|Uploaded patch set 6.
|Patch Set 6: Verified+1
|Uploaded patch set 7.
|Patch Set 7: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 10.
|Patch Set 10: Verified+1
|Uploaded patch set 11.
|Patch Set 11:

(7 comments)
|Uploaded patch set 12.
|Patch Set 12: Verified+1
|Patch Set 12:

(9 comments)
|Uploaded patch set 13.
|Patch Set 13: Verified+1
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Abandoned

Three copies of same commit.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2:

(5 comments)
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Patch Set 4:

(6 comments)
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Patch Set 5:

(4 comments)
|Uploaded patch set 6.
|Patch Set 6: Code-Review+2 Verified+1
|Uploaded patch set 3.
|Patch Set 4: Commit message was updated
|Patch Set 5: Commit message was updated
|Abandoned

Squashed into newer commit
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Change has been successfully merged into the git repository.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Has merge conflict
|Uploaded patch set 1.
|Abandoned

I don't know where this came from.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|nit: this method seems to be duplicated across all other fixtures extending AbstractComponentFixture, up to you whether it's worth refactoring out.
|nit: same with this, although this extends AbstractJComponentFixture.
|nitpicky: as discussed offline, I'm not sure why there's a distinction between Groups and GuiTestGroups (they look the same to me). Maybe we'll revisit once we get some experience slicing test suites with annotations.
|nit: add an import, otherwise this fails to compile.
|Maybe &quot;like&quot; ? There's something missing here.
|Sounds good. Please take a look at the new snapshot - I'm not sure whether to fail() or throw the exception there...
|Done
|Done
|Done
|Done
|Done
|Yes. And while I was reading the man page, decided to make it work BSD-style (we do have FreeBSD users).
|Done
|Nice, it does work.
|Are these changes related?
|syncEnded
|The setup instructions https://code.google.com/p/android-test-kit/wiki/EspressoSetupInstructions omit this part, but I can't build without it. espresso-core depends on both hamcrest-integration and hamcrest-core, running into this duplicate LICENSE.txt.
|Not in scope for this CL, but when adding recording for events that can happen on multiple threads, we need to preserve thread names/ids.
|Re-worked the visitor to more closely match the classic GoF.

I don't want to tie the traversal strategy to the model (in Instance). Snapshots are immutable, so in theory they could be traversed concurrently by different visitors.

The traversal algorithm in the topological sort is a bit more involved/expensive than the regular one, because it needs to get nodes out in postorder. The simple visitor only guarantees each node to be visited once, but not in any particular ordering.
|Done
|Done
|Done
|How about changing it to androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r3' ? :)

Anyway, I'm fine waiting. This CL is linked from the bug, if people want to see a working example.
|I would add the comment on the method, with a reminder that we should revisit the entire workaround in the future.
|Done
|We can't use Java 7 yet, so I reverted to simply calling hashCode on mClassName.
|Done
|Do you mean plugin.extension.buildToolsRevision?
|I got two tests doing more or less the above. 
-  when doing two builds in a row, I see a couple of tasks invalidated because 'Task has not declared any outputs' (:preBuild,:prepareDebugDependencies, etc)
- our tasks are being invalidated by the buildToolsVersion property change and there's a nice message in the output.

There's something not hermetic about the setup though, because the tests pass only when run separately - I still have some work to do.
|Yes, it looks much nicer this way.
|Done
|Done
|Done
|Done
|Done
|Done
|Do we still need this here?
|The local id is the topological sort rank - previously there was a map keeping them, but it was both wasteful (if using HashMap) and inefficient. There are many lookups done below, in the inner loop, between the ranks of fingerA and fingerB, so I decided to push this rank into the nodes as mLocalId. It might be useful for other use cases, because having a numbering of the nodes in [1..N] allows for arrays instead of maps - and I did that with the dominator map.

I can push the dominators into the model, sure. But I don't see how I can not use the topological ranks?
|Done
|Done
|Done
|This is how 'null' field values are represented. The id is 0, the lookup returns null, but it's not an error.
|Done
|Done
|Done
|Done
|Done
|I found EXT_HPROF already defined in there.
|How about this?
|Done
|Done
|Done
|Done
|Done
|Changed to work on an HprofBuffer, which is now a proper interface.
|Done
|Done
|Done
|Yes, the reason is we need a seekable byte buffer, to be able to jump at random offsets on demand. I can look into refining this class to an intersection type between DataInput and... java.nio.Buffer?
|is this needed? It looks like clientReady() calls this before deciding to send an HPIF, and this CL removes that call.
|Done.
|Done
|Done
|Done
|These values are temporary as long as we don't have a proper way to determine class sizes. I expect we'll change our minds a couple of times about the proper formula/method, so I want to see the test break.

As the code matures, I agree it's better to move to less brittle assertions. There's a little bit of manual investigation required to come up with those, note I left a TODO to even double-check that 29,598 is the correct number of nodes :) I punted on these until we have a semi-decent way of inspecting the heap dump, so that I can compare with MAT or YourKit, instead of evaluating expressions in the debugger...
|nit: sort imports?
|Q: are we encouraging star imports? In google3 they are disallowed, so I'm just asking.
|Would these be better served by an Enum?
|An Enum would safely match the names with the correct values.
|A Builder for AllocationsViewModel would make chaining easier, allowing code like &quot;Builder.setRowSorter(...).setClickListener(...).build()&quot;. Is there a case in which these 4-5 methods aren't called in a sequence?
|Do we care about maximum line length?
|No, I changed SENTINEL_ROOT to be an Instance.
|None.
|Rephrased. It's not relevant for the purpose of this test, it was just an instance I singled out in the heap.

And yes, I think WeakReferences will need special casing / filtering for (i) paths to GC roots and (ii) retained size. For example, we may want to compute the retained size of a cache-like object by excluding its weak ref'ed contents. Let's see what features we need first.
|Expanded on the javadoc and made the entry point static. Yes, Dominators will probably evolve into a factory.

I'll integrate Heap and Dominators in a follow-up CL. I wasn't planning on exposing dominators from Heap, but use them under the covers to compute retained sizes and have Instance offer a getRetainedSize().
|Done
|Done. The paper uses 'doms', but I don't think we're losing readability with mDominatorMap.
|Renamed after Siva's suggestion.
|Done
|Done
|Done
|Wikipedia (http://en.wikipedia.org/wiki/Topological_sorting) says topsort is a valid abbreviation :)
|It's supposed to converge, modulo bugs :) 

I left a TODO there, because I first want to see it working on real graphs. If it turns out we're not converging quickly enough, we may go with the more efficient algorithm. If we're entering an infinite loop, it's definitely a correctness bug.
|Like this?
|The 'add' method returns false if the item is already present in the set, so this is a concise way of making the visitor skip already-seen instances. The unit tests with cycles are supposedly covering this.
|Noted, but let's not optimize yet -- I want to see how fast this is on regular heap dumps, and depending on that go for Lengauer-Tarjan directly.
|Yes, it was meant as a HeapBuilder.
|Done
|Removed, but the last two unit tests do use SyntheticHeap/HeapBuilder.
|Done
|I don't think so. The JVM doesn't mark static fields as roots, it marks classes loaded by the system classloader as roots, and obviously anything they hold through static fields is forever reachable.
|nit: final? Same below.
|Why not simply initialize the type map in a static {...} block?
|nit: final?
|This isn't reading a system property (like System.getProperty(...)), it will always evaluate to false so the allocation tracker will never be visible/enabled.
|OK, this was confusing because ALLOC_TRACK looks like an environment variable, so I was setting its value to 1 and wondered how it could ever parse to true.
|The @Before support will be fixed soon, please leave a TODO or comment as a reminder.
|Done
|It won't call deleteOnExit (I manually verified), and it's probably a good idea to pass false and make sure upstream changes won't break us, I agree.

But aside from that, where do you want to write these files?
|How about PathManager.getTempPath(), which is ~/.AndroidStudio1.X/system/tmp ? There's also getSystemPath(), if you really want the top-level folder. 

One thing I haven't verified yet is whether these files will be copied to .AndroidStudio1.N+1 when you update (my preference would be to not copy them over), but I suspect tmp is not...
|I'll leave it in for now, in a separate method.
|Not needed anymore, AndroidStudioSpecificInitializer implies we're in the right place :)
|Done
|Well, reused the platform prefix stuff.
|nit: isn't toString() enough? It feels like this code should already be in a library somewhere...
|OK, I'll then send these at startup and only delete the files if we successfully send the pings (I was worried startup is so early the user maybe didn't even get the chance to ack &amp; agree to the Analytics popup).
|Do you know of a better way to check if this property is set?
|I just wanted a non-empty string, don't really care about the contents (1, enabled, true, etc).
|from within? from?
|Rephrased. Yes, the Java Cryptography Extensions are there and we need to keep them working.
|are we sure we want to essentially double the max heap size for 32-bit JVMs? I ask because I'm not sure how this will affect users on a 32-bit arch (on 32-bit Windows, the maximum you can get is ~1.6Gb because of the contiguous address space requirement of the JVM; the Gradle daemon has similar requirements, and I'm not sure it will fit; plus, we might force more swapping).
|750m sgtm.
|question: this check looks redundant to me, is it there to short-circuit the evaluation?
|I meant we need to control whether the first-run wizard runs or not, possibly at a per-test level. I'm just punting on this for now, because it deserves some more thought/design.
|How about now? I moved this into studio_properties.gant.
|The problem is the &quot;values-nn&quot; also changed, there's now a &quot;values-bn-rBD&quot; in there such that &quot;values-en-rGB&quot; doesn't appear anymore.
|Done
|nit: is this NotNull?
|nit: inline activityName?
|These need to be optional (as we won't have them available on all platforms).
|I think BUILD_XAWT_XWAYLAND would make it easier to test and perhaps upstream. I'm still getting build errors on Linux, do you have any instructions on what packages to install to satisfy the Wayland dependencies?
|nit: envvars (such as &quot;display&quot; above) are usually tested for null and empty string as well.
|nit: #ifdef DEBUG, or perhaps if some _AWT_XWAYLAND_DEBUG envvar is set? I'm assuming you may want to see debugging info even if it's a release build.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 5:

Can you double-check this?

 mSnapshot = new SnapshotBuilder(3)
     .addReferences(1, 3, 2)
     .addReferences(2, 3)
     .addRoot(1)
     .getSnapshot();

I get [1, 3, 2], which is not correct.
|Patch Set 5: Code-Review+2

For more context: http://en.wikipedia.org/wiki/Topological_sorting#Algorithms (the one based on depth-first search).

The purpose of mSeen vs. mVisited was to distinguish the fact that a node has just been added to the stack for later consideration (which has no correspondent in the recursive traversal) vs. is part of the current expansion.

This being said, I'm OK either way.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+1

I'm very curious how much load this will place on the logging infrastructure :)
|Patch Set 2: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

Just fyi, I'm going to try this out with a profiler on all platforms, before submitting, just to make sure the event dispatching matches our understanding.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

Minor cleanup.

Verified on Win, Mac (Apple JDK6, JDK8), Linux.
|Patch Set 2: Code-Review+2
|Patch Set 4: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

What do you think?
|Patch Set 1: Verified+1

OK, the Gant setup attempts to use tools/idea/lib/jna.jar. My Ubuntu box has the libjna-java package installed though, so I have an incompatible version of the native library in /usr/lib/jni/libjnidispatch.so.
|Patch Set 1:

&gt; Change has been successfully merged into the git repository by Tor
 &gt; Norbye

Woot, thanks for fixing https://code.google.com/p/android/issues/detail?id=169930
|Uploaded patch set 1.
|Patch Set 1:

Internal studio-1.2-dev builds also fail with the same error, but they fail intermittently and I couldn't find a pattern.

I'm also a bit fuzzy on the clean checkout thing, because we don't have the same problem on Jenkins. On the build server though:
- the location of .jps-build-data doesn't depend on the CL
- it gets created on every build if it's not there
- it's also in .gitignore, so I assume it doesn't get wiped out on every build?
I thought this CL is a very cheap thing to try, and we can roll it back tomorrow.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified-1

Well, it would be a feature if it was consistent. I see the balloon on top of the first run wizard on Linux, but not on Mac where it is dismissed silently.

Let me find a better fix.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

&gt; (btw do a cherry pick on Windows and make sure this actually fixes
 &gt; the issue).

It works for me. The only thing I'm not sure about is: I did chmod 744, but now the executable bit is set for everyone (755).
|Patch Set 1: Code-Review+2
|Patch Set 5:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(5 comments)
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)

Do you know why the link doesn't work from the Event Log window?
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1

I verified the end-to-end scenario, we now have logs!
|Patch Set 1: Code-Review+2

(1 comment)

Thanks for doing this so fast!
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(1 comment)
|Abandoned

Not relevant now that Espresso has setup instructions for Gradle: https://code.google.com/p/android-test-kit/wiki/EspressoSetupInstructions
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Added copyright NOTICEs.
|Patch Set 2: Code-Review+2 Verified+1

Re-applying previous approval.
|Patch Set 4:

(1 comment)
|Patch Set 2:

Just two clarifying questions:
- are execution records assumed to be properly nested, or can there be partially-overlapping intervals?
- the recorded time is wall-clock time, we could also get per-thread CPU/user time, allocation counts, etc (ThreadMXBean and friends). I suppose these can all go in ExecutionRecord later, right?
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1

The latest patch just adds @CompileStatic; reapplying previous approval.
|Patch Set 1: Code-Review+1

Do we need an Android.mk and MODULE_LICENSE_APL ?
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5: Verified+1

PTAL.

There was a bug in the previous implementation, which I now fixed - see the test for the doubly-linked list.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)

Also changed the test to use Espresso properly.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 3:

(1 comment)
|Abandoned

Switching to studio-1.2-dev now that Espresso is part of the Android Support Repository.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 5: Code-Review+2

Awesome!
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

&gt; Why is this done at all in there? Shouldn't this be read from the
 &gt; model?

I'll let Alex chime in. There are 3 places with the same logic, adding AndroidCommonUtils.ANNOTATIONS_JAR_RELATIVE_PATH if getApiLevel() &lt;= 15.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; FYI I see a similar code pattern in tools/adt/idea/android/src/com/android/tools/idea/templates/Template.java

Do you mean the empty MyTemplateLoader#closeTemplateSource? What is the expected lifespan of those jars?
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 4: Code-Review+2 Verified+1
|Patch Set 4: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

Removed TODO now that https://android-review.googlesource.com/114360 is already in. Reapplying previous approval.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2:

I think we need to resurrect this and apply -Djna.boot.library.path and -Djna.nosys more broadly, to include the Updater as well.
|Patch Set 2:

&gt; Do we need the jna.boot.library.path if we have jna.nosys?
That's my reading of https://github.com/twall/jna/blob/master/src/com/sun/jna/Native.java#L667 . Only around line 745 it finally gets to look at the classpath.
|Patch Set 4: Code-Review+2

Are the changes in .idea/inspectionProfiles related to this change?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7: Verified+1

Friendly ping.
|Uploaded patch set 8.
|Patch Set 7:

(1 comment)
|Patch Set 8: Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1
|Patch Set 3:

Friendly ping?
|Patch Set 1:

Btw, I learned two things about the Gradle executor setup via this &quot;stress test&quot;:
- it stats the same file multiple times; there are 25,392 files under base/build-system/tests, yet the stat count was 90k after 2 minutes, and growing.
- it builds the classpath in O(N^2), adding each element after checking it's not present in the collection so far - this explains why the CPU was at 100%.
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Verified+1

Made sure the device test produces a correct coverage report. Questions:
- do we need to pre-dex if proguard is enabled? I assumed we don't based on the current implementation;
- an extra proguard spec is needed to not strip out Jacoco's runtime; should we provide it as a default, or leave it to the user?
|Uploaded patch set 4.
|Patch Set 4: Verified+1

Ran the entire test suite (buildTest and deviceTest), found LibraryVariantFactory needed to be updated as well.

Does coverage work for libraries? I found https://code.google.com/p/android/issues/detail?id=76373, I can try to make coverage work on proguardLib...
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2 Verified+1

Reapplying previous approval.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)

The output receiver fix didn't seem too involved, let's try it in the same CL.
|Patch Set 2: Verified+1

Ran device tests successfully.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+1 Verified+1

(1 comment)

Wow, thanks for the details! I missed the fact that ApiDetector was also looking at the bytecode, in which case looking at type literals is overkill.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)

PTAL. Also shaved another ~300ms by removing the need for mRoots.
|Patch Set 4: Commit message was updated
|Patch Set 4: Code-Review+2 Verified+1

Applying previous approvals.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2 Verified+1

Reapplying previous approval.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2 Verified+1

Reapplying previous approval.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

It turns out -Dsources does this in the same mvn invocation, so I updated the PREBUILT.

 &gt; It looks like IntelliJ has the _src.jar as well, so maybe add them
 &gt; over here too? (The maven command can also install source
 &gt; artifacts, but in this case, just copying it into this folder
 &gt; should be sufficient).
|Patch Set 2: Code-Review+2

Reapplying previous approval.
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2:

Siva, Raphael: can you try out the test on Windows? It simulates what would happen if the user opened up two hprof files and no GC happened in between. On Linux, with a 32-bit VM, the test fails unless unmap() is called in between.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Verified+1

I tried this on a Windows 7 machine over the weekend, and we can delete the files after unmapping them, without shutting down the JVM.

I'm not convinced we need a test for running out of address space. On Windows 32-bit JVMs, the contiguous address space requirement means the JVM can't use more than ~1400Mb (-Xmx). If the mmap fails because it's too big, we wouldn't have enough heap to construct the in-memory representation of the snapshot anyway. If this is a problem, we can add code to detect this scenario in Android Studio and warn the user to switch to 64-bit.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)

I'll wait for Raphael to try it out. For me, running on Windows was a lot slower, and if this is the case, we can reduce the size of the tmp file.
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2 Verified+1

Reapplying previous approval.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Should we move this under an experimental flag for now?
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)

I did some benchmarks on the 325Mb file, and the overhead of MultiMappedBuffer was &lt;1%. New changes:
- removed the SimpleMappedBuffer implementation, HprofBuffer is now a proper interface.
- switched index/offset computation to bit arithmetic
- cleaned up the tests.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(4 comments)
|Patch Set 5: Code-Review+2 Verified+1

Reapplying previous approval.
|Patch Set 2: Code-Review+2

(1 comment)

setHeapUpdateEnabled looks unused after removing the only reference in isHeapUpdateEnabled's javadoc. What are the real entry points into this code?
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated
|Patch Set 2: Verified+1
|Patch Set 2:

(5 comments)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1

Rebased &amp; applying previous approvals.
|Patch Set 4: Commit message was updated
|Patch Set 4: Code-Review+2 Verified+1
|Patch Set 17:

(6 comments)

I took this out for a spin, but I'm confused: sorting by allocation order for example doesn't yield a global ordering, but sorts within the groups? 

If yes, then I also managed to get a group intermixed with another group though, after clicking around for some time.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Ready for review.
|Uploaded patch set 2.
|Patch Set 1:

(6 comments)
|Uploaded patch set 3.
|Patch Set 1:

(9 comments)
|Patch Set 4: Commit message was updated
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2 Verified+1

Already approved, updated commit message.
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Code-Review+2 Verified+1
|Patch Set 3:

(2 comments)
|Patch Set 5: Code-Review+2

(2 comments)
|Patch Set 13:

(1 comment)
|Patch Set 13:

(1 comment)
|Patch Set 5:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Topic set to crashreporter
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(4 comments)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)
|Patch Set 7: Verified+1
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Topic set to crashreporter
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Verified+1

OK, it turns out I wasn't using Ant properties correctly. Fixed and verified.
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 1: Cherry Picked from branch idea14-1.4-dev.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Verified on Win, Mac and Linux.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2: Cherry Picked

This patchset was cherry picked to branch idea14-1.3-dev as commit e7851500989c91c19e1b6ba6037d78ba8da31762
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

You'll see no difference when running tests from the IDE or from the command-line (Ant), because those test runners already set the classpath to community-main.

This CL enables the UI tests + Studio bundle to work, because in that scenario studio.sh starts with a very small (bootstrap) classpath, but by the time we load the actual tests, BootstrapClassLoaderUtil loads everything for community-main.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

Btw, I don't have strong opinions on the workflow, for now I imagine it like this:
1. we build a special bundle by passing the extra property flag, so we have the UI tests and the extra FEST libs under plugins/android.
2. we unpack it and run the default launchers (all platforms). This runs the UI suite and nothing more.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1

Rebased, carrying forward +2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

Please review again.

It turns out the previous version was too restrictive and it disabled profiling for subsequent invocations. We need ProcessRecorder to be a little bit reentrant: for *MultiProjectsAndroidTest, we were only uploading 1 file when we should have uploaded 3, including the benchmarks (by comparison, current behavior uploads 30 files).
|Uploaded patch set 1.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3: Code-Review+2 Verified+1

Rebased and carrying forward +2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

I tried this from the command-line and the IDE and it worked for me; please try this before +2.

I think the main question left is whether this is enough for setting up the classloader on top of Studio's binary image. I'm going to give that a try before further work on this.
|Uploaded patch set 2.
|Abandoned

Moving to 1.4
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Fixed the test to not deadlock itself and restore the original robot. (BasicRobot acquires the screenlock before each test and releases it after, _if_ it's not null.)
|Patch Set 1: Code-Review-1 -Verified

This was a good exercise, but I think the proper fix is something along the lines of https://android-review.googlesource.com/#/c/153996/

I'm not sure why having Before.class in a separate classloader is necessary; if it's not, then we don't have to sort the @Befores ourselves in the test runner.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Moving to 1.4
|Patch Set 1:

(1 comment)
|Patch Set 3:

(3 comments)

The change lgtm, but please hide everything behind BUILD_XAWT_XWAYLAND, so we don't have to install Wayland to be able to build on Linux. I'm willing to give Wayland a try, but I don't know what exactly to install, I'd like to have some instructions somewhere on how to set up the build environment.

Also, have you considered adding a test? I don't see TestApplication in this CL.
|Patch Set 6: Code-Review+2
|Patch Set 7: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch jb-mr2-dev as commit bf15df58ed6c4751e334a37a98b3125bdc2517dc
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review-1

Sorry, can you amend your original CL, not submit a new one (you can use --amend in git to do this). Or if you can't get it to work, delete these two and create a new CL with just the needed change?
|Patch Set 1: Code-Review-1

Can you remove src/com/android/settings/DeviceAdminAdd.java~, and resubmit please
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Added Alex's names, can this be uploaded please once Adrian has reviewed? Alex is OOO and won't be able to review
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Danielle, can you let me know what the change is? I'm not seeing any new comments
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review-1

I'll update this today, Clay can you abandon this change, and I'll make a new commit (directly to AOSP to avoid merge nightmares)
|Please remove the table tags throughout. There is not a table here. Thanks!
|Please remove white space throughout. (The extra white space is highlighted in bright red.)
|This line has 3 links and is rendering funny. We will fix in a subsequent CL. See b/16036675 for more details.
|Where is this staged? Will these TOC links send them back to the main unlocalized content?
|That's the way it was in the doc. I'll add him in. Thanks!
|TV App is a generally used as a proper noun, so I am just shortening Application to App here.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I'll just remove the word mandatory for the time being.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|of
|Based on other bulletins, it is supposed to say &quot;Builds X or later&quot;
|Done
|Done
|Done
|Done
|These are the consumer help centers, so this is fine. :)
|Nope. The line was super long, so I manually wrapped it. The closing paren for that statement is in line 171.
|This is a closing tag instead of an opening tag.
|Don't need the quotation marks inside of the parentheses here.
|Super minor, but punctuation goes outside of style tags.
|Done
|Thanks for the feedback. Is this the appropriate open source music app to link to: https://github.com/googlesamples/android-UniversalMusicPlayer?
|Done
|Oh no! Clap me in irons! ;)
|Done
|Done
|Discover third-party TV input

Rationale: They know that it is a test, so we don't need the word test in there.
|Which Intent?
|Verify that the bundled TV app launches via Intent and calls the proper API to discover third-party TV inputs.
|Select (On a TV you select with a remote instead of press.)
|Delete comma. The clauses are short enough that they can be understood without it and the comma just adds clutter.
|start
|Delete comma
|Select
|\&quot;Dummy\&quot; channel
|Not sure what this means.
|Verify that the overlay appears and displays the text \&quot;Overlay View Dummy Text\&quot; when you tune to the \&quot;Dummy\&quot; channel.
|Verify the TV app provides query results for third-party input\'s channels and programs in global search results.
|Delete comma
|\&quot;Dummy\&quot; channel
|Select
|Why is this one a question? Is this an on screen element where they select yes?
|Verify
|Earlier we referred to the TV app as &quot;bundled&quot;. We should keep the language consistent, whether it is default or bundled.
|parental controls are
|Select
|Delete comma
|Not sure what CTS verifier rating system is
|Select the \&quot;Launch TV app\&quot; button and block the \&quot;Fake\&quot; rating for \&quot;CtsVerifier\&quot; rating system in the parental control settings. If the rating system if it is disabled by default, enable it. If the \&quot;Fake\&quot; rating is already blocked, unblock it, save, and then block again.
|Select
|Delete
|Try to unblock
|Delete
|Delete
|Verify TV
|Remember to use consistent wording here.
|Verify
|Should this be &quot;multi-track audio API&quot;?
|Select the \&quot;Launch TV app\&quot; button. Verify that closed captions are off by default.
    Set closed caption language to English.
|Captions are enabled.

or 

Captions appear.
|Select
|Per your comment, I think it is fine to have test here. I think it's a bit redundant, but if it makes things clearer, that is fine.
|This needs to be either singular or plural:

&quot;program named \&quot;Dummy Program\&quot; and its description&quot;

or

&quot;programs named \&quot;Dummy Program\&quot; and their descriptions&quot;
|A common workaround for priority inversion is to increase audio buffer sizes. However, this method increases latency and merely hides the problem instead of solving it. It is better to understand and prevent priority inversion, as seen below.
|https://youtu.be/d3kfEeMZ65c
|https://youtu.be/92fgcUNCHic

I figured that we could use the shortened Youtube URL structure in all.
|I think it would be better to reproduce a short definition here and point to the article (but I can be swayed if you disagree).  Something like:

&lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_inversion&quot;&gt;Priority inversion&lt;/a&gt;
is a classic failure mode of real-time systems,
where a higher-priority task is blocked for an unbounded time waiting
for a lower-priority task to release a resource such as (shared
state protected by) a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mutual_exclusion&quot;&gt;mutex&lt;/a&gt;. 
See the article &quot;&lt;a href=&quot;avoiding_pi.html&quot;&gt;Avoiding priority inversion&lt;a&gt;&quot; for techniques to mitigate it.
|Should this must be capitalized?
|Patch Set 1:

(2 comments)

Hi Natalie, 
We caught a couple of things in review. Please fix. 
Thanks!
|Patch Set 2:

One more change.
|Patch Set 2: Code-Review+2

(1 comment)

This looks good, Natalie. Approved.
|Uploaded patch set 1.
|Abandoned

Abandon in favor of https://android-review.googlesource.com/#/c/207283/
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 1:

(1 comment)

Mostly LGTM, but I had a question about the TOC.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 1.
|Abandoned

Abandoned for this: https://android-review.googlesource.com/#/c/205527/
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1:

(33 comments)
|Abandoned

Abandoned in favor of: https://android-review.googlesource.com/#/c/205536/1
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

This was forever ago and so I am starting over.
|Patch Set 1: Code-Review+1

(1 comment)

I think the only super minor nit is changing from to of. But that is up for debate.
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Code-Review+1

Looks good. Thank you!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1

Thanks!
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

Everything looks good and the links work correctly in staging. Thank you.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(5 comments)

Thank you!
|Uploaded patch set 6.
|Patch Set 1:

(1 comment)

LGTM.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+1

LGTM
|Patch Set 1: Code-Review+1

Also LGTM.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 1.
|Abandoned

Per Guru, he'd prefer all requests routed through main GMS contact channels.
|Patch Set 2:

(1 comment)

Looks good other than the messed up tag I commented out.
|Patch Set 1:

(2 comments)

Minor nits.
|Patch Set 2: Verified+1

Thanks, Glenn!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(6 comments)

Thanks for the feedback, gentlemen.
|Uploaded patch set 2.
|Patch Set 2:

(35 comments)

Thanks, Dongwon. I have made a few comments.
|Patch Set 3:

(2 comments)

Looks great except for these small things. Sorry for the delayed review.
|Patch Set 4:

LGTM.
|Patch Set 1: Code-Review+1

LGTM
|Patch Set 1:

(4 comments)

Hi Glenn, 

I reviewed these changes and mostly LGTM with comments below.
|Patch Set 2: Code-Review+2

LGTM.
|Patch Set 1:

(1 comment)
|Done
|please add bugs

Bug: http://b.android.com/160703
|i really wish we could have a isOverriden() method on EditedStyleItem

can we add a TODO to do that later
|can we have a test for this method please
|as long as it gets done
|this is a strange notation, can we either use

new Color(0xFFFFFFFF) or  new Color(255,255,255)
|then what's wrong with using new Color(0xFFFFFF) ?
|instead of passing this in the constructor can you not just add a method

  void setBackground(Color background) {
    super.setBackground(background);
    scrollPanel.getViewport().setBackground(background);
    mySearchTextField.setBackground(background);
  }
|why is this method like this?
|Done
|do you have a test for an attribute that the parent DOES have, but the theme does not override?
|why is this called parent?
|why not use

java.util.Objects.equals(Object a, Object b)

com.google.common.base.Objects.equal(Object a, Object b)
|actually you do need to call getName, so ignore that
|i cant really as they are not always created
|Done
|so is it sometimes red on yellow?
|is this needed here?
|Math.pow(i, 2)
|can you remove this import please too
|this should have been clip, i missed that in this review, ive fixed it in my cl: http://r.android.com/150623
|can you please add bugs

Bug: http://b.android.com/158538
|you can say its the same as android.util.DisplayMetrics.DENSITY_MEDIUM
as that is the dpi of most PC monitors, but will this work on the windows laptop, and if yes? how come?
|Done
|those are just layout constraints, it is generated code
|Bug: http://b.android.com/158539
|can you rename the method to isThemeParentRow
|getAnyNameXmlAttributeValue

and add a comment of what its doing
|put a comment why this is OK in this case
|fix comment
|this should not be in the data model of the theme
|if my Theme name starts with the word &quot;rename&quot;, what will happen?
|can you add this info as a comment here
|this is part of the model, it should not be launching UI
|!myIsFrameworkStyle
|should be my in name
|should be &quot;frameworkStyle&quot;
|will never be null, so you can remove this
|will never be null so you can remove this
|will never be null so you can remove this
|Done
|can this be ColorInfo instead of Object now?
|i dont really get why this code needs to be added here, the functionality was all already in the color picker, it was just in a different place, you had to go to the project tab and select new color resource value, so why is this code here being changed?
|better avoid nulls for lists, that way we dont need to do null checks, or get out of bounds exceptions when we accume that a non-null list has at least 1 item


  Collections.emptyList()
|if you know for sure the size, you can pass the size in the constructor
|deepanshu: from configuration, you can get the resource resolver by configuration.getResourseResolver() and then get the style by getStyle(String, boolean)
|can you add a comment of what you are doing here, and you prob dont want to remove the existing comment
|can you add a comment why this is needed here
|can you just remove the code if you dont need it here for any reason
|i think it is still correct, as the sorting is done by the Comparator and i have not changed that
|Done
|Done
|Done
|Done
|can you make this a constant somewhere
|should be static
|should this maybe be called setStyleItemOverride ?
|added @Nullable
|tis only null if the style is null, and if the style is null, the first bit of the if statement will catch that
|Done
|the problem is that we use

  public ResourceResolver createRecorder(List&lt;ResourceValue&gt; lookupChain) {

in this class, and that creates a private cvlass that extends this one already
|pass
|bug is being tracked here:

  Bug: http://b.android.com/164254
|can we add some javadoc that will explain what happens when null is passed to this method
|what exactly is the bug? and what exactly does the fix do?
|default should be simple mode
|this method does nothing if myTooltipHint is null, so why do we want to call it?
|hi, how would you make it to be even better and ignore the alpha when it is FF, so would only include the alpha for colors with a alpha, (e.g. #AAFF00FF) and no alpha colors (e.g #FF00FF)
|i made that change in https://android-review.googlesource.com/#/c/147150/7/android/src/com/android/tools/idea/rendering/ResourceHelper.java
|Done
|Done
|Done
|this will only ever be called once when ever it opens the resource picker, so i dont think the processing overhead is important here, where as so many places use more memory then they should, so i want to minimize the memory useage
|this will only ever be called once when ever it opens the resource picker, so i dont think the processing overhead is important here, where as so many places use more memory then they should, so i want to minimize the memory useage
|shouldnt we output colors as #RRGGBB if the alpha is FF
|i dont think we have this in the designes any more
|this is very dangerous as it does not set the font sometimes, meaning the font is whatever the font was last time this component was used, so unpredictable

we should prob do something like the renderer here too:

  returnedComponent.setFont((item != null &amp;&amp; item.getSourceStyle().equals(((AttributesTableModel) table.getModel()).getSelectedStyle()))
                              ? table.getFont().deriveFont(Font.BOLD) : table.getFont());
|i dont think you need to do this yourself, the framework already does it
|if this class is ONLY used inside the color component, it can be a inner class of it
|why dont you just set the component background?
|myValueLabel.setText(color.isEmpty() ? &quot;&quot; : '#' + ColorUtil.toHex(color.get(0)));
|Bug: http://b.android.com/162649
|why is this needed at all?
|why is this needed at all?
|can you use http://b.android.com/162649
for links to bugs, thanks
|can we avoid wildcard imports
|have you tested this on the windows laptop?
|doesnt toDp just add the string dp to the int?
|why are you not using toDp(1) here?
|Where does 300 come from?

    public static final int DENSITY_LOW = 120;
    public static final int DENSITY_MEDIUM = 160;
    public static final int DENSITY_TV = 213;
    public static final int DENSITY_HIGH = 240;
    public static final int DENSITY_XHIGH = 320;
    public static final int DENSITY_400 = 400;
    public static final int DENSITY_XXHIGH = 480;
    public static final int DENSITY_XXXHIGH = 640;
|seems a bit odd to have MAX_VALUE in the preferred size,

maybe you dont need to keep this as a member variable, and you can just create if when needed and use get width from the call to super.getPreferredSize

i think some layout managers switch to using getMinimumSize when getPreferredSize returns something too big, you may want to check if thats happening here already

also have you tried other options like when ever text is set on the component clearing the PreferredSize, setPreferredSize(null)
|can you write what the bug is and why this is here, otherwise it will just look like not needed code
|the false means nothing there, should prob be:

  boolean hasContentToDisplay = myDisplaySingleRoot ? hasRootItem : myItemStack.size() &gt; 1;
|are you sure we need it as a member var, can we not just create it here, and make the member vars more simple
|can we avoid wildcard imports
|we only want people to use the NoActionBar themes, and we want them to use the AppCompat ones if they are available
|should we show appcompat and design lib components before custom components?
|so you dont forget when you get back, this Canvas is not needed
|returnedComponent.setForeground((item != null &amp;&amp; !item.isPublicAttribute()) ? JBColor.GRAY : table.getForeground());
|i think we need more info in the commit message, someone coming back to this commit after a while will have no idea why this was done, or what its doing
|EditedStyleItem item = (value instanceof  EditedStyleItem) ? (EditedStyleItem) value : null;
|instead of everything setting the background color, why do we not just use a grey foreground color for private attributes, then the foreground color can be set to gray in 1 location
|can we please avoid wildcard imports, and only import the classes we need, thanks
|are you sure you want to be using a treeset here, and needing all that equals and hashcode code, cant you just use a ArrayList and then just sort it with the comparator?
|why is this not just:

   return item1.getQualifiedName().compareTo(item2.getQualifiedName());
|why do we need to know what type of collection this is?
why not just use java.util.Collection
|can we avoid wildcard imports please
|white space
|do we need this check? private attributes can only exist in readOnly themes anyway
|dont we already know the type, do we really need to put the type here again?
|can you remove this please
|why do we still have this button?
|method name seems odd
|why is the parent treated so differently to any other attribute, its just a reference to a Theme or Style
|where is this used?
|do we really need 2 classes for ThemeEditorTable and this one?
|as far as i can see, all the links we can follow are ResourceUrls and the parent can too be expressed as a ResourceUrl
|needs a better name
|1. close the editor if the module has been removed
2. close the editor and delete the useless file that we cant do anything useful with anyway
|why would we ever show this message?
|can you clear the content of the file (without deleting it) and load it with correct content for things to work
|if the file should be removed, shouldn't we just do it?
also &quot;and/or&quot; is not exactly clear
|strange place for semicolon
|still says noText
|this is very confusing for me, as these components CAN display text but dont, as opposed to components that do NOT display any text and dont
|emptyText
|noText to me sounds like no text attribute at all, not a attribute with a empty string
|why is this myLayout? not layout?
|i think we should put bugs as urls for now, as there is no autolinksing if they are not url
|if it is fixing a bug can you add:


  Bug: http://b.android.com/158635


to the commit message
|is any of this needed?
|how can this ever be true? as we add &quot;?&quot; to the name, but check against &quot;@null&quot;
|formatting
|trailing whitespace
|i think this method can now be either made private or, inlined
|2 new lines
|avoid magic numbers, make


  String bodyTag = &quot;&lt;body&gt;&quot;;
  render.indexOf(bodyTag);
  ...code... + bodyTag.length() ...code...
|yes, if its not the value it should not be called value
|you cant create a ResourceUrl from #000, as its not a url
|i think this can be inlined
|why is this change for non-read-only themes, this change should be for all styles, and themes, read-only and otherwise
|will this work for styles as well as themes? as when you go into one of the styles of a theme, it too can override or not its parent value
|is this method used somewhere in this CL?
|you can put this setting of the font into a else of the if
|this seems to only check if they are equal as the parent, but dont we want to know even if they ARE qual, if they are being overridden?
|since the check has become so simple, and the method requires passing in the theme, maybe this does not need to be a method and we can just inline it using getSourceStyle()
|then we should also add a test for the &quot;isOverridden()&quot; method
|all the check knowledge should be in a method somewhere
like the &quot;isOverridden()&quot; method
|i dont know if it ever really should be null here

maybe we should just throw an exception if its null, as the point of this class is to render menu files, so a file is always needed
|can have just 1 if
|so what happens if it is null then? do we come here?
|again, the code should Never get here, so we should throw an exception instead

the first line checks for the folder type, and we cant have a null file but have a folderType
|i dont think this should EVER happen, so we should probably log an error here, and we should prob also add a error to the builder to display to the user


silently swallowing this could lead to some hard debugging
|we should not be calling this method if no psi file is set, maybe throw an exception saying &quot;no psi file set&quot;
same goes for the other methods in this class
|can be inlined
|can be inlined
|do we want to add some debugging info into the error, as i see this triggering sooner or later
|try and avoid using RuntimeException, an IllegalStateException may make more sense here


almost ALL runtime exceptions we have should be either IllegalStateException or IllegalArgumentException
|strange imports
|maybe have a better name
|strange that we dont have a single place already that does this.
|why doesnt this just call myComponent.dispose() and then that can just remove itself as a listener, then you would not need to add all this code into here
|why is this here? this method should never normally be used, as you should normally use revalidate()
|sure, you can do that in a separate cl
|this is not very good as there are several library projects that dont have any layouts, but have themes that can be edited
|what happens if there are no layout files?
|how can it already have this attribute if you just created it?
|wot
|why do we need this member var? why cant we just return mySelectedStyle.getName() here?
|calling setName, and then getName returning another value is confusing, can we not have getName return the name thats set in setName?
|you prob want to clear the current items, or the list will just keep getting bigger
|you could probably do

  myComboBox.setModel(new DefaultComboBoxModel&lt;String&gt;(attrDefinition.getValues()));

then you will not need the loop or the clear
|we can, but i dont mind too much, StyleAttributesFilter is good too, i think its clear
|only read only things use this editor as a renderer, thats sounds like something is wrong

what do the non-read only ones use?
|why is this code here?
-firstly its always gray
-secondly the editor is never open for something that is read only, so we will never actually come here
|this can be done in the constructor, does not need to be done every time
|can this method also use the StateListIterable but only get the first item from the list?
|can you add a comment here what the String and Boolean is inside this queue, maybe with an example, maybe change the name to be more descriptive too
|why do we need this here? why cant we just use getHeight() from the component
|again, why is this check being done here? wont the resolver resolve this?
|can you get rid of this trailing whitespace from the file please
|why are we doing this here? shouldn't resolveColor do this?


also this same code is in 2 other places where it does not have these extra bits (ColorEditor, DrawableComponent)
|if we make this method public, we really need to give it a better name
|why is this 1 not under the


  if (column == 1) {


section bellow?
|this section
|still dont get why this check cant be done inside the col == 1 section
|it returns string, if it cant find any other type anyway, so why does it need to return it here?
|here we can check its value != null &amp;&amp; value.startsWith...
|swap the equals round &quot;true&quot;.equals(value)
|if you add some documentation to this method about what is happening in each bit then it will be easier to read
|we should not need to have both resolveColor and resolveMultipleColors doing the same thing, there should be just 1 method that does it.
|can you put the first one to always be the default one, then the first item will always be the same as in resolveColor

(same goes for drawbales)
|why would it give different results?
|we should not need to have both resolveDrawable and resolveMultipleDrawables doing the same thing, there should be just 1 method that does it.
|whats the reson for us not using the

http://docs.oracle.com/javase/7/docs/api/java/awt/event/ComponentAdapter.html#componentResized(java.awt.event.ComponentEvent)

maybe it would not have this issue,

(if there is a reason why we are not using it, can you add that as a comment to this method)
|cant we just have

  Dimension myLastSize = getSize();

before the call to super, then we would not need to keep this as a member variable
|why is there this word &quot;Theme&quot; here?
|do the items outside that not contain headings?
|maybe add some javadoc of what exactly this is and an example of what it would have
|why are these 2 final vars and none of the others are?
|in the rederer we check for instanceof, here we cast straight away, should be consistent
|is this method actually used anywhere?
|is there any reason this is not a anon class?
|yes,


  we used to have: myComponent.setBorder(isSelected ? mySelectedBorder : myUnselectedBorder);


so you can use the keyboard to navigate, does this still work? do we still want it?
|can creating this matt border be moved into the component as both the renderer and the editor do it, just with different colors, also this PADDING constant is defined twice, seems strange
|should the tooltip be passed into the config method, as its needed for both
|but the DelegatingCellRenderer is not used for Colors?
|why is the color height a constant and the others not, should be consistent, either all constants, or none
|why do you pass this into the constructor?
|we create 2 ColorRendererEditor, so we should be consistent with that, also do 2 DrawableRendererEditor, and then it will not need 2 components, we should not have the color and drawable ones work in such different ways
|we dont need 2 instances here, as we already make 2 instances of this class
|this method should not be here

why are you not using ResourceHelper.resolveDrawable
|seems like this could be kept in the component as the border is needed for both, and should prob be created in the component too
|do we really need this class, if we are just using it as a maker class, we can choose an existing class like DrawableDomElement
|comments dont seem relevant, this is not even a theme
|this test is already done on line 38
|maybe use fireTableStructureChanged() instead, as we have spans in our table, and the spans may now be different

(will then need to listen to TableModelEvent.HEADER_ROW event to re-calc the rows
|dont leave any trailing whitespace when you commit
|you didnt update this to TableModelEvent.HEADER_ROW
|are you sure you need to pass this virtual file? its not actually useful for anything
|if this string is in more than once place, it should be a constant with both places referencing it
|would using a anon class here make more sense

myConfiguration.addListener( new ConfigurationListener() {
...
|what does overall panel mean? maybe we need a better name
|PsiFile is not used in the class, please remove
|this line is not needed, please remove
|this line is not needed, please remove
|this class should not implement RenderContext, it adds too many methods here, none of them are really relevant,

i suggest you rename AndroidThemePreviewPanel to AndroidPreviewPanel

then create a new class in the com.android.tools.idea.editors.theme package called AndroidThemePreviewPanel that extends AndroidPreviewPanel and implements that interface, and then this class can create an instance of that.


we can then also move theme editor specific code from AndroidPreviewPanel to AndroidThemePreviewPanel
|why is this a member variable? is it used anywhere?
|in java this is implied, and so not needed
|2 lines
|why is this method not just part of the model?
|we currently handle it by overriding methods in this class, a listener makes more sense to me
|change this interface to ThemePropertyChangeListener

and add the method

  atributeChanged(...)
|createNewThemeWithtAttributeValue
|createNewThemeWithAttributeValue
|remove and inline
|attributeChangedOnReadOnlyTheme
|you cant store the one passed in as it is modified by other methods, e.g. scale, transform...
|the javadoc for setTransform

http://docs.oracle.com/javase/7/docs/api/java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)

says it should never be called with anything other then what was got from getTransform, so maybe we should fix the problem in layoutlib
|we can create the inverse at the same time we create the original, and then we wont need to keep re-creating the inverse
|then why not make them both be able to be null, that way you could get rid of the repeating code in this method, you would just have:


  try {
    super.setClip(intersect(getTransform().createInverse().createTransformedShape(originalClip), sh));
  }
  catch (NoninvertibleTransformException e) {
    LOG.error(e);
  }


(createTransformedShape already returns null if it is passed null)
|this clip also needs to be transformed to the current coordinate space
|maybe you should allow your intersect method to take null as the 2nd arg
|why would it be null right after creating it?
|can we avoid having methods that return null AND throw InitializationException, its not clear whats the difference, is null a valid return type?
|we dont need this file if we have the themeEditor/sample_lauout.xml
|we should remove this from this commit, and put it into another &quot;activate theme editor&quot; CL
|is this no libs at all, or no read only libs
|Tor said we need to use my/our (my for member, our for static) :-(
|throw runtime exceptions
|same here, dont swallow exceptions
|wot?
|do we still need this class?
|can we add java doc as to why this is needed and what it does
|please rename class to ColorEditorRenderer, as its only used for colors
|should be removed
|should be removed
|what would that look like?
|if you think it will be much easier to read, sure
|this is hacky and could lead to strange things, i would rather just allow all table models
|is this a theme resolver or a style resolver?
|this does not seem to resolve everything, only some things, it does not seem to resolve anything that starts with &quot;?android&quot; and fails to resolve many &quot;@android&quot; things too.

changing the first line to report true for ?android does not make it any better

sometimes it resolves things, but not fully (e.g @android:color/bright_foreground_dark_inverse =&gt; @android:color/bright_foreground_light) does this mean i need to run this method recursively?
|i know if will render any html here, but how can i get that chunk of html (the one with the rectangle in the correct color, with the color #value in the center) that AndroidJavaDocRenderer.render gives me for normal resources
|is there a way to get some nice html for my tooltip if all i have is a color (#XXX)?
|i would rather not be doing string replace here, whats wrong with the way it used to be?

  resUrl = ResourceUrl.create(resUrl.type, resUrl.name, resValue.isFramework(), resUrl.create);
|will work on that in a subsequent cl
|i dont think we want any of the intellij table behaviour, this is not used as a intellij table type component, its used as a mayabi editable  attribute list, and thats very different to the intellij table.


(also we want to prob move this class into 3rd party)
|yes, as far as i know the TableUI is not something thats changed by different L&amp;Fs, this seems to be the standard solution to the cell span problem

(also we want to prob move this class into 3rd party)
|this is the actual theme, so should be myTheme
|i think this can be replaced with java.util.Objects#equals(java.lang.Object, java.lang.Object)

or some other util method that intellij has somewhere
|can we remove this, and undo the other line change
|i made a comment before that we dont need to config here, why is it still here?
|can we add a comment for what types of things are edited with this editor
|just throw a runtimeexception
|why would this happen? if it should never happen should we throw an exception?
|so it is possible for getAppResources to be called on a non-android module. and so it returns null, but is it possible WE call it with a non-android module? and is logging a error and still allowing the StyleResolver to be instantiated the correct thing to do in that case?
|there is no resolving left to do here, you already have the color
|so we dont need to pass the Configuration to this method...
|when and why do we get this error?
|why does it do that?
|whos scroll pane? getPropertiesScrollPane ?
|can we have a better name, this does not really tell me what it is
|can you not do == on the module object?
|move class to com.android.tools.swing.layoutlib package
|add TODO to remove intellij dependency
|synchronized should not be needed
|get rid of delegate and just pass the graphics object to a fake image factory
|i think we should have a separate method for setting screensize, that is called before the pain, is that possible? as we dont always need to set the screen size.
|split this into 2 classes, the theme editor stuff will go into: 

  com.android.tools.idea.editors.theme.AndroidThemePreviewPanel

and the base class that does the paint call will be:

  com.android.tools.swing.layoutlib.AndroidPanel
|are you sure you need this here?
|TODO add size change listener to the panel that updates the config
|please put javadoc what this is fore
|setConfiguration i think is a better name
|you sometimes check for null and sometimes dont?
|are retries actually needed? have you tested without them? or did you copy this code from somewhere?
|can we remove these hacks, and only add them when we actually hit them
|what call is doing the actual painting? createSession or getResult?

whats the difference between render() and getResult(), they both return the same object?
|can you add these as comments as its really not obvious
|can we remove these hacks, and only add them when we actually hit them
|does this actually happen for our code?
|why do we need this, arnt any exceptions in initialization caused by wrong arguments given? so cant we just use IllegalArgumentException?

also if we NEED it because of needing to catch it and differentiate it with other IllegalArgumentException, it should still extend RuntimeException, as its not part of the normal operation of AS. and should not ever happen once our code is finished, (unlike non-runtime exceptions that can always happen, and so should ALWAYS be handled, e.g. FileNotFoundException)
|should prob throw exception instead
|i dont know if we should do it in the first version, but i would rather this method never returned null, and instead threw things like:

  IllegalArgumentException(&quot;AndroidFacet is null for PsiFile&quot;)
  IllegalArgumentException(&quot;Configuration has no target defined&quot;)
  ...
|this method is private, small and only called from one place, do we really need it as a method?
|why do we return here? does that mean we dont paint anything?
|i thought we dont need this file any more?
|i thought you proved to me that this is not the correct thing to do?
|this boolean is never used
|should this magic number be a constant somewhere
|strange name as it not only affects Text Direction, but also layout direction
|i still dont get why this inversion is needed
|if you change it to myRtl then cant you just switch all the ?: operations round?
|why?
|why cant you pass the isLtR in the constrictor then? can we be consistent with the boolean we use to represent this, otherwise if true sometimes means RtL and sometimes means LtR i get confused.
|the class is called RtL, but the member variable is LtR, this seems unnecessary confusion,
|strange line wrapping
|i think you dont need to add this extra line, i think you can do

PsiClass newClass = new WriteCommandAction...) {
}.execute().getResultObject();
|if we do not think any exception should ever happen here then we should throw a IllegalStateException
|do you really need this method, and why does it return true to negative numbers?
|is it possible for a row to exist if NO col exists?
|maybe add that as a comment that this method returns true for that special case, and why we need it to be allowed.
|is that supposed to say &quot;text view is a text view&quot;?
|ignore the new views part, :-)
|negative in name is confusing, can the method be called

&quot;viewMayExtendTextView()&quot;?

also how do we know for sure that we have captured ALL possible views that extend TextView? what if new views are added that extend it?

when i did the code that does the check for GSA, i used a whitelist: https://googleplex-android.googlesource.com/platform/vendor/unbundled_google/packages/GoogleSearch/+/ub-now-lunchbox/scripts/paddingStart/CheckPaddingStart.java#25
|why is there this check if there is an assert for this already at the top of the method?
|this is only used from a deprecated method? do we want it here?
|Is it possible to have 2 items with same name, 1 with frameworkAttr flase and another true?
|why is this called find? why not just getItem? would make finding this method easier, is also does not perform any expensive find operation so find seems misleading
|should this be called addItem?
|can we add a getResourceType() that throws a exception with a explanation of why its not used in this class
|whats the difference between the isFramework inside ResourceValue and isFrameworkAttr? is one ever true if the other is not?
|can we have 2 fields in ResourceValue then:
isKeyFramework
isValueFramework
?
|The name is already part of the ResourceValue, should the isFrameworkAttr also just be a property of the ResourceValue?
|the comment mentions 1 and 4, but its not used in the code
|with what?
|UnsupportedOperationException
|a menu layout?
|here you are creating a xml manually to display the image, is it possible to load a actual xml file at this point?
|menu?
|Done
|Done
|its not stale, as the resources have not changed, and change in resources will trigger and refresh
|crap, missed this comment, ill fix this in another cl
|could this be easer to read if it said:


        if (AndroidResourceUtil.createValueResource(module, resName, ResourceType.STYLE, fileName, dirNames, resValue)) {
          PsiDocumentManager.getInstance(myContext.getProject()).commitAllDocuments();
        }
|can you add a comment about when this would be null
|so according to alan's email, it should Not add a theme variant as that's not the recommended way of doing color variants, it should just open the color picker, with the location option pre-opened.
|i take it you have already considered using ConfiguredElement as the item in the combo box?
|i take it this cant be part of the xml layout
|putting the scrollpane into a layoutmanager that sreaches it should be enough, should not need to set this kind of stuff on a scroll pane
|why is getting the height of the 1st element not enough any more?
|shouldnt this be in QualifierUtils
|should not need this comment, we should not have any morning here, and if we do, we should fix it instead of hiding all the warnings
|this is a JPanel, so the border by default is null, why do we need to set it to empty?
|seems like a bit overkill using html to set the text color, why not just use foreground color
|this should not be needed
|is this not the same as bigCellSize
|i dont think this is needed, setting color should be with setting foreground, nobr is default for labels in swing, also closing tags are not needed in swing
|i dont think this is needed, and it also has lots of closing tags that are not needed, and it also has 2 closing font tags, that are definitely not needed
|can you pass JUST the folderConfiguration, and it would create the label string in the constructor here?
|do we really need this, can we not just use the normal constructor?
|in some files you make this final, in others you have not

also i suggest making it @NotNull
|can you put each put on a new line, i think it would be easer to read
|just import the class
|why is this here, can you add a comment
|you can pob make this a static initialiser, maybe better to avoid using up memory with it, just create this map before you do the sorting
|avoid wildcard imports
|boolean isFrameworkAttribute = myItem.getQualifiedName().contains(SdkConstants.ANDROID_NS_NAME_PREFIX);

also may be better to use starts with, also there may be a lib method to do this already somewhere
|new line not needed
|avoid wildcard imports
|same, you may want to turn if off in your IDE
|you prob dont need to remove all these empty lines, is there a reason for removing them?
|i dont think we can pass this object here as it is not final, and so can change
|and why is that bad? when the user is not using this part of the IDE, we should not waste memory on not needed objects
|i dont think this needs to be static, (same goes for other files)
|can just have

    ourAccentPaletteModel = new AccentPaletteModel();

here
|i dont think this method is needed
|avoid wildcard imports please
|com.google.common.collect.ImmutableMap&lt;K,V&gt;
|i dont think we can have this resource picker depend on the theme editor table model, what exactly does it need from the model?
|get what you need from the model and pass that
|private static final ImmutableList&lt;Color&gt; PRIMARY_COLORS_LIST = ImmutableList.copyOf(PRIMARY_DARK_COLORS_MAP.keySet());
|blank lines
|we have these string duplicated in the MaretrialColors class
|do we need this, can we not just use Color.WHITE and Color.BLACK
|there is something wrong here with all the text having 2 spaces at the front
|needs a better name
|should be ImmutableMap
|builder should not be kept as a static thing
|This can be inlined as part of the ImmutableMap initialization.

You can use the builder to create the map in the attribute initialization and call .build() at the end of it.
|be consistent with the finals, and put the @notnull before the type
|can you not use any wildcard imports please
|SdkConstants.ANDROID_NS_NAME_PREFIX
|is this class used here? does it need to be a public class?
|can you avoid using wildcard imports please
|can you add some links in the javadoc to show what websites/documentation/sources method was used for the suggestions
|you dont need a else here, as you return in the prev statement
|same
|same
|dont need more new lines here
|you already have a sorting map in ThemeEditorComponent dont you?
|there should be a better way to do this without having to loop over all the attributes

ThemeEditorUtils.resolveItemFromParents
|these methods needs some javadoc for normal people who have not read up about how all the color stuff works
|instead of changing all the constructors, cant we just have a setter method, or a showColorSuggestions(@Nullable String themeAttributeName, @Nullable Color primaryColor)
|instead of saving the original theme, can we not have a

String myHoverPreviewTheme;

then the load attributes can check if that is null or set, and use it if its set, and use the normal theme all other time, then any code that needs to use the normal theme wont get confused
|i thought we had removed these comments already
|can you add javadoc about when null is passed
|it may be useful to add a comment about when/why c can be null, as it does not seem obvious to me
|sorry, it should actually be:


  if (c == null) {
    throw new NullPointerException(renderer + &quot; returned null in &quot;+ comboBox + &quot; for item &quot; + comboBox.getSelectedItem());
  }


as it is actually a NullPointerException
|so the problem is for some reason the renderer is retuning null, shouldnt we not silently swallow this problem and instead maybe log what ComboBox this is, and the renderer thats returning null, so we can actually work out where is it going wrong, or maybe we need to search for renderers that are returning null in some situations, my suggestion would be to replace your code with something like:


  throw new IllegalStateException(renderer + &quot; returned null in &quot;+ comboBox + &quot; for item &quot; + comboBox.getSelectedItem());


then when the crash happens, it will give us better info as to where the problem is
|i dont think we should ever be catching this exception, we should be checking for dump mode at the start of the method instead
|you may as well use javadoc comments for these methods
|can you remove this noinspection, as its not needed any more i think
|this is not really a listener to listen for when the theme changes, it is a Listener for listening to ItemHover Events, so i think it would be better to put this class as a inner class of StyleListPaletteCellRenderer, and rename it to ItemHoverListener
|dont need to create a local variable for this

can just do


  setThing(new Thing(new OtherThing() {
    doThing() {
    }
  }));
|can be

    return currentTheme == null ? false : isAppCompatTheme(currentTheme);
|can you add a TODO here that this is not good enough of a check, and that user themes can start with this and do not mean they are AppCompat theses
|is there a reason we dont scale the padding?
|i dont think there is any reason to create Strings for this color, why not just use 

new JBColor(0xFF4CAF50, 0xFFA5D6A7);
|already mentioned

the interface should live with the class that calls the methods of the interface, NOT the class that implements it
|you can now remove this, as you have fixed the gtk problem
|private String myOriginalThemeName;

can be a member of this anon class, it does not need to be a member of the ThemeEditorComponent
|you need to use JBUI.scale so that it will work on the windows laptop
|you can remove this noinspection as you have not fixed the warning, yay :-)
|do we really need this class, cant we just store the colors inside the icon directly?
|you have 1 cl called &quot;Colour suggestor&quot; and another &quot;Color palette suggestor&quot;, can you please be a bit more descriptive about what each one is exactly in the commit message, the recommended format is:


Short one line description.


Long description about what exactly this cl is doing
that can go on to multiple lines and explains what exactly
is going on with the change.
|is there a way for us to just have 1 method for doing this check, so we dont et code duplication
|can you put a note that this is a hack to get around a bug in old layoutlib code

i would actually rather avoid these hacks, but if our users have old versions of layoutlib that we cant upgrade, then i guess we have to
|getName is notnull,so why cant you just do

 return getName().compareTo(that.getName());

seems like that is all that is needed
|can this be replaced with:

throw new IllegalArgumentException();
|you should either set each time we call config filter, or just set it when its created, then we wont need to re-config with this setting
|how come we need this comparator now, and we didnt need it before?
|this can be 1 line, the way it is now it kind of looks like a anon class
|are my eyes bleeding, or is this trailing white space, how did it get in here?
|you are using a different nullable to the rest of the project here, we normally use org.jetbrains.annotations.Nullable
|why not use a normal map, and have a object that holds both 

 item.getConfiguration() and ResolutionUtils.getQualifiedItemName(item.getItemResourceValue())
|is this basically saying that in the framework its not possible to have more then one parent?
|this really needs javadoc, what does Best mean??
|please can we have proper docs, and also specify When and Why this param is null
|again, please proper docs, when is it null and why
|can we maybe have a better name for this now, now that its not a wheel


also if you made this protected just to be used in the test then you should prob just not have any modifier, then it will be accessible from the package, and so can be used in tests
|can you please add more info about what exactly is new about this color wheel
|whenever we use invokeLater for a non-gui operation, can you Please please put a comment as to why it is being used, thanks
|same
|myButton.setIcon(hasMultipleItems() ? PlatformIcons.COMBOBOX_ARROW_ICON : null);
|why is this change needed?

i wrote the comment to explain why it is needed for off, it should also be explained why it is now needed for on
|in what case would it not be in the list? can you add that to the comment
|why here?
|currently when the name is not hidden, we always update the resource name message text, with your change, we dont do it if there is a state list error, thats quite a big change in behaviour
|isFramework? what is Framework? the attribute or value
|Done
|boolean doOpenAfter = context.getType() != AndroidQuickfixContexts.ThemeEditorContext.TYPE;
|update
|why do you need this here if we already have this in the method it calls?
|same
|are the 2 values the same?
|javadoc would be good here
|should this ever happen? maybe throw a nullpointer here instead?
|really need better naming here, i have no idea what these 2 vars are, and i need to understand a LOT of code to understand it, maybe can have a comment too.
|everything is called source here, sourceXmltag, sourceXml, this is really hard to understand
|later on we have

  assert sourceXml != null;

so does this mean here it can be null? and null is valid?
|why is this more than? if min acceptable is 5 and project is 5, why does that mean we cant set it?
|its confusing that you have a &gt; check here, and a &lt; check on the line below, can they be made consistent, both are checking minAcceptableApi, 


can both be folderAPI(Project/Qualifier) &lt; minAcceptableApi


also if a folder is not the default, but has no versionQualifier, what happens then? do we make the change even if we should not?
|instead of having these 2 collections and keeping track of both, can we not just have the xmlTags, and then when we need to get all the files from them, have a method

    static PsiFile[] getFiles(Collection&lt;XmlTag&gt; tags) {...}
|shouldnt setParent also take a FolderConfig, as you can set different parents for different configs, also how come we dont see the dropdown for the different configs next to the parent in the table?
|in what case is this null, can you add a comment please
|again, not sure why &gt; is used
|when would this be null? can you add a comment please
|why would the collection contain nulls? can we avoid this?
|method name, its called check, but it returns a value, quite confusing, can it be getXXXXX
|you can use JBUI.Borders.empty(5, 0);
|&quot;...will now _only_ change...&quot; sounds like it used to do more, but now only does this one thing
|it will now only change the configuration selected in the variants combo, but what did it do before?
|english :-)

also, what did it used to do before? i thought thats what it did before when you selected a qualifier
|can also call this method findXXXXXXX()
|maybe rename this to minProjectApiLevel
|always true
|do we pass a config here, only to use the module? we should just then pass just the module to make it clear we are not resolving anything or replying on other confid things
|you can actually use new JBEmptyBorder(5) here, if you want all paddings to be the same
|now that you use Iterables.find, does that mean we can stop having this check, having lists that sometimes contain null is confusing as you never know when you should be checking for this and when you should not, google code guidelines i think say that lists should never have nulls
|Done
|the other one used by getThemeEditor
|the getError waits for the error to come, (as it happens in background thread), so i cant really use it here to check there is no error
|Done
|no, coz we use waitUntilFound
|thats why i didnt get rid of getThemeEditor, here it opens it, so we know it is visible
|?
|shouldnt this be part of the Theme object as we can have a theme with a style in another lib module, and we still want it to be editable, and for the change to go into the correct module
|can you add a comment here about when it can be null
|extra line
|i dont really understand why we need a factory here

the constructor can throw an exception if something is wrong
|why do we need this class, MutableCollectionComboBoxModel already does everything this class does
|do we need this method if we already have getSelected() that returns the selected item with the current type
|should this still be deprecated?
|can we add a setter instead of more constructors, we could also do with setters for setChangeValueVisible and setChangeNameVisible so that the other constructor can call them and not rely on all the method couples
|can this have a better name?
|throw new IOException(&quot;can not make &quot; + resDir + &quot; &quot; + dirName);
|where is this class still used? cant we just remove it?
|can you use nulls in the list as separators?

or can you store the separators as meta-data of the items, so have a itemHasSeparator(i) that returns true if there is a separator under the item, that way the list only contains the items you expect, and the size will not include the separators
|can you add javadoc to methods to say when and how they should be used
|can replace this with 

if (selectedComponent == myProjectPanel.myComponent &#124;&#124; selectedComponent == mySystemPanel.myComponent) {
|can we avoid wildcard imports
|can this be a bit more consistent

...


  private JComponent myColorPickerPanel;
  private ColorPicker myColorPicker;


  private JComponent myStateListPickerPanel;
  private StateListPicker myStateListPicker;


...
|do we need to pass a list here? dont we already pass the current value, cant we resolve in inside here?
|it would be super easy to move the 2 lines, i am sure you can do it here :-P
|these 2 lines are repeated, they should be moved into the constructor of ResourceDialogSouthPanel
|maybe wnat would be even better is make 

  AttributesTableModel {

    public static final int COL_COUNT = 2;

    public int getColumnCount() {
        return COL_COUNT;
    }

  }


then


  for (int c = 0; c &lt; AttributesTableModel.COL_COUNT; c++) {
    myAttributesTable.addColumn(new TableColumn(c));
  }
|can you put a comment about why this is like this
|do we need a setConfiguration and a updateConfiguration method, can we just have 1, and just use it when ever we set a new config
|ok, but is that even english? are you missing a &quot;not&quot;?
i still dont get what the last line is trying to say about when null is returned
|not sure what this is saying? what constraints?
|does this comment need updating?
|the doc looks like it acts on the passed object, yet it returns a object too, whats the object it returns?
|what is this method doing? can we have some javadoc, or a better name about what its actually doing
|do we need to reset it when newVersionQualifier == null
|can be done in 1 line, and would be easer to read
|is this supposed to still be here?
|its a mapping but it excludes some types, can you say why, or give it a better name to be more descriptive
|do you need a whole method here, cant you just have:


    // enum value that it's not present in currentValues or null if all the values are present.
    Iterables.getFirst(EnumSet.complementOf(currentValues), null);
|nodpi is not a density i thought, its for density-independent resources.
|why is this comment here? does this method do, or not do DensityQualifier
|thats not really a TODO, and i dont know what this comment means really
|this check should be in the caller
|white space
|maybe put an assert that if isTheme is true , then parent can NOT be null
|maybe should use JBUI.scale
|can we do an assert here?
|should we be using JBUI.scale(size) for these so they work on hi-res windows?
|i dont think the order matters, but i can change it anyway, i dont know exactly what to write for the other stuff
|it is there, its the first param
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|i copied this code from the other file, i didnt write this, cant use that name as its already taken
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|i copied this code, not sure if it can be different in some situations
|have removed all of them, was doing something totally wrong here
|Done
|Done
|Done
|Done
|this line is only used from Deprecated code, should it also be marked as Deprecated so people dont use it
|why do you call getSelectedValue() in other places, but here you have the code instead
|do you mean framework?
|why is this interface here? if its used in the last method only?
|maybe put that as the TODO then
|whats the todo here trying to say? is that what needs to be done, or what is already being done?
|why isnt this

        if (items != null) {
          resourceItems.addAll(items);
        }
|is this true for ASwB?
|can be javadoc comment
|should this be called getSelectedQualifiedValue()


maybe getSelectedQualifiedValueFactory() ?
|+1 for Swing Actions, they are good!
|this CL is too complex, i dont think it would be good for everyone working on our code in this state
|should we reload first? then subscribe
|what happens if go out of the theme editor, then i copy a paste a theme from one module to another module? then go back into the theme editor
|a comment above this about what these 4 lines are doing may make it more clear
|same here
|some javadoc on what these public methods are would be good

if javadoc already exists for these functions in other places, then just link to it with a @see
|in what situation will it return null? can you add javadoc
|in what situation will it return null? can you add javadoc
|maybe use IllegalStateException
|2 spaces
|do we know if revalidate is actually needed here?

or if its supposed to change size? then its the scrollpane that should be revalidated.
|ok
|does this work with a style being open as part of a theme?
|the theme editor will definitely need allow editing of theme styles, so lets make sure it works as much as possible for now
|isnt there some better way of doing this, i cant remember though
|Patch Set 1:

clicking away should not call set value with null, this seems like something else is broken

i dont think this is the correct solution
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 9: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 8: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1

using +2 from diegoperez@
|Patch Set 1: Code-Review+2
|Patch Set 1:

can you add the bug id please
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

very good
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(2 comments)
|Patch Set 5: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Uploaded patch set 6.
|Patch Set 6: Code-Review+2 Verified+1

using +2 from diegoperez
|Patch Set 1:

(1 comment)
|Patch Set 4:

can we show transparent colors over a checkered background too please, that may also affect how this formula works
|Patch Set 4:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 7:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Abandoned

Abandoned in favor of this &quot;simpler&quot; solution: http://r.android.com/148429
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(4 comments)
|Patch Set 6: Code-Review+2
|Patch Set 2:

(5 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2

thanks!
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2 Verified+1

using +2 from diegoperez@
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

there is a bug for that, http://b.android.com/164891 that was there before my change
|Patch Set 3: Verified+1
|Patch Set 9:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 1:

it is fine to keep it in the table i think, its not clear in the mocks if its in the table or not, so it should be fine for it to be in the table, we just need to change the background color, and remove the name from the table, and add the dropdown rename item
|Patch Set 1:

i made a cl to change the background of the table to not be white, and it fixes the parent chooser to have the correct colors

https://android-review.googlesource.com/#/c/148025/
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Published edit on patch set 3
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)
|Patch Set 5: Verified+1
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5.
|Uploaded patch set 6: Commit message was updated.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8: Verified+1
|Patch Set 3: Code-Review+2
|Patch Set 3:

(1 comment)

looks good, can you add a test for this too, thanks
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

does anyone have any better ideas of doing this?
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Abandoned

going to change the value in the node instead as Deepanshu suggested
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 3:

as far as i know we have a config per ThemeEditor, and we have a ThemeEditor per module, and we use the same config everywhere inside the ThemeEditor
|Patch Set 3:

there is a bug we need to fix before we can do this: http://b.android.com/161042
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 4:

(1 comment)
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 7:

(2 comments)
|Patch Set 8:

(1 comment)
|Uploaded patch set 10.
|Patch Set 10: Verified+1
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 4:

(1 comment)
|Patch Set 6:

(2 comments)
|Patch Set 7: Code-Review+2

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 7:

(2 comments)
|Patch Set 7:

(1 comment)
|Patch Set 8: Code-Review+2

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 5:

(2 comments)
|Patch Set 6: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 4:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3:

are we sure we want to show them as tooltips? i think there is enough space to just have the doc next to the flag
|Patch Set 3:

are we actually getting problems with it? maybe we should just save this solution somewhere for now, and then get it out when we really need it
|Patch Set 3:

well its prob ok then now that it does not crash
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(3 comments)
|Patch Set 7:

(1 comment)
|Patch Set 9: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 2:

Patch Set 2 seems good, whats the problem with it?
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 3:

can we change the drawing of a cross to just graying out the text, thats a more normal way of showing something as private then a cross
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(4 comments)
|Patch Set 3:

(4 comments)
|Patch Set 5: Code-Review+1
|Patch Set 1:

(3 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2

maybe you can get rid of the strange error messages in a follow up cl
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

when you start working on something acn you put yourself as the owner on it please http://b.android.com/158635
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(1 comment)

also, are you sure this works for situations where we have a attribute inside a style that overrides the attribute of the same name from the main theme?
|Patch Set 8:

are you sure this works for situations where we have a attribute inside a style that overrides the attribute of the same name from the main theme?
|Patch Set 13:

(2 comments)
|Patch Set 14:

(2 comments)
|Patch Set 16: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 5:

(2 comments)
|Patch Set 6:

(2 comments)
|Patch Set 7: Code-Review+2
|Patch Set 4:

you prob want to rebase, as a filename has changed
|Patch Set 8:

(2 comments)
|Patch Set 9: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 1: Code-Review+2

i dont know what this looks like, but i guess its ok
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2:

(1 comment)

also, is there any check you have not given it a name that is already taken?
|Patch Set 2:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 2:

(2 comments)
|Patch Set 3:

i think we should have both Renderer and Editor in the name if it does both, otherwise i get confused, same goes for ClickableTableCellEditor class, i think it should have Renderer in the name as it does both
|Patch Set 3:

(i agree we dont need the word &quot;And&quot; in the name)
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(3 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 5:

(4 comments)
|Patch Set 6: Code-Review+2
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2

(1 comment)
|Patch Set 6:

is the singular getColor only used in the tooltip? as we want to fix the tooltips to show more than one color anyway
|Patch Set 6:

if we leave it with 2 separate methods (or even the 1), we can add a TODO to combine the logic, and do that when we change the actual tooltip to show more colors
|Patch Set 7: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

if we are having to make changes in layoutlib, should we not actually add a proper way of passing the Graphics object without having to fake a Image?
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

do how come in the drawable cl we are using the DelegatingThingyMaJigs to do the tooltips and not here?
|Patch Set 2:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 8:

(1 comment)
|Patch Set 10:

(1 comment)
|Patch Set 10:

(1 comment)
|Patch Set 11:

i am not clear where the editor tooltip text is set now?
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review-1

i think the model should be able to refresh itself
|Patch Set 4:

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 8: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2:

(3 comments)
|Patch Set 2:

(3 comments)
|Patch Set 4:

you're going to need to sync, rebase and merge
|Patch Set 5:

(1 comment)
|Patch Set 5:

whats it used for? its not a real file, you cant actually do anything with it?
|Patch Set 5:

this method

  @Nullable
  @Override
  public VirtualFile getVirtualFile() {
    return myVirtualFile;
  }

is @Nullable, so does that mean you can just return null?
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

is the AttributesTableModel still around then, do we still need it?
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Verified+1
|Patch Set 4: Code-Review+2
|Patch Set 6: Code-Review+2 Verified+1
|Patch Set 1:

if import will open a gradle project, why do we need the open at all then?
|Patch Set 1: Code-Review-1

i am not happy with this lib being in 2 places, if someone needs to update it, they will forget to update both places, can we please make sure its only in 1 place
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 8:

(1 comment)
|Patch Set 8:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 8:

(1 comment)
|Patch Set 11: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Uploaded patch set 9.
|Uploaded patch set 10.
|Patch Set 23:

(11 comments)
|Patch Set 23:

(1 comment)
|Patch Set 30:

(1 comment)
|Patch Set 41:

(3 comments)
|Patch Set 45:

(1 comment)
|Patch Set 70:

(1 comment)
|Patch Set 70:

(1 comment)
|Patch Set 77:

(5 comments)
|Patch Set 77:

(1 comment)
|Patch Set 77:

(1 comment)
|Patch Set 77:

(1 comment)
|Patch Set 72:

(2 comments)
|Patch Set 72:

(1 comment)
|Patch Set 80:

(1 comment)
|Patch Set 82:

(1 comment)
|Patch Set 82: Code-Review+2
|Patch Set 83: Cherry Picked

This patchset was cherry picked to branch studio-master-dev as commit 6f69a4066100bd8bee400e782475c80fc6d98a90
|Abandoned

submitted in: https://android-review.googlesource.com/#/c/122190/
|Abandoned

submitted in: https://android-review.googlesource.com/#/c/122190/
|Patch Set 1: Code-Review+2

thanks!
|Patch Set 2: Code-Review+2

nice cl, thanks
|Patch Set 2:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

you should add the fix i emailed you for the problem of switching themes
|Patch Set 2: Code-Review+2
|Patch Set 3:

(6 comments)
|Patch Set 3:

(3 comments)
|Patch Set 5:

(2 comments)
|Patch Set 5:

(3 comments)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(2 comments)
|Patch Set 6:

(3 comments)
|Patch Set 6:

(3 comments)
|Patch Set 12:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 14: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3:

(2 comments)
|Patch Set 5:

(2 comments)
|Patch Set 5:

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

maybe make a note in the factory as to why it cant be a method in the security manager itself
|Patch Set 1:

(1 comment)
|Patch Set 2:

can you update the commit message please
|Patch Set 3:

is there a big ID for this problem?
if yes, please add it as
Bug: http://b.android.com/{ID}
|Patch Set 3:

(1 comment)

if there is no bug then its up to you if you want to make one, if you choose not to, make sure the commit message describes the bug, e.g. repo steps.
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

very good
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(3 comments)
|Patch Set 6:

(1 comment)
|Patch Set 9: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Abandoned

changed moved to: https://android-review.googlesource.com/#/c/110259/
|Uploaded patch set 1.
|Abandoned

moving dev to dev branch: https://android-review.googlesource.com/#/c/110242/
|Patch Set 3:

(1 comment)
|Patch Set 2:

(5 comments)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

the only problem is that when people reload as part of a bigger list of events, then they may expect reload to already happen, but currently we dont have code that does that i dont think
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5:

not really totally sure if this is the right solution, any ideas are welcome
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)
|Patch Set 6: Verified+1
|Patch Set 6:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

going to ask alam what is the recommended way of creating color variants
|Patch Set 4:

(1 comment)
|Patch Set 6:

(6 comments)
|Patch Set 9:

(1 comment)
|Patch Set 9:

(6 comments)
|Patch Set 10: Code-Review+2

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 7:

(2 comments)
|Patch Set 8:

(3 comments)
|Patch Set 8:

you prob want to rebase this change

run repo sync, then repo rebase
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Patch Set 8:

(3 comments)
|Patch Set 12:

(1 comment)
|Patch Set 13:

(1 comment)
|Patch Set 14:

can you please update the commit message with more details, with empty lines left between the short message, long message and Change-id
|Patch Set 14:

(11 comments)

can you rebase this change please &quot;repo rebase&quot;
|Patch Set 23:

(5 comments)
|Patch Set 31:

(5 comments)
|Patch Set 34:

(8 comments)
|Patch Set 1: Code-Review+2
|Patch Set 2:

(3 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

you know we have a bug about transparent themes now showing correctly, if this fixes that issue, then add the bug: http://b.android.com/158541
|Patch Set 1:

does this cl do the folder version check for normal colors as well as state lists? if yes, it should say so, if no, maybe it should.
|Patch Set 1:

does this cl do the folder version check for normal colors as well as state lists? if yes, it should say so, if no, maybe it should.
|Patch Set 1:

i was thinking of the case where you select an existing color, but i guess that is already checked somewhere
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 7:

(1 comment)
|Patch Set 10:

can you please look into changing all our renderers to use ColoredListCellRenderer, as then we will avoid many of the problems we currently have running in GTK/Linux, thanks
|Patch Set 15:

(2 comments)
|Patch Set 15:

(1 comment)
|Patch Set 15:

(2 comments)
|Patch Set 23:

i get this crash

java.lang.AssertionError
	at com.android.tools.idea.editors.theme.attributes.editors.StyleListPaletteCellRenderer.customizeCellRenderer(StyleListPaletteCellRenderer.java:100)
	at com.intellij.ui.ColoredListCellRenderer.getListCellRendererComponent(ColoredListCellRenderer.java:75)
	at com.android.tools.idea.editors.theme.attributes.editors.StyleListCellRenderer.getListCellRendererComponent(StyleListCellRenderer.java:52)
	at javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1344)
	at javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1294)
	at javax.swing.plaf.basic.BasicListUI.getCellBounds(BasicListUI.java:935)
	at javax.swing.JList.getCellBounds(JList.java:1600)
	at javax.swing.JList.ensureIndexIsVisible(JList.java:1116)
	at javax.swing.plaf.basic.BasicComboPopup.setListSelection(BasicComboPopup.java:1128)
	at javax.swing.plaf.basic.BasicComboPopup.show(BasicComboPopup.java:189)
	at javax.swing.plaf.basic.BasicComboPopup.togglePopup(BasicComboPopup.java:1111)
	at javax.swing.plaf.basic.BasicComboPopup$Handler.mousePressed(BasicComboPopup.java:808)
	at java.awt.AWTEventMulticaster.mousePressed(AWTEventMulticaster.java:263)
	at java.awt.Component.processMouseEvent(Component.java:6294)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3275)
	at java.awt.Component.processEvent(Component.java:6062)
	at java.awt.Container.processEvent(Container.java:2039)
	at java.awt.Component.dispatchEventImpl(Component.java:4660)
	at java.awt.Container.dispatchEventImpl(Container.java:2097)
	at java.awt.Component.dispatchEvent(Component.java:4488)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4575)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4233)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4166)
	at java.awt.Container.dispatchEventImpl(Container.java:2083)
	at java.awt.Window.dispatchEventImpl(Window.java:2489)
	at java.awt.Component.dispatchEvent(Component.java:4488)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:674)
	at java.awt.EventQueue.access$400(EventQueue.java:81)
	at java.awt.EventQueue$2.run(EventQueue.java:633)
	at java.awt.EventQueue$2.run(EventQueue.java:631)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
	at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:647)
	at java.awt.EventQueue$3.run(EventQueue.java:645)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:644)
	at com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.java:734)
	at com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.java:565)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:382)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
|Patch Set 24:

(1 comment)
|Patch Set 29:

(7 comments)
|Patch Set 31: Code-Review+2
|Patch Set 31: Verified+1
|Patch Set 31:

(1 comment)
|Patch Set 32: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

very good!
|Patch Set 1:

very good!
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

really good
|Patch Set 2:

things should Not be nullable JUST for tests, otherwise we have tests that are testing something other then what the actual code is doing, and then the whole point of the tests is lost, please make the methods not take nullable, and use mocks to pass dummy objects in your tests. thanks
|Patch Set 9:

(4 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+1
|Patch Set 3:

(1 comment)
|Patch Set 9:

when the panel is stretched horizontally, the color picker stretches the color rectangle, but when its stretched vertically, it just adds more gap between the hue and alpha sliders, can we allow the color rectangle to stretch in both directions
|Patch Set 9:

also can you change the minimum height of the color rectangle to be more like the mocks, thanks
|Patch Set 9:

also, can you please add back the other info you had in the commit message, i recommend always updating the commit message using &quot;git commit --amend&quot; as then if you need to update the code too, you will not lose your commit message.
|Patch Set 12:

there are still bugs with picking a color when the color picker has been re-sized, these need to be fixed before +2s
|Patch Set 18:

(1 comment)
|Patch Set 22: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)

can you please add the comments in a follow up cl
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2

just the one variable name can be made better
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 3: Patch Set 2 was rebased
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Patch Set 2:

where are the designs that you are basing this of? ive not seen any designs where the search box is to the right of the config

can you add a link in the CL commit message to the designs you are using, thanks
|Patch Set 1: Code-Review+1

(2 comments)
|Patch Set 3:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(2 comments)
|Patch Set 6:

(11 comments)
|Patch Set 6:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Patch Set 11: Code-Review+2

(2 comments)

can you do a follow up cl that will base the new folders of the closest matching folders, not just based on api level, but taking into account the other qualifiers
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(5 comments)
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Uploaded patch set 6.
|Patch Set 6: Verified+1
|Patch Set 2:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 10: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 5:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 13:

(2 comments)
|Patch Set 14: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 6:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 7:

(5 comments)
|Patch Set 7:

(2 comments)
|Patch Set 11:

(1 comment)
|Patch Set 13: Code-Review+2
|Patch Set 13:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 4:

(1 comment)

looks good!
|Patch Set 7:

(3 comments)
|Patch Set 10: Code-Review+2
|Patch Set 10:

(1 comment)
|Patch Set 10:

(1 comment)
|Patch Set 14: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(21 comments)
|Patch Set 4:

(2 comments)
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7: Commit message was updated.
|Patch Set 7: Verified+1
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 10: Code-Review+2

(1 comment)
|Patch Set 10:

(1 comment)
|Patch Set 10:

(1 comment)
|Patch Set 11:

(1 comment)
|Patch Set 11:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2

+2 from http://r.android.com/152244
|Patch Set 2:

can you add a test please
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 6: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1

+2 from ddrone
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1

(2 comments)
|Patch Set 3: Code-Review+1
|Patch Set 9:

(1 comment)
|Patch Set 11:

(1 comment)
|Patch Set 12: Code-Review+2
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 5:

(3 comments)
|Patch Set 5:

(1 comment)
|Patch Set 13:

(2 comments)
|Patch Set 16: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Done
|Updated to match
|The description was inaccurate, it is indeed coded to only trigger the animation after ZOOM_CORRECTION_DELAY and not before that.
|The zoomBackRunnable is a simple Runnable to post delay executing the mScaleRunnable, so the actual animation is governed by mScaleRunnable. It still makes sense to check this since mScaleRunnable is only used for this and the double-tap actions, which should not be interruptible by a scale gesture.
|See above
|There shouldn't be a case where the user can &quot;over pinch&quot; (at least I was unable to replicate it). As for re-entering, the condition checks for crossing the zoom limit only, thus it should only be triggered once.
|This was an intentional change, the value was increased to mimic the fling physics in Photos.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Fixed whitespace and changed enums to ints
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch set 2: Commit message was updated.
|Patch set 3: Published edit on patch set 2.
|Patch set 4: Published edit on patch set 3.
|Patch Set 4:

(3 comments)
|Patch Set 4:

(2 comments)
|Patch set 5: Commit message was updated.
|Patch set 6: Commit message was updated.
|Patch set 7: Published edit on patch set 6.
|Patch Set 7:

(2 comments)
|We should use &quot;tab&quot; here to follow kernel git's code rule.
|We should use &quot;tab&quot; here to follow kernel git code rule.
|Uploaded patch set 1.
|Abandoned

Wrong changg-id
|Restored
|Abandoned
|Uploaded patch set 1.
|Abandoned

wrong change-id
|Restored
|Abandoned

currently not need it.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Reverted

This patchset was reverted in change: I60a7143485a2d38425b127b9ac13d6050d774d2d
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Hi Leo &amp; Pavlin,
    Thank you for your comments. Could you please help to review the Patch Sets 2?
|Patch Set 2: Verified+1
|Removed Verified+1 by haoran Wang &lt;Haoran.Wang@freescale.com&gt;

|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Hi Leo,
    This is a new patch to enable the Bluetooth on Brillo.

Thanks.
|Patch Set 1:

I will merge it back to our own kernel git after it pass the code review.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Hi Pavlin,
    Thank you for your comments. Could you please help to review the Patch Sets 2?
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Hi Erik,
   Thank you for your information. But shall we get that fix in n-preview-6?
|Patch Set 1:

Hi Lorenzo,
    I saw the change in dnsmasq. But the netd still use &quot;:&quot; as the separator in https://android.googlesource.com/platform/system/netd/+/android-n-preview-5/server/TetherController.cpp#255

    Does Google fix this &quot;:&quot; to &quot;&#124;&quot; in TetherController.cpp in next n-preview?

    Thanks.
|should be 5.1?
|5.1?
|Added the missing arrow, and I'll update the text so it doesn't refer to &quot;finding the source&quot;. The diagram you link to frightens me :) But if you think that information is valuable I can try to work up a separate image for that content.
|Ok, i'll need to rework the entire image since that change introduces a line cross. I'll see what I can do.
|I'm not quite sure how this should look -- do you mean all empty buffer lines? point to which &quot;one capture for request&quot; Just the input?
|Does CameraCaptureSession still input to CONFIGURED OUTPUTS? If not, does anything input to OUTPUTs?
|Done
|Done
|Done
|Done
|np -- I didn't know what it was so had to look up ;)
|Done
|Done
|Done
|Done
|Done
|I disagree, but I'll add it back.
|Done
|Done
|Reworked to be two sentences.
|Done
|no problem. I'll also watch for it in other areas.
|Yep, will do
|Yeah I was wondering about his one -- a search on sac came up with all three versions (one word, hyphenated, and two words). I'll make two words (no hyphen) here and watch for it in other areas.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Unclear to me what is the process here? Can you specify?
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Not clear which comma you mean...
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Doesn't look quite right, so I added parenthesis instead.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|The bug specifically says to replace with &quot;Android Partners&quot; ... I assumed it was a branding thing. Unsuk, any problems with using lowercase here?
|Done
|I'll make a plea in the bug for Eng to update us when this changes. It's possible there is a mailing list I can join where a version change would be announced.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I'll remove -- I think sentence is strong enough just saying &quot;Android releases&quot;
|Done
|Done
|Done
|Eng did give me this link as a resource, but I don't have context on why it's more important than the general wiki doc page (https://github.com/96boards/documentation/wiki/HiKey-Home). I'll change the link and watch for comments.
|Done
|Done
|Dimitry, can you comment here?
|This is taken from the HiKey User Guide, in which the term is not hyphenated. I'm inclined to match their User Guide ....
|Done
|Done
|Done
|Done
|Done
|Done
|No, that's to make a fastboot for the device. User needs to follow instructions for booting into fastboot mode (a previous section on this page), so I'll add a link to that anchor to help guide.
|Done
|Can't break the line as the note class doesn't function properly then. I'm hoping this entire note goes away but still waiting to hear on the Xoom status.
|Done
|Done
|Done
|Done
|Done
|Done
|Oh god no... dunno where my mind was yesterday to leave those tags in! new patch set removes them.
|used in developer only and
|I'd lose the comma and put the final phrase in parentheses. Ex. ... images (as that would open a major security hole).
|don't need the comma here.
|Done
|Done
|Done
|Got it, I'll reword.
|Per Clay, we bump the copyright date when the file is updated. I'll ask him about it to see if policy has changed.
|Got it. I used this structure to remain consistent with the previous usage examples. I'll take a closer look and reword.
|This CL is in response to user feedback about not understanding the timestamp format (see b/26310250). I'm happy to change the reference to CLOCK_MONOTONIC timebase if that's more helpful.
|Will do.
|I think we likely want to keep a distinction between functionality of different Android versions. Would it be OK to keep this and state that in 5.x and later it's automatically read from the provided animation?
|Ok, I've removed the table and version distinction.
|I thought the animation_fps variable could not be configured by a user in any release, not just Android 6.x and later versions. Are you saying that in Android 6.x it cannot but previously (5.x and earlier) it could be configured?
|Got it. I've updated the text.
|Agreed - I'll remove the exact setting and just say default/cannot be changed.
|I've removed the version distinction and updated the text.
|Done
|Done
|Done
|Done
|Done
|What? You don't like &quot;spew&quot;? That's going to be word of the year for 2016, just you wait :)
|Done
|Done
|Might take awhile to hunt down all the paths -- should I hold the doc from publishing until I have all paths or is it OK to publish and revise later?
|No, we don't. (Done)
|Done
|I'll need engineer input on that -- might do in a revision.
|I've added a link to the wikipedia article on Thrashing (computer science) after confirming that neither source.android.com nor developer.android.com provide an explanation.
|Done
|Done
|Done
|Good catch. I'll change to lowercase here.
|Need input from engineer -- might handle in a revision.
|No, you are correct to use lowercase -- I've confirmed that developer.android.com does not capitalize receiver.
|Done
|I think we can remove it -- I'll do so and make sure it builds.
|Got it -- I can strengthen to &quot;should&quot; or just revert.
|Always tricky when it's next to a greater-than-10 number. Does &quot;one in 15&quot; look better than &quot;1 in 15&quot; or &quot;one in fifteen&quot;? I don't have a strong feeling.
|Do you mean 'when using the Chrome browser' or &quot;in the Chrome browser&quot;?
|remove (it's not needed)
|Done
|I think it's meant to convey that you should aoa2 when creating a new accessory (and not to use aoa1).
|Done
|Done
|I'm not quite sure what this means... are you saying there's another attribute in the spec that isn't listed here?
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Can we make these two identical? Either &quot;hdpi/280dpi&quot; OR &quot;280dpi/hdpi&quot;
|You can use any directory,
|replace &quot;like&quot; with &quot;such as&quot;
|remove whitespace that appears between these two characters
|maybe just &quot;Certificates and private keys&quot; ?
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

I've updated the arrows in camera model as requested -- hopefully it's accurate now.
|Uploaded patch set 1.
|Patch Set 1:

This new image is based on this one: https://folio.googleplex.com/sac-images/framework#%2Fape_fwk_all_old.png, which was used in numerous presentations. We also did a different version that appears on http://source.android.com/source/index.html.
|Patch Set 1:

Great feedback -- I'll rev both this image and the one on the home page to be accurate, then update the CL.
|Patch Set 1:

I've updated the framework images -- you can view here: https://folio.googleplex.com/sac-images/framework
|Uploaded patch set 2.
|Patch Set 2:

I've update all three framework diagrams with Adrian's feedback. Please review and let me know of any other changes.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(15 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(56 comments)
|Uploaded patch set 5.
|Patch Set 3:

(15 comments)
|Uploaded patch set 6.
|Patch Set 4:

(7 comments)
|Uploaded patch set 7.
|Patch Set 5:

(22 comments)
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Uploaded patch set 15.
|Uploaded patch set 16.
|Uploaded patch set 17.
|Patch Set 17: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(16 comments)

all fixes in.
|Patch Set 2:

I've pulled this file into the main ota section, so we can abandon this one.
|Abandoned

moved into cl 138881
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

Staged here: https://sourceandroid-staging12.googleplex.com/devices/index.html
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Change has been successfully merged by Heidi von Markham
|Uploaded patch set 1.
|Change has been successfully merged by Heidi von Markham
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(27 comments)
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Patch Set 3: Verified+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(4 comments)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

(4 comments)
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(20 comments)
|Uploaded patch set 1.
|Patch Set 1:

Staging server for this is actually 19, not 17. Sorry!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

new CL is 186021
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(12 comments)

Most comments address -- need help with summary attribute though.
|Uploaded patch set 5.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2:

Nothing has changed -- I thought this was submitted weeks ago but I guess the submit I did from home didn't get through. Just needs a +2 so I can keep aosp and live site in sync.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1:

(4 comments)

For convenience, I staged this here: https://sourceandroid-staging20.googleplex.com/devices/tech/ota/sign_builds.html.
|Patch Set 2:

Hmmm not sure if we can do that (disable syntax highlighting). Clay might know...
|Patch Set 4:

I've staged here: https://sourceandroid-staging20.googleplex.com/devices/tech/ota/sign_builds.html
|Omit?
|Maybe &quot;power (batterstats)&quot;
|Done
|Done
|Done
|Done
|Done
|Done
|CSS applies prettyprint, which looked ugly with some of the output on this page (it turns the numbers a different color, which I didn't think worked so well here).  This one is OK, but I changed it to match the others.

Either way is OK w/ me, but wanted to let you know there was a method to the madness.  :-)
|Done
|Done
|See also my comment above.  Agree they should all be consistent.
|Done
|Done
|Done
|Done
|Done
|Does this mean that video resolution is always limited by the codec and never by the screen resolution?  Or should it be something like &quot;supported by each codec on the device?&quot;
|worth it
|offers write access to secondary storage only to the owner user?
|Do we want to link ACL'd content here?
|Maybe &quot;Android feedback?&quot;
|Rephrased.
|Rephrased.
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

Abandoned for https://android-review.googlesource.com/#/c/146901
|Uploaded patch set 1.
|Abandoned

Abandoned for https://android-review.googlesource.com/#/c/146901
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Abandoned

Abandoned for https://android-review.googlesource.com/#/c/146901
|Uploaded patch set 1.
|Abandoned

Duplicate
|Uploaded patch set 1.
|Abandoned

Duplicate
|Uploaded patch set 1.
|Abandoned

Duplicate.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(9 comments)

I removed the prettyprint in staging, so you could see the weirdness.  It's not numbers as much as lots of keywords colored in for no reason. Of course, all green looks funny too.  It's your call!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Have decided to host the staging utility somewhere else.  This CL is now just the app.yaml update for Python 2.7.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Staged at https://sourceandroid-staging14.googleplex.com/devices/tech/debug/dumpsys.html
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(3 comments)

Resolved comments and refreshed output for Input Dispatcher State.
|Uploaded patch set 6.
|Patch Set 6:

Sorry, patch 6 is a mistake. repo rebase didn't do what I thought it did. Am starting again with a clean branch.
|Uploaded patch set 7.
|Patch Set 7:

Patch set 7 looks good to review. Sorry for the problem with set 6--am new to git.
|Patch Set 7: Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 5:

(2 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

OK, I think it's all fixed now.  PTAL.  (Note: I haven't been able to consolidate the CLs but will just submit them sequentially on approval.)
|Uploaded patch set 3.
|Patch Set 3:

OK, I've removed the extraneous file.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 1.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8: Commit message was updated.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Patch Set 10:

OK, have shown two alternatives.  One is the locale codes on one line, the other is the localized language names (I couldn't get those to break properly, unfortunately).  PTAL and let me know what you think.
|Uploaded patch set 11.
|Patch Set 11:

OK, done to the best of my ability.  Chinese seems to break on word boundaries--not sure why.
|Patch Set 11:

Hi, Clay, looks like I need your LGTM on the latest, thanks!
|Patch Set 1: Verified+1
|Patch Set 1: Reverted

This patchset was reverted in change: I203dc280951e44599384a2344d3912eb311cb1dc
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Good catch, Clay!  I made the changes. Thanks!
|Uploaded patch set 4.
|Patch Set 4:

Thanks for catching that, Clay! Fixed now.
|Patch Set 4:

Ping--does this need anything else?
|Uploaded patch set 1.
|Patch Set 1:

Hi, Clay, not sure what's up with the merge conflict. Please advise!
|Patch Set 2: Code-Review+1 Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+1 Verified+1
|Patch Set 1: Code-Review+1 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

https://android-review.googlesource.com/#/c/187981/
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

bug: 23512422
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Android has evolved so much from mobile devices to so many others.  Our devices do not have wlan0.  Replacing eth0 with wlan0 in the test would skip the tests for us.

Do you have any plan to modify NetworkInterface to expose the network type?  This would hide the linux specific details in NetworkInterface implementation.

I do not understand your last comment.  .getHardwareAddress() returns the value read from /sys/class/net/&lt;ifname&gt;/address, doesn't it?
|When the interfaces are inactive, not all properties are initialized.  If they are not in use, no need to test.
|You're right.
|Is it specified somewhere that the buffer has to be for 1 second? This is a permission test - not a buffer size test. A small buffer is chosen so that we do not have to deal with memory error although it is unlikely.
|Patch Set 1: Cherry Picked from branch master.
|Uploaded patch set 2.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1:

CDD says front camera &quot;MUST have a resolution of at least VGA (that is, 640x480 pixels).&quot;
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

Remove trailing spaces.
|Patch Set 2:

Yes.  640x480 has a long history.  Without this patch, the function would go to an infinite loop if the devices do not report VGA.
|Patch Set 2:

The CDD clearly says that the camera must support resolution AT LEAST 640x480.  The CDD does not require the camera to support the particular resolution 640x480.  Our camera support higher resolutions.
|Uploaded patch set 3.
|Patch Set 3:

I do hope you announce update to your CDD soon as it is impossible for us to run or read the source of 100K CTS tests in L to make sure our hardware is compatible when selecting parts.
|Patch Set 3:

&gt; The CDD also says:
 &gt; 
 &gt; &quot;10.1. Compatibility Test Suite
 &gt; 
 &gt; Device implementations MUST pass the Android Compatibility Test
 &gt; Suite (CTS)&quot;
 &gt; 
 &gt; While the CDD tries to outline vital requirements, there are only a
 &gt; few pages in it for camera, and there are hundreds of camera CTS
 &gt; tests. Not all the requirements are listed in the CDD, much of it
 &gt; is talked about in camera headers and metadata descriptions as well
 &gt; (which are mostly in the public SDK docs, which also take
 &gt; precedence over CDD and CTS).
 &gt; 
 &gt; That's not to say we don't have bugs in the tests, or overlooked
 &gt; assumptions. But requiring 640x480 as one of the supported
 &gt; resolutions is definitely intentional.

The CDD says we must support a resolution at least 640x480.  The test is written to allow resolutions at most 640x480.  You said we have to support 640x480.  What must we do?
|Patch Set 3:

Our camera supports 800x600 and 1280x720 - meets CDD requirements, but fails this CTS test.  CDD calls for a resolution AT LEAST 640x480, but the test fails resolutions higher than 640x480.
|Patch Set 3:

Which CTS would fail if we do not support 640x480?  We do not see that failure in our CTS report.  Thanks.
|Patch Set 3:

We are working on kitkat branch.  The test you mentioned does not exist.
|Patch Set 3:

If an app assumed that 640x480 were available without querying the camera, that would be an issue to be fixed in the app.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1: Cherry Picked from branch master.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1:

(3 comments)
|Uploaded patch set 2.
|Patch Set 2:

Hi, I have uploaded patch set 2.  Would you please review?  Thanks.
|Uploaded patch set 3.
|Patch Set 3:

Hi, Neil.  I have modified the patch per your instructions.  Please review.  Thank you.
|Uploaded patch set 1.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch kitkat-cts-dev as commit e45802be11b0f60c39840af75c54a3934da50eb3
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1:

(1 comment)
|thanks.Done
|Done
|Step result links to testResult.xml.
The url should be consistent with the location uploaded during zip_and_upload.
Three levels up will result in public_html directory.
|I have a question about range of port.
Here is error message from qemu1,
&quot;emulator: ERROR: option -port must be followed by an even integer number between 5554 and 5680&quot;
Does upper bound not apply anymore?
|Yes, you're right. There's a race condition between process_iter() and using the pid to create Process.

Based on the documentation for psutil, &quot;Every instance is only created once and then cached into an internal table which is updated every time an element is yielded.&quot;
The example usage in documentation also always have try/except around process_iter()
https://pythonhosted.org/psutil/
|Comment this out temporarily. Mode is changed to 'failing', the previous build is not necessarily passing.
It is possible to search backwards to find the last passing build.
Come back to this feature.
|Change mode to 'failing', to send email for every build that fails. Since there're multiple schedulers, a failure after failed build might have a different reason.
|use this to get rid of trailing newlines
|You're absolutely right.
I was trying to avoid using change_source at the first, and have multiple schedulers listen to different branches, each builder could have multiple schedulers. But the cons is that schedulers don't have access to source properties like project/branch/changeset and etc, which is required to merge or non-merge of builds.
I was thinking we might still need support of multiple schedulers per builder in the future, so this change was left in.
|Thanks!
Will include it in the next patch.
|Thanks! Will change the name in the next patch.
|It's a good idea to use api.platform whenever applicable.
Thank you for fixing this.
|The purpose of this check is to distinguish 32 bit and 64 bit host. If x86 is contained in PROGRAMFILES, that means host is 64bit machine, otherwise 32 bit.

I think api.platform.bits could be applied here.

substitute/if 'x86' in os.environ['PROGRAMFILES']:/if api.platform.bits == 64
|Please also upload basic-win.json?
|Is it possible to use relative path so the test is valid on any machine?
Do we plan to run tests with local master or adt master?
Since the MASTER_USER/IP are hardcoded to adt master, this path won't work.
|Set default value of builder auto_reboot to False, so that adt builders will pick up pending builds when idle
|Set cygwin path before system path on Windows
|To delete .zip as well
|nit, not necessary
|In this case, it still continues to add MailNotifier.
Maybe add return if exception is caught?
|It's up to you.
Just a suggestion, if you use twisted, it will be saved in the log file, while print will only be available on the launching terminal.
from twisted.python import log
log.msg('Mail ...')
|maybe repr(ex) for more information?
|Done
|Does the password file reside in master machine?
I agree that we could upload this change first and see how well gmail works.
|For
|LLDB is using google rotation email server, which will forward email to the person who is on police duty.

FYI, Here is the duty list for LLDB,
https://rotation.googleplex.com/#rotation?id=6267141703598080

I created this alias for emulator project, and we could enter/edit the duty list from grotation.

emu-build-police-pst@grotations.appspotmail.com

I suggest we have the following, so we always have adtinfra cced to monitor the build status.
 
extraRecipients=['adtinfrastructure@gmail.com',
'emu-build-police-pst@grotations.appspotmail.com'
],
|One way is inside of emailMessage, 
return { 'body' : text,
         'type' : 'plain',
         'subject' : 'Emulator Test Failure - %s' % name }

Another way from here, (I'm not sure if this one works since buildbot source might be changed by chromium team, please verify)
 subject=&quot;Emulaotr Test Failure - %(builder)s&quot;
|How about include builder name in the subject?
Like &quot;Emulator test failure - Windows 7 32 bit&quot;.
From the title, recipients could decide to pay attention immediately or later, some platform might have higher priority than others or more flaky.
|Maybe I missed something, from the diff, I'm not sure why this has to be deleted. I don't see this function being called in the context.
Seems the original sendMessage also use smtplib.SMTP sendmail.
|I see, thanks for the explanation.
|How does stderr_output get the value?
Should there be something like,
stderr_outpu = deferred_step_result.get_stderr/stdout?
|That's a good idea. Thanks for the suggestion. Done.
|Do they have the exact same version of osx?
They were supposed to have different drive and os version.
One is SS Vanilla 10.10
And the other DS Vanilla 10.11.1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Change has been successfully merged by Ying Chen
|Patch Set 1: Code-Review+2

looks good. Thank you for taking care of it.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2

adb won't quit by itself unless &quot;adb kill-server&quot; is issued or the process is killed externally. 
It is possible that the running adb process makes buildbot think the step is not completed and waiting until timeout. I am wondering why this doesn't happen for every build.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

Thanks!
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(3 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

I made one more change about the location of unreleased images.
Vince mentioned this afternoon that the unreleased images should be put to system directory and overwrite public images, since that's how the user would make use of it.
Vince also mentioned that we don't need to test API 22/23 public images for those that are covered by tot image. So these are removed from config files.
|Uploaded patch set 6.
|Patch Set 6: Code-Review+2 Verified+1

Included recipe.expected file for two new tests.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2

Looks good.
Just one observation, since the expected json files contain expanded path, like the following line,
&quot;ANDROID_SDK_ROOT&quot;: &quot;/usr/local/google/home/navabi/Android/android-sdk-linux&quot;
if unittest is running on a different machine, it won't pass with checked in expected files.
But I don't have a good workaround at this time. Maybe feed in &quot;$HOME&quot; when generating the tests?
If you know how to fix this, please do that. Otherwise, I'm ok with check in as is.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

verified on Windows bot
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Patch Set 1: Verified+1

Yes, I verified it locally.
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)

Some suggestions, but it's up to you. It looks good.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2:

(3 comments)
|Patch Set 3: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

looks good. 
As discussed, I plan to put output message to stdout which will make more sense. We could update parser at that time.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 3: Code-Review+2

looks good. we could change the recipients to emu-dev@ when it's stable.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Verified on linux builder.
http://chromeos1-row3-rack2-host1.cros.corp.google.com:8200/builders/Ubuntu%2014.04%20Quadro%20600/builds/1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

This change has been verified on Windows 32/64 bit, Linux and Macosx.
|Uploaded patch set 2.
|Patch Set 2:

I added a step for CTS test.
This is included in the regular build recipe mainly for proof of concept.
In current emu_test script, CTS only runs a very small plan which takes a few minutes. While the whole CTS default plan takes a couple of hours, and the long term plan is to run it nightly.

To achieve that, I will submit another patch to add a nightly scheduler, and have the adt.py recipe check which scheduler kicked off current build, to decide include or skip CTS step.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Verified+1
|Patch Set 3:

(1 comment)

I think it's ok to upload config_default.py as is for now. But we will need to revisit when we add more features like email notification and etc, currently this file has many @chromium.
|Patch Set 3:

Here are the original tickets, Vince specified the OSX versions,

Request:
https://gutsv3.corp.google.com/#ticket/18081948
Shipping:
https://gutsv3.corp.google.com/#ticket/18156780
|Patch Set 3:

Yeah, I believe so.
Could we create builders.pyl *supposing they have the right version, then update the image on machine later?
|Patch Set 4: Code-Review+2

looks good
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2

looks good to me.
Thank you so much for figure this out, and clean up unnecessary files.
|Patch Set 4: Code-Review+2
|Patch Set 1:

Hi Armand, my understanding is that you added the directory scripts/tools/venv since I don't see them From the chromium checkout? Is this the python directory we're going to use for buildbot steps?
|Patch Set 2:

How about build/third_party/boto? I see boto is already included in depot_tools/third_party.
Do you intend to upload import_test.py? This location seems a better place for tests, build/scripts/master/unittest/
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1:

Thanks for taking care of this issue. Giving the meaningful warning message is much better than just error out. 
That said, is it really a good idea to depend on $SHELL to determine host type? Across all the vanilla images that I checked, including 12.04, 14.04, 15.04, $SHELL is not defined by default. 
Could we use a more reliable way to determine host type? Like &quot;uname -a&quot;?
|Patch Set 1: Code-Review+1

Thanks Prathmesh.
How about &quot;file /bin/bash&quot; or &quot;file /bin/sh&quot;? It will be more likely to pass than &quot;file $SHELL&quot;.
+1 for &quot;this CL is not related to the underlying logic&quot;
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Abandoned

abandon since studio-1.4-dev is deprecated
uploaded to lldb-master-dev
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Cherry Picked from branch studio-1.4-dev.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1:

The change Chaoren mentioned is included here,
https://android-review.googlesource.com/#/c/171681/
https://android-review.googlesource.com/#/c/171647/

The other changes you observed are some local changes I made on the bot but had not submitted to repo. That was because scripts on bot were not synced from repo.
But I've made changes to buildbot to always sync scripts from aosp repo at the beginning of build (will take effect after master reboot tonight). And now repo versions should be the latest and greatest.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch lldb-master-dev as commit d506c8cb1dddf82cc52aae3a95090e466d929a12
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Removed the following votes:

* Verified+1 by Ying Chen &lt;chying@google.com&gt;

|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

combine with the other commit
|Done
|Done
|Done
|Done
|Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

Removed trailing spaces and tabs.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Uploaded patch set 3.

updated comments for function headers and file headers
|Uploaded patch set 4.
|Patch Set 4:

&gt; Uploaded patch set 4.

Modified Copyright header. Removed few files.Added neon push pops to all assembly functions.
|Uploaded patch set 5.
|Patch Set 5:

&gt; Uploaded patch set 5.

Fixed issues in CTS. Aligned some memory allocations.
|Uploaded patch set 6.
|Patch Set 6:

&gt; Uploaded patch set 6.

Added support for 16x16 clips.
|Uploaded patch set 1.
|Abandoned

This change is not required any more.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

formatting changes
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)

&gt; (1 comment)
|Patch Set 2:

&gt; Uploaded patch set 3.
Rebased
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

Formatting changes and renaming some variables
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

&gt; Uploaded patch set 4.

Added prefix to two function names.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)

&gt; Uploaded patch set 5.
|Patch Set 6:

&gt; Uploaded patch set 6.

Removed an initialization which was not related and that could potentially conflict with another commit.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

formatting changes
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

&gt; Uploaded patch set 5.

Rebased
|Patch Set 1:

&gt; Actually, I am not familiar with proper steps to bail out here.
 &gt; 
 &gt; I looked at SoftAVC.cpp, upon bad input it notifies OMX_EventError,
 &gt; sets a flag mSignalledError, which is checked at the very beginning
 &gt; of onQueueFilled.
 &gt; 
 &gt; I didn't create such a mSignalledError in SoftAVCDec.cpp, and when
 &gt; playing 4k content onQueueFilled would still repeatedly get called,
 &gt; exiting at the source location where OMX_EventError is notified.
 &gt; Should I?

I am not able to reproduce this fail.I tried 4k mp4 clips and 4k ts clips. In which format are you seeing this issue. Could you upload the clip?
|Uploaded patch set 3.
|Patch Set 3:

&gt; Uploaded patch set 3.

I have added some more fixes. Swapped port reconfig and reinit so that, port reconfig is not called in the case of error. Codec context also needs to be set to null at the beginning and when a  init fails.
I have also removed the clip you uploaded.(Google drive is what is typically used).
|Uploaded patch set 4.
|Patch Set 4:

&gt; Uploaded patch set 4.

Added a space(formatting change).
|Uploaded patch set 5.
|Patch Set 5:

&gt; Uploaded patch set 5.

I have added the changes you suggested. They are required.
|Uploaded patch set 6.
|Patch Set 6:

(2 comments)

&gt; Uploaded patch set 6.

I ran stagefright through valgrind and fixed all the invalid writes.However,I am still seeing crash in NuPlayer::Decoder::onInputBufferFetched . I see a similar crash even in vp9 soft decoder when create fails.

Where do you see the crash?. Please share the details with us.

 &gt; Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

&gt; Uploaded patch set 7.

This would required in some other error cases.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Uploaded patch set 3.

Fixed alignment of code and formatted some comments.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1

&gt; Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; Uploaded patch set 2: Commit message was updated.

This commit needs libavc to be updated to
Change-Id: I8892c62bd98f7854d046510330c05a1e9ca826b2

https://android-review.googlesource.com/#/c/149701/2
|Good tip! I will try that next week.
|Unfortunately I have add to add more (ugly) code here, to handle the case where a vector expands more than once, e.g. uchar -&gt; uint8_t -&gt; uint. The code now only updates the vector length if it increases, and this assumes that it can never decrease.
|I agree, but the vector size information unfortunately gets lost in this method. It replaces for example float4 -&gt; float, dropping the size. So we would need to rewrite this function a lot if we want it to return a vector of subtokens, without losing information. Or duplicate code to iterate over the list again to extract the vector size. Alternatively, we could annotate all types with their vector sizes in the .spec files, but that seems too intrusive.
|I have fixed this to always set baseType.
|I have added a comment.
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)

I'm guessing something in the linking is going wrong, but maybe someone else is more knowledgeable on how that is implemented? I can see the kernel and libclcore bitcodes are linked in frameworks/compile/libbcc/lib/Renderscript/RSScript.cpp RSScript::LinkRuntime. Either mLinkRuntimeCallback is not defined, in which case the two IRs are simply &quot;merged&quot;, which probably means &quot;static&quot; applies globally, or whatever is the mLinkRuntimeCallback is not doing the right thing. Anyone know what mLinkRuntimeCallback should be set to?
|Uploaded patch set 1.
|Patch Set 1:

I'm afraid Clang optimizes away static variables so their symbols do not appear in the resulting object file, even when using -O0 -g. This seems to be standard Clang behaviour on C, gcc does not do this.
Could we output &quot;extern consts&quot; only when compiling with -g? I'm already working on a new libclcore library for this case. Since we're not supporting debugging on older devices this should be fine. However, there is no way to stop people using -g on the command line when not debugging, of course.
|Uploaded patch set 2.
|Patch Set 2:

Yes, I was talking about unused statics. Most of the RS constants are, of course, unused. Although maybe we could add a hidden use somewhere?
|Patch Set 2:

We would like the user to be able to evaluate expressions involving these constants on the lldb command line. We also need to make the symbols of all builtin functions available, so they, too, can be called. This involves writing C variants of all missing ones and compiling them with -g. The code will be compiled into a new libclcore_g.bc, which is linked with if the user specifies -g to slang. This will be published in a separate change list.
|Patch Set 2:

&gt; Is there a need for the user to evaluate unreferenced variables?
These may not be unreferenced. The user may well use these constants in their code but they are preprocessed away. Copy-pasting a line of their own source code into the lldb expression evaluator will then not work. The user might want to inspect the actual value of the variable or an expression involving it, to see whether the result is what he expected.

 &gt; An alternative solution here would be to go back to the macro
 &gt; implementation but put the necessary macro information in the debug
 &gt; representation.  DWARF supports this; I don't know whether clang
 &gt; and lldb do.
I found an open bug to add debug information of macros in clang: https://llvm.org/bugs/show_bug.cgi?id=14152. However, it seems there are no plans to implement this. It seems like a large feature that would also require significant work in lldb.

 &gt; What are the builtin functions you are thinking of?
Everything listed on http://developer.android.com/guide/topics/renderscript/reference/overview.html.

 &gt;  When you say
 &gt; &quot;C variants&quot; are you referring to functions that are currently
 &gt; written directly in LLVM IR?
Yes. I believe it is only rsSetElementAt, rsGetElementAt, rsAllocationVStoreX and rsAllocationVLoadX. They should not be more than one liners.

 &gt; is there a way to have a single
 &gt; instance, either by doing away with the LLVM IR instance (so C
 &gt; instance only)
There is extra information contained in the IR which you cannot specify in C, which aids in optimising these functions. See the comment in frameworks/rs/driver/runtime/ll32/allocation.ll, for example, for more information.

 &gt; or by keeping only the LLVM IR instance but doing
 &gt; something with it to support command line calls to it from the
 &gt; debugger?
I don't know what we could do other than inserting a manual pass in llvm to add debug information. This is even more of a maintainability nightmare and is error prone and messy. It's not easy to add debug information by hand, which is what we had to do for the expanded kernel function.
|Patch Set 2:

&gt; For a simple C test case and clang 3.8.0
 &gt; compiled -g, I can see my statics (idx, limit) just fine in the
 &gt; debugger:
 &gt; #include &lt;stdio.h&gt;
 &gt; 
 &gt; static const int limit = 10;
 &gt; 
 &gt; static int idx;
 &gt; 
 &gt; int main() {
 &gt; for (idx = 0; idx &lt; limit; ++idx)
 &gt; printf(&quot;hello world\n&quot;);
 &gt; return 0;
 &gt; }

This doesn't work for me:
clang -g -O0 V.cpp
lldb a.out
(lldb) target create &quot;a.out&quot;
Current executable set to 'a.out' (x86_64).
(lldb) b main
Breakpoint 1: where = a.out`main + 15 at V.cpp:8, address = 0x000000000040053f
(lldb) r
Process 8154 launched: '/media/verena/SSD/Google/working/a.out' (x86_64)
Process 8154 stopped
* thread #1: tid = 8154, 0x000000000040053f a.out`main + 15 at V.cpp:8, name = 'a.out', stop reason = breakpoint 1.1
    frame #0: 0x000000000040053f a.out`main + 15 at V.cpp:8
   5   	static int idx;
   6   	
   7   	int main() {
-&gt; 8   	  for (idx = 0; idx &lt; limit; ++idx)
   9   	    printf(&quot;hello world\n&quot;);
   10  	  return 0;
   11  	}
(lldb) expr limit
error: use of undeclared identifier 'limit'
error: 1 errors parsing expression
|Patch Set 2:

&gt; I thought the static (not macro) solution works for referenced (but
 &gt; not unreferenced) constants.

Sorry, I thought you were still talking about the macro solution. But I've tried static const and that doesn't seem to work for referenced OR unreferenced variables. I believe because their values are defined in place and they are constant, slang constant folds them and then removes the symbol.

 &gt; Yet another alternative would be to find a way to extend C to do
 &gt; this at the source level (I don't know whether it would be easy to
 &gt; do this with attributes or pragmas, or whether there'd be any hope
 &gt; of upstreaming such a change).  Or perhaps we could find a way to
 &gt; write an IR postprocessor that would inject the aliasing assertions
 &gt; into IR generated by the C compiler (rather than by hand, as
 &gt; today).
I think that extending C to support this would be a considerable amount of work.
Writing an IR postprocessor sounds very manual and hacky, it would have to look for the exact function names and their arguments, so this is not nicely maintainable either. Also, it would easily break and no one would notice, only the functions' performance would regress quietly. What's more, this needs to be maintained as we update llvm, which may well periodically change the interface used. In contrast, the LLVM IR is guaranteed to remain fixed within full releases, afaik.
As you say, I don't think the maintenance overhead of adding these few extra functions will be prohibitive.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Uploaded patch set 3.

Addressed Jean-Luc's last comment. I do believe we need to retain the value: field for generating the documentation.
|Patch Set 3:

It looks like it is a bug that lldb cannot see constant static variables. We should be able to implement the RS constants as such, when this bug is fixed.
|Patch Set 3:

I think we can wait until the bug is fixed in lldb, or at least until we have an estimate as to long it might take, before we merge this CL. I will then modify it to use static consts instead.
|Patch Set 4:

The llvm bug has now been fixed, so after integrating the fix we need to check whether this CL is still necessary.
|Abandoned

Replaced by https://android-review.googlesource.com/203926/
|Patch Set 1:

This works for in so far as I can create the allocations that I need (1D half, 1D half2, 2D half3, 1D half4). I have not yet been able to check that it can be initialised properly.
|Patch Set 1: Code-Review+1

I have tested this now and it seems to provide the right functionality as well.
|Uploaded patch set 1.
|Patch Set 2:

It's a link-time optimisation that makes all symbols &quot;internal linkage&quot; that are not explicitly exposed to the outside. That means those symbols won't appear in the symbol table and therefore those functions won't be callable from within LLDB.

In LLVM it's part of the LTOCodeGenerator.

Since this is an optimisation I feel it is appropriate to only apply it for optimisation level &gt;0.
|Patch Set 2:

&gt; This reminds me of the static variable problem we discussed
Yes, you may be right. As far as I understand making something static in C leads to it becoming &quot;internal&quot;, so I guess declaring a non-static constant and then running &quot;internalization&quot; is equivalent. Maybe we should wait until the static const bug is fixed and revisit?
I put it up last week: https://llvm.org/bugs/show_bug.cgi?id=25653
|Patch Set 2:

The llvm bug has now been fixed, so after integrating the fix we need to check whether this CL is still necessary.
|Patch Set 2:

I tried to remove this patch and use an updated LLDB, but I now cannot see the RS builtins from within LLDB again.
Either this is required after all, or an additional LLDB fix is needed.
|Patch Set 1:

This only has an effect when viewing the source in lldb. The user can already see that there is an expanded kernel when looking at the backtrace in lldb. This patch does not show the code within that function, only the arguments to it, which contain information that is interesting to the user.

Lukas, libclcore_debug.bc is only linked in when a DEBUG context is specified and that has nothing to do with debugging, just adds some bounds checking, so you can't package the two together. We could, however, possibly add it to  libclcore_g.bc which I am currently working on, which contains the RS runtime library with debug information.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

Moved the remaining fract(float) function from the cpu reference to driver/runtime.
|Patch Set 2:

(1 comment)
|Patch Set 3:

&gt; This is too big of a CL.  Please break it down into smaller chunks.
 &gt;  For example, moving the implementation of some math functions from
 &gt; inlines to regular implementation should be in separate CLs.

No problem. I will do that asap.
|Uploaded patch set 4.
|Patch Set 3:

&gt; Uploaded patch set 4.

Updated the versioning to use UNRELEASED. Have not yet tried removing the ifdef's Pirama suggested.
|Uploaded patch set 5.
|Uploaded patch set 6: Commit message was updated.
|Patch Set 6:

&gt; This is too big of a CL.  Please break it down into smaller chunks.
 &gt;  For example, moving the implementation of some math functions from
 &gt; inlines to regular implementation should be in separate CLs.

I have now broken this up into this and 

https://android-review.googlesource.com/188731/
https://android-review.googlesource.com/188740/
https://android-review.googlesource.com/188671/
https://android-review.googlesource.com/188692/
https://android-review.googlesource.com/188730/
|Patch Set 2:

&gt; What system property are you referring to?  &quot;debug.rs.max-threads&quot;?
Yes, it is.

 &gt; And when you say &quot;doing this&quot;, are you referring to the debugger
 &gt; test suite?  Why does the debugger test suite (or whatever other
 &gt; scenario you are considering) need this?
Yes, the debugger test suite needs this to test, for example, inspecting coordinates: If using multiple threads the coordinates are not predictable across platforms, because of the differing number of threads used. Fixing the number of threads to 1 allows the test suite to automate the checking of coordinates.
In general, I think a developer will want an option to restrict execution to one thread, to simplify debugging. Also, LLDB doesn't always play nice (when using break/continue/step, for example) when there is more than one thread.
|Patch Set 2:

&gt; Regardless of the number of threads,
 &gt; we will encounter every point in the iteration space exactly once,
 &gt; but I do not think the order is predictable (I don't think there's
 &gt; a guaranteed order even in the single thread case, although I
 &gt; suspect any given implementation will use some deterministic
 &gt; order).
That's true. The model does not say in what order the items of work will be executed. But the CPU implementation does have a fixed order, and that is what we are relying on in our testing. All we want to check is that the coordinates that the user can inspect are right. So we break, ensure coordinates are (0,0,0), continue, break again, coordinates should now be (1,0,0) etc.
For the user it is not important to have a deterministic order, but still useful to just execute one at a time.

 &gt; I have limited experience with multithreaded debugging, and that's
 &gt; with gdb, rather than lldb.  In the gdb model, there's a way to
 &gt; &quot;focus&quot; on a particular thread, and break/continue/step for that
 &gt; thread normally.  What does lldb do?
Lldb has a similar feature. However (as an aside) we found this to be difficult to use / buggy, sometimes lldb would switch to a different thread, I'm not sure why. But in any case, while this feature is good, it would still be nice, in my opinion as a user, to have the option to run everything sequentially. It would reduce the amount of data printed and be easier to reason about. But that's a decision that Google need to make, whether you want to make this property public and allow this, or not. That's not part of any of our CLs.

 &gt; As a user, my expectation is that in the Renderscript model, the
 &gt; &quot;thread&quot; entities exposed to me in lldb should not be the
 &gt; implementation threads (e.g., the CPU driver typically creates 1
 &gt; thread per core) but should instead be one &quot;thread&quot; per point in
 &gt; the iteration space.  If this is not the model, then what is the
 &gt; model?
I do think this is the model. Lldb (and RenderScript, and the max-threads option as far as I understand) don't expose the cores at all, it's all about threads, which is equal to work items. There may be many threads/work items per core, but we have no information about that.
|Patch Set 2:

&gt; Terminology question: When you say &quot;item of work&quot; or &quot;work item&quot;,
 &gt; are you referring to a single kernel instance (i.e., called on
 &gt; behalf of a specific coordinate in the iteration space)?
Yes, that's right. Sorry, I've been borrowing terminology from OpenCL here.

 &gt; What feature is this intended to test?  It seems like an
 &gt; alternative would be to do something like: Set a breakpoint at
 &gt; kernel entry, collect coordinate at breakpoint, at end of run
 &gt; ensure that all coordinates have been visited exactly once.  This
 &gt; may require a more complex testing procedure than what you're
 &gt; using; and I don't know if it actually tests what you want to test.
 &gt;  It would remove dependence on iteration space traversal order and
 &gt; would allow parallel execution.
You're right, that would be an alternative test for the same functionality (though arguably a bit less strict, but that's negligible!).
The order of execution of work items on the CPU is unlikely to change (why would it) and if it does it's no problem to change the test to reflect it. The test suite will have to be updated very regularly anyway, to accommodate new RS features and changing LLVM/LLDB. I feel it is not worth making the test suite completely future proof (which is impossible anyway), spending a lot of time on it &quot;just in case&quot;, when we can easily fix it later if we need to.
What we are talking about makes no difference whatsoever to what is exposed to the user.

 &gt; I agree that as a user, it seems like it would be nice to have an
 &gt; ability to encounter kernel instances serially in a known fixed
 &gt; order (e.g., lexical ordering of coordinates), to facilitate
 &gt; debugging.
That was the original intention of this CL, but maybe as it is it doesn't sufficiently distinguish &quot;cores&quot;/&quot;threads&quot; and/or &quot;single threaded&quot;/&quot;fixed sequential&quot;. But as I understand there is an ongoing Google discussion of whether a new flag is the right way forward at all or whether the max_threads property (or maybe some new property?) should be exposed.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 5.
|Patch Set 5:

&gt; Can you set the CL topic to include the changes to the spec files
 &gt; that create this?  As stated in the other CL, it would be better to
 &gt; break it out.

I split this up into this CL as well as

https://android-review.googlesource.com/188732 and
https://android-review.googlesource.com/188672

Also updated the messages.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

No functional change in the last two commits. Just addressed David's feedback and added another comment.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

Apparently there is a property to do this, so we won't need this flag.
|Uploaded patch set 1.
|Abandoned

Apparently there is a property to do this, so we won't need this flag.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Verena, what is the frameworks/rs patch that depends on this?
 &gt; 
 &gt; If it only changes frameworks/rs/driver/runtime, can you check if
 &gt; https://android-review.googlesource.com/#/c/180083/ does what you
 &gt; need?

It is needed by https://android-review.googlesource.com/181869. I think your patch might work, what do you think?
|Abandoned

After using UNRELEASED version this is not required any more.
|Uploaded patch set 1.
|Patch Set 1:

For some reason this change list won't let me update it. I have made some minor tweaks to some tests and submitted a new change list https://android-review.googlesource.com/182433/
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

I've added another patch for the new deliverable. In it I also addressed your comments.
It is true, the apks were cut down from other ones we found, so the comments got a little out of date. The kernels do a few lines of useless operations just so they are not totally empty.
We are currently working on supporting multiple devices, but we are using the device id. Is that different from the serial?
|Uploaded patch set 6.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Abandoned

This has been replaced by https://android-review.googlesource.com/181905/
|Patch Set 3: Code-Review+1

I've tried this and it works for me (implementing the RS builtins as extern const). Thanks!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 3: Code-Review+1

Might be nice to log the optimisation level that was found as well? Other than that looks good.
|Patch Set 1:

Thanks Stephen. I looked into where this option is used and I've convinced myself that the optimisation is only turned on when the optimisation level is &gt;0. Therefore, since we assume anything other than O0 will provide unreliable debug info anyway, this change has no implications for the debugger.

The code that enables the optimisation is at clang/lib/Driver/Tools.cpp :: shouldUseFramePointerForTarget.
|Done
|No, it's not needed. thanks!
|Done
|If the initialization is for every test method, you can add a @Before annotation, the test runner will run the @before methods for tests.
|It seems the index is less than 0, and the tree node size should be zero. Can we test the size instead of throwing the exception? 

The test name can be more specific, for example, testEditorTreeInitialSize.
|Can the not-found be expected? If it can be expected, it may be better to return a null object instead of throwing exception.
|Can it be a constant?
|Is it common to add asserts in the source code? I did not do much before..
|Is interval straight forward? It is easier to use the interval/elapsed for the shape's area calculation.
|Cool!
|Done
|Returns an empty sample list.
|Done
|yes, using comparison to skip will not work for the values smaller than the maxInterval, because those time values are calculated, each of them would have a sample. Also the sorted interval array can include multiple maxInterval array items which are copied. It will be better to jump out of loop when the first maxInterval is reached.
|Same as previous comment, renamed to interval.
|Done
|Done
|As talked offline, changed to float to do math operations, the long/int would lost precision.
|Done
|Done
|yes, the list was used to sort in Collections.sort, it is no longer needed as there is Arrays.sort.
|Changed to Float.compare
|Done
|yes, that is much simpler.
|Done
|Yes, however generally the deviceContext and timelineComponent are critical variable, so it have large posibility to be used in member methods, then we need move back. I would keep them and that avoids back and forth changes.
|Done
|Done
|File name depends on the pid, technically it is not constant.
|/proc/ + pid + /status is very short and inline is fine to me.
|Done
|The problem is we cannot set the initial unit as B/s, that makes the whole studio frozen if the speed increases to 2MB/s, the speed can be very slow and it may be good to start from B/s.
|Done
|Good catch, it was a typo.
|Yes, I tested both, the color looks easy to recognize in both backgrounds.
|Good catch, removed
|I agree that the two methods does not look good, I suggest to change the based monitor view to implement the listener, instead of implementation in each of them. CpuMonitorView and MemoryMonitorView both have empty implementation. So the change is straight forward.
|Done
|Done
|Done
|Done
|Done
|Done
|is there a reason for all variables should be myXXX?
|Done
|No, those are not delta, instead they are a detailed list of stats belonging to each uid and network interface. As a line is for a single network interface and an uid, we need sum up all interfaces' stats of an uid. Changed the name to tempXXX.
|Done
|Done
|not needed
|Similar as previous tree name, have a constant TREE_NAME
|This class can be an action factory or ActionGroup, the factory can generate a list of actions, and determines whether a renderer can be provided; or the method name is getActions.
|nit: put if (project == null) return null; in the beginning for better readability.
|out of curiosity, why it is a non-static class?
|I agree, and changed to KB. The network speed is critical, because when using Bytes and the network speed is about 5MB/second, the timeline graph went change so rapidly that studio frozen.
|Would make a second CL.
|Yes, too many tokens are unexpected.
|Done
|Done
|yes, StructureViewComponent has the default boder setting, which is thickness 1. It should be the same here.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3: Code-Review+1
|Uploaded patch set 4.
|Patch Set 4: Code-Review+1
|Uploaded patch set 5.
|Patch Set 4:

(3 comments)
|Patch Set 5: Code-Review+1
|Patch Set 5: -Code-Review

Because of the 1.4 branch reset, I will not check in from this external branch.
|Patch Set 5: Verified+1
|Abandoned
|Patch Set 5:

(2 comments)
|Patch Set 6: Code-Review+2

As the annotation is not working yet, SGTM.
|Patch Set 6:

I meant the code LGTM, not SGTM...
|Patch Set 6:

It looks good overall. A minor point is that the Fixture object may wrap the operation details that not important to tests, while the test methods can focus on the test logic. This Fixture provides two methods to get the menu item name and select an menu item, which may mix the infrastructure and the test logic.
|Patch Set 8:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Can we add some test cases to TimelineDataTest?

Sure!
|Uploaded patch set 3.
|Patch Set 3: Code-Review+1
|Uploaded patch set 4.
|Patch Set 4: Code-Review+1

(9 comments)

Talked to Esteban that we should use float for time as long loses precision and the value would not be accurate.

Also talked to David that it would be little messy to call add method in the for loop, so separate the samples conversion and the samples adding.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5:

(7 comments)
|Patch Set 6: Code-Review+1
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3: Code-Review+1 Verified+1
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Patch Set 11:

(13 comments)

I agree adding a new listener looks bad, the view should be refreshed when a device is started to be monitored. It has deviceChanged and deviceSelected methods. After testing I found the first one is triggered when a new device is started up, if the view refreshed is within deviceChanged then there is a conflict; the selected device in dropdown is not the new one but the network view reflects the new device. So moved to deviceSelected method, and the test result looks fine.
|Uploaded patch set 12.
|Patch Set 12:

(4 comments)

The device monitor in Android studio shows an error message that &quot;Problem reading xt_qtaguid network statistics from selected device&quot;. I changed to canSample name to canReadNetworkStatistics.
|Uploaded patch set 13.
|Patch Set 13: Code-Review+1

(6 comments)
|Patch Set 13: Verified+1
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Patch Set 2: -Code-Review
|Patch Set 2: Code-Review+2
|Patch Set 2: -Code-Review
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Code-Review+1
|Uploaded patch set 6.
|Patch Set 6: Code-Review+1 Verified+1
|Patch Set 6: -Verified

(4 comments)
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned
|entry.appScanStats.isRegistered = false ?
|can this can be simplified to temp.appScanStats?
|isEmpty() preferred over this
|Done
|Done
|This is meant to be a drop-in replacement for rand(3) which is why it's named as such.  the osi_ prefix is to prevent name collision and is the convention in osi/ already.
|I really don't want to do this.  I may open the fd once but I want this to be as easily usable as rand(3)
|Done
|Done
|Done
|Done
|this patch would limit the removal to only 50 entries per cleanup.  if there are a ton of beacons this can cause a DOS for the daemon.
|config_new_empty will assert if it can't allocate a new config.  Do we want to still check this?
|will this fail if no scans have occurred yet?
|isEmpty()
|just 'return;'
|nit: duration
|isOpportunisticScan and isBackgroundScan are just coped to this new LastScan when the scan finishes, so why not just record them here and remove these instance variables?
|this name is misleading. scanTime or scanDuration (or just duration) would be more appropriate
|this should probably be renamed to scanTime or curScanTime
|Done
|The base::CommandLine code appends arguments of the same type, so you can do --exec --exec -e -e -e or this is the intention.
|Done
|This version just does them in order, as if you typed them quickly with no delay.  If something is broken about this we can add a wait
|the removed debug lines include the address in here.  do we want to continue that convenience?
|since these will be right next to each other in the log and are associated with a single callback, we might want to format these  in a nice way to indicate they are all grouped
|dym &#124;address&#124;?
|If the ccb is allocated, but flagged false in_use, then do we leak this tL2C_CCB?  A new one gets allocated and then this p_fixed_ccbs[fixed_ccd - L2CAP_FIRST_FIXED_CHNL] gets overwritten on line 2715
|nit: alphabetize please.
|nit: It'd be nice to have a before/after example here.
|it'd be nice to have before / after examples in the long description
|brackets not needed, also you should still use average not ave
|&quot;average&quot; or &quot;mean&quot; or &quot;avg&quot; here, &quot;ave&quot; is pretty uncommon as abbr of &quot;average&quot;
|this can be lots simpler: 

if (stat-&gt;count == 0)
  return 0;
return stat-&gt;total_ms / stat-&gt;count;
|these lines are repeated except for the title and stat_t used. can we DRY it up please?
|If we're caring about 80-char we should wrap this one too
|why does test_vendor_lib not compile anymore?
|this is a bad short message, please update it
|nit: s// - we know it's a patch and which files it updates.
&quot;Update build files for Fluoride on Linux&quot;
|&quot;uprev build/secondary/third_party/**/BUILD.gn&quot;
|I don't see where this is used by audio_a2dp_hw.c
|take this line out, previous line should be &quot;heavily depends on android&quot;
|This should still only be called if clear is true.
|It could fail in the future.  The API says it will return false in that case, so we should check for it.

The failure could be temporary, in which case next time it will succeed.  We shouldn't clear in that case.
|nit: Don't state what this code does, that's what the code is for.  Add *why* you're making this change. 

Also this line is repetitive with the short description.
|this is unused, it would be nice to remove it.
|don't add unnecessary member variables. use a local variable.
|why is this not just included in the timeout property?
|Use this form instead please:
int enableTimeoutDelay = DEFAULT_ENABLE_TIMEOUT_DELAY;
String timeout = ...
if (!timeout.isEmpty())
  enableTimeoutDelay = Integer.parseInt(timeout);
|this is unnecessary logging. please remove.
|nit: should we preserve the name semantics? (profile, str)
|nit: I don't know how often this is called but it optimizes better as 

size_t p2len = strlen(p2);
return strlen(p1) == p2len &amp;&amp; strncmp(p1, p2, p2len) == 0;
|Does not need arguments.  See comments in btif_dm.c
|You define this here but use MAX_BTIF_BOND_EVENT_ENTRIES + 1 everywhere.  You should make this one larger (you are actually keeping 16 entries) or rename it.
|the code in here should go in btif_stats_add_bond_event.  disconnect_reason should be added when it is REMOVE_BOND
|This will never get called, because the proto calling functions will not get here (they dump the protos cached, then return).  Just put btif_debug_bond_event_dump_stats() body in here.
|Binder calls can be created in Android and sent to the daemon, so an attacker can make one that is not one that we made. 

I see the issue with min, the intent was max of (0, value_len).
|This check should be for &lt; 0 or check it's &gt; 0 separately so that a malformed binder call can't mess up the following code, that's what the min was for before.
|Please remove tinyxml2 references from elsewhere too, since this is the only thing that uses it: main/Android.mk, main/BUILD.gn, btif/BUILD.gn, doc/style_guide.md, and HACKING
|This pattern matches other parcel parsing code, see line 105 this file and other parsing.  If we want to avoid a server crash from malformed binder request, it should be done in another CL.
|don't we still need to empty this list even if it's a list now?
|Yes it's a list, called p_srvc_list now, and you free it in the next line. But you still need to empty it before you free it or you're possibly leaking the memory in the list?
|We can probably remove this line, and the one below, since we'll only have one way to free / alloc in the stack
|fix these trailing whitespace while we're mechanically fixing things?
|excise this too?
|repeated and commented? just remove it.
|this comment doesn't apply anymore, if we're still going to check the buffer is smaller than a max size
|what is this coverity spam. we don't use this can we remove it?
|this will assert in osi_malloc, so this is dead code.
|there's a lot of these.  Can we do them here or is it planned in a later CL?
|some of these look different. this assertin osi_malloc is going to simplify the code a lot.
|we need to handle these cases somehow - they will never be reached now, instead we're going to just crash the whole process
|Can we use &lt; 2 here, it's easier to read?
|It should, because the semantics of this is [allocate larger buffer, copy current buffer contents into larger buffer] which is exactly realloc semantics, but usually with less copying involved because you just reuse the buffer if possible and expand.
|(not in this CL) do we want to implement osi_realloc, it would simplify buffer-jockeying like this and reduce churn
|This amount of data is guaranteed to be &lt;= the size of the original buffer (or we are copying junk into the new buffer).  In many / most cases there will be zero copying of the data by using realloc() compared to malloc / copy / free.
|unneeded now that getbuf() asserts?
|You still need to check that getbuf succeeded here before using it.
|will this always succeed? what about if the previous search_queue was null?
|same here
|this is okay as long as the following two functions can handle p_buf being null but I'd check that.
|this pattern is everywhere in your code, why not use utl_freebuf instead
|this is identical to utl_freebuf.
|another removal of a null-check..
|maybe check for null here as well?
|null check
|weird territory because of abstraction layering, but this is utl_freebuf again?
|another null check removed?
|do we want to document functions, at least when we touch them?
|do we want this to support parsing short-uuid formats as well?
|can we double-duty this function to recognize a valid uuid without storing it if p_uuid is nullptr?
|use fileinput to simplify this? https://docs.python.org/2/library/fileinput.html
|this should actually be bt_btif_media - it was a bug that it was re-defined before.
|nit: this reads weird to me - I would put the comment before the if.  Also maybe phrase as &quot;ignore extreme outliers&quot; instead of having a constant in the comments too.
|it'd be nice to have this marked as a millisecond unit.
|don't include dead code in committed code please
|don't do this please - if it's needed later we will commit it then.
|This is for dumping the type of bonded devices.  It shouldn't ever be 0, so &quot;???&quot; is more of an error state.  I like the &quot;???&quot; here.
|It is not.  I've updated that CL so it matches, and moved DEVICE_TYPE_NAMES there too.
|Done
|Done
|this string is wrong for Set MTU
|This one too
|maybe put this todo in the .h next to connection_ids_
|nit whitespace
|read from stdin if you don't provide a filename?  then we can just do `adb shell dumpsys bluetooth_manager &#124; btsnooz.py &gt;  btsnoop.log
|Done
|Done
|This isn't needed for this CL, but for a following one. removed.
|Done
|This follows practice in other areas of Android where utils/String8.h is included, but I updated this to String16.h anyway since that makes more sense.
|This is a override of BBinder::dump() so it is matching to that.
|Ping.   This is a nit but if we update this then we can get it in soon?
|nit: {Start,Stop}Scan
more frequently / understood usage
|This all isn't testing LowEnergyClient, it's testing BluetoothGattInterface, which got me confused.  Can we put this in GattClientUnittest instead? It at least belongs in that CL.

It will also make this test a lot shorter which is good.
|why are we tracking the opportunistic clients at all?  We just add them and remove them so that we can fail on multiple Start / Stops?   Is there a problem on just succeeding on all opportunistic start/stops?

Would it hurt to just have two sets of opportunistic and non-opportunistic scanners instead, so we could just use scan_clients.empty() and make this logic a lot simpler?
|This is really wordy and I don't like &quot;offloaded&quot;. HasHardwareFiltering() perhaps?
|&quot;Scan Batching&quot; or &quot;Batch Scanning&quot;.  one or the other?
Similar thoughts - &quot;HasHardwareBatchScanning()&quot;
|This is just reiterating what the code patch says, it's a bad commit message.

What does this accomplish?

The second half of this is should be something like &quot;don't leak alarms when starting multiple times&quot;
|nit: can we fix this long line while we're here
|nit: this line is redundant. any place you see the full commit message it will show the first line too

I'm not sure you need the following line either, it refers to a simplification that doesn't show in the history because these got squashed.
|It helps when you add the right file. Fixed.
|This is dumb.  Just have two possible new names and switch to another one if it's already set to the default one.
|make this match the error up above or make it more distinct.
|I am pretty sure that GTest will tell you the expected and actual values if you use something else.  Can you maybe use a standard EQ test here that makes more sense?
|There's only one vendor library where the callback is NULL that I've seen, so this doesn't have a large impact but we should release it anyway.

I did test this with the one library which I know has a NULL callback (Marvell) and it does work fine without a double-free.
|is there reason for this to be exposed here?
|nit: restrict
|Return true if the ScanResult would match the filter - would be useful if the stack is filtering the results (no &quot;offloaded&quot; support) 

Probably better either placed somewhere else or done in a later CL.
|Should we make this more useful and add Match(const ScanResult&amp; result);
|There's no easy way to get a UUID with all 0 bits or all 1 bits.  Should we add them?

What about the alternate API: 
 SetServiceUuid(const UUID&amp; service_uuid);
 SetServiceUuid(const UUID&amp; service_uuid, const UUID&amp; mask);
|Yes, it's defined as in frameworks/base/core/java/android/bluetooth/le/ScanSettings.java
|Done
|Done
|I don't have a solid number because I can't reproduce this locally.  Tom might.
|Done
|Done
|Done
|Done
|Done
|It works on all Linux machines with the standard sysfs paths.  I updated the comment to reflect default paths.
|Done
|Done
|Done
|Done
|Done
|https://engdoc.corp.google.com/eng/doc/devguide/cpp/styleguide.shtml?cl=head#Names_and_Order_of_Includes

Done.
|Done
|Done
|Done
|I cannot make them const and assign them to wake_{,un}lock_path ..
|Done
|Done
|style: these braces aren't needed - to match surrounding style, remove them.
|dedup this, just tests += known_tests[*] if ${#tests[*]} -eq 0 then do the run_tests line after
|instead of adding a filter peacemeal, would it be better to just pass all arguments that aren't recognized, or everything past a --, to the test programs themselves?  then we would have access to all the options of gtest.
|This is pretty fragile.  Should we just use the standard idiom of a while loop which shifts the arguments off instead? 

while test $# -gt 0; do
        case &quot;$1&quot; in
             -h&#124;--help)
                   usage
                   exit 0
                   ;;
             -s)
                   shift
                   if test $# -gt 0; then
                       DEVICE=$1
                       else
                       echo &quot;error: no device specified&quot;
                       usage
                       exit 1
                    fi
                    shift
                    ;; 
 .....
|adb returns the return value of whatever you run now, I think, so you should just be able to test $? instead of doing another round-trip
|can we make this the $# -eq 0 case too? it seems like the most common case.
|style: This isn't useful in the commit message.

Is there a bug associated?
|I don't understand why these values are aligned like a bitmask?
|this phrasing is weird.  it triggers a request for increased security?  what happens if it can't raise the security level?  is the security level raised synchronously? ditto for the other places auto-raise-security is used
|do we want to try to notify a callback if it is unregistered? (via unregisterAll() or unregister() on IBluetoothGattClient)
|Done. 

I think we should move it once it's used from elsewhere.

This eliminates the libhardware dependency.
|Done
|Done
|Done
|Pavlin, what platform does this error happen on?   I think we might need to enable it in the kernel?
|Done
|Done
|Done
|Done
|Done
|size_t is unsigned and ssize_t is signed. long is needed here to make the next comparison work.
|Done
|Aren't there two error cases here, which will be both covered by checking &lt; lock_name_len written though?  Can this write return &lt; lock_name_len and != -1 ever?
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|the locality of this reference use is a bit far, move this declaration up to right after the iter fetch?
|style: this doesn't need to split into two lines?
|this one is weirdly placed too.  locality of reference.
|Why is this change to a recursive mutex needed?
|DRY 4 lines repeated 4 times.
|move these up to the entrance of the function too?
|Why not test this too?   Do we need a TODO?
|Maybe just use Clear() since these lines are identical
|Can you RAII this in a nested block instead?
|I've updated to use LOCAL_INIT_RC which worked for brillo-dev when testing it as well.  Should this be an option listed in the services guide? http://drive/open?id=1SR-QLYjRcMeRXzg60i9fkmts3t4oxIRbPbU33xLM4_I?pli=1#heading=h.dc361u4zeavn
|nit: monolithic
|I actually liked this the previous way, because you could have common code that only varies by the command name share the same function/command object, but we can switch this back easy enough
|This is repeated so many times.  Maybe a macro CHECK_ARGS_LENGTH(args, 1)

Or tiny utility base class CommandHandler(int expected_args) for these instead of just global functions.
|This comment is confusing. Are these not atomic string containers?
|before we get too many of these, can we consider command arguments?
|Should we use libedit for this instead?  Please? 
It's in aosp already at external/libedit.
If not now, I may submit a later CL changing this.
|Why the change here? Shouldn't this be adapter()
|do we need to worry about this getting called twice before the callback preventing a double-enable?
|similar concern here as in L46
|grammar nit: you don't need a comma here, or anywhere else after &quot;returns true,&quot;
|Maybe in another CL we fix this bug, so we don't need to set these if they are unnecessary?
|Do you need to lock the instance here (and below)? ObserverList handles modifying during iteration.
|Should this be a const return since we have AddObserver and RemoveObserver to modify the list?
|There is not, this is general clean up following on from bug 21569831 which is now closed.
|Done
|Done
|This is done in all the other files too. It's based on the file.c starts with file.h include convention from C++ style guide.  The same reasons from there are valid here. :)
|This feels like a comment justifying a semantics change and doesn't really.. make sense anymore.  Can we remove it?
|can we compress this into an else if instead of this weird construction instead?
|Suggested rewrite for brevity:

Creates a hash map based on the &#124;params&#124; string containing key and value pairs.  Pairs are expected in the form 'key=value' separated by the ';' character.  The ';' character is invalid in keys or values. The '=' character is invalid in keys.

&#124;params&#124; cannot be NULL, is not modified and is owned by the caller.

Examples: (examples)

A new hash map or NULL is returned and is owned by the caller.
|This is not what this function does. 

Suggestion: Dumps the contents of the hash_map to the log for debugging purposes.
|You should add a failing compare or two or three.  This function also needs to return &gt;9 and &lt;0 in the right places.
|never mind, I was mistaking the purpose of these tests.  these look okay.
|I might have not been clear before: I want test cases where the strings are not equal.  

something like: strcmp(&quot;IloveBlua&quot;, &quot;IloveBluetooth&quot;) should be &lt; 0
the opposite argument order should produce &gt;0
|also please test: 
 * values with '=' in them
 * a bunch of ';;;' with no keys or values. 
 * two of the same key in the same string (what is the semantics here)
|You have such a lovely example of doing this already like 5 lines ago. why a TODO here?
|nit: typo
|nit: Unexpected
|Maybe assign near each switch parsing, so that when the error happens, we have a partially initialized settings we might be able to do something with?
|Do we need a way to change settings during runtime?
|Do we want a test for validating socket path, or a happy path test?
|Seems long and annoying for a command line argument. --ipc?
|this could be an issue if we ever get rid of the constants up there, or somehow something remotely definable creeps in.  maybe we just blow up if the socket already exists instead?
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|nit: cutils I would put with the hardware/ stuff below.
|Referencing old file name.

This header looks different than the rest too.

Also, maybe update the other headers of the other &quot;new&quot; files to have the new boilerplate.
|nit: spelling

Also, this doesn't tell me anything that &quot;bool Start()&quot; doesn't.  
What does the return value mean? 

ditto for Stop() below.

Why does this need to be started and stopped?  Do I need to add all my Characteristics, Advertisement and etc before, after?
|The formatting here is an odd mix of something and it throws me off. Shouldn't it be one-per-line like the above, and if possible avoid the mostly blank line just below.

The comments are fine but seem repetitive, just do the same as with gatt_server_callbacks above.
|Can we remove the void *interface temp variable by doing this cast before the test?
|This feels strange to have in the generic server - it's application-specific whether you will have any of these &quot;seekable&quot; characteristics.  This feels like a hack of LE to do fun things like read large files, that it's not really intended for.
|Don't include poll.h since it's included in host.h.
|You don't need memory, string, and unordered_map here, you can depend on them being in host.h.
|This seems like a strong candidate to be somewhere generic.
|style: I would name this file &quot;logging_helpers.h&quot; instead.
|Feels like you could use std::lexographical_compare here.
|Is an 0x prefix allowed? (it isn't, but BlueZ accepts those)  Some examples would be useful for docs here.
|One of these two is canonical, the other one is not.  For API design you can signify the canonical one with just &quot;GetFull&quot; and the other as &quot;GetFullLittleEndian&quot;.
|this is an attempt to make it merge cleanly into nyc-mr1-dev-plus-aosp (this is the string in that file) and pass treehugger.  It should switch to &quot;Bluetooth&quot; instead soon anyway (this translates to &quot;Bluetooth Share&quot;) - and this is only used in tests anyway.
|This isn't expected - if a player is selected, you should normally be able to see the description in the queue.
|Patch Set 1:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Patch Set 2:

ping - this CL is holding up another one so PTAL
@sharvil
|Uploaded patch set 4.
|Patch Set 4:

(4 comments)
|Uploaded patch set 6.
|Patch Set 6: Code-Review+2 Verified+1
|Patch Set 7: Patch Set 6 was rebased
|Patch Set 7: Code-Review+2 Verified+1
|Patch Set 7: Presubmit-Ready+1
|Change has been successfully merged by Marie Janssen
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review-1
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 7:

(1 comment)
|Patch Set 8:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Verified+1
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 8: Patch Set 7 was rebased
|Patch Set 8: Code-Review+2 Verified+1

(3 comments)

inheriting +2
|Patch Set 4: Code-Review+2
|Patch Set 5: Code-Review+1

(2 comments)
|Patch Set 6: Code-Review+2

(1 comment)
|Patch Set 6: -Code-Review
|Patch Set 7: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 3:

(3 comments)
|Patch Set 4:

(2 comments)
|Patch Set 8:

(7 comments)
|Patch Set 9: Code-Review+2
|Patch Set 9: Code-Review-1

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 14: Code-Review+2
|Patch Set 4:

Uh wow this is ugly.  Can we just conditionally compile a different file instead?
|Patch Set 6: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

It's in frameworks/base/services/core/java/com/android/server/BluetoothManagerService.java:1835
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 7:

(1 comment)
|Patch Set 2:

(4 comments)
|Patch Set 2: Code-Review-1
|Patch Set 1: Code-Review+2

(2 comments)

lgtm with nits
|Patch Set 1:

(4 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Presubmit-Ready+1
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1 Presubmit-Ready+1

Carrying +2 from internal branch
|Patch Set 1: Presubmit-Ready+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

Inheriting +2 from internal branch
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+1

(6 comments)

some notes on comments, but these look good.
Will +2 once these minor things get commented on or addressed.
|Patch Set 4:

(3 comments)
|Patch Set 5: Code-Review+2

(1 comment)
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Presubmit-Ready+1
|Patch Set 1: Verified+1
|Patch Set 2:

(11 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Presubmit-Ready+1
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 4: Verified+1
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5: Code-Review+2 Verified+1
|Patch Set 5:

(3 comments)
|Patch Set 6: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review-2

This should actually break the build if you're using the most recent libhardware.  See http://r.android.com/196444
|Patch Set 2: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(5 comments)
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Topic set to bt-dumpsys-arguments
|Uploaded patch set 2.
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 4: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Topic set to bt-dumpsys-arguments
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Topic set to bt-dumpsys-arguments
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 2: Code-Review+2 Verified+1
|Uploaded patch set 1.
|Topic set to bt-dumpsys-arguments
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4:

(2 comments)
|Patch Set 5: Patch Set 4 was rebased
|Patch Set 5:

ping.  still need a +2 from someone on this.
|Patch Set 5: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(4 comments)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

nit: speling in commit message
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(6 comments)
|Uploaded patch set 4.
|Patch Set 4:

ping.
|Patch Set 6: Patch Set 5 was rebased
|Patch Set 6: Code-Review+2 Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 4: Code-Review+1

(1 comment)
|Patch Set 5: Code-Review+1
|Patch Set 1:

ping - no activity on this for a while, and it's definitely useful for debugging
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 7: Code-Review+1
|Patch Set 6:

(3 comments)

Okay these might be a little late I guess but here they are anyway ¯\_(?)_/¯
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 1:

In general I agree with sharvil's comments here.  Is there a bug that this is associated with fixing?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(7 comments)
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Code-Review+2 Verified+1

Inheriting +2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(11 comments)
|Uploaded patch set 3.
|Patch Set 3:

Fixed issues related to state held between test runs. PTAL
|Uploaded patch set 4.
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Uploaded patch set 5: Patch Set 4 was rebased.
|Patch Set 6: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 4: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2

LGTM
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

sounds good.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+1

looks okay - I also prefer the #define maybe_non_aligned_memcpy(_a, _b, _c)  for clarity here though.
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Code-Review+1

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 5: Code-Review+1

(1 comment)

lgtm with nit
|Patch Set 1: Code-Review-1

This just makes a lot of these different tests the same, because you want to make sure that short alarms set wake locks and long alarms don't.
|Patch Set 4:

(3 comments)
|Patch Set 5: Code-Review+2
|Patch Set 1: Code-Review-1

I agree with sharvil - duration and absolute time are different and I wouldn't want to mix them up.  It seems like a recipe for bugs.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

note: this CL is currently blocked on verify because we don't have GN rules for gmock.
|Uploaded patch set 5.
|Patch Set 5:

such blue skies.  very clear.
|Patch Set 5: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(12 comments)
|Uploaded patch set 4.
|Patch Set 1:

(1 comment)
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 7: Patch Set 6 was rebased
|Patch Set 7: Code-Review+2

Inheriting +2 from rebase
|Patch Set 7: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(2 comments)
|Patch Set 2:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(4 comments)
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+1
|Patch Set 4:

(2 comments)
|Patch Set 5: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

Ping.  Can I get a +2 from someone, or more comments?
|Patch Set 2: Verified+1
|Patch Set 1: Code-Review+2
|Patch Set 7: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1

(3 comments)
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2 Verified+1

chumping to fix tree
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 2: Verified+1

(2 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Verified+1
|Patch Set 1: Code-Review+1
|Patch Set 6:

(6 comments)
|Patch Set 7: Code-Review+1

(1 comment)

just a minor bit of testing comment from me.

I think hash_map_utils can stay in the osi/ especially because I believe that testing this type of parser is important.
|Patch Set 7: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(7 comments)
|Patch Set 7: Code-Review+1
|Patch Set 6:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(43 comments)
|Patch Set 3:

&gt; I didn't put include-related comment in all files, so you may want
 &gt; to check the rest of the files.

At this point, I'd like to punt the rest of the include sorting and categorizing and address them in a different CL.
|Uploaded patch set 4.
|Patch Set 3:

(3 comments)
|Uploaded patch set 5.
|Patch Set 5: Verified+1
|Patch Set 3: Code-Review+1

(2 comments)

Some minor style comments.
|Patch Set 4: Code-Review+1
|Patch Set 8:

(10 comments)

I know this code is going through some redesign, but here are comments anyway.  Sorry for missing a lot of the back-and-forth on this one.
|Patch Set 9: Code-Review+1

(1 comment)

Just one minor documentation thing.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5: Verified+1 Code-Review+2

Inheriting +2. Will resolve conflicts manually.
|Change has been successfully merged by Marie Janssen
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Verified+1

(1 comment)

PTAL. Just tested this on PTS and it passes where it failed before :)
|Patch Set 2: Patch Set 1 was rebased
|Change has been successfully merged by Marie Janssen
|const int32_t
|const int32_t
|Add comment explaining this, something like: &quot;Compute the address of the source string by adding twice the given UTF-16 character offset to the value offset of a string&quot;
|const int32_t
|const int32_t
|Add comment explaining this, something like: &quot;Compute the address of the source string by adding twice the given UTF-16 character offset to the value offset of a string&quot;
|Should the order of these two lines be reversed (as in repne_scasw above and repe_cmpsw below)?
|Should the order of these two lines be reversed (as in repne_scasw above and repe_cmpsw below)?
|Aren't you using rep movsw?
|Add DCHECKs for comments stating assumptions like this, here and several times below.
|Move these checks above the comment that says everything checks out?
|Remove so lines are aligned.
|Add DCHECKS to check these assumptions
|Add DCHECK?
|Add DCHECK?
|Add DCHECK?
|Add DCHECK?
|I would move register assignments to the top of the method below where you assign the input registers.
|const int32_t
|Move this above the comment that says everything checks out?
|If EmitUint8(0x66) always needs to be the second line, fix this too.
|If EmitUint8(0x66) always needs to be the second line, fix this too?
|Done
|Yes exactly, that's what I'll work on next!
|It is not necessary, because I believe soa.Decode&lt;mirror::String*&gt;(java_rhs) is null if java_rhs is not an instance of a string.  If you look at the implementation of equals in runtime/mirror/string.cc, I return false if the input is null.
|Done
|Done
|nit: long line
|I found that keeping the add instruction between the two branch instructions, as the ARM team suggested, actually improved benchmarking results. With the add 2 instructions higher, it took 98.7 ns to compare a short string, and with the add where it is now, it takes 91.6 ns. Done with the other suggestions, though. Thanks!
|Done
|Done
|Done
|Done
|One approach could be to set this temp to a low register other than R0 (which holds the art method).  What do you think?
|Done
|Done
|Done
|IsAligned is not a constant expression. Also, I don't think the DCHECK would be executed frequently enough to make a significant different since it's only in the debug mode.
|Done
|Done
|Added the comment. There is an explicit check on line 917 to return true if both strings have length 0.
|Done
|Done
|Done
|I didn't mean to commit this, sorry about that!
|Done
|Done
|Done
|Done
|Done
|I am now using only 2 temps and one of them must be a low register, so a loop is no longer neccessary
|Done with 2 temps!
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done with the return_false and return_true labels
|Done
|Done
|Rename as CreateLeadingZeroLocations?
|Make comment more specific, something like &quot;Since we are given a constant input, we can determine the result.&quot;
|Is this comment necessary?
|Rename to CreateLeadingZeroLocations?
|Add a more specific comment.
|Done
|Done
|Vogar doesn't support benchmarking on the host :(
|Done, but the correct constant in this case is kOutputOverlap because we want the liveness of the input and output registers to overlap, in which case the input registers cannot be clobbered.
|Done
|Done
|Done
|Done. I thought that objects were 4-byte aligned, so in order to determine if an additional 4-character comparison was necessary (only for the case where the length ends in 11), adding 1 was sufficient. This is not the case though, so adding 3 is the correct approach.
|The test on lines 950-951 was to determine if an additional 2 character comparison was necessary, in which case the result of adding 1 to the length would result in the length ending in either 10 or 11. This is no longer necessary since objects are 8-byte aligned and I can compare the whole string using repe_cmpsq.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|This is what I was initially doing, but this ordering resulted in 3 potential branches in 4 instructions which may cause issues with the branch predictor (see previous patch set) and so moving this check earlier seemed like a better solution than inserting NOP instructions.
|No, I'm not! Removed this change.
|Done
|Done
|Done
|Done- I moved the move instruction from below between the two branch instructions, and also moved the reference equality check to the top as suggested below.
|Done
|This was an outdated comment- I am comparing 4 characters at a time. Using LDP would be comparing 8 characters at a time, which would complicate things because we don't have the appropriate object alignment for this.
|Done
|Done
|Done
|Done
|I think having an enum makes the code more readable, especially in the intrinsics_list.h file. It is also reasonable to assume that nodes.h would be included in files that use the third part of the intrinsics_list.h macro, since this is where HInvoke is declared.
|Done
|Done
|Done
|Done
|Done
|This could be replaced by a DCHECK of the types at the beginning of the method:

DCHECK(type == Primitive::kPrimInt &#124;&#124; type == Primitive::kPrimLong);

Then we can call Clz in a single line at the end of the method.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Comparing 2 characters at a time is faster.
|Done with repe_cmpsl
|I will submit the 64 bit version in a different CL.
|Done, verified that this is necessary and correct
|Arm32 doesn't use it blocks, so there wouldn't be a next_condition_ field to check.
|Thank you for this suggestion, I think it improved the readability of my benchmarks a lot!

I mainly aimed to ensure full coverage of the equals function itself: right now, there are checks to see if the two strings are the same object, whether they have the same length, and whether the given object is null or not an instance of a string before actually executing the rest of the function which, in the original implementation, compares the string character by character from the beginning of the strings.  So I wanted to make sure I got beyond all of these checks at some point and also iterated through the comparison loop for the entire length of the string at least once (worst case scenario).
|Done
|Done
|Done
|I added cases like line 107 to ensure that code beyond the reference equality check in my implementation of String.equals is executed by creating a new String whose contents I know to be identical to the original one but is contained in a different string object.  Strings like literal1 + literal2 were added mainly to create strings of varying lengths or slightly different contents to benchmark. I added a case to benchmark interned strings, however these strings behave just like any other string object, so the resulting values are not significantly different from other cases with strings of similar lengths.  I also added some assertions to check that strings I expect to be the same object actually are.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(8 comments)
|Patch Set 1: Code-Review+1
|Patch Set 6:

(14 comments)
|Patch Set 8: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

This was a prototype for evaluation, we decided to use CLs 167651 and 167670 instead.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Abandoned

This was a prototype for evaluation, we decided to use CLs 167651 and 167670 instead.
|Patch Set 1: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

For review only, not for immediate merging
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Patch Set 4:

(20 comments)
|Patch Set 5:

(2 comments)
|Uploaded patch set 6.
|Patch Set 5:

(9 comments)
|Uploaded patch set 7.
|Patch Set 6:

(4 comments)

Benchmarking results have been updated.
|Uploaded patch set 8.
|Patch Set 7:

(2 comments)
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Patch Set 12:

(1 comment)
|Patch Set 6:

&gt; Agi: could you check if that's enough to get you going?

Yes it is! Thank you!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(6 comments)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 4:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 7:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

For review only, not for immediate merging
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5:

(3 comments)
|Uploaded patch set 7: Commit message was updated.
|Uploaded patch set 8.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(10 comments)
|Uploaded patch set 3.
|Patch Set 2:

(4 comments)
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)

I think comparing 8 characters at a time would add too much complexity.
|Uploaded patch set 5.
|Uploaded patch set 6: Commit message was updated.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review-1

Please add a test for each instruction added.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(17 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review-1

(3 comments)

Random based tests show an off by 1 error somewhere
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5:

(5 comments)
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 7:

(4 comments)
|Uploaded patch set 9.
|Patch Set 7:

(1 comment)
|could it be useful to pull all these defines into a separate header file for standardization of any extensions to the UI later on?
|small style comment: some of the files in this folder follow the format 

function declaration {
}

while others follow 

function declaration
{
}

and some do a mixture of both. We should probably standardize (this is more of a general comment)
|do you want to set these guys to NULL here?
|Hi David, I mostly just exposed them to make testing possible - I can certainly make them private if there's a workaround you know of for testing? Thanks!
|It seems to compile fine without it, is there any additional benefit to be gained from adding it in?
|Oh good point, will do!
|Wow that was clumsy, good catch
|Alright, will do
|if you change to &quot;using android::base::System;&quot; that might make the code more readable :)
|replaced with a stricter check - but yes agreed!
|I did originally consider it - but system can behave strangely/terminate depending on the system, and upon grepping through the external/qemu code base it looks like fork()/exec() is favored over system() and I wanted to conform to that. If this reasoning isn't valid just let me know and I'll be happy to switch :)
|I ended up creating a helper function to print error messages when the error is is errno/GetLastError() - would it be helpful to eventually make this into a utility function elsewhere and refactor the code a bit (or is it not worth it)?
|I'm not aborting upon failure here because while it wouldn't be great if the resize2fs failed, it's not catastrophic to the boot process either if the data partition size is off
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1

Given okay signal by David
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

Hopefully this is it :)
|Patch Set 6:

Quoting David here: &quot;prefer smallCamelCasing() for method/function names in C++ source files, and all_small_letters() for C functions.&quot;
|Patch Set 6:

Oh shoot wrong quote, this is filenames: &quot;Finally, for C++ files, it's better to use the name of the main class for the header/sources, using CapitalCamelCasing, i.e. in this example, this would be android/gps/KmlParser.h&quot;
|Uploaded patch set 7.
|Patch Set 7: Code-Review+1

Given okay signal by David
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Abandoned
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

Yeah sure - the previous patch was &quot;Support '-ranchu' flag to pick qemu2 as the emulation engine&quot; with Change-Id: I13d6c0ac8fd6d07bfbf3fd710a601bccb596bfd2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Updated the changes in response to your comments David - I didn't know that about bash scripts so thank you! :)
|Uploaded patch set 4.
|Patch Set 4:

Good point - it doesn't appear that either one of those files is necessary at all!
|Uploaded patch set 5.
|Uploaded patch set 1.
|Patch set 2: Published edit on patch set 1.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1

Not familiar with reasoning of &quot;if true&quot; conditional, but copying Qt shared libraries does the same thing, is it for readability?

Otherwise, looks good to me!
|Patch Set 1: Code-Review+1
|Done
|Done
|sounds good.  I'll put this comment in the bug (b/25372121)
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|i missed it last round.  sorry about that!
|whoops!

done
|Done
|Done
|Done
|Done
|thanks!

done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|As we discussed - will add two new issues to track changes for the direct call to manager()-&gt;dhcp_properties().Save() and that the default profile test uses a real manager.
|Done
|Done
|Done
|Done
|Done
|I checked in codesearch and didn't see anything.  I also checked in with the enterprise team requesting this.  They confirmed it is not used yet.
|Done
|Done
|Done
|Done
|Done
|Done
|This was an artifact of not knowing the best way to tackle testing for this one.  I was trying to avoid testing Combine again, but also make sure I could have a handle on what Combine would be called on.   This is now restructured as we discussed.

2 - yep, good point.  This is more clear with the change to have device create the merged dhcp properties at the time it is needed.  It was a different beast before.
|ah, it was the DhcpProperties for the mock manager.  :)  yes, that is confusing.  Whole thing is now restructured.
|this was all changed...
|Done
|Done
|Done
|Done
|nope - comma is at 78
|Done
|oops.  well, now it is gone anyway.
|Done
|Done
|Done
|Done
|Done
|Done
|NA (now! :) )
|Done
|nope.  82 if it is on one line.
|Done
|Done
|Done
|I checked with the enterprise team and they confirmed it is not in use.
|Yeah, I thought it was odd to stick it there, but since the Manager.Hostname property was in there that is where it landed. :)

done


note:  moving this out did require that I change the call to LoadManagerProperties.  If this doesn't look good, let me know and I can move this back in.
|done

For the format, I was trying to stick with the what looked like the formatting style used in the lines above.  With the move this is cleaner now.
|I still need to get to the properties and can't use the const method, so it still seems to be needed.
|Done
|as with manager...   removed.
|Done
|still needed with the code I have, we can look closer in the next round
|Done
|Done
|Done
|Done
|It was a mistake.  I am building and running with chromeos and it slipped through.  Sorry for the trouble - thanks for putting a fix in.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|done
|done

thanks! :)
|Done
|let's chat about this when you get in to make sure we have the bases covered, but I think you are right.  Given the check in DHCPv4Config, I don't think this is too relevant, but if more options are added, it would be good to make sure this is clean from the start.  Thanks!
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|also fixed this line - was too long
|Done
|Done
|as we discussed, keeping the function to help distinguish between dbus calls and local variable settings in the unittest.  Thanks!  My brain likes this! :)
|Done
|Done
|Done
|Done
|i went with the suggestion at 205 to be consistent
|Done
|Done
|Done
|Done
|Done
|This will be implemented in the follow-on CL.
|Done
|Done
|Done
|Done
|This CL just has the underlying objects, the use of them comes later and the DHCPv4Config grabs them out with the shorter form.
|Done
|Done
|Done
|Done
|You are correct on this one..  and now that I think about it more, I am going to keep the &quot;&quot; value so a service can override a default profile setting.
|This whole section is now gone.
|good catch..  that was a leftover from a previous impl of this function.
|This would be handy...  no easy way of grabbing just the keys.  Created bug b/24871090  ...  and ended up closing it by using suggestion from zqiu
|Done
|Done
|Done
|I tried doing this...  There were issues with mocking trying to get a sizeof.  I also checked the other classes implementing Load and they all use these param types.
|Done
|Done
|Done
|Done
|went with option 3 :)
|Done
|Done
|Done
|Done
|Done
|Done
|removed
|Done - I actually decided to delete it and use the more direct way of accessing since it is less confusing to see what I am checking in each test.
|this function is no longer needed.
|deleted function
|deleted function
|function is removed
|Done
|Done
|Done
|Done
|switched to value_in_prop_store
|switched to explicitly checking each name
|Done
|Done
|Done
|Done - I tried to make sure all cases were covered, if you spot one I missed, please let me know!
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Delete key is no longer called - empty strings are not the same as unset properties (we can use them to override default profile settings)
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done (but I changed the variable to kPersistentSave)
|Do we also need to clear this if we tear down the connection?
|Hm..  I kinda like the second approach.
|just in case, did you see this?  https://cs.corp.google.com/android/frameworks/base/wifi/java/android/net/wifi/WifiConfiguration.java?rcl=5f4363a0c43620a964342464a7007271c5d335fc&amp;l=1389
|Since I can't seem to remember that far back...  This was the param that pstew confirmed was correct, right?  Thanks! :)
|can we just wait for the regular callback (like below?)
|I would put this in the catch since we don't need to create the string if we never see the exception
|spelling
|is this a needed rebase?
|can you add a note covering this in the commit message. It looks a little out of place otherwise.
|this was in the finally...  might still need to be there in case we have a failure.  i think it can just be moved it.  validate connection should track changes if it needs it.
|indent here looks off by one
|indent here looks off by one
|typo
|since this has an asserts.fail in it, it probably also needs the finally catch.  should they both be in the same try block?
|check indent
|this might be from a rebase - but it also has a typo
|doesn't this message mean the connect already happened?
|something is wrong here (or gerrit is not displaying properly
|please double check the return type.  If I read it right:

public HttpURLConnection httpPing(@RpcParameter(name = &quot;url&quot;) String url)
|This log message could be confusing.  Might be hard to distinguish attempting to connect or after connecting, finish setting it up.
|I just moved it to be consistent with other class variables.  It was odd that it was only in the enter method of InitialState.  It looks like it was just stuck there and it makes more sense to initialize it when we are initializing everything else (especially since the other P2pChannel is also moved out).
|It is the 'cool' thing to do in WSM.  :/

I fixed up the call to use WifiInjector at some point, but we didn't relocate it.
|I'll remove it.  It seems really annoying that we have to have it running.  All it does is reply FAILED (or ERROR) to everything.  grrr.  Seems like a waste to have it running at all if we don't need it.
|Uploaded patch set 1.
|Patch Set 1: Verified+1

Thank you!
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Verified+1

This CL was change 179813 and is now a new CL.  The Android.mk change has already gone through, so this should be good to go on the android side now.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(2 comments)

Good ideas!  Thanks!
|Patch Set 2: Verified+1
|Patch Set 3: Patch Set 2 was rebased
|Uploaded patch set 1.
|Patch Set 1: Verified+1
|Patch Set 2: Patch Set 1 was rebased
|Patch Set 11: Reverted

This patchset was reverted in change: I7b8e747aca30a2d09dc474d2c5ef31ffcccf8032
|Patch Set 1:

Reverting to stop breaking the build
|Patch Set 1: Verified+1
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 2:

Note:  This is not ready for review.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Patch Set 7:

PTAL - Thanks!
|Patch Set 7:

(45 comments)

I think I covered what we talked about.  I had already done some of these comments when I was doing the unique_ptr refactor...  and I am too tired to go back and confirm all of them (most should be &quot;done&quot;).
|Uploaded patch set 8.
|Patch Set 8:

PTA(quick)L - I think I covered what we talked about.  I am too tuckered out to do a detailed pass.  If you think it is close, then please go ahead and do a full review.  If it is still off, let's chat on Monday.  Thanks!
|Uploaded patch set 9.
|Patch Set 8:

(21 comments)

Thank you!
|Uploaded patch set 10.
|Patch Set 9:

(4 comments)

Thank you!
|Patch Set 10: Code-Review+2 Verified+1

Thank you!  Inherited the +2 (and +1 :) )
|Patch Set 11: Patch Set 10 was rebased
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(77 comments)

quiche: when you get a chance, please send the tip for array size checking you mentioned.  Other than that, I believe patch set 3 is ready for you.  :)

Thank you!!!!!!!
|Patch Set 3:

Please hold off on the test review for tomorrow morning.  One of your comments exposed a mistake.  I'll fix it and upload first thing tomorrow.  Thank you!!!!
|Uploaded patch set 4.
|Patch Set 3:

(13 comments)
|Patch Set 4:

(28 comments)

Thank you!
|Uploaded patch set 5.
|Patch Set 5:

(9 comments)

thank you!
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)

Thank you!
|Patch Set 7: Code-Review+2 Verified+1

inheriting the +2s
|Patch Set 7:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)

Thank you!
|Patch Set 2: Verified+1
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

Quick question - are there already tests for the code that you are moving out into the UpstreamNetworkMonitor class?
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

I am curious how the other tests passed...  Did you request a new test run?  Please confirm that the enterprise tests are run and pass!  Thanks!  (This looks a lot better! :) )
|Patch Set 5: Code-Review+2
|Patch Set 8:

(1 comment)
|Patch Set 9:

The main changes were already verified with the sanity tests, right?  we were just fixing up dealing with the deprecated wrapper?
|Patch Set 9: Code-Review+2

Thanks!
|Patch Set 3:

(1 comment)
|Patch Set 5:

(3 comments)
|Patch Set 6:

(1 comment)

please rebase and I will take another look!  thanks!
|Patch Set 7:

(3 comments)

almost there! :)
|Patch Set 7:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 12:

(1 comment)

whoops!  missed this
|Patch Set 13:

(2 comments)

I'll do another pass after the last indent and merge conflict are done
|Patch Set 13:

(not sure why the indent comment was added twice...)
|Patch Set 15: Code-Review+2

Great job!
|Uploaded patch set 1.
|Topic set to reorderWifiServicesStart
|Topic reorderWifiServicesStart removed
|Uploaded patch set 2.
|Patch Set 2:

This is hitting yet another merge conflict.  Will and up putting this change in master and cherry-picking here with a MergedIn line.  just waiting on a local build to finish so I can test and then upload.
|Uploaded patch set 3.
|Patch Set 3: Verified+1

Note: this had to be merged in to master first due to other changes with system service startup.
|Patch Set 3:

I had to rebase and work around another change (nothing major, but this has a new Merged-In line).

PTAL - thanks!
|Patch Set 3:

ah - good catch!  I did it for one of the other attempts at changing the order that I abandoned.  Let me request the sanity tests for this particular one.
|Patch Set 3: Presubmit-Ready+1

triggering treehugger again to get a build the test team can use
|Patch Set 3:

Treehugger does not have test-able targets for aosp-master at the moment (will try to figure out what is going on there).  But related to this change.  We do have some evidence that this is not producing unexpected errors from 2 sources:
1 - the change is in master and the nightly tests have not exposed any problems related to this change (there was a connect test that did not find the target network in the scan results and TDLS is being reported as supported for a device when it is not - that is a feature lookup and not a separate service that we start and some autojoin tests are failing because they are not connected to the correct network, but they are connected)
2 - we have dogfooders running with this change from master, and they have not been reporting issues related to this.

My manual p2p testing was sadly the best test for this...  Filed b/34508128 to track adding p2p tests to our integration suite.

So, in summary - we do have tests running on master with the change and we additionally have dogfooders with the change and these two avenues have not exposed new problems.  I can definitely package up the needed files from a local build to test, but I am not sure what real comfort that will give us without some explicit p2p testing.  :/  Is that ok?
|Patch Set 3:

Thank you!
|Change has been successfully merged by Rebecca Silberstein
|Uploaded patch set 1.
|Topic set to reorderWifiServicesStart
|Patch Set 1: Presubmit-Ready+1
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)

I created a bug to track the P2P service startup (and added it to a TODO in WifiStateMachine).

Thanks!
|Topic reorderWifiServicesStart removed
|Patch Set 2: Presubmit-Ready+1

Splitting the topic to deal with the cherry-pick issue on the other CL
|Patch Set 3: Patch Set 2 was rebased
|Patch Set 3: Presubmit-Ready+1
|Patch Set 3: Verified+1

Thank you!
|Change has been successfully merged by Rebecca Silberstein
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch lollipop-mr1-cts-dev as commit 2ea8537a06c1f2976f238d8d1925c1415754c8a7
|Patch Set 1: Cherry Picked from branch lollipop-cts-dev.
|Patch Set 1: Code-Review+1 Verified+1

Dears:
Follow the patch 'https://android-review.googlesource.com/#/c/177530/'.

It should be merged in lollipop-mr1-cts-dev branch.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Cherry Picked

This patchset was cherry picked to branch lollipop-cts-dev as commit a58ed318e9491738cb1c2ebe3db6da20906696c1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+1 Verified+1
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Code-Review+1 Verified+1
|Patch Set 5:

Mohammed, I cant access that google doc that you shared. Can you email this to me. I'll fix the commit txt.
|Uploaded patch set 6: Commit message was updated.
|Patch Set 6: Code-Review+1 Verified+1

Modified commit txt per kernel conventions doc
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1
|Abandoned

Duplicate
|Uploaded patch set 1.
|Patch Set 1: Code-Review-1
|Patch Set 1: Code-Review+1 Verified+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+1 Verified+1
|Abandoned

Duplicate
|Done
|Done
|Done
|I'll remove this on.
|Done
|This is something left over from the shaderc script that I copied. I don't think it's needed, but I'm not certain what it does.
|Done
|Done
|This is one of the areas where I need your input.
The current package script zips up everything in out/vulkan which is quite large (~150MB) if I don't clean out these files. Is there a way of being more selective in the package process without having to itemize everything? (i.e. validation layers will be added, remove, etc. over time and want this package script to continue working.)
|Uploaded patch set 1.
|Abandoned

squashed into another commit
|Uploaded patch set 1.
|Abandoned

squashed
|Uploaded patch set 1.
|Patch Set 1:

(9 comments)
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Abandoned

squashed to another commit.
|Uploaded patch set 1.
|Abandoned

No longer needed now that AOSP mirror set up.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Verified+1

Fixes issue I was having.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; We shouldn't include symbols from KHR_display or KHR_display_swapchain
 &gt; -- our loader doesn't (and won't) support them.
 &gt; 
 &gt; That's everything from vkGetPhysicalDeviceDisplayPropertiesKHR
 &gt; through vkCreateSharedSwapchainsKHR.

removed.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

&gt; &#124; LC_ALL=c sort

Sorry Dimitry, I missed this comment the first time. Patch updated to sort the symbols.
|Patch Set 3:

&gt; I also suggest adding version script to this library so that you
 &gt; can provide multiple versions of a symbol in the future if
 &gt; necessary

Can you point me to an example?
I'm going to submit this patch and I'll follow up with a version script.
|Patch Set 3:

&gt; It's mentioned in the NDK readme and there's a cs link to examples:
 &gt; https://android.googlesource.com/platform/ndk/+/master/docs/GeneratingSysroots.md

The header on the *versions.txt says:
# Generated by genversionscripts.py. Do not edit.
LIBC {
  global:
...

I cannot find a genversionscripts.py in the NDK. Is this comment just outdated?
|Patch Set 3: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

&gt; (1 comment)

The build doesn't complete because it can't find the sysroot.
I'm probably missing something to get the build working properly.
|Abandoned

Not needed once https://android-review.googlesource.com/#/c/204498/ lands.
|Uploaded patch set 1.
|Patch Set 1:

Do we also need to update build/tools/dev-defaults.sh to include 23 &amp; 24 in the API_LEVELS array and set LATEST_API_LEVEL=24?
