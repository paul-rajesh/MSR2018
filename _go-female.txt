===Database gerrit_go

== Dumping data for table JOINED_TABLE

|Yes, I didn't how how to breakdown the CLs. Rather than starting with init, I began with build. I will add the toolexec later.
|I am adding it as a TODO. Let's get this working at the bare minimal and then focus on the improvements.
|We shouldn't overcomplicate the abstractions by making Token multi-purpose. Why don't we just add a utility function such as

func StaticTokenSource(t *Token) TokenSource

that returns a trivial token source implementation which always returns the provided token?
|I liked StaticTokenSource better. &quot;Fixed&quot; is not a well adopted terminology :)
|Although it's suggested by me myself, I am not comfortable with &quot;static&quot; in the StaticTokenSource. It's not self explanatory and static is an overloaded word. Do we have a better alternative? Otherwise, LGTM.
|Done
|Done
|I will send another change that contains a link to the spec.

There is nothing from the riff package we can reuse.
|Allocating is fine, 44 bytes per player. We have many serious improvements to think about util we begin to care about this alloc. I don't understand why the reviewers want me to prematurely optimize this.
|Done
|Ack
|Removed
|Done
|Done
|In the scope of this package, I can't think of a useful case where a mismatch could be practical. I am returning an error. PTAL.
|Done
|Done
|Done
|Done
|Done
|Done
|If /tmp is mounted on a different device (which is usually the case), os.Rename fails.
|Done
|Done
|Done
|I don't care for now.
|Removed the multiplier.
|Done
|Done
|Done
|&gt; Otherwise anyone importing this repository needs to collect all of these copyright notices

Are you sure about this? The asset is a part of the example app package, a package no app will import. Whether the user vendoring mobile package or not, just because it won't be in their final binary, there should be no licensing issues.

We're including Renee French's artwork, similarly licensed with a CC and not dual licensed as far as I know. Why don't we have a similar concern for gopher assets?
|Done.

Looks much better now.
|Done
|Done
|Done
|Callers can't do anything because we don't recover the device. Not returning a value.
|Should we try to recover if destroying of context or device fails?
|There is not a particular error message returned from these calls, avoiding to recover.
|Done
|Ack and agreed.
|What about providing only accessors from the Config?

func (*Config) Width() geom.Pt {}
func (*Config) Orientation() int {}

It allows us to lazily read some values that might be costly to read such as the screen orientation.
|I am able to run iotest.bash now, and the tests pass.
|I can't run iotest.bash, could you test it for me?
|https://golang.org/doc/install/source doesn't explain how to build Go 1.5. I don't know how I am supposed to build go1.5 from the source by following the steps there.

I think gomobile doc should be replaced by basic example package doc for now and we should reference it from the examples.
|Agreed that we should improve the doc/install/source instead. It's unfortunate that the section entitled &quot;Switch to the master branch&quot; is marked as optional even though the doc belongs to the tip version.

Let me submit this CL, do the related cleanups and negotiate the doc/install/source changes.
|mobile/app: identify touches by event pointer
|The same event.Touch pointer

or

The same pointer
|Simplify the sentence.

A sequence starts with a single TouchStart, followed by zero or more TouchMoves and ends with a single TouchEnd.
|mobile/app: identify touches by ID to enable multitouch
|Object is an overloaded name. Use Region, Boundary, etc.
|I liked the change, it's cleaner that a widget is a UI element.
|if touchInBounds(o, t.Loc) {
   touched[t.ID] = o
}
|// move the object, etc.
|var touchEvents struct {
		sync.Mutex
		pending []event.Touch
	}
|Should we have an additional API, for the user to query whether multi-touch is supported or not? If yes, adding a TODO may be useful.
|var touchEvents struct {
		sync.Mutex
		pending []event.Touch
	}
|Why not just ID int64?
|I fear we might be adding some mental overhead, I'd love to hear an opinion from one of the other reviewers.
|It is weird to tell that a touch ID identifies a sequence. The ID might be a (touch) sequence ID, then. I don't want to go any verbose, but the name is not self-explanatory.
|int's size is platform dependent. Why don't we use int64?
|Unresolved merge conflict.
|Unresolved merge conflict.
|Done
|I added a line explaining they can set GOROOT_BOOTSTRAP to the existing installation or build from the source.

Should I remove building from source section entirely?
|Partially done.

This is still a bit frustrating due to the NDK dependency. I am sending a new version with some of the missing steps. If this looks better, I can branch out the building go1.5 section with other platforms.
|Done
|Ah, got it.

Removed the NDK installation step.

One quick question, how are we going to deal with the distros that distributes the binaries only? I think this may come up on an issue before.
|I am adding a TODO to switch to http://golang.org/doc/install/source.
|Done
|Unfortunately this is not true. In order to build Go for GOOS=android GOARCH=arm GOARM=7, we need arm-linux-androideabi-gcc.
|It is not documented yet. http://tip.golang.org/doc/install/source still explains 1.4.
|Done
|internal.RegisterContextClientFunc is not exported, does this compile?
|Document the package.
|We shouldn't repeat most of these tests at clientcredentials package. They should be covered by oauth2/internal tests.
|RetrieveTokenConfig is unnecessary, remove this method.
|&amp;source?

I am not sure if we are mutating some state in the token source, but we pass pointers to ReuseTokenSource in the oauth2 package and the token sources are receiving pointers. Please, double check.
|Do we need to duplicate this type?

Why cant we just export tokenJSON or raw JSON to do the deserialization at the consumer package?
|int64?
|I'd remove this type.

RetrieveToken(ctx context.Context, clientID string, clientSecret string, tokenURL string, v url.Values)
|How does external packages register their context client functions?
|oauth2: add support for client credential grant type
|Fixes https://github.com/golang/oauth2/issues/7.
|provided context and the client ID and client secret.
|// More information is available at
// http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4
|I'd call it clientCredentialTokenSource.

It's not a refresher.
|Remove this comment or make it clear.

It's used for two reasons:

1. determine whether running on app engine or not
2. if it's a value context, see if there is a custom HTTP client provided
|if got, want := r.Header.Get(&quot;Authorization&quot;), &quot;Basic Q0xJRU5UX0lEOkNMSUVOVF9TRUNSRVQ=&quot;; got != want {
   t.Errorf(&quot;wrong authorization header = %q; want %q&quot;, got, want)
}

Follow the similar &quot;got/want&quot; style for assertions.
|Close r.Body.
|Lowercase log messages. 

t.Fatalf(&quot;invalid token...
|This line seems unnecessary.
|I was mentioning the blank line. Please don't remove tk.WithExtra.
|I'd prefer to do the following:

tk, err := internal.RetrieveToken(ctx, c.ClientID, c.ClientSecret, c.TokenURL, v)
if err != nil {
   return nil, err
}
return tokenFromInternal(tk), nil

and don't stress about which cases tokenFromInternal will cover.
|Why not 

func (c *Config) Client(ctx context.Context)?

I don't want to care whether the user have an initial token or not for this flow, similar to JWT.
|Same question. Should we ask for a t?
|Remove the json tags. No one serializes this type to JSON.
|You don't have to export ContextClientFuncs.
|Move this note to ErrorTransport docs?
|Same here.

if err != nil {
   return nil, err
}
return tokenFromInternal(tk), nil
|I'd keep the following line. It doesn't say much without code context.

&quot;// This is a rare error case (somebody using nil on App Engine),&quot;
|Since the type is exported, the doc should start its name.

// ErrorTransport returns the specified error on RoundTrip.
// This RoundTripper should be used in rare error cases where
// error handling can be postponed to response handling time.
|authenticate client request URL = %q; want %q
|Authorization header = %q; want %q
|Content-Type header = %q; want %q
|Close if there is no error.
|Don't capitalize the error messages and end with a full stop if the error message is a full sentence.

It's fine to say &quot;r.Body = %q; want %q&quot;.
|Payload = %q; want %q
|Don't touch password credentials flow in the scope of this CL.
|oauth2 package is getting over-crowded, I would like to see this flow to have its own sub-package. What about oauth2/clientcredentials?
|The spec doesn't list client ID as a required parameter.
|Not mentioned on the spec as a required parameter.
|Group ClientCredentialsConfig related methods together, likely to be right under the ClientCredentials struct.
|Byte slice types?

(To keep the plural consistency.)
|Nigel, could you file an issue and CC me?

There is no clear line between the UI goroutine and the others. Should we protect each value or should restrict them been accessible from the UI goroutine? This is a design question and requires discussion.
|It's called when the surface is resized. It is a rare event.
|We're thinking about a notification system for orientation, window size changes. We will optionally let the user to register their callbacks.

For now, user needs to handle the current width and height by accessing geom.Width and geom.Height.
|Done
|openal.org is down, I can't find any official documentation I can link to, although there are various mirrors.
|Casting the unsafe pointer to *ALuint worked. I was actually doing it for some functions already. Fixed them all.
|Done
|OpenAL doesn't have a notion of units. It generates the output by looking at all existing items in the scene. I'm not entirely sure how it calculates the source gain.

From the OpenAL docs:

&quot;OpenAL does not define the units of measurement for distances. The application is free to use meters, inches, or parsecs. OpenAL provides means for simulating the natural attenuation of sound according to distance, and to exaggerate or reduce this effect. However, the resulting effects do not depend on the distance unit used by the application to express source and listener coordinates. OpenAL calculations are scale invariant.&quot;

Done.
|Added docs but requires some visuals.
|I am willing to keep the package as raw as possible.

Otherwise, we could have types for error codes, playing state and audio formats.
|Done
|Again, keeping the bindings just as a layer on top of the C API is my concern.

Whoever building on the top of the bindings package can do some caching.
|Done
|Removed.
|Done
|Done
|Done
|Done
|Done.

(I didn't name the return value.)
|Done
|OpenAL Soft is a subset of OpenAL.
|Done
|Done
|Done
|Done
|Done.

8-bit is rare, but is there a reason no to support them?
|Done
|Done
|On mobile devices, I hardly believe we will need to think of multiple devices for now.
|Done
|Done
|Done
|Done
|Done
|It just stops playing. I think it doesn't need to be documented.
|The header file doesn't contain any predefined capabilities. Therefore, I'm willing to keep it as an int32.
|Done.

I want to keep it as similar as possible to the actual API. We have some higher-level abstractions but they are there for convenience.  I think keeping the separate calls as separate functions is a good call when writing bindings.

It's also not well documented which call can error with what. In theory, we shouldn't be returning an error from each call.
|alcGetError always returns INVALID_DEVICE if the argument is NULL. So, I dont think it's valuable to have a standalone Error function.
|I preferred Valid because this package contains higher level abstractions rather than one-to-one mappings to the C API.
|Done
|Why not time.Time?
|I am not sure.

We should maintain the file descriptor and continue from there, pollAll will return immediately if there are events we haven't fetched from the queue during the previous read. I'm adding a TODO for now to think about the intended behavior.
|Oops, I haven't read epoll_wait manual and was not aware of the EPOLLET flag. None of the events sets it. pollAll should be already working the way we desire it to be. Removing the TODO.
|Done
|Done
|Done

Negative timeouts block the queue, 0 means no blocking while polling on the internal event queue. Those both cases may be undocumented features.
|It's broken into multiple lines for now, I will introduce a struct if it gets out of control. Adding a TODO.
|A separate API?

There will be always new events in the queue as long as user at least enables a single on Manager.
|num should increment iff an timeout didn't occur. Fixing the index of types or timestamps though.

types[num] = event.type;
timestamps[num] = event.timestamp;
|Fixed.

I was on the move while working on this CL, sent out the wrong patch :-/ Sorry.
|It worked! Handy language feature but I'd argue about its readability.

Anyways, done.
|Done.

It was segfaulting. It was a dead line from the patch I set a was mallocing the internal manager.
|Ooops, not tested.

Done.
|Done
|s is the casted value.

Are you referencing to v that could have been inlined?
|Creation of multiple instances of Manager should be thread-safe.

Depending on the type of exported APIs, you can't always synchronize library code with yours.
|Done

void free (void* ptr);

free requires void* casting or an unsafe.Pointer.
|Done
|I didn't want to go with an error channel because I only care about returning an error for enable/read. Also, the mental overhead of having an error channel is costly. From the reader's/maintainer's perspective, it's not clear what it means to receive two errors, having a nil error or the out channel's being closed.

I'd rather keep passing the error's pointer around to protect the reader from this ambiguity storm.

Done.
|Returning C.int(-1) instead, it will bubble up an error from enable/read calls.
|Done
|Removed the shadowing declaration in the while loop.
|Done
|Do we really want to make a string comparison?

Why not reflect.DeepEqual?
|Do we need a JSON file? gomobile already knows what external archives it depends on. It could just stat the ndkccdl to see if the archive is there and can even do a content checksum.
|Yes, please send it out as separate CL.

&gt; it adds more things to go wrong

Wrong. The installation can always get corrupted. We should provide a way for the user take the NDK installation back to a known clean state without them downloading the archives again. init should always do some cleanup (removing the existing NDK installation under GOPATH/pkg/gomobile/android-ndk-r10d and re-extract the archives.
|I'd prefer we cache the downloaded archives in a directory and rerun the installation from the cached archives. If the user has a corrupted installation of NDK, they can rerun it without having to download the external dependencies again.

checkDownload may assert if the downloaded archives are the latest. We should do this in another CL with the checksum comparison.
|Return false iff os.IsNotExist(err) == true and otherwise report?
|Ack
|os.Stat(ndkccdl)?
|Where do we read this file?
|Duh.

All we needed was type AuthCodeOption struct {k, v string}

Now, in order not to break the API, we have an interface, a concrete implementation and a helper constructor :-/
|SetParam? This is definitely not a good name to export. I still can't understand the level of over-engineering.

type AuthCodeOption struct {k, v string}
func (c *Config) AuthCodeURL(state string, opts ...AuthCodeOption) string
|iOS doesn't provide raw Altimeter event data.
|Maybe not time.Time, but time.Duration may represent this offset value. We may need to rename the accordingly emphasizing that it's an offset from some {start,boot}-time.
|Some sensors only return a unit vector.
|A new CL is sent: https://go-review.googlesource.com/#/c/8248/
|Will fix it on an upcoming CL.
|Done
|Done
|We can normalize the unit to nanoseconds. Added to the documentation.
|Removing altimeter for now. Altitude can be obtainable from the upcoming location sensor.
|Zero-value Manager works, do we need a NewManager?
|Done
|Done
|It's nanosecs on Android. CMDeviceMotion contains a timestamp which is the secs passed after the boot.

It's true that this field is less relevant with a blocking interface, I can remove it.
|Oh, a good point.

And it's revealing another problem. We should allow multiple subscribers to listen on a single sensor. If there is a third party package requires accelerometer data, you basically need to consume the same queue.

Then, it becomes tricker to have blocking interfaces. We need to maintain a queue for each subscriber on iOS.
|OK, two things to do:

- allow the users to start multiple accelerometers (ignore my previous comment above; starting multiple ASensorEventQueues on Android, and startAccelerometerUpdatesToQueue on iOS allows us to have multiple instances of sensors.Accelerometer.)
- implement a Read and Close.
|It's costly to make C.pollAcceloremeter if your sample rate is high. Buffering in the C context and returning multiple events are faster in a low-latency setting. I am allowing users to optimize the cgo overhead.
|Ack
|It's always graph.facebook.com
|This branch is protected by the inner ifs, right?
|You would like to keep the note explaining why cgo tests are disabled on android and give a link to golang.org/issue/8345.
|remove
|remove
|add scopes to the example.
|the Web server flow, client-side credentials, service accounts, etc
|should be or can be? I don't understand why you make a recommendation.
|Explain that GOOGLE_APPLICATION_CREDENTIALS is a path to credentials file.
|I'd say these are the credentials that are preserved by the gcloud CLI.
|I'd strongly suggest ApplicationDefaultClient or ApplicationClient. DefaultClient sounds vague about what default stands for.
|Use http://godoc.org/golang.org/x/oauth2#NewClient
|You should also use the client provided in the ctx. Please see the other implementations.

NewClient should be able to handle the context.
|that looks for
|Remove this line.

This token source can be used anywhere. It'll skip the AE token source and GCE metadata server if it's not running on those envs.
|You should document that the scope list will be ignored for the metadata server case.
|return ComputeTokenSource(&quot;&quot;), nil
|Try to to user.HomeDir, fallback to HOME env var.

https://github.com/golang/oauth2/blob/master/google/sdk.go#L161
|I couldn't recognize this JSON schema. Who writes the credentials in this format?
|Do we need to return a custom error message for this case? What's wrong with the default case's error message?
|But it links to a go issue. https://github.com/golang/go/issues/100
|We should close the issue tracker on the oauth2 repo in the longer term and make the Go issue tracker mandatory to file oauth2 issues.
|oauth2/#100
|This is too comprehensive to be an example at this package level.

If you would like to contribute a sample that explains the flow, do it in the oauth2 package.
|2015
|Document this endpoint.
|t.Errorf would work work.
|ditto
|ditto
|Not going to argue.

Done.
|Could you convert this to a loop while you are there?
|Done
|Ah.

We can traverse the dependencies. Is there an optimized dependency traverser already? I guess not.
|Done
|I am thinking about the case where Config is initialized with an empty ClientID.

In which flow, are you allowed to have an empty client ID?
|Where do we return this error now?
|var onAppEngine bool

There is a single function which is appengine.AccessToken
|Remove warnOnce?
|fetcherFunc doesn't have to be a field anymore. We won't need to set a different func depending on env. You can also move the implementation of appEngineTokenSource to this file.
|Add a comment somewhere this file exists so that AppEngineTokenSource can be documented by godoc.
|remove this field.
|appengine.AccessToken(ts.ctx, ...
|Shouldn't we remove NoContext and modify the examples to use context.TODO() if there is no context?
|Done
|Using PATH_MAX, bionic uses PATH_MAX similarly.
|Yes, it is. It was looking more readable with the additional strcat, but applied your suggestion.
|Using PATH_MAX now.
|Done
|I'm not entirely sure we should do the initialization everywhere, because in any case you will need a device and a context to invoke the other calls.
|Trying to init in each function.
|Yes, otherwise Android can't export the .so file to this directory during the application installation time and installation fails. But PATH_MAX is usually a big number, I don't think there is a case that Android can't install an app because of PATH_MAX.
|I think there are no cases the server may return a 2XX and it's not 200.

Done.
|I don't want to read the error response body and write it to f.
|Done
|Done
|I haven't tried myself, lazy to read the code and I know that it's shocking but Russ was claiming that filepath.Join cleans the forward slashes on Windows.

So, I'm keeping the forward slashes but moving the Join to the loop below.
|Done
|Done
|Ack
|Putting it into lib/armeabi. Similarly, libraries targeting other architectures can be located in

- lib/armeabi-v7a
- lib/x86
- lib/mips

and so on.
|I added the installation instructions to the package docs.
|app.State is nil at this point unless expected. Is it a bug or I am not understanding the lifecycle well.
|It's coming from OpenAL and licensed with the repo's main COPYING file which is LGPL.

I have doubts about the licensing story again. The header files, in some cases, are not classified as derivative work. If that's the case, we should be able to include the header files and keep this package licensed with BSD. I will check it out with the legal team to confirm it. If it's not the case, distributing them via the tarball sounds good.
|Key could be one of the following:
- PKCS8
- PKCS1
- PKCS8 in a PEM container
- PKCS1 in a PEM container

They are all plain text files. The error message you're suggesting says something else.
|No, it doesn't. It has LocalThreadContextes if you want to restrict the context to a specific thread.
|Yes, I think we should use PCM format here. TBH, I have no idea what else we should call them. PCM encoding properties don't seem to have a commonly used name. But audio file format has to go.
|Replaced them with the constants from the al package.
|Done
|Done
|Done
|You can have multiple players. Each player will create a new Open AL source that will feed the same device.
|Done
|Dead code, removed.
|This block is gone. See the new CL.
|What do you mean by release s Sources? s was a Go pointer passed to C context.
|Correct, p.bufs, p.size, etc needs to be guarded only. But let me address this on another CL.
|Done
|We should have a design doc.

How aggressively we can buffer is dependent to the resources of the device. It's a non-trivial issue given the fact OpenAL provides no input other than how fast it can process the queued buffers. The number of buffers you can create is also limited and is independent from the host device's memory availability.

I wanted to return back to this issue once I get the package running on Android, so can experiment with actual devices.
|Done
|Done
|Done
|Done
|Done
|Done
|Replaced it with time.Second.
|The total size of the source. Documented what the field is.
|Done
|Done
|Done
|Done.

It's obvious what an audio format is for those who are familiar with PCM.

No magic numbers are included, these represent raw audio streams.

&gt; In the 16-bit formats, which byte comes first?

Higher order bits always come the first.
|Done
|Done
|Ok, I'm returning.

Done.
|Done
|It automatically stops when you delete a source. The cleanup order should be deleting sources and then buffers, fixed it.

The number of the buffer IDs you can generate is limited, so I dont want to rely on the finalizer to be run. User should be able to invoke resource cleanup.
|Done
|It was missing a &quot;the&quot;.

Done.
|Done
|This discussion has come around so many times.

Some people (Brad) claims that they don't have access to a typical file system, so we should either accept an io.Reader or a byte slice.
|oauth2/google: fix decode error in Cloud SDK config

The first line is a title, don't use a full stop.
|I don't understand why expiry is a pointer now.
|This block is not readable.

if got, want := err != nil, tt.err; got != want {
    // errorf
}

if err != nil {
  continue
}

tok := c.initialToken
//...
|Needs a better name that hints &quot;Resource Owner Password Credentials Grant&quot;.
|URL = %q; want %q
|Close the body.
|res.Body = %q; want %q
|AccessToken = %q; want %q
|TokenType = %q; want %q
|You dont need to assert this case in this test case.
|Should we attempt to force umount and do some cleanup if a --force flag is set?
|This command may fail if max_part is not configured. But I think our base image has a max_part set.
|Avoiding to go through the system cache may improve the slowness.

What happens if you use oflag=direct with dd?
|The date header would be nice to use if we needed more precision. Clocks should be off by 1-2 seconds at most. 

A token is supposed to last for an hour usually, 10-20 sec offset is just fine.
|Done
|Done
|Done
|There should be such a plan iff the classic App Engine ever switches to context.Context. I would reject to wrap the appengine.Context with a context.Context. It's confusing.

The cloud package initiates its own Context from an oauth2.Config that requires a context. The user will need an appengine.Context to convert it into an context.Context and then convert it to a cloud.Context. This is gross.
|&gt; // The provided context must have come from appengine.NewContext.

Sounds better. Valid means not a nil, not an arbitrary context.Context but a context from appengine.NewContext.
|oauth2.Context is an empty interface. It exists for the documentation purposes.
|What does this error message say?

It should be saying  context.Context is required now.
|Done
|And I guess we need to get rid of the inner go directory.

GO_BOOTSTRAP should be &quot;/go1.4&quot;, not &quot;/go1.4/go&quot;.
|We can reuse androidtest.bash, this is pretty much what androidtest.bash is about.

Note that I wanted to start the emulator after I bootstrap and build for the android target. So we can fail faster if there is a problem with the build.
|Wrong license.
|gcloudCredentials
|Add account.
|Add missing JSON tags.
|Don't embed, compose. We don't want this type to delegate AuthCodeURL and Exchange to oauth2.Config. Do we?
|GcloudConfigFromCredentials creates an oauth2.Config from the gcloud CLI credentials.

Give a link to gcloud CLI. Explain that user need to go through gcloud auth to populate the credentials file, otherwise will receive an error.
|GcloudConfigFromAccount(account string) (*GcloudConfig, error)

Why do you need a path? The file is at a well known location.

Return the credentials associated to a user. Look up by data.key.account.
|Prefix error messages with &quot;oauth2:&quot;
|&quot;no credentials found in %q&quot;
|Is there a remote gcloud credential? Remove local.
|underlying http.RoundTripper
|context. The returned...
|} `json:&quot;credential&quot;`
|} `json:&quot;key&quot;`
|Why forward slashes on Windows?

filepath.Join(os.Getenv(&quot;APPDATA&quot;), &quot;gcloud&quot;, &quot;credentials&quot;)
|oauth2/google: unable ..

and everywhere.
|oauth2/google: unable to determine the home dir: %v; $HOME is empty
|oauth2/google: add config type to use Cloud SDK credentials
|oauth2/google: add config type to use Cloud SDK credentials
|want
|not quite readable.

Is it possible convert to strings to the following form?

`toor
[foo]
bar = hop
ini = nin
`
|_, t
|t.Errorf(&quot;ParseINI(%q) = %#v; want %#v&quot;, t.ini, got, t.want)
|will be obtained
|on the behalf of the SDK user.
|Error message may include instructions for gcloud auth login.
|TokenSource returns an oauth2.TokenSource
|Document that it will return the same token until it expires.
|Scopes are the OAuth 2.0 scopes the current account is authorized for.
|filepath.Join(os.Getenv(&quot;APPDATA&quot;), &quot;gcloud&quot;, &quot;credentials&quot;)
|google/gcloud: add config type to use gcloud CLI credentials
|2015?
|There should be a way to report which scopes the current access/refresh token is retrieved for.

func (*GcloudConfig) Scopes() []string ?
|I'd propose CloudCLIConfig. Cloud is such an overloaded name.
|is available at https://cloud.google.com/sdk.
|If &quot;&quot;, maybe we should return the first credentials from the list.
|Done
|expiry is never returned as a part of payload.

expires is a special case, a hack to keep supporting Facebook.
|RefreshToken is only valid for three-legged.

The duplicate code is fine, it makes it explicit what kind of payload to expect for each flow.
|Done
|The change that simplifies the App Engine build tags have been rolled out.

I'm improving he build constraints all around.

App Engine build tags: appengine
App Engine VM build tags: appenginevm

doc: NOT appengine AND NOT appenginevm
appengine: appengine
appenginevm: appenginevm
|Done
|Yes. Sent out the CL to see if you have any suggestions.

Any package that includes oauth2 or auth will add stutter.
|Done
|mobile: docker run should require a $GOPATH/src volume mount
|Keep the column size 80.
|Keep the column size 80. Fix the trailing whitespace.
|After comma, either use a proper sentence or a noun phrase.

If it's a proper sentence, it should start with a capital and end with a full stop. If not, it should start with a lower-case letter and should not have full stop in the end.
|Used
|Not readable.

    err = json.Unmarshal(slurp, &amp;t)
    return t, err
|You're making the requests on the behalf of the service account.

So, the object is not owned by your user account and therefore doesnt render the link.
|Smells like a Storage API bug. They should also give the project owners the ownership of the object regardless of who is uploading the object.
|I think read/write scope would be enough.
|Isn't it possible to determine it's not running on GCE depending on the metadata.Get response?
|How is this any better than json.Unmarshal([]byte(tokenJSON), &amp;res)?
|Include the token body to the error message.
|Done
|Done
|Done
|Done
|Why aren't you retrieving the next pages?

If you never have more than 500 instances (which is the default page size) in practice, add a comment saying so.

I'd also set the MaxResults to 500 to be more defensive against the API changes.
|which have a past &quot;delete-at&quot; attribute.

Explain that the attribute is a timestamp on a different sentence.
|Old VMs or stalled VMs?

Make the name more explicit.
|Trim the whitespace from the zone.
|Log that you're going to clean up a zone.

When things go wrong with such background jobs, you want to point out for which input it happens. A clean log is rarely helpful.
|Log this error.
|What does it mean to have an invalid delete-at attribute?

Isn't it at least log worthy?
|missing return or intentional?
|Log the error.
|OAuth 2.0
|Consider moving this block to the internal package.
|Keeping it as TokenURL but not renaming it to Endpoint?
|Add a link to spec?

OAuth 2.0 JSON Web Token (JWT) Flow
|know as the two-legged OAuth 2.0. OAuth is not OAuth 2.0.
|This is an internal-only use-case.

Why dont you move it to the internal package and avoid documenting the weird case that may confuse the users?
|Remove this.

a. t.raw = blah is handy enough.
b. You don't need a clone.
c. It is bloating the exported symbols.
|&gt; Tokens must not be modified.

What? You're looking at it from a single perspective. Tokens must not be modified once a token is used to construct a TokenSource via TokenSource.Token.

You should more optimally document this on the TokenSource interface definition.
|I think I know one.

Providers return refresh tokens only on the initial exchange, latter exchanges won't include a refresh token if the current is not revoked and the approval_prompt param is not set to &quot;force&quot;. So, a client needs to persist the refresh token and inject it into the newly exchanged tokens.

    t := conf.Exchange(&quot;code&quot;)
    userID = t.Extra(&quot;...&quot;)
    t.RefreshToken = // read it from db by user ID

This is a typical problem with sites that do &lt;login with provider&gt; flow. They need to initiate an exchange in order to identify the user.
|Can we have a generic http.Client accessor now?

func Client(oauth2.Context, *TokenSource)

Actually we already have NewClient? Why do we need to provide Client accessor from the config types?
|App Engine has its own in-memory caching. You should drop this.
|ditto
|You should clone the token.

Or do the following and document accordingly.

if rt, ok := src.(*reuseTokenSource); ok {
    return rt
}
|Done
|&gt; But what does this get us that the normal JSON package does not?

Nothing. Sorry, it was my ignorance. I missed the point that standard library was already handling byte slices perfectly. Maybe I couldn't understand the complaint on golang-nuts well and what huber@ has failed to do.

Reverted the changes, added JSON tags.
|This is not a standard, there is no such standard. I guess we need to document it, right?
|Do it for the 3-legged case as well.

https://go.googlesource.com/oauth2/+/master/oauth2.go#307
|I don't know what that proper type will be.

Providers can return arbitrary number of key/values including the access token, token type and expiry info.


A valid response example:

{
  &quot;access_token&quot;: &quot;abc...&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;expires_in&quot;: 3600,
  &quot;foo&quot;: &quot;bar&quot;
}


This is why we have Extra accessor.

token.Extra(&quot;foo&quot;) // returns &quot;bar&quot;
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|See my previous comment why I haven't fixed it.

If you have any further arguments, bring it on. You're continuously ignoring my inline questions in this CL. This review style is (a) not productive to resolve conflicts, (b) doesn't help me to reason in the suggested improvements.
|I want to test this crap and I want to do it without a build dashboard with two build tags.
|Done
|Because it's racy. It should be guarded optimally with a lock that is not so global, but then you're talking about improvements that are in the nanosec granularity.
|Done
|Done
|I like &amp;tokenLock{}.
|Done
|Done
|Done
|I've gone with the tokenLock.

I want to profile singleflight and switch to it for the sake of readability.
|Done
|But it is conflicting with oauth2.JWTConfig.PrivateKey in a way you can't tell whether it is asking for the raw private key contents (PEM, RSA, etc) or the contents of the JSON file.

I don't want to go with uglier options such as jsonData or similar.
|Done
|Done
|Why not a non-nil but empty context or even the Background? http://godoc.org/golang.org/x/net/context#Background
|Done
|Done
|Done
|Any naming suggestions?
|I used an io.Reader.

Done.
|Done.
|Default value is &quot;default&quot;. I dont understand what you mean.
|Do we have to care about getting the HTTP client from context.

This is GCE metadata server only, I'm not sure user ever wants to give us a custom client.
|A service account name. Did you see https://cloud.google.com/compute/docs/authentication#service_account_names?
|Should we let the user to use their own Client? See the question above.

Done.
|This is funny and probably needs to be done once.

But js.conf is mutable. Should we parse the key each time or are we ok with dirty parsed keys?
|Done
|Done
|Done
|Done
|Fixed.

More tests needed.
|In theory, yes.

But in practice, there is no service at Google that doesn't require a scope. The request will be rejected. We don't need validation on the client-side.
|It was personal preference.

I personally think it enhances the visibility of the value is being nil.

Done.
|Grab it from wherever you want.

I'm not going to couple this package with gcloud-golang or any other.
|JSON key works with a byte slice now.
|Reverted.

I don't like the boilerplate required to construct a client. It should be as simple as providing a context and having a client back.

Why don't we do the following and let the user tweak the client once it's constructed?

    
    func AppEngineClient(ctx, scope...) (*http.Client)
    

It also applies to the Compute Engine case.
|oauth2.Transport now finds out who's its base RoundTripper from an oauth2.Context.

Less cognitive dissonance for the user.

PTAL
|Things begin to become uglier with App Engine.

Transport doesn't know about its env, therefore can't set a good default for the base RoundTripper.

Maybe we shouldn't have a AppEngineTokenSource accessor at all.

What about func AppEngineTransport(oauth2.Context, scopes.. string) (*oauth2.Transport, error)?

Ditto for the Compute Engine token source.
|Sorry

Done.
|Done
|Done
|Obsolete now.
|Done
|Done
|Remove.
|We may also say if it's a zero value, we don't attempt to refresh the token automatically. In the zero value case, if the access token is already expired, the request should fail with a 4xx.
|We don't return a Transport anymore, it may be confusing to say so.
|I didn't understand this sentence.
|You should better say it displays the consent dialog even if the user has already permitted the application.
|an authorization code into a token
|The page being directed is called Redirect URI. Use the spec's terminology, it makes it less confusing for the user.
|Define a key.
|Done
|Done
|Done
|Done
|Done
|Done
|If there are more than two callers ever that require error handling to exit, I'd bring the old runOuput back.
|We might keep the name lowercase. Apps that are serious about branding will have their own AndroidManifest.xml.
|I believe you can use strings.Title.
|Done
|Done
|Done
|We build for the darwin/arm and darwin/arm64 in the temp GOROOT directory. We need to move the pkg/darwin_arm and darwin_arm64 to user's GOROOT.
|Done
|Done

Looks so much better now.
|Done
|Xcode builds are not achievable on other platforms, removed the filepath.Join invocations.
|The project will be invisible to the user, therefore it is OK in the scope of gomobile to regenerate the project folder.
|I added a TODO as a reminder to myself to investigate it.
|iOS 9 binary size announcement relaxed the size limitations. Is there another announcement that I missed?
|Neat, done.
|This is what Xcode generates for the resources listed at https://github.com/rakyll/go-xcode. The object IDs are just unique reference numbers.
|Done
|It requires too much work to break the current abstractions to implement your suggestion, totally unnecessary for this utility tool that will be only used by Go contributors.
|GOIOS_APP_ID should be prefixed by a team ID. I don't know why we auto add it as a prefix. Is an app manageable by multiple teams?

GOIOS_APP_ID=$GOIOS_TEAM_ID.namespace is the simple case.
|The fully qualified app IDs contains the owner as the prefix. I am just documenting sample values for these for the most basic case. I don't know what these values truly represent and don't want to investigate all the possibilities in the scope of this CL.
|Hmm, I am not familiar with the lifecycle of these callbacks, therefore I don't want to recommend anything but waiting for David for a comment.
|You can remove this test case. It's covered by TestTransportTokenSourceTypes.
|tests := []struct{
		key  string
		val  string
		want string
}{ ..}
|_, tt := range tests
|You can keep the message shorter.

Authorization header (%q) = %q; want %q
|It's also suggested on the original issue that we need to transform &quot;basic&quot; to &quot;Basic&quot;.
|Must be a link.
|Must be a link.
|Btw, are we allowed to use periods on the first line?

As far I as I understand, the first line is the title and therefore it shouldn't end with a period.
|You can test bindings by running `gobind` against the package.

Could you write down the full command to explain how to generate bindings manually?
|Set the GOPATH, check `go env`.
|If not set and the go binary is not in the $PATH, Gobind task will fail.
|Set the absolute path to the gomobile binary. If not set, Android Studio will use $GOPATH/bin/gomobile as the default.
|You are using a mix of tabs and spaces for indentation.
|Trailing whitespace.
|I am not sure this is what the expected behavior should be? Clients with nil token sources must return an error rather than having an empty Authorization header.
|ditto for this one
|I am confused. The raw could be only populated by the oauth2 package due to the fact that it is not exported. The package never sets its value to something arbitrary such as tc. Hence, the test case is not valuable.
|raw will never be set to these values. Why do we test against them?
|v is a value, therefore *v is an invalid indirect of v. The text seems to be correct, what are you trying to fix?
|There was also copy/paste error. Calling the right underlying function, C.alGetBooleanv, now.

I will send out a different CL to remove all the casting when passing slices.
|I am confused because I don't know what s stands for :)

I'd prefer &lt;k, a&gt; or &lt;host, addr&gt; (not one or two runes but not an overkill and self-explanatory).
|Why not

    for host, addr := range addrs
|The comment is misleading. You can make JNI calls from any thread, but some calls require to be made from the main one.
|I had an impression it has to to run on the Java UI thread and there is a limitation that the JNI access must be done on the UI thread.

The comment could mention that JNI calls must be done on the exact same OS thread which should be attached to the JVM. Your second paragraph above is a good explanation of the internals. Would you consider adding it to the change?
|We need a new event such as touch.TouchCancelled to represent this case. Cancelled touches must be distinguishable.
|Done
|We can return certain errors before starting to stream. prepare, Seek and Stop could be blocking. The only method that needs its own goroutine is the streamPlay.
|I'd rather like the implementation to look like;

p.mu.Lock()
defer p.mu.Unlock()

if !p.prep {
   if err := p.prepare(0); err != nil {
       return err
   }
}

go streamPlay()
return nil
|Remove if p == nil { return }

streamPlay will never be called if p is nil.
|Remove log, return err.
|The implementation must look like:

p.mu.Lock()
defer d.mu.Unlock()
if err := p.prepare(size); err != nil {
   return err
}
go streamPlay()
return nil
|Does Current work at all after this change?

It was calculating the current playback position by looking at which buffer is being processed and what is the player's current position within the currently processed buffer. Since the number of buffers are restricted to 5, the current playback position will always somewhere between 0-5 buffers.
|Total won't work as expected. Previously, prepare was reading the underlying ReadSeeker and was counting the bytes. Now, this job is handled by the streamPlay.

You need to provide a new implementation that reads all the bytes and counts the bytes.
|Updates golang/go#10329.
|Please fix the broken example.
|On the other hand, we don't want play to block until the playback is finished. Is it possible just to log the streaming errors rather than returning them?

That's what Android's MediaPlayer do -- just logging the errors.
|h2Mode
|h1Mode
|Why not

h1Mode = iota
h2Mode

and fix the rest of the test base while you are there?
|You are aliasing boolean values. Fine. But if the mode is binary, why two consts? Why not just h1Mode and !h1Mode? If it is not binary, why a bool? I am not strongly opinionated about the state of the things but it felt awkward hence I made my comment.
|Ack
|h2Mode
|h1Mode
|h2Mode
|This never passes. 431 (Request Header Fields Too Large) is the equivalent of the HTTP/1 413. Should we test against 431 for http2 or should I revert this change?
|Done
|Done
|Got it.

Done
|It is safe to keep it. But I modified the test to use context.TODO instead of nil.
|Agree. Having io.Seeker separately listed is also better for the godoc. Less clicking to read about Seeker and Reader interfaces.

Done
|Panic here?
|Is it  a legal Java package if the package name starts with _?
|What happens if the go package name is a reserved Java keyword?

`package abstract`

It will be converted to org.golang.todo._.
|I don't think underscores are desirable. Why not prefixing with &quot;go&quot;?

org.golang.todo.goabstract
|Updated the message, hope it is clearer (not more confusing) now.
|There is no non-deprecated URL :-/ goauth2 is deprecated before Google Code.
|I don't know why you don't understand what it is saying but it is a server issue. See https://github.com/golang/go/issues/13213.
|Unshallow repos. I have unshallow repos all over my GOPATH and `go get -u` on such repos are failing.
|Do you have to return?
|&quot;https://login.microsoftonline.com/&quot;

Every other entry ends with a slash. Let's keep it consistent.
|Lowercase the title.

jws: add EncodeWithSinger
|Isn't Signer generating a JWS signature? It is not signing the given data but generating a signature for the given payload.
|EncodeWithSigner encodes a header and claim set with the provided signer.
|Is there an example of a signer that works on App Engine?
|Sorry, it was the legacy text from the original authors :-) Thanks for fixing it while you are there.
|The existing docs for this function is misleading.

Encode encodes a header and claim set using crypto/rsa.SignPKCS1v15 with the given RSA private key.
|It is fine to keep it.
|Typo. s/EncideWithSigner/EncodeWithSigner.

On the other hand, we don't have to mention internal implementation details.
|I kept the names in plural form because I was guessing the usual use is going to include more than a single Buffer.

In most use case, users will work with ring buffers and likely to queue/unqueue multiple buffers.
|Done

Not sure whether we should put it in the package docs or here.
|Done
|Done
|But it will bring the misleading APIs back for the reader of the internals. enable(s, t, delay) still hints that sensor can be enabled over a specific sender.
|It is not the lower level implementation's concern. enable functions should never care about sender's state. It must be all guaranteed before enable function is even invoked.

Added docs.
|It is excessive to guard sender all through the enable function. I made a change that guards sender only when required.
|What about keeping Notify and panicing if user is trying to set it to something else, as we also return an error from Enable is the sender is nil?
|Done, PTAL.
|We may use Register rather than Notify but Notify is self-documenting. Register is vague in this context.
|// hookOpenErr simulates connection failures
|I'd rather name it as openHookErrFn
|if err := hookOpenErr(); err != nil {
   return nil, err
}
|put the constants on the top of the test.
|Shouldn't you fail this test if 100 ms passed and not all execs are executed? You are waiting for each error to arrive at least in 100 ms.
|Could you print that it took 100 ms passed, even though 10 ms was expected for all executions to complete?
|Done

Sorry, we shouldn't write to stdout unless -v is set.
|The CL was not ready for review. The error message is changed.
|Done
|Done
|Wished that I had an answer. I amended to the first patch to update the commit message. Can't remember the initial state of my branches, so no idea how the other branch is being merged but fixed now.
|The TODO was mentioning a ring buffer. The strategy was to allocate 4-5 buffers and implement a mechanism to unqueue as the buffers are processed (played). Once the buffers are processed, we can fill them with new data and queue again. It will allow us to allocate a limited number of buffers rather than buffering the entire audio stream in memory.

Your changes doesn't check whether the buffer is played or not. If overrides a buffer that might not have been played yet.
|I don't know what to do with that error? Log it?
|It is only returned if there is no looper for the current thread. In our case, it will never happen.

And the Android platform already logs an error message:

LOGE(&quot;ALooper_pollAll: No looper for this thread!&quot;);
|Done
|Looking for ways to fix the redirect that doesn't handle the query parameters currently.
|Done.
|Done
|Done
|Done
|According to the history, Go's DNS resolver had always this bug.
|Done
|Done
|Done
|Done
|While you are here, could you improve the error message?

(&quot;jws: invalid Exp = %v; must be later than Iat = %v&quot;, c.Exp, c.Iat)
|It must be golang/oauth#151.
|You can remove the description. We don't often reference commit hashes from the descriptions due to the fact that they are long and makes the text less readable.
|Updates golang/oauth2#151.
|Fixes golang/oauth2#151.
|Sorry. Thanks for looking it up, I was not considering that iat was standing for &quot;issued at&quot; and was assuming its value has do with the expiration of the token. My comment above makes no sense.
|I think you shouldn't break the existing if condition in this block.

iat and exp must always be related to each other. In your case, if iat is set to zero but exp is non-zero, iat is set to now but the exp stays the same. It is going to break the generated signature.
|jwt: allow setting...
|Please wrap the lines before the 80th column.
|iat and exp must always match. With this change, they may have irrelevant values which will result in an invalid signature.
|Should be Expires a time.Duration?
|bitbucket: add end points
|Remove the signed-off-by message. We consider the author of the commit.
|Done
|Done
|Done
|Done
|Done
|Yes, sorry. It was an overkill.
|Done.
|Done
|Done
|Done
|There were two blank lines, I deleted one.
|If the delay is 100ms, it is going to be 100000, 200000, 300000, etc. I hope this explains :)
|It is a bug that I was not setting the interval. See https://go-review.googlesource.com/#/c/14251/. I was replying to you as if I was setting the value.
|The timestamp is the time event has occurred, stamped by the sensor child. It is a unique ID.

I am not going to get 0, 52, 105, etc.
|lastTimestamp is not time.Now(). It is the event timestamp. Each event coming from the sensor has a unique timestamp.
|We will likely to get 20ish events but will discard 10 of them because we check the timestamp and filter out the duplicates.
|Yes, sorry, I will return an error value if sensor is not found and that's why I was keeping the signature as it is.
|Done
|Done
|Done
|There are no typos in accelerometer here.
|Done
|I am trying not to poll continuously not to drain the battery. Sleeps allow me to poll as frequently as the user's delay requirement.

I sleep for d and check again if there is a new event. If there is not a new event, I sleep for and additional d/2 before the next check. I must slightly less sleeper than d on the first try.

I am modifying the loop to always sleep for d/2. Not the most CPU-friendly strategy but the simplest and accurate solution in the scope of this CL.
|Done.
|Doing what Hana suggested.
|Ack.
|No. The values must represent the gravitational force applied to the device in all directions, we shouldn't need to have a unit conversation but iOS values are ranging between [-1, 1] rather than [-g, g].
|We import this header file twice already. darwin_armx.go and darwin_armx.m. Why to double include?
|Sorry, done.
|The symbols are both required by darwin_armx.go and darwin_armx.m. Otherwise, I wouldn't create the header file.
|Done
|Right.
|Done
|The current model only allows the events to be consumed from the main package. Enable and disable should only be invoked by the main program. Ref counting is not practically useful.
|Sorry, done.
|Done
|Done
|Done
|Done
|Done
|I am adding a TODO, we debated about the type of timestamps initially when the package first came around but we can revise our conclusions.
|I would like to introduce three event types with named field.

type Acceleration struct {
     Timestamp ...
     X, Y, Z float64
}
|Done.
|Done
|Done
|Done
|Ack
|Done
|Done
|done channel is back in the for loop. The proxying goroutine is closing the output channel and i cant close a closed channel on the next iteration. Once polling will be handled by the proxy goroutine, it won't be necessary to allocate a done channel. I am reverting this micro optimization back.
|I will delegate the polling to the proxy channel. Added a TODO, move the done channel out of the for.
|Enabled notmobile.go for windows.
|Bad merge, it is back now.
|Done

The interface needs to move somewhere else, adding a TODO.
|Done

Manager type will be gone. I haven't thought of cleaning up bits related to manager type on this CL, but done.
|I have no local changes in GoNativeActivity but running go generate against $ANDROID_HOME/platforms/android-23 results in the change made in 54c0a36. As Hana mentions, the dex string might have been affected by the SDK version.
|A similar constraint must be applicable to the current Android backend even though NDK is not explicitly warning about it.

We must just document about the multiple Manager use-case and its implications rather than optimizing for the multi-Manager model.
|Great idea. If sensor events can only be retrieved through app.Events, it limits the sensor events to be consumed by the application's main package. It automatically limits the third party packages not to initiate new sensor.Manager instances but to work with event data that will be provided by the main package.
|Done
|Why do we redirect the output to nul?
|The default should be true, not needed to set allowBackup.
|Keep docs between /* */, this is a Java file.
|We should add some white space around the command line to make it distinguishable from the text above. What about?

/*
 * go.Go and go.hi.Hi are included in the output of gomobile bind command.
 *
 *    $ gomobile bind golang.org/x/mobile/example/libhello/hi
 *
 */
|I am clueless about gradle. Why do we need to check in the gradle wrapper?
|Cant we just put it to the top-level .gitignore file? There are so many gitignores under libhello.
|Done
|A more conventional styling would have given me &quot;goCreateManager&quot;, but since &quot;go&quot; is also an English word, capitalizing it distinguishes as a name that stands for Go, programming language.

Go_createManager is a shorter alternative, but iOS sensor APIs have similar terminology, and therefore &quot;GoAndroid&quot; is a good distinguishable prefix to grep Android-related implementation without having to have much context about the line.
|Underscore and camel case are not unusual.

See ASensorEventQueue_getEvents.

If you find GoAndroid long and hard to read, I can shorten it as Go.
|Done
|Done
|Done
|It must be &quot;// +build !android darwin,amd64&quot;

But I dont know why it doesnt work. NOT android OR (darwin AND amd64).
|If the package name is in the hostname.tld/path format, we can reformat it in the tld.hostname.path.
|What happens if the users has a package name with all illegal characters, such as an emoji as a package name?

We might want to return an error if the return value is an empty string.
|Done
|Missing license header.
|We don't have a proguard-android.txt in this directory? Is it loading a global default?
|GoBindExample?
|License header.
|License header.
|License header.
|Missing license header.
|Missing license header.
|GoBindExample?
|Missing license header.
|will create a static framework bundle.
|Why do you set -o? Generate it in the pwd.

gomobile bind -target=ios golang.org/x/mobile/example/bind/hello
|Open the Xcode project by double clicking on bind.xcodeproj.
|Are there any other architectures iOS SDK supports? If not, we can remove this notice.
|Missing header file.
|remove the line?
|Fixes #11889.
|Done
|exp/audio: fix inability to use mono 8 format
|There is tab on the line instead of a space.
|Simplify the description:

There is no way to distinguish an unknown format from Mono8 because Mono8 is zero. The current CL fixes this issue by starting the format constants from iota + 1.
|You don't need to export the zero value, start with iota+1 instead.

const (
   Mono8    = iota + 1
   Mono16..

)
|Remove UnknownFormat.
|Remove UnknownFormat.
|0: &quot;unknown&quot;
|Keep it as Unknown.
|Done
|Done
|While I am there, I have switched to a template, will send other follow-up CLs.
|Those improvements should be different CLs:
- Auto-generation of the bundle identifier from the package path.
- iOS simulator support.

Until those CLs don't exist, I don't see value in switching from formatter to templates. If you are suggesting that these changes must be contributed, I am glad to send two other CLs today.
|Isn't seq.h required as well?
|Shouldn't you also copy the seq.h to the output directory?
|Done
|I am leaving this CL open and willing to hear some feedback about what we can do for make.bash. I agree that this CL is not ideal.
|&gt; It's confusing.

The way make.bash works is confusing. I don't have much background why it uses stderr but probably it is to allow a bash script to redirect the #### headers to a different output.

The current go init behavior is not acceptable. We can't simply say the user to re-run go init with -v and send us the output. The failures might not be deterministic and reproducible.
|Done
|Done
|You will be able to OpenDevice twice. Each library will be using the global context and device in the al package. Switching back and forth between multiple contexts are not allowed.
|Done
|There was a merge conflict. Fixed it.
|Missing license header.
|Use space tabs.
|Is listening to config changes required?
|must include the permission to access network.
|customize app behavior, such as permissions and app name, by
|This will only work when the app first loads in to the memory. Invoke checkNetwork on start instead and it will check the reachability as the apps get into the foreground.
|defer close(determined)
|ok = false

If you are going to move the checkNetwork to on start, you need to clear the previous value.
|If I do so, it will build the package first (which takes 4 secs), and exit with error.
|an
|loads the shared library
|main.main
   app.Main

Too many mains.

Much saner:

func main() {
   for e := range app.App().Events() {

   }
}

app.App()

Too many apps, I can't think of a better name for App.
|ChangeNone is a poor name, it is rather a change-in-effect.
|ChangeBegin

Change cannot be turned on. Change in an event that happens. It begins and ends.
|ChangeEnd
|I'd prefer touch APIs to have their own package called touch. event.Change is vague. There is a change in the event? Which event? We have several other event types in the library and will be confusing to the users if Change doesn't explicitly says which event type it might be applied to.

There is also a related discussion at https://github.com/golang/go/issues/10444 about the reorganization of the event types.
|gomobile build -target=ios golang.org/org/x/mobile/example/basic.

This is why I don't like comprehensive CL descriptions, they are not editable.
|Done
|I was able to test it on Android.
|Done
|Done
|Done
|Done, removed NoContext.

I don't like to fact we need a (Context c)Valid() now.
|No comma on the last element.
|AL_INIT_RESULT_OK
|AL_INIT_RESULT_CANNOT_ATTACH_JVM
|AL_INIT_RESULT_BAD_JNI_VERSION
|AL_INIT_RESULT_CANNOT_LOAD_SO
|ALInitResult
|&quot;al: cannot initialize OpenAL library&quot;
|Are you using Go 1.5 to bootstrap?
|Done
|Need to cp -R if the assets dir exists.
|Done
|Done
|Done

Replaced with a better message.
|You are running 0 for JNI-related error cases. I would prefer the message to be more generic. Currently, it reads like .so file cannot be found at the path. What about just simply saying &quot;couldn't dlsym %q...&quot;?
|It is bad because it will panic only if garbage collection happens and it may never happen. If GC is so common, why I didn't come across the bug reported at https://github.com/golang/go/issues/10636 while developing the audio package? I have spent an entire two weeks testing it on Android.

I would not like to depend on possibilities. Pinning is safe, the memory cost is low and is the simplest solution.
|Crashing if a context is leaking is the worst possible attempt to teach the user they need to cleanup to avoid leaks.

I would prefer to pin all of the living context instances (patch set #1 on this CL) and keep them in memory until the user calls Destroy. CreateContext must document that contexts should be freed by calling Destroy.
|I am not convinced we need finalizers and pinning either. There has been a long discussion on https://go-review.googlesource.com/#/c/9519/ where I basically supported the idea of not having any finalizers and pinning. David's argument was not to leak any underlying C resources and having a consistent 1:1 relation between a Go instance and a C resource all the time. I don't believe it is any valuable or useful. If users want to leak, they will leak. I am removing the map.
|&gt; Either the program code keeps a reference to the *Context, or it does not.

See the bug report at https://github.com/golang/go/issues/10636

If the user don't keep a reference to the Context proxy or the code becomes unreachable, there is risk of Context being garbage collected. Context objects are mostly long-lived, therefore I pin every context instance.

The user is supposed to call Context.Destroy to free them. If they don't call it, the context and its underlying C resource won't be freed and the Context proxy object cannot be GC'ed.
|Done
|No. See https://github.com/golang/go/issues/11385
|Done.

The bad parts of Go.
|I documented that the calls are not safe, and explicitly overwritten where it is not true. OpenDevice and CloseDevice are safe for concurrent use.
|We don't make any thread-safeness promises at the al package.
|It is the implementation's fault, not the comment's.

Done.
|Done
|Done
|It will be awkward to use a zero-value Context on MakeContextCurrent.

alcMakeContextCurrent(nil) is necessary call. A current context cannot be destroyed. If user is not switching to another context, he/she will set the current context nil and destroy.

I would prefer the keep the APIs with a pointer type to make MakeContextCurrent(nil) look nicer.

I am improving the docs saying Destroy doesn't work only on a &quot;current&quot; context.
|It might be even better.

audio.MakeContextCurrent(NoContext)

I will return back and modify the APIs.
|Done
|Not doing because MakeContextCurrent(nil) is an important case we should support. Read the comment above.
|Done
|It is not a good idea to keep these pointers global maybe. I didn't want to refactor any further, but agree that flags need more work.
|obsolete
|Done
|Done
|Done
|I wouldn't rely on a small set of observations when it comes to identifiers. As long as it's not documented that it's a small number, we don't assume so. The behavior may vary or may get broken in the future.
|What about renaming to NewInClusterClient even though it is long ? It seems to me that the the feature is named after &quot;in cluster config&quot; everywhere else in kube.
|If this is not a global setting and needs to be applied only during Tx, we should maybe make it a Tx argument.
|Chip Select is shorten as CS. We should capitalize both.
|SetCSChange
|hdrJSON?
|It would be nice to fix the style here while you are there.

t.Errorf(&quot;want no error; got = %v&quot;, err)
|t.Errorf(&quot;got error = %v; want none&quot;, tt.err)
|see the clientcredentials package at https://golang.org/x/oauth2/clientcredentials.

Add the protocol prefix, so the godoc can render as a link.
|2016
|I'd say these examples are very hard to read and they look like actual programs rather than godoc samples.

What about trimming them down?
|defer cancel() here
|Don't sleep or use a ticker, rather do an actual job.

Otherwise, this looks like a WithTimeout example.
|Looks a bit complex to read. What about using the other example on the conflicting CL maybe? https://go-review.googlesource.com/#/c/27405/
|It is good practice to name the context keys with a key suffix.

What about `type favContextKey string`?
|if v := ctx.Value(k); v != nil {
  // print 
  return
}

fmt.Printf(&quot;key not found: %q\n&quot;, k)

else branches are not much loved.
|Done
|Went for the second option.

Done.
|i left it out because -v is a build flag and this line is getting extensively long now.
|Done
|I don't think this is something we should merge.

Given the necessity of calculating the absolute paths for the symlink's itself, unixAbs will change the behavior of Abs in a broken way.
|T and B were random.

Fixed them to be O and N.
|Correct, fixed.
|Done, thanks.

It might be good to add a few reference examples to this package.
|Done.
|I know, it also looks like an example how you should implement timeouts  and might be misleading :(

It is hard to find a sensible example though.

I replaced the example with a streaming service fetching example, which is a common use for cancelation, but it looks pretty specific. I am open to better ideas.
|Done
|Done
|Done.

Also slightly changed the format to match the standard library style.
|Done
|Done
|Done
|Done
|Example will still be built. There is nothing to assert, hence not making any assertions based on the output.
|Done
|Done
|Done
|Done

I used present tense to say go files are ignored.
|Switched to past tense, since I realized it makes so much more sense.
|Done
|Done
|Done

Thanks
|This example is too big to be a snippet, have you considered contributing it to https://github.com/golang/example?
|Short distinctive suffixes are more readable.

This will be displayed as New (ChecksummingAFile). Pretty ugly. New (File) is good enough. Revert it back to ExampleNew_file.
|crypto/md5, crypto/sha256: add examples...
|The description repeats what the title says. Remove.
|Simply file.txt?
|Remove new line. defer is contextually within the group of opening.
|&quot;%x&quot; other samples don't have new lines. Let's keep it consistent.
|ditto
|ditto
|ditto
|Done
|Reworded
|Done
|Done

I reworded the message and added more certainty, because it is the expected behavior if everything goes right.

Should I insert the probability again? It seems like it is common sense to reason Wait100Continue is not going to be called every time and it is documented so.
|Done

Sorry, I did this mistake twice in a row.
|Done
|Done
|Done
|Done
|Done
|Too many commas in that sentence already,  it is now replaced with an em dash.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done.

Thanks.
|Done
|Done
|Done
|Done
|Replaced it with http.DefaultTransport.
|Done
|Done
|Done
|Done.

Take another look now.
|Done
|Done
|Done
|Done
|Done

Passive form of enablement is hard on this one. How does the current sentence sound?
|Done
|Done
|Done
|Done
|Done
|The Go project is in American English. http is pronounced with the &quot;eig&quot; sound.
|Done
|Done

Fixed other it-&gt;theys in the sentence.
|used, httptrace.ClientTrace in the sentence, not looking terrible anymore.
|removed.
|fmt.Printf(&quot;DNS Info: %+v\n&quot;, dnsInfo)

and

fmt.Printf(&quot;Got Conn: %+v\n&quot;, connInfo)

Which snippet are you looking at?
|Done

Dropped &quot;currently&quot;. It was unnecessary and made that sentence a paragraph of its own.
|Done
|Done
|Well, yea. What I meant was a shout out to the community projects.

What about the new sentence?
|ditto
|It is delegating the round tripping not the request instance.

Reworded.
|Done

Reworded a bit.
|Done
|No, no.

Brad's feedback is custom RoundTripper implementations can call these hooks. http.Transport is just one RoundTripper that comes with tracing support, but it could be anything.
|Done
|Done
|Done

Rewrote it.
|Done
|Yea, let me rewrite this poor sample.
|Done

Not on purpose, but copy paste from Google docs :/
|Done
|Done

Using &quot;the`httptrace` package...&quot;
|Done

This was just wrong.  http.RoundTrippers determine whether things should be reported.
|I called it a &quot;client trace&quot;, but it makes no sense. Not sure what to call.
|Used &quot;client trace instance&quot;. Not sure that's the best naming.
|Not this is correct. I broke the long sentence into two. It is easier to digest now.
|Done
|Done
|Done
|Done

Just added an article.
|Done
|Done
|Done
|Log messages are capitalized all around.

Capitalized here too.

&quot;Could not get...&quot;
|Move the TitleNotes under Authors. In the document, that's the order where we expect to see the title notes.
|It is not clear why we have to filter the title notes first before we parse the header, authors, etc.

It might be good to comment here is that extracting the titles notes should be before the other parsing. Because, other parsers are not ignoring lines starting with &quot;: &quot;.

Or making parsers ignoring lines starting with &quot;: &quot; would be ideal for the sake of the maintainer of this code.
|Done
|Done
|Done
|Done
|Done
|This is not about just redirection of requests, I am just giving a link.
|Done
|Done

s/in/from was unnecessary, reverted it.
|I'd copy the scope inside jwtConfig.

It is not clear whose responsibility it is to copy. It should be a Config or jwt.Config construction time concern.
|Until now, JSON key file was strictly a service account credentials file. Now it represents two distinct files: service account and user credentials files.

We need a better explanation of the case.
|We maybe can remove the mention of the JSON key file but say it represents a &quot;credentials file&quot;.
|I'd just say

// serviceAccountKey or userCredentialsKey.
|I'd move ClientSecret and RefreshToken under ClientID.

ClientID, ClientSecret and RefreshToken is used to do the 3-legged auth whereas other fields are used in 2-legged.
|&quot;client_id&quot; is present but not used in the 2-legged auth. Hence, I'd not care about its existence. There are many other fields in the file such as &quot;project_id&quot; in the file but we simply avoid them because they are not meaningful in the scope of OAuth2.

I think it is ok to group ClientID with ClientSecret and RefreshKey, given we are only creating logical groups to document which fields are related in a specific auth flow.
|I'd return the error here if f.Type != serviceAccountKey.

If f.Type != serviceAccountKey, we will construct a jwt.Config with zero values.
|panic is unnecessary. Let's keep the things the way they are.
|Credentials is a very overloaded term in this package. It stands for the 3-legged web flow credentials file, a service account file, application default credentials file. Can we find a name more specific to applications default credentials?
|DefaultCredentials sounds good.

&gt; The thing is, this could also be encapsulating the GCE metadata

Are we desiring to provide more metadata from this package. We already have https://godoc.org/google.golang.org/grpc/metadata

IMHO, we should keep the scope to the the identity and auth within this package. What else could be exposed from here?
|Credentials instances are likely to be long-lived instances. What about providing a TokenSource accessor, so the users can create new TokenSources with the current context?

    // during initialization
    dc := google.DefaultCredentials()


    // at the actual sites where a token source is required:
    ts := dc.TokenSource(ctx, scope)

Then, we can mark the google.DefaultTokenSource as deprecated and tell users to switch to Credentials.TokenSource.
|Good point. Ideally, if we want to redesign this package, there is still no good solution where we should ask for a context due to the background refreshing.

I leave this one to you.
|Ideally, we would like to make ctx accepting APIs to live short
|Can we just return *Credentials from this and making Credentials to implement oauth2.TokenSource?

Then, we don't have to populate the APIs.
|Always run the tests with the race detector on. It will clarify the doubts :)
|Oops. I typee this wrongly on the previous patch. Use t.Fatalf.
|You don't need a decoder, we have the json data buffered in memory already. Simply do:

if err := json.Unmarshal(gotjson, &amp;got); err != nil {
   t.Fatalf(...)
}
|rename to TestJWTFetch_Assertion
|Remove res := make(chan string)

Add

var assertion string
|set the assertion to a variable.

assertion := r.Form.Get(&quot;assertion&quot;)
|tok, err := conf.TokenSource(context.Background()).Token()
if err != nil {
   log.Fatalf(&quot;Failed  to fetch token: %v&quot;, err)
}
|t.Fatalf(&quot;assertion = %q; want 3 parts&quot;, assertion)
|t.Fatalf(&quot;invalid token; err = %v&quot;, err)
|Please decode.
|Can we add a test?
|Done
|Done
|Done
|Done
|Reworded this on the wiki page.
|Added to the new wiki page.
|Moved this section to the wiki.
|What about just telling them to edit their bash_profile?
|I am not sure we can document this for each shell but we can give this as an example.
|I updated it with the instructions for Windows 10.

They changed its place a few times, not sure whether we should document it for each Windows version.
|Done
|It is System variables. Highlighted the names.
|Done
|This is too optimistic.

I have seen so many cases where the community suggests workarounds rather than encouraging the users to file issues.

We should rather say they should file an issue if they are confident that it might a bug after the initial discussion.
|Give some context why a change requires a proposal on this doc.
|Want to send this in a different CL?

Let's keep the CLs atomic and containing what they describe so they are revertible.
|go/types: correct package doc typo

Start the description after package prefix with lowercase.

Don't use past tense in the description.
|Remove this, no need to talk about which file you have changed, that information is already in the diff.
|Done
|Done
|targeting
|Maybe reword it slightly to give more context that this is to set up toolchains targeting the specified ndk platform level or newer.
|Is it possible to return the error with a sample?

&quot;invalid ndk platform name. name should be in the format android-n&quot;
|what about -ndk rather than -ndk_platform?

I am looking for other uses of _ in flag names in the go tooling. Is there any other occurrences of underscore?
|Hint: Iterate over _z_ and return the final value as the answer:

	z -= (z*z - x) / (2*z)
|Hint: To declare and initialize, ...
|tour: make Newton's...
|Hint:
|by picking a starting point _z_ first, and repeating:
|&quot;and returning the final value of _z_ as the answer.&quot;

sounds easier to follow.
|repeating the calculation implies writing a loop already.

What about

&quot;To begin with, repeat the calculation 10 times...&quot;
|What about leaving this to the reader? IMHO, The formula form is readable.
|I think keeping both could be the ideal rather than moving the formula all together. If the sample is too mathematical, maybe we should consider replacing it with something else all together.
|missing license header
|If empty, a temp directory is made.
|dashURL?
|Make sure we are handing the case where the repoURL contains a trailing slash, e.g. in the format of https://go.googlesource.com/oauth2/.
|s/r/repo? I was looking at the next lines and asking why http.Handle accepts an io.Reader.
|&quot;%q&quot;
|what happens if the ring buffer is full, e.g. r.ent[r.head] != 0?
|Do you mean a new instance of the git repository?
|should we return here or iterate over each &quot;dest&quot; line to see if it's matching the dstURL?

It seems like git allows different URLs for fetch and push. 

$ git remote -v
origin	git@github.com:rakyll/reviews.git (fetch)
origin	git@github.com:rakyll/reviews.git (push)
|why not just git remote add? We don't want to damage the consistency of the config file. The git client already has a good implementation.
|s/got update tickle/got update.

Tickle seems to be an internal terminology here.
|poll timeout?
|add license header
|Done
|Done
|It might be nice to initially say mutex profile is available from the runtime/pprof package for general use, https://beta.golang.org/pkg/runtime/pprof/#Profile.

Additional to that, go test also provides -mutexprofile flag. And you can capture mutex profile during testing/benchmarking. Then, begin the `go test` example.
|go test -bench=. ...
|missing full stop in the end.
|What about giving a sample `go tool fix` usage?
|http.Get(&quot;https://golang.org&quot;)
|we can mention about the new mutex profile.  see https://rakyll.org/mutexprofile/
|Fixed the commit message, this is a partial fix.
|This is too much for an example, it is quite ugly to embed such a big bulk of semi-test semi-example reference.

The godoc improvement is quite enough IMHO, we should better only give a few odds examples and that's enough.
|To be honest, talking about type declarations in the scope of structs on this slice is not easy. At this point, the learner is interested only on the first sentence and how they can use a type declaration to name it. We shouldn't shift their attention too much to the type declaration itself.

What about rather saying, The `type` declaration introduces a new name, `Vertex`. You can use this new name to identify the type of all values of this struct.
|I would love to have a better name for the file variable.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I reworded this sentence, does it sound better now?
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|I reworded it, please tell me if it makes more sense or requires more rewording.
|I'd keep this as it is.

Enterprise is a small subset of all organizations we are interested in. We are specifically looking for helping organizations running by their own rules and see how much of a better fit Go can be. Enterprise is probably the biggest subgroup within this group, but we won't ignore the feedback of other high impact organizations just because they are not fitting under the enterprise category.
|Done
|Done
|Done
|It is unfair to expect from leads to less work that the members.

We, earlier, had the conversation that leads are also responsible for the the member responsibilities. I am suggesting to say ~5-10 hours are expected from each role, but individuals can commit more if they wish.
|Done
|Of course there is paperwork, like this doc and many more :)

The biggest role of the leads will handling the communication within the group and with the core project. Both aspects will require writing. I reworded this sentence to reflect more on that.
|keep all the anchor links lower case and use hypens if there are more than one words.

id=&quot;contributor&quot;

id=&quot;which-cla&quot;
|Remove the white space.
|The UI says &quot;Sign In&quot;, what about using the same terminology?
|Whitespace
|I feel like this is TMI but it is your call.
|Register with Gerrit
|ditto
|ditto
|ditto
|ditto
|ditto
|ditto
|ditto
|ditto
|ditto
|This sounds like it might be ok to check it under GOPATH but it is best not to do it.

If can be strongly suggesting that it should be checked outside.
|ditto
|Aren't we already in the go directory?
|trailing whitespace
|ditto
|This would be attaching more commits to a pull request.

A pull request over a pull request = someone else is sending a patch set your CL.
|What's wrong with &quot;submit&quot;?

We are adding unnecessary terminology. In Gerrit UI, it is called &quot;submitting&quot;. Let's stick to the terminology that already exists.
|Submit is not a Gerrit-specific term.

Submitting is a synonym of committing in VCS land, see https://en.wikipedia.org/wiki/Version_control#Common_vocabulary (e.g. p4 submit).

Applying a change says less to VCS users, changes are committed, checked in, or submitted.
|Remove all trailing whitespace.
|anchor links on the website are lower case.

id=&quot;contributor&quot;
|If you are referring to the command, escape git, &lt;code&gt;git&lt;/code&gt;. Else capitalize, &quot;Git&quot;.
|This add nothing, they don't have to know that they are being redirected. They should only know that they need to sign in with the same account.
|This adds nothing.

Say something like 

Sign in using the same Google Account you used above and you will be registered.
|Remove this. They don't have to know about it.

CONTRIBUTORS file are updated once a while.
|signed?
|Can't you just say,

If you have signed a Google CLA to contribute to another Google project before, you don't have to sign it again.
|They dont have to do anything here, these files are auto generated.
|they don't have to know about this, skip this.
|New files
|Remove this, say only new files need to have a license header.
|I cannot follow here. Do you mean git change is similar to git commit.

git change, only checks a new local branch.
|This is a normal commit. Let's not confuse the users saying it is similar to a normal commit.
|Should this go into the troubleshooting section?

We expect people to have experience with git, I am not sure we should mention $EDITOR in the main guide.
|Why not just Testing?
|This guide is not targeted at Go contributors but Go users.
|Aren't we already in the go directory?
|After running for a while, the command should output:

&lt;pre&gt;
ALL TESTS PASSED.
&lt;/pre&gt;
|Don't use Submit but Mail.

Submit is the terminology for merging.
|mail.
|I'd instead say, mailing a change will open a change list on the server.
|mail also mails the CL to the codereviews mailing list. It is literally mailing a change.
|I'd keep -r and -cc here, mentioning that they should be used if the contributor knows who should be the reviewer.

If they don't, they can skip this section.
|Please use &quot;Submit&quot;.

We use Gerrit, it is Gerrit's terminology we should use. Changes are cherrypicked and applied to master. Merging means git merging to me.
|No, this page is not open to everyone. Each item needs to be debated and needs consensus before being contributed.

We should suggest that they should ask golang-dev@ if they see anything significantly missing from the document.
|Done
|Done
|IMHO, overwriting is ok. We might want to document it at the EndpointParams godoc though.
|What about EndpointParams? Too long?

Extra terminology is used to read from the token requests to read arbitrary key-values. I'd prefer us using a different terminology.
|We make them check during the installation from source step which is not highlighted on this doc. I will create another CL for that.
|Done
|Done
|Moved this check to closePR. No need to do this in this loop.
|Done
|Sorry, Import doesn't support absolute paths as the first argument. Hence, I assumed srcDir might be rejected as an abs path -- without clearly understanding how Import works.

Done now.
|Done
|Done
|Done
|Done
|See the next patch set. The other file should only be inited only on appenginevm.
|This flag means it is running on Flex. Renamed this to appengineFlex.

Fixed the comment.
|regenerate for Go 1.8
|Done
|Are you asking whether we should have different latency pushes?
|Ack
|I was thinking about demoing push for only latency=0, but added it for all latencies.

Done.
|golint :)

// brokenAuthHeaderDomains represents the providers that issue dynamic endpoints.
|Use 

&quot;providerAuthHeaderWorks(%q) = %v; want %v&quot;
|It didn't escape. Maybe due to quotes. I don't have time to fix that bug.
|ok, done.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Oops, done.
|Done
|Done
|Done
|Done
|Done.
|Done
|Done
|We need these assets to be served from the demo server, Server Push doesn't work if the domain name is different.

I can maintain a copy of these assets under h2demo/, but being able to deploy h2demo as a static binary without any assets was good.

I don't care much if this demo is broken one day. It is not a critical prod system and it is clear what the maintainer should do to fix.
|Done
|Rebased the CL, they are all gone.

Done.
|Done
|Done
|Done
|Done
|How should we label this? The total time? This reports the same time DOM complete reports.
|{{.HTTPSHost}} should be &quot;http2.golang.org&quot;
{{.HTTPHost}} should be &quot;http2.golang.org&quot;

in production.
|let me fix the complexity here before we merge this.
|Done
|I think we should stop adding new stuff to this package without deprecating some. There are already a few similar APIs that work against a JSON key in this package and it is not clear which one I should prefer as a developer.

If the cost of the break was not significant, I would be in favor of s/DefaultCredentials/Credentials and returning a *Credentials here, so we can indefinitely expand the type with other properties of the JSON key.
|Done
|Done
|this is required to render the page correctly
|Ack
|Done
|We are not endorsing any channel. This initiative is a community initiative, hence it needs to exist where the community is.
|Go examples are not unit tests and not the greatest place to document edge cases. These inline examples needs to cover essential cases and be simple to read.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2:

(1 comment)
|Patch Set 5: Code-Review+2

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 6:

LGTM

Brad, if you don't have any additional feedback, feel free to submit.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Patch Set 6:

(2 comments)
|Patch Set 6:

&gt; Does this fix the &quot;// TODO(jbd): the sound explodes at seek, volume down and seek?&quot; in example/audio/main.go?

It does. I will remove it on a future change.
|Uploaded patch set 1.
|Patch Set 2: Code-Review+1

I can confirm that it fixes #10760.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(3 comments)
|Uploaded patch set 6.
|Patch Set 5:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Patch Set 4:

PTAL
|Patch Set 4:

I didn't see your previous comment, sorry.

&gt; Logs mention ALSA 

It might be failing to find the default audio device :/

&gt; I'd still like to know the copyright status of boing.wav.

It was CC BY-SA, but I can't find the page it's distributed at the moment. Let me replace it with a different file.
|Uploaded patch set 5.
|Patch Set 5:

PTAL
|Uploaded patch set 6.
|Patch Set 4:

(6 comments)
|Uploaded patch set 7.
|Patch Set 6:

(4 comments)
|Uploaded patch set 8.
|Patch Set 8:

I replaced the audio file with an effect I have generated.

PTAL
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Patch Set 3:

PTAL
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4:

(3 comments)
|Patch Set 4:

Someone PTAL? This is blocking me.
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

PTAL?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 4:

This is a nasty hack that leaks if MakeContextCurrent fails. I would prefer https://go-review.googlesource.com/#/c/9519/ to be merged.
|Uploaded patch set 6.
|Abandoned

Chatting with Hana changed my mind about this CL. We don't support multiple context objects to be alive per device, therefore context should be pinned to device and its life should be managed by its owner device.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Right now it is allocated and passed into this package. When is this package done with it? When should the user free it?

The problems I am able to see are below. If I am missing out anything, please reply.

- If we don't set a finalizer and the Go wrapper gets collected, the underlying C allocation leaks.
- If we set a finalizer, it may be collected at unwanted times. And since destruction requires the current context to be set to nil, it adds more magic to the finalization.

Users always have to care about the destruction of context and keep those lines reachable. Otherwise, sorry I don't care. Your destruction code is unreachable, what do you suppose me to do?

Is there any case I don't see and could be considered as a leak?
|Patch Set 1:

&gt;  it should keep a reference to the Go object until all the resources are freed.

We can pin all OpenAL pointers and their Go wrappers on a global map. That's how we can guarantee that the collection will happen after Destroy has called.

It's slightly different than your strategy of setting finalizers but is less magical.

(Sent you the same message via email, forgot that Gerrit fails to update the CL.)
|Patch Set 1:

&gt; context is collected without its cleanup function being called.

Go context cannot be collected if it's in a global map. Destroy function will remove it from the map and make it collectable.
|Patch Set 1:

&gt; For *os.File we use a finalizer to clean up in that case.

As we discussed offline, my point is os.File objects are short-lived objects unlike Context and Device. Context and Device are initiated on the program startup and should be destroyed before the process termination. So we might not follow the same approach we used for os.File.

Nevertheless, I agree with David's concern about not leaking if we can avoid leaking. A finalizer is required to meet this requirement.

iant has an argument against adding the finalizer I'm trying to remove on this CL. I'm CCing him to see what's his point.
|Abandoned

I would prefer to have a more comprehensive discussion about what the preferred lifecycle of proxy objects would be where the underlying C allocations are meant to live long. Go proxy managing the underlying C stuff is an aggressive approach for some cases.

I am abandoning this CL, will keep the finalizers and pin the current context.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

Any commentary on whether we should depend on the gomobile godoc instructions or not?

Rather than copy/pasting the same build instructions for each sample app, I'd like to extend the gomobile godoc with all steps required to build from the source. Then, referencing gomobile docs from the samples would be sufficient enough.
|Abandoned

Abandoned in the favor of https://go-review.googlesource.com/#/c/9630/.
|Uploaded patch set 1.
|Patch Set 1:

I will send a clean-up CL to remove the duplicate instructions from the examples.
|Patch Set 1:

(1 comment)
|Patch Set 1:

Gordon,

Do you have any snippets that demonstrate to how handle multi-touch? I think we need an additional API to return a slice of touches if pending list is &gt;0.

I would love to see some code that relies on the current CL before reviewing the implementation.
|Patch Set 2:

(3 comments)

I am not truly convinced with this API. Serialization of touch events is sometimes a necessity for multi-player games where you eventually need an event identifier before you send the raw event data on the wire. Additionally, the touch events are not valid out of the callback scope which is not user-friendly.

Why don't we just add an ID field (both Android and iOS compatible) to the Touch type?
|Patch Set 2:

&gt; own id generation logic for event serialization for multiple devices anyway

I was thinking that they may prepend a device identifier to the event identifiers. It is easier than identifying events and implementing your own ID generator. This is just a suggestion, I don't have extensive knowledge about the uniqueness of the event identifiers.
|Patch Set 3:

I would prefer we keep the things as immutable as possible. Therefore, my vote is still for ID comparison. One caveat is that UITouchs don't have identifiers, is it possible to use the event timestamp if it is precise enough?
|Patch Set 7:

(10 comments)

Adding additional API related feedback. This looks almost good to me.
|Patch Set 7:

(2 comments)
|Patch Set 8: Code-Review+1

If we can revert the TouchSequenceID back to TouchID or a better short alternative, LGTM.
|Patch Set 9:

&gt; The people doing multitouch are the only ones interested in TouchID

This is basically everyone. If I want to detect a simple swipe or a simple touch (start, move, end sequence in a tiny region), I need to identify the touch.
|Patch Set 1:

Could you fix the merge conflicts?
|Patch Set 1:

(2 comments)

Could you checkout the master branch, git sync and start a new CL or fix the merge conflict I have commented on?
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(4 comments)
|Uploaded patch set 4.
|Patch Set 3:

(4 comments)

Sorry for the late roundtrip. For some reason, your comments didn't arrive to my inbox.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 4:

(1 comment)

I updated the steps and tested on a fresh ubuntu installation.
Env var instructions are not Windows friendly for now. Should we document Windows-only instructions or is this clear?
|Uploaded patch set 7.
|Patch Set 4:

(1 comment)
|Patch Set 1:

Could you fix the merge conflict?
|Patch Set 2:

(9 comments)

Add yourself to CONTRIBUTORS and AUTHORS files.
|Patch Set 3:

(5 comments)

Remove the &quot;unexpected blah blah...&quot; messaging throughout the tests.
|Patch Set 3:

(1 comment)
|Patch Set 4:

&gt; &gt; Should I tweak this to look like the new PasswordCredentialsToken method , similar to patch set 1, since that appears to have just gotten merged?

No.

Each flow type requires its own Config type (take a look at jwt.Config). You're reusing the 3-legged Config type for cases that don't do the 3-legged flow. This approach confuses the users because it's not clear which fields are optional for each flow.

I'd rather prefer we introduce new config types and provide TokenSource accessors.

type PasswordConfig struct {
   Username string
   Password string
   Scopes []string

   // endpoints..
}

type ClientCredentialsConfig struct {
   Scopes []string

   // endpoints..
}
|Patch Set 4:

&gt; Would the call to get the token from all 3 configs also be called
 &gt; Exchange()?

No. This flow has nothing to do with the other flows. Exchanging an authorization code is specifically about the 3-legged exchange. We should avoid terminology overload.

 &gt; that both Endpoints are not needed, only the Token endpoint. Does
 &gt; it make sense to use the Endpoint struct in this case?

No, you can just have a TokenURL string field similar to jwt.Config. http://godoc.org/golang.org/x/oauth2/jwt#Config


Why don't client credential token flow does an initial request to retrieve an initial token if there is none and automatically switch to token refreshment?
|Patch Set 4:

&gt; In addition, it's common to want client credential and regular
 &gt; tokens from the same config, with this change you'd need to drag
 &gt; multiple configs around with duplicate info. If this is the route
 &gt; we wanna go I'm happy to refactor.

oauth2.Config can't represent client credentials flow due to the additional fields required by the 3-legged flow. We should be clear to the user what we require from them first rather than doing micro reusability optimizations.
|Patch Set 4:

Any help needed or are there any open questions left on this CL?
|Patch Set 5:

(5 comments)

I can't review this CL, it contains more lines than it should :) Please remove the password credentials flow related refactoring. We froze the API a while ago as Brad mentions. Since it is a relatively added feature and not a core feature, there is a possibility that it may be refactored. Before getting there, we need a preliminary debate (likely to be on a Github issue) first. If refactoring is required, it should have its own CL.
|Patch Set 9:

(6 comments)

I am leaving some code reorg questions.
|Patch Set 11:

(3 comments)

This is almost there, a few more organization related questions.
|Patch Set 13:

I will review the change later in the day, I'm mostly out-of-office today.

Sorry for the wait.
|Patch Set 13:

(8 comments)
|Patch Set 13:

(1 comment)
|Patch Set 14:

(2 comments)

This looks really good. I added a few other suggestions.

I'd also wait for Brad to have another look before LGTM'ing.
|Patch Set 15: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Abandoned

My fault. _android is effective on C and header files as well.

go build -x golang.org/x/mobile/sensor/...
WORK=/var/folders/00/1b8h8000h01000cxqpysvccm005d21/T/go-build836597183
mkdir -p $WORK/golang.org/x/mobile/sensor/_obj/
mkdir -p $WORK/golang.org/x/mobile/
cd /Users/jbd/src/golang.org/x/mobile/sensor
/Users/jbd/go/pkg/tool/darwin_amd64/6g -o $WORK/golang.org/x/mobile/sensor.a -trimpath $WORK -p golang.org/x/mobile/sensor -complete -D _/Users/jbd/src/golang.org/x/mobile/sensor -I $WORK -pack ./sensor.go ./sensor_notandroid.go
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Sorry, abandoning the change. We need to handle onNativeWindowRedrawNeeded callback and create a new surface and context with the new window object. Currently, we are able to update the width and height but the GL surface is not notified about the new dimensions.
|Restored

Restoring.

It is unnecessary to recreate the surface and context after each rotation. It's user's responsibility to set a new width and height for their current viewport. Currently, we don't exposing callbacks for the user to handle window-related configuration changes such as rotation, I am planning to add them in future. In meanwhile, I am fixing the width and height values.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

A sample program:


        d := alc.OpenDevice(&quot;&quot;)
	c := d.CreateContext(nil)

	if !alc.MakeContextCurrent(c) {
		log.Fatal(&quot;couldn't make the context current\n&quot;)
	}

	sources := al.GenSources(1)
	bufs := al.GenBuffers(1)

	data, err := ioutil.ReadFile(&quot;8k16bitpcm.wav&quot;)
	if err != nil {
		log.Fatal(err)
	}

	s, b := sources[0], bufs[0]

	b.AppendData(al.FORMAT_MONO16, data, 8000)
	s.QueueBuffers(bufs)
	al.PlaySources(sources)
	time.Sleep(10 * time.Second)
|Patch Set 1:

David, the package requires some work and docs. Just sending out to agree on the surface layer.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)

&gt;  I'm not sure you need a separate alc package

It's good for people who are already familiar with OpenAL. They will be looking for the alc namespace.

&gt; I presume package audio will contain a higher-level api built on this.

An audio player on the top of OpenAL.

&gt; Add your sample program as an Example?

Once we make it working on Android.
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 4.
|Patch Set 4:

I've added an experimental audio player, so we can discuss on the high-level player APIs.
|Uploaded patch set 5.
|Patch Set 4:

(15 comments)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 7:

See https://go-review.googlesource.com/#/c/3262/.
|Uploaded patch set 9.
|Patch Set 8:

(12 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Patch Set 9:

(4 comments)

PTAL
|Uploaded patch set 12.
|Patch Set 13:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

&gt; Can you modify this slightly like linux-x86-std to be a VM and do
 &gt; the networking stuff and whatnot so we can use docker2boot on it? 
 &gt; It then needs the buildlet stage0 in it too
 &gt; 
 &gt; Then more generally I'd love to have a linux-arm buildlet VM. 
 &gt; It'll be slow, but we can shard it out.

Brad,

Do you want to take over? It's been a while I haven't followed the changes going into the build repo. I don't want to waste time trying to figure out how much work needs to be done to resurrect this change.
|Abandoned

Abandoning the CL, I don't have bandwidth for a while.
|Patch Set 2: Code-Review-1

We should stop merging workarounds for non-critical cases.

(If you are an enterprise user, reporting this bug to the provider might be also helpful.)
|Patch Set 1:

(1 comment)
|Patch Set 1:

Could you explain the rationale behind the change? jws package is a support package, it's surface layer doesn't have to be user-friendly, it's an implementation detail.
|Patch Set 1:

I would consider moving the jws package under internal. It doesn't fully implement the JWS spec and has always been considered for internal-use only. It has been around long before internal packages have coined, therefore it was not internal.
|Patch Set 1:

I'd prefer this package to be moved to internal. I don't think the API changes are necessary.
|Patch Set 1:

&gt; Note that the &quot;internal&quot; mechanism isn't enforced for non-standard
 &gt; library packages in Go 1.4 yet, but the plan is for Go 1.5 to
 &gt; support it, and it's a good signal to users for now to go away and
 &gt; not try to use them.  I think godoc.org is already hiding them from
 &gt; search results.

&quot;internal&quot; is a known concept and we already encourage its use. It's the right time for this package to be labelled as a support package. There has been several issues/CLs in the past to extend this package to support the spec fully. It will give a clearer message that it's not an JWS implementation but a utility.
|Patch Set 4:

I am not fully convinced we should merge this change if jws is eventually will be moved under internal. Complicating the API surface and the implementation don't seem to be adding any additional value.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

Talked to Hana in person, +2ing myself.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

As a side note, I am more convinced now that password credentials flow requires its own config and retrieveToken function.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 3:

&gt; (Passing review.) Note that standard practice for Go managing the
 &gt; lifetime of C memory is to tie it to the lifetime of the Go object
 &gt; using runtime.SetFinalizer. It looks like when *alc.Context is
 &gt; finalized it should call destroy.

See https://go-review.googlesource.com/#/c/8497/.

Destroy doesn't have to be exported, the purpose is to clean the underlying stuff before a Context instance is being collected.
|Patch Set 3:

&gt; Having both Destroy &amp; finalizer based destruction sounds good to me
 &gt; - if Destroy method will be ever used.
 &gt; 
 &gt; BTW I looked into the audio package and it's not clear where to
 &gt; call the new Destroy method. Moreover, I couldn't tell where else
 &gt; the context will be referenced after NewPlayer call. (bug?)

I have updated the other CL [1] to auto-destroy if the user hasn't called Destroy.

The audio package has a TODO to destroy the context and close the device. I am willing to work on it as soon as we agree on a deconstruction strategy for the al package.

[1] https://go-review.googlesource.com/#/c/8497/
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 3:

(5 comments)
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)

&gt; I *guess* there could be multiple sensor events queued up. 

ALooper_pollAll waits for the ALooper that is created for the current thread and will only return events registered on it.

If you concern is more about we have to consume ASensorEventQueue_getEvents entirely within the same ALooper_pollAll, I may take another look.

The docs and samples are poor unfortunately, I am relying on the actual implementation by reading their code.
|Patch Set 6:

It's perfectly fine not to drain the queue after each pollAll, but pollAll is costly because it does some preliminary check to see if the loop is awake, etc.  I haven't measure the the actual perf penalty, but will send a CL with an additional loop to consume the queue fully until I poll again.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1: Code-Review-1

You should honor the AndroidManifest and don't overwrite the user configuration around the window manager flags. You force a full screen on my app, even if I have an application theme that doesn't want a fullscreen in the following case:

    &lt;application android:label=&quot;Basic&quot; android:hasCode=&quot;false&quot; android:theme=&quot;@style/AppTheme&quot;&gt;

We need a fully qualified window manager API to enable such calls from the application context and honor the system defaults and meta configuration.
|Patch Set 1:

Should we abandon this change and agree on a strategy on #9508 first?
|Patch Set 1:

&gt; The decision of whether to hide the status bar on startup is not
 &gt; dependent on how  app configuration is managed.

It is. You are currently overriding the application and activity theme which is already a bug. Without exposing the necessary configuration related APIs, we are being opinionated about the window flags.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

This CL requires major clean-up, but this is the basic idea.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

Please, take a look now.
|Uploaded patch set 7.
|Patch Set 6:

(10 comments)
|Uploaded patch set 8.
|Patch Set 7:

(1 comment)
|Patch Set 8:

PTAL
|Uploaded patch set 9.
|Patch Set 8:

(2 comments)
|Patch Set 10:

Gordon,

See the new follow-up CL at https://go-review.googlesource.com/#/c/8458/.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

&gt; I much prefer this, +1 as long as this isn't perceived as breaking
 &gt; the API (or such a break is acceptable).

It only breaks your newly merged API.

Another concern is to construct without identifiers. In any case, I'd like to have a constructor function rather than employing the self-referential-based options pattern [1]. That pattern only works if the options are of different types. We're abusing this pattern again.

[1] http://commandcenter.blogspot.nl/2014/01/self-referential-functions-and-design.html
|Patch Set 1:

&gt; -2 both because we need to stop changing this package, and because
 &gt; I like the godoc before instead. I don't like adding another type
 &gt; that's unassociated in godoc.

The godoc became confusing with the latest change. The user need to waste brain cycles to understand what AuthCodeOption and SetParam is in order to add a query param to a URL.

We're doing it already wrong by inventing our types.

func (c *Config) AuthCodeURL(state string, vals url.Values) string

is the optimal solution. But we have a concern not to break the APIs. That's why I am switching to a simpler query param representation as I am simplifying the internal implementation.

Your argument against this CL makes no sense to me.
|Patch Set 1:

Please reconsider this CL or comment.
|Abandoned

I will send out a new CL with a naming improvement instead.

I am not sure it's entirely a valid concern not to break the existing AuthCodeOption interface. The users are likely to hardcode these options. Switching from an interface type to a concrete implementation will not break their builds.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 3:

(4 comments)
|Patch Set 3:

(2 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 2:

(5 comments)
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)
|Patch Set 6:

(5 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3:

PTAL
|Uploaded patch set 4.
|Patch Set 4:

&gt; Another thing to think about: this design seems reasonable to me,
 &gt; but what will the gyroscope look like? More specifically: what will
 &gt; a program integrating data from the accelerometer and gyroscope
 &gt; look like?
 &gt; 
 &gt; I think building a tiny example app to exercise the API would be
 &gt; worthwhile. For example, take the triangle app and put it on a
 &gt; surface with friction, that way it could be sensitive to both tilt
 &gt; and acceleration.

Once I create a CL with the initial implementation, you will see that Android's model of sensors/event queues may require some other tweaks in our abstractions.

On my experimental repo, I am currently sharing a single ALooper among sensors -- a sensor read could be blocking others. The quick fix is to start a new OS thread for each sensor, but it becomes very costly to maintain multiple sensors and the cost is not visible to the developer.

I feel like that the sensors package will be a moving target for a while until we experiment all optimization cases.
|Patch Set 4:

Moving the conversation to a design doc soon, it's hard to attack/explain the scope of the problems on individual CLs.
|Abandoned

I will send a new CL with the new API.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)

LGTM after Brad's suggestion for the vk package.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(10 comments)
|Patch Set 1:

Sorry for the review, I haven't seen your commit message.

The application default credential spec wants scopes to be injected later if the scopes are required. In GCE metadata server's case they don't need to be injected, because metadata server is configured to issue access tokens that are scoped to a predefined list.

createScoped and createScopeRequired methods they mention is coming from this necessity. I didn't quite understand their motivation about injection of the scopes, but would check it out with them.
|Patch Set 3:

(3 comments)
|Patch Set 5:

(4 comments)
|Patch Set 5: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(3 comments)
|Patch Set 4:

(3 comments)
|Patch Set 5: Code-Review+2
|Patch Set 2:

&gt; Is it my imagination, or does the documentation for filepath.Join
 &gt; and Clean not mention this feature?

That's true. Is it just missing docs or is this a breakable behavior in the future?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Don't they just download one or the other? Can't we just give them
 &gt; the one that actually exists? (make the cred values *cred in the j
 &gt; struct and test for nil)

Yes, good idea. PTAL.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

PTAL
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Patch Set 2:

Please cc me on the CLs related to the audio package.
|Patch Set 1:

This CL needs to be broken into a few CLs: a CL with expires_in fix, a CL with the new endpoints, and a CL that modifies providerAuthHeaderWorks.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review-2

I don't fully understand your previous argument but the client ID is a required parameter. We should either return a validation error or let the server return a validation error. The server will reject the request anyways if the username is missing, so I don't think we should do anything additional here.
|Patch Set 2:

I think you can abandon this change now.
|Patch Set 1:

Keping, did you sign the contributor license agreement as explained at https://golang.org/doc/contribute.html#copyright?

I can't see your name on the signers list.

LGTM otherwise.
|Patch Set 3:

(6 comments)
|Patch Set 5: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

Not ready yet, please wait for me to add you as a reviewer.
|Patch Set 1:

Feel free to review now.

Please keep in mind, the headers will be available in $GOPATH/pkg/gomobile/android-ndk-r10d/arm/sysroot/usr/include/ and libopenal.so will be bundled into the apk built by gomobile if the audio package is imported.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(6 comments)
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(4 comments)
|Uploaded patch set 4.
|Patch Set 3:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1:

&gt; You can call methods on a nil receiver. Both forms are functionally
 &gt; equivalent, so it's just a matter of style.
 &gt; 
 &gt; Though it does feel a bit odd to have the word Context in the
 &gt; method name now.

I didn't want to drop the word Context to keep the name similar to the function it is bound to.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)

Please don't review the code yet.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

Feel free to review now.

We should distribute a prebuilt libopenal.so in the NDK tarball and make gomobile to include it in the APK if the application uses the audio package. Any other ideas?
|Patch Set 7:

(1 comment)

&gt; The NDK tarball right now is a subset of the distributed Android
 &gt; NDK, and that's a nice property to maintain. But I think it is fine
 &gt; to make another tarball and put it on dl.google.com for audio that
 &gt; gomobile downloads.
 &gt; 
 &gt; It has the added benefit that the audio tarball is not
 &gt; host-platform-dependent.

Sounds good to distribute the library (and likely the header files) independently.
|Patch Set 7:

Ok, breaking this CL into multiple CLs, starting with https://go-review.googlesource.com/#/c/6570/
|Abandoned
|Patch Set 1:

They were strings instead of ints for prettier fmt.Prints, but don't have any strong opinions against this CL.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

I'll send a doc about audio streaming as soon as I get OpenAL working on Android. A bit of experimenting on actual devices could be beneficial.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 3.
|Patch Set 2:

(6 comments)

&gt; However, I'm guessing that alc context has some C thread-local storage associated with it, which means all Go activity has to happen on the same C thread from which you call MakeContextCurrent.

MakeContextCurrent makes a context available process-wide. You need to make a alcSetThreadContext call to make a context associate itself with thread-local storage and be available from a certain thread.
|Uploaded patch set 4.
|Patch Set 4:

There is a problem with your suggestion about testing. The loopback extensions you mention provide us the rendered audio in realtime. We have to consume the audio buffer as we test actions (prepare, play, pause, etc) and make approximations due to the asynchronous nature of the problem.

Why don't we just log the OpenAL calls and making sure that call sequence is in order instead?
|Patch Set 4:

&gt; I'm interested in how a user of this library tests their own code.

I don't think the user of this library is likely to test their own code by consuming the loopback device buffer. They will likely to wrap the player and replace it with a stub in tests.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

&gt; What about making all methods on a nil *audio.Player a no-op? Then at least people can avoid testing audio.

Yes, a great idea. I created the audiotest package to document it. PTAL.
|Uploaded patch set 8.
|Patch Set 8:

PTAL
|Uploaded patch set 9.
|Patch Set 10:

(20 comments)

Created https://go-review.googlesource.com/#/c/6080/.
|Patch Set 10:

(1 comment)
|Patch Set 2:

LGTM
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Patch Set 2:

&gt; I'd like to hear what brad wants to see here.

He wanted to see this. Previously at http://godoc.org/golang.org/x/oauth2/google#JWTConfigFromJSON
|Patch Set 3:

(3 comments)
|Patch Set 1:

(7 comments)

You don't need to implement a new TokenSource, your approach is fine. Address the following.
|Patch Set 2: Code-Review+2
|Patch Set 3:

I've submitted the change but the spec clearly says that token issuer don't provide a client ID and a secret to the client. Coupling the new token source to the Config type is a mistake in this case, given the fact Config represents a 3-legged flow credentials such as client ID, secret and redirect URI.

We need an independent token source implementation.
|Patch Set 3:

&gt; I'm happy to add this. Just so I understand correctly, we need to
 &gt; add support for clients that are not required to authenticate per
 &gt; the spec, and therefore won't send an Authorization header:
 &gt; 
 &gt; If the client type is confidential or the client was issued client
 &gt; credentials (or assigned other authentication requirements), the
 &gt; client MUST authenticate with the authorization server as described
 &gt; in Section 3.2.1.
 &gt; 
 &gt; My CL covered clients that &quot;MUST&quot; authenticate but does not provide
 &gt; options to those that don't (or can't).
 &gt; 
 &gt; Is that correct?

I can't follow you. But the spec says if issuer provided a client ID or secret to the client, the client should do 3-legged OAuth 2.0.

Currently, we require the client to initialize a Config object with empty credentials and return them a token source that uses no config credentials by using the empty config object.

conf := &amp;oauth2.Config{}
conf.PasswordCredentialsToken(ctx, username, passwd)

Instead, we should reflector the API to be able to do the following:

ts := oauth2.PasswordCredentialsTokenSource(ctx, username, passwd, token)

I understand why you've bundled the this flow into Config.TokenSource, so it automatically can switch to token retrieval via refresh token, but we should replicate code and add a block to do the refresh token flow in PasswordCredentialsTokenSource if there is a non-empty token.RefreshToken.

PasswordCredentialsTokenSource should
1. Retrieve a new token with the username and password if token is nil or token.RefreshToken is empty.
2. Retrieve a new token with the refresh token otherwise.
|Patch Set 3:

&gt; The Config object would not be empty as the Endpoint and Scopes
 &gt; fields are still needed.
 &gt; 
 &gt; Passing a token with an empty RefreshToken to Config.TokenSource
 &gt; (or Client) works.  When the token expires, Config.TokenSource (or
 &gt; Client) will return the error &quot;oauth2: token expired and refresh
 &gt; token is not set&quot;, which seems correct to me.

Ideally, this flow requires its own config type.

type PasswordConfig struct {
   Username string
   Password  string
   Scopes      []string
   // endpoints
}

func (c *PasswordConfig) TokenSource(ctx oauth2.Context)
|Patch Set 3:

&gt; 4.3.2: &quot;If the client type is confidential or the client was issued
 &gt; client credentials (or assigned other authentication requirements),
 &gt; the client MUST authenticate with the authorization server as
 &gt; described in Section 3.2.1.&quot; (http://tools.ietf.org/html/rfc6749#section-4.3.2)
 
I'm reading it like the client should go through the 3-legged flow if there is a client ID and secret issued. If you're depending on the resource owner password credentials flow, the provider shouldn't have issued you a client ID and secret.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)

&gt; For consistency you may want to change jws/jws.go as well.  Line 54 has a 10 second delay in the Claimset.encode() func.

The expiration happens 10 secs earlier now (previously it was 20 secs) if that's the consistency issue you are talking about.
|Patch Set 3:

(3 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review-1
|Uploaded patch set 2.
|Patch Set 1:

The tests take around 20-25 seconds.

##### Testing packages.
ok    cmd/addr2line 17.539s
?     cmd/cgo [no test files]
ok    cmd/fix 16.471s
ok    cmd/go  35.998s
ok    cmd/gofmt 20.972s
ok    cmd/link  20.072s
ok    cmd/nm  16.870s
ok    cmd/objdump 17.669s
ok    cmd/pack  10.559s
?     cmd/pprof [no test files]
?     cmd/yacc  [no test files]
ok    archive/tar 14.144s
ok    archive/zip 145.265s
ok    bufio 26.982s
ok    bytes 34.508s
ok    cmd/internal/goobj  11.160s
?     cmd/internal/objfile  [no test files]
?     cmd/pprof/internal/commands [no test files]
?     cmd/pprof/internal/driver [no test files]
?     cmd/pprof/internal/fetch  [no test files]
?     cmd/pprof/internal/plugin [no test files]
?     cmd/pprof/internal/profile  [no test files]
?     cmd/pprof/internal/report [no test files]
?     cmd/pprof/internal/svg  [no test files]
?     cmd/pprof/internal/symbolizer [no test files]
?     cmd/pprof/internal/symbolz  [no test files]
?     cmd/pprof/internal/tempfile [no test files]
ok    compress/bzip2  19.647s
ok    compress/flate  67.015s
ok    compress/gzip 17.542s
ok    compress/lzw  22.813s
ok    compress/zlib 112.183s
ok    container/heap  17.114s
ok    container/list  17.050s
ok    container/ring  17.810s
?     crypto  [no test files]
ok    crypto/aes  19.419s
ok    crypto/cipher 20.846s
ok    crypto/des  19.730s
ok    crypto/dsa  19.507s
ok    crypto/ecdsa  22.300s
ok    crypto/elliptic 24.018s
ok    crypto/hmac 17.931s
ok    crypto/md5  20.115s
ok    crypto/rand 21.118s
ok    crypto/rc4  29.905s
ok    crypto/rsa  51.526s
ok    crypto/sha1 20.476s
ok    crypto/sha256 19.786s
ok    crypto/sha512 19.221s
ok    crypto/subtle 16.692s
ok    crypto/tls  230.048s
ok    crypto/x509 197.641s
?     crypto/x509/pkix  [no test files]
ok    database/sql  31.058s
ok    database/sql/driver 17.408s
ok    debug/dwarf 22.017s
ok    debug/elf 19.432s
ok    debug/gosym 21.514s
ok    debug/macho 21.596s
ok    debug/pe  21.793s
ok    debug/plan9obj  17.851s
?     encoding  [no test files]
ok    encoding/ascii85  17.576s
ok    encoding/asn1 20.918s
ok    encoding/base32 18.555s
ok    encoding/base64 19.377s
ok    encoding/binary 17.907s
ok    encoding/csv  17.357s
ok    encoding/gob  36.105s
ok    encoding/hex  18.173s
ok    encoding/json 46.863s
ok    encoding/pem  20.759s
ok    encoding/xml  26.810s
ok    errors  18.977s
ok    expvar  39.059s
ok    flag  18.408s
ok    fmt 32.400s
ok    go/ast  25.974s
ok    go/build  46.404s
ok    go/doc  42.632s
ok    go/format 25.571s
ok    go/parser 33.141s
ok    go/printer  106.434s
ok    go/scanner  21.348s
ok    go/token  21.555s
?     hash  [no test files]
ok    hash/adler32  18.925s
ok    hash/crc32  17.899s
ok    hash/crc64  16.235s
ok    hash/fnv  15.666s
ok    html  17.179s
ok    html/template 33.491s
ok    image 44.070s
ok    image/color 18.211s
?     image/color/palette [no test files]
ok    image/draw  32.365s
ok    image/gif 25.263s
ok    image/jpeg  43.069s
ok    image/png 26.778s
ok    index/suffixarray 18.332s
?     internal/syscall  [no test files]
ok    io  21.129s
ok    io/ioutil 19.571s
ok    log 19.218s
ok    log/syslog  19.569s
ok    math  15.552s
ok    math/big  73.477s
ok    math/cmplx  13.139s
ok    math/rand 74.687s
ok    mime  14.623s
ok    mime/internal/quotedprintable 42.298s
ok    mime/multipart  31.721s
ok    net 53.346s
ok    net/http  295.270s
ok    net/http/cgi  42.995s
ok    net/http/cookiejar  39.090s
ok    net/http/fcgi 35.923s
ok    net/http/httptest 34.424s
ok    net/http/httputil 33.728s
ok    net/http/internal 18.076s
?     net/http/pprof  [no test files]
ok    net/mail  18.380s
ok    net/rpc 41.623s
ok    net/rpc/jsonrpc 40.515s
ok    net/smtp  35.630s
ok    net/textproto 17.312s
ok    net/url 32.195s
ok    os  21.690s
ok    os/exec 50.564s
ok    os/signal 20.861s
ok    os/user 15.187s
ok    path  15.588s
ok    path/filepath 19.701s
ok    reflect 47.395s
ok    regexp  44.573s
ok    regexp/syntax 79.050s
ok    runtime 241.839s
?     runtime/cgo [no test files]
ok    runtime/debug 21.500s
ok    runtime/pprof 105.231s
?     runtime/race  [no test files]
ok    sort  31.165s
ok    strconv 59.480s
ok    strings 33.979s
ok    sync  26.490s
ok    sync/atomic 41.372s
ok    syscall 17.346s
ok    testing 21.380s
?     testing/iotest  [no test files]
ok    testing/quick 24.562s
ok    text/scanner  13.989s
ok    text/tabwriter  15.850s
ok    text/template 34.516s
ok    text/template/parse 27.051s
ok    time  69.315s
ok    unicode 25.575s
ok    unicode/utf16 23.138s
ok    unicode/utf8  14.297s
?     unsafe  [no test files]

real  11m49.592s
user  0m54.530s
sys 0m15.790s

##### GOMAXPROCS=2 runtime -cpu=1,2,4
ok    runtime 346.099s

##### sync -cpu=10
ok    sync  3.935s

ALL TESTS PASSED
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

Requires some clean-up and reorganization, but it works.
|Uploaded patch set 5: Commit message was updated.
|Uploaded patch set 6.
|Patch Set 5:

(1 comment)
|Patch Set 6:

Brad, could you give this env a try?

We should also rename the env to android-arm-emul19. Any objections?
|Patch Set 6:

&gt; What is 19?

Indicates which version of the emulator we are using. The image in use in this env is called sys-img-armeabi-v7a-android-19.
|Patch Set 6:

(1 comment)
|Uploaded patch set 7.
|Patch Set 6:

(1 comment)
|Abandoned

Moved the CL to https://go-review.googlesource.com/#/c/3197/.
|Uploaded patch set 1.
|Patch Set 1:

proppy wanted me to submit CL/1670. I had no idea it was breaking the build.
|Patch Set 2: Code-Review-2

There is a proposal from auth guys to reuse gcloud credentials if the credentials file is present on the current machine. We will work on a custom Config type to meet their requirements.

I have to say no to this CL in the favor of implementing their spec.
|Patch Set 3:

(12 comments)

I'm keeping my -2 until we figure out what we will be doing with the AuthKit spec.

Some suggestions are below if you're going to host this as a separate package.
|Patch Set 4: -Code-Review

(5 comments)

I'm reverting my -2, having heard from the other team yet.

This could be a good intermediate solution.
|Patch Set 4:

(1 comment)
|Patch Set 6:

(7 comments)
|Patch Set 9:

(5 comments)
|Patch Set 17:

(1 comment)
|Patch Set 18:

(4 comments)

Gerrit ate my drafts, resending.
|Patch Set 20:

(1 comment)
|Patch Set 21: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Uploaded patch set 5.
|Patch Set 5:

You've been reviewing the wrong patch set. Please don't start to review before I address the previous comments with &quot;Done&quot; or make a PTAL call. It is a waste of your time. Gerrit also serves as a snapshot server.
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 1:

(1 comment)

I am still not understanding the intention of this CL.

Explicit types are what we want. Otherwise, we would couple everything together in an UnmarshalJSON function already.
|Patch Set 2: Code-Review-2
|Uploaded patch set 1.
|Patch Set 1:

This time, it works.

https://github.com/rakyll/oauth2/commit/d7216e0a34fc336255a86c466091fcb4333664ee
|Uploaded patch set 1.
|Patch Set 2: Code-Review-2

There is some earlier discussion on this topic, please read and justify your point first.

https://github.com/golang/oauth2/issues/75

+build appenginevm,!appengine is not godoc friendly. And alternative would be to move the App Engine stuff to its own package.
|Patch Set 2:

Would you like to revise this CL to create a new sub package for the App Engine stuff?
|Patch Set 2:

I have sent out https://go-review.googlesource.com/#/c/2955/.
|Patch Set 2:

Feel free to abandon, CL/2955 is submitted.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 6.
|Patch Set 5:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Abandoned

Will go for the bogus AppEngineTokenSource for the documentation.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(3 comments)

I wonder if the build-time VOLUME instruction would cause any headaches. But glad that it errors if /src is not mounted.
|Patch Set 3: Code-Review+2
|Patch Set 3:

(5 comments)
|Patch Set 3:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Why do we have a Float accessor?

Extra values could be float.

Clarify your question please. Are you asking why a token has extra float values? Or why don't we have an Extra(string) interface{} accessor? Or why don't we cast every extra value to a string?
|Patch Set 3:

See https://github.com/golang/oauth2/issues/29 and https://github.com/golang/oauth2/issues/51.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 5:

(4 comments)
|Patch Set 1:

(8 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 1:

(1 comment)
|Patch Set 4:

I find myself repeatedly wrapping our config types to serialize/deserialize them to JSON as a part of my application configuration. It's handy to have the tags, but we can abandon this change if you think we should be less opinionated about the key names/JSON schema.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

&gt; I don't think it matters that they fail differently now. It's probably better, actually.

Yes, saner.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

PTAL

This is critical.

We can populate tokens with a non-zero expiry and can't do the auto refresh.

&gt; But why is expires_in a float64?

json.Unmarshal.
|Uploaded patch set 1.
|Patch Set 1:

&gt; I think we shouldn't tell the user to write password on the command line. -pass stdin is probably better.

These instructions are for the p12s downloaded from Google. Their passphrases are always &quot;notasecret&quot; and it is literal.

The generic package (oauth2) suggests the use of &quot;openssl pkcs12 -in key.p12 -out key.pem -nodes&quot;.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)

I've just started to fix the rest of the package, but need initial feedback before continuing.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1:

(15 comments)

Sorry that patch #1 had styling issues and was not even compiling. I opened it for the preliminary questions. Is it possible to give some feedback about the open questions before we move on?
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Patch Set 5:

(1 comment)
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 5:

(11 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Patch Set 9:

(5 comments)
|Uploaded patch set 12.
|Patch Set 11:

(11 comments)
|Uploaded patch set 13.
|Patch Set 9:

(1 comment)
|Patch Set 11:

(2 comments)
|Patch Set 1:

(8 comments)
|Patch Set 1:

As a side note, we don't have to break the upstream. Once this CL is good to be merged, I can take over to fix the tests.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned

I will send out a new CL. git-review bug found.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3: Code-Review+2

This doesn't have to depend on 1140, cherry picking onto the master.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

runOutput became an unnecessary wrapper of exec.Command, therefore I reverted the changes effecting it's signature.

PTAL.
|Uploaded patch set 5.
|Patch Set 3:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1:

&gt; (It is
 &gt; also preferable for these issues to be checked with the relevant
 &gt; experts before it gets to code review.)

What does this even mean? Less than an hour ago, I emailed you that I made a lawyer and a copyright/patent counsel review a similar tool. Doing it again and explicitly asking about the Xcode-generated files.
|Uploaded patch set 2.
|Patch Set 1:

(4 comments)
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Patch Set 3:

(2 comments)
|Patch Set 3:

Could someone give me a LGTM or add additional feedback?
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(4 comments)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Abandoned
|Patch Set 1:

(6 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Abandoned

Sorry, agreed. Furthermore, the behavior of cgoLookupPort is similar to the behavior of goLookupPort already -- both return an unknown network error.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; This doesn't work on IPv6-only systems. git grep newLocalListener

Let's not duplicate newLocalListener and the IPv4 and IPv6 support detection here but listen 127.0.0.1 on Android which is not IPv6-only.
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 2: Code-Review+2

Nice! Let's turn off the Travis build once this is submitted.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+1 Run-TryBot+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

&gt; Whoops, I misread. I treated v as the pointer rather than p, and I
 &gt; thought the last paragraph was a statement about the pointer.
 &gt; Sorry!

No worries.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 5:

Could someone have a chance to review this?
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

&gt; Is this important for some reason?

Yes, the number of the systems abuse /etc/hosts is far too many. The list also includes Docker. Docker names each container in an arbitrary host after its name by putting a record to the /etc/hosts. I don't have a good answer who it may break and  that's why I think it is worth to mention the change. But feel free to abandon it if you are strongly against it.
|Patch Set 1:

&gt; I'm still confused. As I understand it, if /etc/hosts said
 &gt; &quot;127.0.0.1 localhost&quot; then in earlier versions of Go, Dial(&quot;tcp&quot;,
 &gt; &quot;LOCALHOST:1234&quot;) failed, but in Go 1.6 it will succeed. Is that
 &gt; correct?
 &gt; 
 &gt; If so, why do you believe it is likely that being able to find a
 &gt; hosts record that previously was ignored will cause things to
 &gt; break? It seems to me it can only cause things to start working.

Go programs will behave differently if you have duplicates in /etc/hosts. Rather than using the last matching case-matching result, it will use the last matching entry case-insensitively. Duplicates are not rare in generated or programmatically edited /etc/hosts.

Having said that the current behavior of lookupStaticHost still seems to have a bug. If there are duplicates, conventionally the first record in /etc/hosts is used for the given hostname -- not the last one. I will file a bug and send out a CL for 1.7.

(Abandoning because the change is addressing a complex combination of problems, not sure if it is worth to mention in the release docs.)
|Abandoned
|Patch Set 1:

&gt; Having said that the current behavior of lookupStaticHost still
 &gt; seems to have a bug. If there are duplicates, conventionally the
 &gt; first record in /etc/hosts is used for the given hostname -- not
 &gt; the last one. I will file a bug and send out a CL for 1.7.

As I am reading the internals, I forgot that LookupHost returns multiple addresses sorted by their first appearance in the file. So, there are no bugs.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

&gt; https://github.com/golang/go/issues/13912#issuecomment-170749838
 &gt; makes a pretty good argument for exporting a method that takes a
 &gt; parameter value, AL extensions. I've never used an AL extension so
 &gt; I can't speak to whether or not this is common.

I was about to send a CL that exports setSourcei, setSourcef, setSourcefv, getters and so on. This CL adds the helper setters for consistency.
|Patch Set 1:

&gt; &gt; &gt; https://github.com/golang/go/issues/13912#issuecomment-170749838
 &gt; &gt; &gt; makes a pretty good argument for exporting a method that takes
 &gt; a
 &gt; &gt; &gt; parameter value, AL extensions. I've never used an AL extension
 &gt; &gt; so
 &gt; &gt; &gt; I can't speak to whether or not this is common.
 &gt; &gt;
 &gt; &gt; I was about to send a CL that exports setSourcei, setSourcef,
 &gt; &gt; setSourcefv, getters and so on. This CL adds the helper setters
 &gt; for
 &gt; &gt; consistency.
 &gt; 
 &gt; I don't see consistency as a justification for replicated API
 &gt; surface.

Are you suggesting to remove the current getters/setters and export generic ones? It is not clear from your previous comment.
|Patch Set 1:

&gt; Yes, I'm saying we don't need two ways to achieve the same thing.
 &gt; It looks like Source should have a Get method and Set method that
 &gt; takes a typed int parameter specifying what is being get and set.

Agree, The same goes for buffers and the listener. I will send a CL later today.
|Abandoned
|Restored
|Uploaded patch set 2.
|Patch Set 2:

David, I sent out a not-yet-completed change that exports a few of the generic getters/setters.

Do you think that we should delete the existing helper getters/setters? The current API surface was more usable since the user didn't have to read the documentation to find out what which type is suitable for a parameter. There is still some value in keeping the things the way they are and exporting the generic accessors (for OpenAL extensions) in addition to the current APIs.
|Uploaded patch set 3.
|Patch Set 3:

This CL is waiting attention since last week.
|Patch Set 3:

&gt; In case my last comment wasn't clear, I think Patch Set 2 is a
 &gt; fine, and a good way to move forward.

Sorry, I got distracted and switched to something else. I will update the CL in Patch2-style asap.
|Uploaded patch set 4.
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Patch Set 1:

It failed for TestStackBarrierProfiling, we can submit this CL.
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(8 comments)

Being able to discuss this change on a design doc could have been a better option. The current implementation breaks the existing methods such as Total and Current and there are no obvious solutions I can recommend for an alternative Current implementation that will work well with the new streaming model. Writing it all down on a doc and having a prior discussion around the open issues was more of what I was planning to do.
|Patch Set 2:

cc'ing adg.

He wanted to contribute a ring buffer streaming implementation in the past but he ran out of bandwidth. He might be interested again to return back to this issue and help with the overall design and open questions.
|Patch Set 1:

(4 comments)
|Patch Set 1:

(3 comments)
|Patch Set 4: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)

&gt; (1 comment)
 &gt; 
 &gt; I'm not completely clear on what the system is for these proposals,
 &gt; it appears they get submitted and then iterated on. But as Andrew
 &gt; usually approves and is away right now, maybe this CL should stay
 &gt; open for a few days while feedback comes in on the issue?

I am not quite sure how the system works either. We can iterate on an open CL for a while to address the initial feedback.
|Uploaded patch set 6.
|Patch Set 6: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 2:

LGTM
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+2

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 3:

(1 comment)
|Uploaded patch set 7: Commit message was updated.
|Patch Set 6:

(3 comments)
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 6:

(1 comment)

PTAL
|Uploaded patch set 10.
|Patch Set 6:

(1 comment)
|Uploaded patch set 11.
|Patch Set 11:

TBR=hyangah
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 3:

(6 comments)

Adding preliminary styling comments.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(4 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review-2

(1 comment)
|Patch Set 1:

You can now abandon this CL with a note mentioning CL/15510.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

Waking is still racy, I will try to destroy the ALooper and its thread until a new sensor is enabled.
|Uploaded patch set 4.
|Uploaded patch set 5: Commit message was updated.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

PTAL
|Uploaded patch set 5.
|Uploaded patch set 6: Commit message was updated.
|Uploaded patch set 7: Commit message was updated.
|Uploaded patch set 8.
|Patch Set 8:

Sorry for the numerous patch sets, PTAL.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Patch Set 8:

(1 comment)

Could you please submit and deploy the change?
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(6 comments)
|Patch Set 4:

&gt; can you preserve original texts in a record? for example, when
 &gt; hosts contains a line like the following:
 &gt; 
 &gt; 1.2.3.4 Perter Peter.Picked.A.Peck.Of.Pickled.Pickles.TLD
 &gt; 
 &gt; LookupIP(&quot;Peter&quot;) and LookIP(&quot;Peter.Picked.A.Peck.Of.Pickled.Pickles.TLD&quot;)
 &gt; return the literal IP &quot;1.2.3.4&quot;,
 &gt; and
 &gt; LookupAddr(&quot;1.2.3.4&quot;) returns [&quot;Peter&quot;, &quot;Peter.Picked.A.Peck.Of.Pickled.Pickles.TLD&quot;]
 &gt; instead of [&quot;peter&quot;, &quot;peter.picked.a.peck.of.pickled.pickles.tld&quot;]


Could you file a bug? I can preserve the original hostname but let's keep the discussion on the issue tracker.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

Should I revert this CL for consistency? It is better not to consistently keep symlinks unsupported rather than supporting them in few places.
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 5:

Thanks!
|Patch Set 2:

(4 comments)
|Patch Set 5:

(2 comments)
|Patch Set 6:

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

(5 comments)
|Uploaded patch set 7.
|Patch Set 6:

(2 comments)
|Uploaded patch set 1.
|Abandoned

Dropping in the favor of cl/14257.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

Started https://go-review.googlesource.com/#/c/14257/.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

&gt; Go/ObjC code trying to read a value at same time as
 &gt; the OS is trying to write a value?

The OS? The underlying CMMotionManager is only available to the Go program.

Enabling and disabling are not thread safe within the same Go program, added godoc.
|Uploaded patch set 3.
|Patch Set 4:

&gt; (1 comment)

The Android implementation must not be safe. It might be fixed in the future, good to explicitly document it is not safe for now.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Patch Set 7:

(22 comments)
|Uploaded patch set 12.
|Patch Set 11:

(5 comments)
|Uploaded patch set 13.
|Patch Set 12:

(3 comments)
|Uploaded patch set 14.
|Patch Set 12:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 12:

(1 comment)
|Patch Set 12:

I will receive 100000 and for another 100ms, I won't receive 200000.
|Patch Set 12:

(2 comments)
|Uploaded patch set 1.
|Patch Set 3:

Could you investigate whether the same quotas are applied to metadata server and appengine.AccessToken? The use of appengine package was intentional.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(7 comments)
|Uploaded patch set 6.
|Patch Set 4:

(1 comment)
|Uploaded patch set 7.
|Patch Set 7:

(3 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4:

&gt; Run go generate to update doc.go too

Done.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

Do you want me to update this CL with the new APIs?

I'd prefer it keep it for the upcoming CLs once I implemented the basic backend for darwin/{arm,arm64}.
|Patch Set 3:

&gt; I would like to see the API design before the implementation. How
 &gt; about pausing on this CL, and sending out something with a sketch
 &gt; of an API and some rough docs explaining how the API fits onto the
 &gt; iOS and Android motion systems.

I will experimentally start a new sensor package with the new APIs and let you do the high-level review before continuing on the current CL.
|Abandoned

Dropping the CL, will begin a new series.
|Patch Set 2:

(6 comments)
|Patch Set 5:

setup.go is probably a cleaner document than the English equivalent, but this guide should also target those who already has an Android Studio project and want to add Go bits.

I agree that we should explain step by step how to interact with Android Studio to achieve the desired result, an app that compiles.

(Thanks for your time to reverse engineer this process. If you maintain setup.go somewhere else, I'd be a user.)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Hana and I discussed this once, but I don't remember what we
 &gt; decided. I recall reasoning along the lines of: it works out better
 &gt; to copy the android example out of the mobile repository before
 &gt; trying to build it, but I'm not sure. So leaving for Hana.

I would update the new mobile guide with cp instructions if that is the case. Hana?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Currently the sensor package builds on desktops, even if it doesn't
 &gt; do anything. With this CL there is no more manager type defined for
 &gt; darwin/amd64 and linux, which breaks a lot of workflows where
 &gt; people use /... paths.

notmobile.go is supposed to support the noop implementation the desktop env will use. The build constraint is fixed. PTAL.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 2:

(1 comment)
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 3:

(10 comments)
|Patch Set 3:

(6 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Looks fine, please add the test changes.

Done. PTAL.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Patch Set 1:

(5 comments)
|Patch Set 2:

(3 comments)
|Patch Set 3: Code-Review+2
|Patch Set 4:

Thanks!
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)

Did you talk to Surma about his CL at https://go-review.googlesource.com/#/c/12286/?
|Patch Set 2:

&gt; - do we know how we include and access assets to the framework?

You must be able to copy them to the Resources/ directory as its explained at https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html
|Patch Set 1:

(1 comment)

We were working on a similar change with surma@ and I saw your CL.

The apps linking to the archive file generated with this CL is crashing with:

fatal error: bad timediv
runtime: panic before malloc heap initialized

runtime stack:
fatal error: gentraceback before goexitPC initialization
runtime: panic before malloc heap initialized
panic during panic

runtime stack:
fatal error: gentraceback before goexitPC initialization
runtime: panic before malloc heap initialized
stack trace unavailable

So far, we are able to target darwin/amd64 and run an app with objc bindings on the simulator.
|Patch Set 1:

FYI,

The panic I am receiving has been resolved with the merge of https://github.com/golang/go/commit/08dbd8ae6d16ed9eaaca241024a4f92fd2184e2c.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Patch Set 1:

(4 comments)

All addressed, please keep the review on https://go-review.googlesource.com/#/c/12001/.
|Abandoned

Due to a Gerrit bug, I have created https://go-review.googlesource.com/#/c/12001/, please review the change on the new CL.
|Patch Set 1:

(8 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3:

(3 comments)
|Patch Set 2:

LGTM
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

I don't like like the idea of sharing the current context with al and other third party libraries. A better alternative would be audio package's owning its own AL device and creating a context in that scope. I have to experiment whether it is possible to have multiple current contexts by having multiple open AL devices.
|Patch Set 1: Code-Review+2
|Patch Set 1:

This is great!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

LGTM?
|Uploaded patch set 1.
|Patch Set 1:

LGTM?
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 4.
|Patch Set 3:

(4 comments)
|Patch Set 1:

(7 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

DNS -- requires more testing.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

I have been able to test it with a fresh GOROOT and it works. Issues 11445 and 11446 still need to be fixed in order to land the minimal working ios build to gomobile. Then, I can move on and remove the clangwrap.sh dependency by rewriting it in Go.

I have been accidentally using CC_* and CXX_* flags with go build, rather than CC and CXX. Sorry that it took me long to notice this mistake.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4:

I am going to turn on target=ios support after 11445 and 11446 are both fixed, merging the changes to CC and CXX.
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(6 comments)
|Uploaded patch set 5.
|Patch Set 2:

(1 comment)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 5:

(4 comments)
|Patch Set 5:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

It would be nice to have TryBots at this stage of the project.
|Uploaded patch set 1.
|Patch Set 1:

LGTM?

This issue is blocking me.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; why is this DNS?

It is blocked by https://github.com/golang/go/issues/11339.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 5: Reverted

This patchset was reverted in change: I2f168508d1ca72f5c75ff641938fd3b304939617
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 4:

&gt; Burcu was saying there was some guarantee at some point, but I
 &gt; can't find it anywhere.
 
We promised not the break the APIs. It is not written. We don't refactor the official Go packages very often.
|Patch Set 4:

&gt; We shouldn't make promises that we can't keep.

Totally agreed. We shouldn't merge any new OAuth flow implementations before there are proven to be useful by the majority. The package already provides the fundamentals such as the TokenSource and NewClient. We must encourage users to reuse the interfaces rather than merging each implementation into this package.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 5:

&gt; I would like us to do a review of exp/sensor first and decide it's
 &gt; time to move it out of exp/ before moving some of it to a different
 &gt; package.
 
SGTM

 &gt; I recall Nigel had a few questions about the Event type in
 &gt; particular, unfortunately he is on leave until January. I'll read
 &gt; through the package earlier next week and attempt to reconstruct
 &gt; his comments.

We were not sure whether each motion type should have its own event type rather than having Type as a field.

I am labelling this CL as a &quot;DO NOT SUBMIT&quot;, feel free to review but we are a long way from submitting it.
|Abandoned

I consider it abandoned due to lack of bandwidth.
|Patch Set 8:

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Change has been successfully cherry-picked as 77b4e874f140791b724505e0d0c388e4ad11cfc9 by Jaana Burcu Dogan
|Patch Set 3:

I am leaning on the side of having concepts of transactions, we can have a nicer API with delay and chip select as options. I haven't finalized my thoughts on it though.
|Patch Set 2:

(3 comments)
|Patch Set 3: Code-Review+2

Thanks!
|Change has been successfully cherry-picked as 12e1e986157ec46fb273824565d9937bd4235105 by Jaana Burcu Dogan
|Patch Set 2:

This is a breaking change. Should we need to reach out to anyone making the change or write on README about the change?
|Patch Set 4:

&gt; (1 comment)
 &gt; 
 &gt; &gt; This is a breaking change. Should we need to reach out to anyone
 &gt; &gt; making the change or write on README about the change?
 &gt; 
 &gt; I'm not too worried about this, to be honest. This doesn't affect
 &gt; the public interface at all, and it's not the first time that an
 &gt; /x/ repo has gained a new import  dependency (from the POV of a
 &gt; user, that's all it looks like).

Whoops sorry. I didn't look at what we are exporting from the package before leaving the comment tbh.
|Patch Set 1:

Hi, thanks for the CL but this feature is already implemented at https://godoc.org/golang.org/x/oauth2/clientcredentials.
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Change has been successfully cherry-picked as 0aec23fa6269cbce14cd407234f04213227a7917 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 0cc236bad2a4cf2c14a5b03924cad019152f2ac1 by Jaana Burcu Dogan
|Patch Set 4:

(7 comments)
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; (7 comments)

Any progress on this CL? If not, I am willing to keep working on mine. We can merge what's left by working on this CL.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 1:

(2 comments)
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)

Docs are hard.
|Change has been successfully cherry-picked as 8c9a7978942296085628bc33eefcb9bab561f4ee by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as c2322b7ea60f85b4fd3d566b17ab3f7dcb865c1a by Jaana Burcu Dogan
|Uploaded patch set 1.
|Patch Set 1:

&gt; I think we should move it under github.com/goiot/exp/gpio so we can
 &gt; keep working on it and experiment with various APIs. Once we have
 &gt; something solid, we can can a new CL to bring back GPIO.

Sounds like a good spot. I will follow up with a PR against goiot/exp/gpio.
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as 325d5821a8d876702cbc82b93fec4ede356d498b by Jaana Burcu Dogan
|Patch Set 1: Code-Review-1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

Can you also please take a look at this CL?
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as c10f8700e065338dcacda0f4659339e86c402358 by Jaana Burcu Dogan
|Patch Set 3:

&gt; I was just giving the +2 assuming the trybots were good. But you
 &gt; should still wait for them before submitting.

Sorry, will always do in the future.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Change has been successfully cherry-picked as ab9137dd24e10a9f884475413437cc31e48dbdf7 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Abandoned

There is already a CL trying to achieve the same at https://go-review.googlesource.com/#/c/26930/. Abandoning it in the favor of it.
|Patch Set 2:

&gt; Abandoned
 &gt; 
 &gt; There is already a CL trying to achieve the same at
 &gt; https://go-review.googlesource.com/#/c/26930/. Abandoning it in the
 &gt; favor of it.

Abandoning this not it :)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Abandoned

err field is mutex protected; if cancel wins the race, Err() will return Canceled. Abandoning this change.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

Failures are not my fault, submitting...
|Change has been successfully cherry-picked as 7573efae754bbd3a44d66cff513c65fa5a62e408 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4:

(3 comments)
|Change has been successfully cherry-picked as c10ba270aa0bf8b8c1c986e103859c67a9103061 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Change has been successfully cherry-picked as 75e75ddc3d156dc8fc71c6f2ef3607cbdcfc8c27 by Jaana Burcu Dogan
|Patch Set 4:

&gt; OAuth2 is not my strong suit, but it seems sad we're asking
 &gt; developers to go elsewhere for their JWS needs given that this is
 &gt; the canonical oauth2 package. What sort of investment would it take
 &gt; to make this fully-fledged? (Or, why doesn't it belong here?)

In the scope of OAuth 2.0, there are 2-legged flows where verification of the returned signed JSON Web message is a requirement. We should understand such cases to see if the current jws package is good enough to support them. I'd be in the favor of keeping the package and scoping it down to the specific OAuth use case.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Change has been successfully cherry-picked as 68218bf41b4d536352e1c55976641958d65c409b by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Change has been successfully cherry-picked as e839600e667558ee911f25df4f44b69cb1a743ff by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 4d549c893be7d4011bab739cc585d091a7188d27 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Patch Set 1:

Needs to be reviewed.
|Change has been successfully cherry-picked as 3c3a985cb79f52a3190fbc056984415ca6763d01 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3: Commit message was updated.
|Change has been successfully cherry-picked as 428d79bd38db30405fe2b5d264d856e52030c338 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as 2d2b68866fe8b975411945bda2dc7e80d8fb926b by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 0318d80e51ff148f3a94008b59b36d601846152e by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

Trybots fail due to an flaky test that is independent from this CL. Submitting.
|Change has been successfully cherry-picked as 7b269195d30195f29080e17114aeec7821851870 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

&gt; Perhaps more helpful is a verbose mode that gives
 &gt; the exact reason why a source file (*.go, *.c, *.s,
 &gt; etc.) is ignored.

We can do that but I fear that the output will be very verbose and sometimes hard to read.

I wonder if it makes sense to report the ignored files and why if -v is set.
 
 &gt; Even though the &quot;no buildable Go files&quot; error might
 &gt; be confusing at first, the user should be quick to
 &gt; learn that it's because files are ignored. The real
 &gt; tricky thing is to figure out why a certain file is
 &gt; ignored, IMHO.

Actually, we are doing nothing but to make the error message a little bit more understandable without having to stackoverflow the message to see what is means. Current messaging is learnable but adding a little bit more info makes it more self explanatory.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Patch Set 3:

What's the status of this CL? Should it be abondoned or merged?

I would like to see a final say before I plan to commit more work in the scope of this case.
|Uploaded patch set 4.
|Patch Set 3:

(2 comments)

All done.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 3:

(1 comment)
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 1:

(6 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Uploaded patch set 6.
|Patch Set 5:

(1 comment)
|Uploaded patch set 7: Commit message was updated.
|Uploaded patch set 8.
|Patch Set 8:

(3 comments)
|Uploaded patch set 9.
|Abandoned

Merged https://go-review.googlesource.com/#/c/32117/ instead.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as f964810025ae58b623798a1944c39c06266fb45d by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 4:

(14 comments)
|Uploaded patch set 6.
|Patch Set 6:

(7 comments)
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 7:

(13 comments)
|Uploaded patch set 9.
|Patch Set 7:

(4 comments)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Patch Set 10:

(16 comments)
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Uploaded patch set 15.
|Patch Set 15:

(8 comments)
|Uploaded patch set 16.
|Patch Set 15:

(1 comment)
|Uploaded patch set 17.
|Uploaded patch set 18.
|Patch Set 18:

(4 comments)
|Change has been successfully cherry-picked as cc9ef2355eceeb5ab0d21e129980e81fe3f39958 by Jaana Burcu Dogan
|Patch Set 19:

Fixed a few other typos and submitted.

Could someone publish it?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; The point of the word &quot;client&quot; there is not to distinguish
 &gt; http.Client vs http.Client, but to note that this traces outgoing
 &gt; HTTP requests, and not incoming (server) requests.

What do you think about mentioning it as an &quot;outgoing request&quot;? Uploaded a new patch set.
|Patch Set 2:

&gt; It seems fine, but if your goal is to eliminate the word &quot;client&quot;,
 &gt; it's impossible because the thing is named ClientTrace.
 &gt; 
 &gt; So we really need very explicit wording about the lifecycle and
 &gt; relation to redirects.

Oh, well. https://go-review.googlesource.com/#/c/29376/ will shed more light on things. Abandoning this CL.
|Abandoned
|Patch Set 1: Code-Review+2

(1 comment)

Please send reviews to jbd@google.com!
|Uploaded patch set 1.
|Abandoned

adg already fixed it.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Change has been successfully cherry-picked as 2b957a3e7332c73794bed4286d744c142fc06218 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 32dd9e50b19739d4d1ad1c3dc8ec119218f126f2 by Jaana Burcu Dogan
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Change has been successfully cherry-picked as c6efba04dd0d931bb11cd7f556285fa3c9305398 by Jaana Burcu Dogan
|Patch Set 3:

Thanks!!!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(5 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Change has been successfully cherry-picked as 31f50643c36b3d2a74cf4f8df3a943bbbc06dafe by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

&gt; I don't understand your reply.

&quot;ClientTrace currently traces a single HTTP request &amp; response...&quot;

I'd rather mention that ClientTrace is reporting http.RoundTripper rather than http.Client. godoc doesn't mention this very fundamental fact and the sentence above just contributes to the problem by mentioning a case where users are making HTTP requests via http.Client.
|Uploaded patch set 3.
|Patch Set 2:

&gt; &gt; Patch Set 2:
 &gt; &gt;
 &gt; &gt; &gt; I don't understand your reply.
 &gt; &gt;
 &gt; &gt; &quot;ClientTrace currently traces a single HTTP request &amp;
 &gt; response...&quot;
 &gt; &gt;
 &gt; &gt; I'd rather mention that ClientTrace is reporting
 &gt; http.RoundTripper rather than http.Client.
 &gt; 
 &gt; Yes, and that's the part I don't think is helpful. I doubt most
 &gt; people understand the distinction, especially just from their names
 &gt; alone. That's why my proposed text spelled out the implications
 &gt; explicitly.

I mentioned that hooks are scoped to a single round trip by slightly modifying the sentence. I think it gives a broader idea how ClientTrace should be used rather than just mentioning the redirection case.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Abandoned

We decided to keep the Learn page up to date instead.
|Uploaded patch set 1.
|Abandoned

Abandoning due to the rationale at https://go-review.googlesource.com/#/c/29377/ that says the plugin name should be retrieved from the so file rather than from the file name.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1:

(2 comments)
|Change has been successfully cherry-picked as 398e861d9787d7da62a385110539d74dec34c18c by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

PTAL
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Change has been successfully cherry-picked as 9dba33872a6a762e27b42a01ec50ac815916aec4 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

We may avoid listing submitted and abandoned CLs but I am not sure if it is going to break the existing users who are depending on pending command to manage and cleanup their local branches.
|Change has been successfully cherry-picked as e973841853e6a8257069881107dd934d04049ae8 by Jaana Burcu Dogan
|Patch Set 2:

(5 comments)
|Patch Set 2:

(3 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 2:

R=go1.9
|Uploaded patch set 1.
|Abandoned

Duplicate CL at https://go-review.googlesource.com/#/c/34251/, abandoning this one.
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as da3ce8d62a7f77aadfda06cb82bd604d6469c645 by Jaana Burcu Dogan
|Patch Set 2:

Thanks!
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(7 comments)
|Patch Set 2: -Code-Review

Taking the +2 back, test requires more work.
|Patch Set 3:

(3 comments)
|Patch Set 4: Code-Review+2
|Change has been successfully cherry-picked as 314dd2c0bf3ebd592ec0d20847d27e79d0dbe8dd by Jaana Burcu Dogan
|Patch Set 5:

Thanks for the CL!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(5 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 3:

(5 comments)

Wiki sounds perfect.

Moved the content to the page and added a link from code.html.
|Uploaded patch set 5.
|Patch Set 4:

(2 comments)
|Change has been successfully cherry-picked as a37b9e8e70fd8e614caa6077b3b8afb488f7f59e by Jaana Burcu Dogan
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

PTAL
|Change has been successfully cherry-picked as 1fbdae5c3ad9aaaf827bed14a5e1e4cbd547a37c by Jaana Burcu Dogan
|Patch Set 2:

(1 comment)
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

Do you know how this switch is supposed to work? I didn't know that there are Windows-specific instructions in the source code.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(2 comments)

I will investigate why this is not done in JS. It is odd to inline &quot;display: none&quot; everywhere.
|Uploaded patch set 3.
|Patch Set 3:

Removed the inline styles to cleaup.
|Patch Set 3:

We can wait, I just cleaned it up while I am there. Not critical :)
|Patch Set 1:

(4 comments)
|Patch Set 3:

I wished that we had tests against actual providers. I vaguely remember we left the client_id there because its removal was breaking a popular provider but given there are no docs in the code, I am not sure what the actual case was.

Sending scope seems to be arbitrary, we had no historical broken behavior reported about the lack of it.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; In all these cases, the client &quot;client_id&quot; is redundant, as the real credentials are being passed in via HTTP Basic authentication. You would typically only pass in &quot;client_id&quot; if you're also passing in &quot;client_credentials&quot;. Passing in both HTTP Basic auth AND a &quot;client_id&quot; is essentially providing two different client_ids, which strictly should throw an error. HTTP Basic is required by the OAuth Spec (see https://tools.ietf.org/html/rfc6749#section-2.3.1), but passing &quot;client_id&quot; is not required. 
&gt; 
&gt; TLDR; this looks good!

We can't always follow the RFC given very big providers such as Google and Facebook are not always compatible with the RFC to begin with :(
|Patch Set 5:

&gt; Patch Set 5:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; Let's see if anyone breaks. If they do, we can put them in the list of busted auth providers.
&gt; 
&gt; This seems to have broken calls for access token generation for Facebook, which expects the client_id parameter to be passed.
&gt; 
&gt; oauth2.RegisterBrokenAuthHeaderProvider(&quot;https://graph.facebook.com&quot;) seems to fix the problem.

Created https://go-review.googlesource.com/c/36633/
|Patch Set 3:

(4 comments)
|Patch Set 4:

(3 comments)
|Patch Set 5:

(2 comments)

Let's convert the Go equivalent into an inline hint. Otherwise, looks good.
|Patch Set 7: Code-Review+2
|Change has been successfully cherry-picked as 53949f851297f0caf032ddf7ae5fb31ed6797eb6 by Jaana Burcu Dogan
|Patch Set 1: Code-Review+2

(13 comments)

I had little context that this was a reorg of the coordinator and left some comments already :( Feel free to ignore, I may fix a few of them with a few follow-up CLs.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(2 comments)
|Change has been successfully cherry-picked as ecbf90840471a8cd5500c90baea7a60a65b14b10 by Jaana Burcu Dogan
|Patch Set 1:

(4 comments)
|Patch Set 4:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Abandoned

The fix is being contributed at https://go-review.googlesource.com/c/36127/, abandoning.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

Adding a new line helped it, PTAL.
|Uploaded patch set 5: Commit message was updated.
|Patch Set 5:

Please, take another look.
|Change has been successfully cherry-picked as 29be58039577a69bfe239a8aaf2cf26d8debf566 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as c373014285671e75a2b50f45d204669442474b1b by Jaana Burcu Dogan
|Patch Set 2:

Followed by https://go-review.googlesource.com/c/36310/.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Abandoned

See https://go-review.googlesource.com/c/36314/ instead.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Abandoned

Abandoning, there is no good way to reorganize the existing docs and make these easier to see.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Patch Set 2:

Don't review until the next patch please.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

PTAL

I am not a fan of this sample, it requires much cognitive effort to follow. Maybe, we should provide snippets lives on their own rather than trying to give the reader a fully working program that profiles itself.
|Uploaded patch set 5.
|Patch Set 5:

Reverted all unnecessary changes, PTAL.
|Change has been successfully cherry-picked as 6cf7918e7335041bd7d40be4c6e976a044cc000c by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(10 comments)
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4:

(17 comments)
|Patch Set 4:

Nope, I am abandoning.
|Abandoned

Opened for review only.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as e2390ec18352f25066074331449cbcb74957068e by Jaana Burcu Dogan
|Patch Set 4:

(26 comments)
|Patch Set 9:

(22 comments)

&gt; Patch Set 9:
&gt; 
&gt; &gt; &gt; Apply: to describe the act of applying a change to the master
&gt;  &gt; branch
&gt;  &gt; &gt; Submit: as the action to apply a change
&gt;  &gt; 
&gt;  &gt; Sorry to bikeshed, but the term 'merge' might be better than
&gt;  &gt; 'apply'.
&gt; 
&gt; I believe that due to the `git merge` operation it's best to use a more general term eg 'apply'. I received feedback from others telling me this and it made sense to me. I think this is especially true since we don't `git merge` the code in but rather apply the change directly via cherry picking.
|Patch Set 10:

(1 comment)
|Patch Set 10:

&gt; Patch Set 10:
&gt; 
&gt; &gt; (1 comment)
&gt; 
&gt; Submit isn't specific to Gerrit, but the usage of this term is AFAIK unique to Gerrit. This article refers to it as a less common synonym for &quot;commit&quot; but that's not how we use it anyway.
&gt; 
&gt; In our workflow we use &quot;commit&quot;, &quot;mail&quot; and &quot;submit&quot;. These terms are very confusing as we've redefined &quot;submit&quot; from how it is used in most other VSCs. The only VCS I could find that uses &quot;submit&quot; in the way Gerrit does is Perforce which is likely why the term is used in Gerrit.
&gt; 
&gt; There is also the additional challenge of trying to use general terms for two very different types of systems, distributed VCS (Git, Mercurial) and centralized VCS (Subversion, Perforce, CVS)
&gt; 
&gt; The term &quot;apply&quot; is broadly used to refer to applying one set of changes onto a code base. You &quot;apply a patch&quot;; You &quot;apply a diff&quot;. Patch, Diff, Subversion, CVS, Git all use this term in their documentation to refer to this. This is the exact term used in the git documentation to describe what a &quot;git cherry-pick&quot; does. https://git-scm.com/docs/git-cherry-pick . In all of them they use the term &quot;apply&quot; in the same way I'm proposing here.
&gt; 
&gt; If we don't like &quot;apply&quot; then as as an alternative I do like the term &quot;promote&quot; which is listed in this article. It's even more descriptive as you are not only applying the change but also applying it to a more restricted branch (master).

Makes perfect sense. Thanks for explaining your point comprehensively.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(1 comment)

Reordered the list and created an issue explaining the problem.
|Change has been successfully cherry-picked as de0725b330ab43c1a3d6c84d961cf01183783f1e by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 60d7d247a1a5d96152061aa9cfeb5466b90a6787 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Change has been successfully cherry-picked as 76b4b8c72dc319454ff3ecb83bf49831e4e528c3 by Jaana Burcu Dogan
|Patch Set 2:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 6: Code-Review+2

The oauth2 package is not supported by the build farm. Ignore the failed CI.
|Change has been successfully cherry-picked as 01b79d94479495d23e14e5ddc8f85a9271aff260 by Jaana Burcu Dogan
|Patch Set 7:

&gt; Patch Set 6:
&gt; 
&gt; Tests are still failing, but in the golang.org/x/oauth2/google package which I did not change. What should we do about it?

Nothing, the TryBots env for the oauth2  
is broken. We don't use TryBots for the oauth2 package. Brad might disable it for the oauth2 CLs.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)
|Abandoned

Steve is going to take care of adding this section, abandoning this change.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

Thanks for the reminder, you can review it now.
|Uploaded patch set 3.
|Change has been successfully cherry-picked as 30fcca6531eb4bb278493c9fb299295b3b145934 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

Don't review until I fix the loop.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

Now, you can review. I was continuing the wrong loop on the first patch set.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Patch Set 7:

Brad, could you reopen golang/oauth2#217 once the version of pushback is deployed?
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as e1e827deaadaeab882fc5bdb00e2c23fd9c568c2 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Patch Set 1:

This should work, please confirm the numbers before reviewing.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Do we know why pushback closed the earlier issue?

The placeholder PR was 9220, but I typed 9920.
|Change has been successfully cherry-picked as 0c329e94adef391759731be3d47c2c0f3ba9f681 by Jaana Burcu Dogan
|Patch Set 3:

Please redeploy and open https://github.com/golang/go/pull/19117 &amp; https://github.com/golang/oauth2/pull/218.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as f37428d8b7e06edc4be472695db677f82c9564c5 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

(4 comments)

&gt; why not use a string or a strict to record exactly what was ignored and why

I am a little worried that NoGoError type needs to grow significantly to be able to report each case. Maybe, we can return lists of ignored files, tag mismatch files, &quot;documentation&quot; files, etc.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Patch Set 5:

&gt; Patch Set 5: Code-Review-2



&gt; &quot;no buildable Go source files&quot;

You cannot output this message without defining what &quot;buildable&quot; means. Current messaging is not just unhelpful, but is also assuming users know too much about a tool that they are not supposed to know much about. I don't want to read the source of my tool in order to use it effectively. It is the tool's role to give me actionable messages.
|Patch Set 1: Code-Review+2
|Patch Set 2:

LGTM
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

appengineVM switch is back, I hope that patch set 2 is what cbro wanted me to do. PTAL.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 4.
|Patch Set 4:

(2 comments)

As far as I understand, we need to differentiate the Flex environment, appengine.AccessToken is discouraged on Flex environments now.

The build constraint is fixed.
|Change has been successfully cherry-picked as 8cf58155e4a90a3a73149652cc36528e892c58cf by Jaana Burcu Dogan
|Patch Set 2: Code-Review+2

(1 comment)

cc'ing cbro who can redeploy once the CL is merged.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as efb10a30610e617dbb17fc243f4cc61a8cfa2903 by Jaana Burcu Dogan
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 1611bb46e67abc64a71ecc5c3ae67f1cbbc2b921 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)
|Patch Set 3:

Brad, can you also redeploy http2.golang.org?
|Patch Set 1:

(2 comments)
|Patch Set 3: Code-Review+2
|Change has been successfully cherry-picked as 7374b3f1ecc8adceb22d365168403eb328a845f4 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Change has been successfully cherry-picked as fce1c816b5931cda200d5de72fcc989c937e202f by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

You can cherry pick this CL and start the blog locally, see the instructions on github.com/golang/blog README. 

Here is a screenshot if that's too much work: http://i.imgur.com/AZUKjor.png
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(9 comments)
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(2 comments)
|Patch Set 8: Run-TryBot+1
|Uploaded patch set 9.
|Patch Set 9:

(2 comments)
|Change has been successfully cherry-picked as fa33df21410c950dc4bca7a2e33955dba7d7e455 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; This bothers me in two ways:
&gt; 1. We shouldn't need such a complex page to demonstrate server push.
&gt; 2. The nice thing about the gophertiles page is the user can easily experiment with different latency settings to see how performance changes with latency. It's impossible to do that here due to the hard-coded 100ms sleeps.
&gt; 
I think the server push requires its own latency dimension. We should let the user to pick a variety of sleep times in the handler for them to see how server push improves each situation.

The gophertiles demo may look like:

[HTTP/2 with 0s image latency] [HTTP/1.x with 0s image latency]
[HTTP/2 with 30ms image latency] [HTTP/1.x with 30ms image latency]
[HTTP/2 with 200ms image latency] [HTTP/1.x with 200ms image latency]
[HTTP/2 with 1s image latency] [HTTP/1.x with 1s image latency]

[HTTP/2 with 100ms page latency] [HTTP/2 Server Push with 100ms page latency]
[HTTP/2 with 300ms page latency] [HTTP/2 Server Push with 300ms page latency]
[HTTP/2 with 500ms page latency] [HTTP/2 Server Push with 500ms page latency]

Then, we can demonstrate how waterfalls of the pushed pages look different and how idle time is utilized.

&gt; In order for HTTP/2 push to speed up the page, we need to send pushes within idle time after the HTML response. If there is no idle time, there's no benefit from pushing.
&gt; 
&gt; I still think we can use the gophertiles page. I should have thought through this more in your last CL. One problem with your last CL is that the &quot;latency&quot; param is meant to simulate latency between the client and server, but when we push, that latency is zero (because we're not waiting for a request from the client). So, I shouldn't have suggested adding latency to the pushed responses because that doesn't make any sense. A single &quot;push&quot; mode, as you originally suggested, makes the most sense.
&gt;

 
&gt; A second problem is that the images are being pushed before the HTML page. Looking at a trace in Chrome, I see a 60ms pause between when Chrome receives the last byte of data and when it &quot;adopts&quot; all oft he pushed streams. Further, Chrome is actually receiving the HTML *after* receiving the pushed images. This is definitely suboptimal and would likely be fixed by https://github.com/golang/go/issues/18318. Since we're using the http2 package directly, instead of waiting for that issue to be fixed, we can use the priority scheduler directly: just set http2.Server.NewWriteScheduler (https://github.com/golang/net/blob/master/http2/server.go#L128, see serveProdTLS in h2demo.go) to func() http2.WriteScheduler ( return http2.NewPriorityWriteScheduler(nil) }.

Sounds good, I will enable the priority scheduler.

&gt; 
&gt; To sum up, I think we should:
&gt; - Continue using server push for gophertiles, but without any latency
&gt; - Use the priority write scheduler
|Uploaded patch set 3.
|Patch Set 3:

(5 comments)
|Uploaded patch set 4.
|Patch Set 4:

(5 comments)
|Patch Set 4: Run-TryBot+1
|Change has been successfully cherry-picked as d9e3f127e6a967bcb64483d1e0e7e919c3c9f039 by Jaana Burcu Dogan
|Patch Set 5:

Can we redeploy h2demo?
|Uploaded patch set 1.
|Abandoned

Abandon in favor of https://go-review.googlesource.com/c/38657/.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; Maybe you're solving a different problem than I reported.
&gt; 
&gt; I reported that if I go to https://http2.golang.org/serverpush and click &quot;HTTP only&quot;, the link is to http://http2.golang.org/serverpush but that redirects me to https://http2.golang.org/ which seems like it probably wasn't the intent of that link if it was from a serverpush page to a serverpush page.

You are experiencing a different problem. I cannot reproduce it locally because browser cannot show a page due to the fact that server is dropping the connection. Server logs:

&quot;http: TLS handshake error from 127.0.0.1:50115: tls: first record does not look like a TLS handshake&quot;

I will investigate what's going wrong.

&gt; 
&gt; What is the problem?

This CL generates the URL with the HTTP host flag.
|Patch Set 2:

/gophertiles page behaves the same, did this ever work locally?
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; HTTP http://http2.golang.org/gophertiles works for me. I don't know about local.

Prod HTTP works for me too. Locally HTTP doesn't work and it is a net/http bug. Filed https://github.com/golang/go/issues/19755.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

The problem was the auto redirection to HTTPS if HTTP/2 is already available.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Change has been successfully cherry-picked as ffcf1bedda3b04ebb15a168a59800a73d6dc0f4d by Jaana Burcu Dogan
|Patch Set 5:

Brad, please redeploy now. I will not submit https://go-review.googlesource.com/c/38603/ until this is live.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

A render is available at http://i.imgur.com/NVVv20a.png.
|Uploaded patch set 3.
|Patch Set 3:

(4 comments)
|Patch Set 3:

(1 comment)
|Change has been successfully cherry-picked as 7db565821bf8e7df42c5f70ec9251dea669715e1 by Jaana Burcu Dogan
|Patch Set 4:

Chris, can you publish this?
|Patch Set 1:

Chris, wanna redeploy?
|Change has been successfully cherry-picked as b1899408185dc08b4401e20ecba91d59696f5605 by Jaana Burcu Dogan
|Uploaded patch set 1.
|Change has been successfully cherry-picked as a6bd8cefa1811bd24b86f8902872e4e8225f74c4 by Jaana Burcu Dogan
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review-1

(1 comment)
|Patch Set 1: Run-TryBot+1 -Code-Review

Having a second round of thought, I think we should merge the cases where behaviour is not always clear with intuition, such as path.Dir(&quot;&quot;)'s.
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as ad516a297a9f2a74ecc244861b298c94bdd28b9d by Jaana Burcu Dogan
|Patch Set 3:

LGTM (sorry I was late)
|Patch Set 2: Code-Review+2
|Patch Set 1:

This is useful but IMO we need a few more words on the path package godoc. Maybe we should explicitly say that it is not going to work on Windows if user depends on it to manipulate file paths. I believe, there are lots of people who cannot truly parse the messaging around forward/backward slashes, and are ignoring the suggestion altogether.
|Patch Set 2: Code-Review+2

This looks great, thanks.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Change has been successfully cherry-picked as 1816238e220c6657276d3bc6118dc95b3eb21e71 by Jaana Burcu Dogan
|-toolexec? I guess you will add it after gomobile init, am I right?
|I am wondering if it's better to reimplement what clangwrap.sh does in Go here, so in case of any error (xcode unstalled?), that can be detected early.
|It doesn't matter because it's being used by the generated code only.

I hoped some part of memory management code in seq_darwin.m can be shared with bind/java/seq_android.c. But it seems that the code sharing will be pretty small. 

Changed to expose the mem structure.
|Done
|:-)
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|added BUG note. Will address it soon.
|Thanks for the link. removed.
|done
|done.
|removed.
In Java all the initialization (buf allocation) was done from Seq's constructor. But here there is no constructor. So, I needed it. Now, the memory allocation is done lazily, so removed.
|No, it's not yet reused. Possible optimization option in the future.
|that's in the very next CL.
|For the initial version we support only UTF-8. If it's not UTF8, the behavior is undefined. That will be documented in gobind. For data other than utf-8, []byte should be used for now. To make it clear, changed the function name to UTF8.
|Thanks. Done. 
I wish I could avoid lengthOfBytesUsingEncoding call to determine the buf size but I think it's not too bad.
|done
|Done
|good point. done as crawshaw suggested.
|oops. fixed.
|Done
|Crawshaw put the list in http://godoc.org/golang.org/x/mobile/cmd/gobind.
I will add the link in a separate change to improve the package doc.
|Good point. made changes in several places - to use paramName.
Added test cases.
|filled or filed?

For feature requests, let's direct users to discuss them first in the mailing list (golang-nuts), instead of using the issue tracker.
|Ok. I was thinking about files across different file systems but you are right, both are under tmpdir.

The package doc does not say the details but &quot;Rename renames (moves) a file. OS-specific restrictions might apply.&quot; A bit of digging in the issues, on windows, the op atomicity and the behavior when the dst exists seem different from unix systems', which is irrelevant to this case.
So, I guess it's okay to use Rename if they are the only differences.
|i'd avoid os.Rename and use io.Copy because os-specific restriction may apply.
|this will break tests on other platforms. Why not the template args?
|GOPATH1?
|mention that the example works on the desktop?
(link to the audio package for al lib installation on linux)
|can you add a TODO to investigate the edge cases where multiple audio devices are involved?
|Isn't the issue #10686 still present?
|drop .
|I think hasTouch can be computed in run once because all callback registrations must be done before run.
|can't we run callbacks in this goroutine? use of separate gorotines may cause non-deterministic, out-of-order Config callback execution.
|update please.
|nice.
|rename the function 'windowDraw'. looping is done by the caller.
|comment
|Should this be called Register? 

It's not yet obvious to me why Callback.Start/Stop are not sufficient and should be replaced with this new function.
|skip append if null is passed in?
|Isn't the Config callback sufficient? It sounds tricky that a returned Config is valid only until the Config callback is called. If possible I prefer limiting the Config's life inside the Config callback and letting users maintain a copy of some info based on need.
|desktop-testing
|broken sentence
|after
|why is it no longer necessary?
|I just remembered David added the minimal gomobile installation instruction already in http://godoc.org/golang.org/x/mobile/cmd/gomobile

I think that may be the first thing we want to mention here. 

We can also consider a shorter package doc for basic app - by referencing the gomobile godoc page.
|ah, yes. thanks for remembering it. done.
|thanks for the tip.
|The documentation on the tip http://tip.golang.org/doc/install/source already mention GOROOT_BOOTSTRAP. (note &quot;tip.golang.org&quot;) If the current instruction on that page is difficult to follow, I think that documentation must be fixed, and make this doc just point to the tip.golang.org until 1.5 release is announced.

I still don't know it's really necessary to suggest the installation location, and  even installing go1.4 (from source?) for people who will have to deal with more difficult challenges during mobile development. :-)

What do you think?
|why is this new type other than event.Touch necessary?
|Can I assume that there is always a matching TouchEnd event for a motion event?
|I am ok with this separate type for id except the fact that TouchSequenceID is  long but I don't have any better suggestion.

--

TouchSequence ~= Pointer in Android, [UI]Touch in iOS, finger (so fingerId of Touch) in Unity, Touch in w3c touch event spec.
event.Touch ~= MotionEvent in Android, [UI]Event in iOS, Touch in Unity, TouchEvent in w3c touch event spec. 

I like iOS's use of Touch, but unfortunately, we are in the event package and Touch means Touch event.
|Updated with the instruction for Android Studio.
|aha, I see.
This step is not necessary (so no need of ndk installation by users).
Just build go 1.5 for the host environment.

./make.bash

Then, run gomobile init. That should do all the remaining job. Otherwise, it's a bug.
|I think it's okay because you already clearly said &quot;you need to install
Go 1.5 from the source.&quot; We can improve gomobile's init error message so that if permission error occurs, we can mention sudo or installation from source.

Once 1.5 release branch gets ready, we can switch to use the link to http://golang.org/doc/install/source.
|We can move this to x/mobile/cmd/gomobile/README.md as installation instruction and, then let mobile/README.md and this README.md have a link to it.
|No objection on minimizing use of readme file.
|I don't think this is true - gomobile init downloads everything under the hood. Users don't have to worry about ndk at all.
|i am using gomobile without installing ndk myself. 
arm-linux-androideabi-gcc is in pkg/gomobile/android-ndk-r10d/arm/bin directory after running gomobile init. gomobile init has the logic to build go using it. check init.go (around line 160).
|how about just putting a link to the go installation (from source) page and mention we need 1.5 (or currently the tip)?

http://golang.org/doc/install/source
|mention that this doesn't work on windows yet
(gl problem)
|testp2
|are both CoreFoundation, Foundation necessary?
|return false otherwise

(didn't compiler complain?)
|Yes, that's the right thing to do. according to the description of cl 6366, old*a should go. filing a bug.
|Before your change for ignoring main, I happened to have a main without an infinite select loop. That made the program terminated immediately and silently (with exit code=0) as go's main ended. 

So, I decided to let the testp print &quot;PASS&quot; at the end, and this script captures the stdout in 'output' and checks it's PASS. The stdout message will not be visible outside of this script.
|Yes, this was quite surprising to me too.
In c-shared mode, 'currently' main is called, and if the main ends, the program ends. Should it be fixed? The mobile repo implementation depends on this behavior to call app.Run after initialization. (ex: golang.org/x/mobile/example/basic/main.go)
|updated the comment.
|Done
|Done
|Done
|Done
|buildmode=c-archive as well in the future.
|thanks for the explanation.
|I am curious. Why couldn't we call main.main directly like this? Is it because of the env vars?
|what about other env vars like PATH, LD_LIBRARY_PATH?
|need to limit build to android/arm?
|Done. thanks.
|should this event be notified to users through a callback?
Or, are users supposed to check geom changes for every Draw,Touch call?
|through to the
|i don't see this part of the change.
|is there any place to document what -lldb option is?
|// Error returns ...

BTW, is the goal of this package just a thin-wrapper around open al? I find this alGetError (and error handling) is awkward to use and hope it can be avoided in Go if possible. For example, check the error when a method fails and return the error code.. Unfortunately, I don't have enough experience with AL to tell if it's reasonable.
|how about making this to return (*Device, error)?
Or, is Device with nil C.ALCdevice is ok to use?
|in *theory*, the sensor event queue may have more events queued from the previous android_readQueue, if the previous call returned because n events were read.

Should it drain the sensor event queue before any ALooper_pollAll? Or is it better not to do it because the events in the queue may be too stale?
|Read the source code. Indeed, as you told me, there is no high-level queueing but epoll+read from file descriptor (one end of a socket pair). 

The &quot;Level-triggered and edge-triggered&quot; section in the epoll man page describes the similar situation, and I don't see EPOLLET from code. Thus, I think it's okay to go with the current design - actually, it may be better if multiple sensor types are competing. No need for TODO. Thanks for investigating.
|unnecessary.

ALOOPER_POLL_TIMEOUT is a negative number. If ALooper_pollAll returns due to timeout, we get out of the loop and this condition will never be met.
|Avoid blocking forever
|do you mean 
m.minDelay == 0 &#124;&#124; d &lt; m.minDelay ?

BTW I found there is no check on the value of delay passed- it could be 0 or negative.
|can you break this into multiple lines?
or, consider grouping the types/timestamps/vectors arrays into a struct.

i am suffering with gerrit ui when not having a big monitor...
|Not in the scope of this CL, but since we are here: Shouldn't there be a loop to get events until there is no more event in the queue?
|With my very limited knowledge on ALooper_pollAll or the android sensor API, I am not 100% sure, but given that ALooper_pollAll takes &amp;events and records the number of events there, I *guess* there could be multiple sensor events queued up. 

If that's true, even though there are sensor events to fetch, the current code calls ALooper_pollAll. If we are unlucky, it will timeout and will return even though the queue is not empty. That's not what the Read api promised.

Checking the ndk/samples/native-activity sample that draws the next frame when ASensorEventQueue has nothing to return, I feel more strongly that we need an inner loop here, but please double check.
|Still types/timestamps's i-th value should correspond to the three values from vectors[3*i]. So, one index.
|where is this i used? (if i missed, it's because of gerrit ui :-)
|So, the following doesn't work?
 
switch s := (v.in).(type) {
  .. 
 case enableSignal:
   usecsDelay := s.delay.Nanoseconds() * 1000
   ...
 case disableSignal:
   C.android_disableSensor(m.m.queue, typeToInt(s.t))
 case readSignal:
   n, err := readEvents(m, s.dst)
   ...
}

I sent the same comments before.
|m.m is allocated in this go file and I don't think it should be freed with C.free. Have you tried to force GC around the close call for test?
|put it in one line.
|disableSignal
|why not skip alloc/init/close if m.m == nil?
|you can declare s in this type switch
switch s := (v.in).(type)
|yes. 
switch s := (v.in).(type) {

so you don't need to type cast again for enableSignal or disableSignal
|why atomic?
|I see. 

I don't quite understand the looper id &amp; looper yet - when there are two threads concurrently running and each calls android_createManager, should they still make sure their ids don't collide?
|I meant C.free is not necessary - mgr is allocated from Go side. In my test, C.free here caused panic.
|&amp;mgr is already *C.android_SensorManager.
Similarly, I don't think C.free on m.m in close is necessary.
|*(s.n) = n
*(s.err) = err
|i think the done should be a chan error to surface the underlying error. Another option is the pattern like readSignal (that has *err field) but that's confusing.
|Either is fine. All of enable/disable/read/close return error, so I thought it's more natural to just use a error channel. If the channel is used only to pass one value (nil or non-nil error), and doesn't get closed consistently, there will be no ambiguity. Use close of a channel is useful when signaling multiple watchers, but in this case, I don't see much merit. However, I don't feel strong about either ways, so I am fine with the current impl for now.
|log the t to help debugging
|how about returning an error code?
|not used
|ASensorEvent's timestamp is int64 type, nanoseconds, right?
Please avoid conversion between int64 and float32. 
One option is to keep the timestamp in a separate int64_t array and make android_readQueue returns the num events, not the float vector size.
|good idea. done.
|Done
|Actually, I think having the downloaded archives in a separate directory under GOPATH/pkg/gomobile/download is better than the current state. I originally used a similar approach when I had a network problem at home so I couldn't reliably communicate with outside :-(

But I want to keep the current code as it is. Changing to use downloaded archives requires significant code changes (more complexity to fetching path, handling of ndkccpath directory, etc) and if we implement it, I also want to see the checksum comparison - to verify the archive download was complete.
|Done
|the first thing it checks is ndkccdl. (&lt;ndkccpath&gt;/downloaded)
|this is the ndkccdl.
|Altimeter data type
|I see. I was originally wondering if there was a way to avoid m.init for uninitialized Manger's Close or fail nicely from platform-independent layer when methods are called on Closed' Manager. And there is sync.Once.

But thinking about it again, I don't think that's important and common case, so just using zero-value Manager + lazy init is okay.

Can you just mention in the comment for Close, that after Close, reusing the manager is not allowed?
|will there be a New function to return a Manager instance?
|s/accelerometer//
|(optional) you can check the sensorNames map.
|Good idea. ANDROID_COMPILE_SDK_VERSION is gone now!

I was experimenting with the dummy classes - yes, it is feasible. But we need something to pass to -bootclasspath to use -source/target flags to use jdk7 and android.jar serves for it well. Missing -bootclasspath doesn't fail javac, but outputs an annoying warning message. 

Passing ANDROID_HOME doesn't seem too hard (android studio has the sdk property we can query). So, in this change, I will just leave it as it is.
|removed.
|done.
|if !debug {
  defer os.RemoveAll(tmpdir)
}
|ok. we know that once the builder complains out of disk space :-) we at least know what to look at.
|no more logging if timed out?
|can we make it return appdir instead of setting the global var? Use of global vars is a bit confusing.
|can you put this paragraph in iostest.bash to justify the need of reboot?
|please put ; do in here instead.
|I want to know at least what the unit is.
In iOS, it seems it's seconds since a device was booted. In Android, does this correspond to SensorEvent.timestamp? (nanoseconds)
|Superclass of CMAccelerometerData is CMLogItem, and it has timestamp property. https://developer.apple.com/library/ios/documentation/CoreMotion/Reference/CMLogItem_Class/index.html#//apple_ref/occ/instm/CMLogItem/timestamp

If the blocking interface is able to return multiple samples, I think timestamp is necessary (depending on its meaning).
|should there be a function to query Accelerometer's state?
|when will users want to have n &gt; 1? I want to see some usage example - good for part of doc.

BTW, I assumed, from the thread of the issue 9330, the poll method would return immediately, but it seems my guess was wrong.
|may return error as well.
|will it be helpful in debugging if somehow we log a message to indicate that waitFor returns because of timeout?
|Done
|if machinePPI doesn't have an entry for the machine, either report an error or  need something to fallback to avoid div by 0 later.
|How does it look now?

Now, I wonder if applying FromSlash in Clean/Join/Split.. is correct for all systems. If there is a system that allows '/' for a valid filename or dir name, this causes a problem. On windows, '/' is a reserved character. What about other non-unix platforms? Or do we not care?
|I also feel uncomfortable with Split/SplitList behavior change.
How about making this change just a comment clarification CL, and not touch Split/SplitList. The Split/SplitList change will need communication with users.
|case &quot;nacl&quot;, &quot;plan9&quot;, &quot;windows&quot;:

But, why not build tags like before?
|skip file open/copy if buildN?
|pkg.Deps?
|can we assume len(cpackage_name) &lt; PATH_MAX-len(&quot;/data/data/&quot;)?
|are we happy with 2XX codes other than StatusOK?
|ok. still i prefer use err. err4 sounds sad..
|you can reuse err.

Or, how about just check the resp.StatusCode after f.Close, and return an error if not http.StatusOK?
|Is it because unix domain socket is not supported in ios, or just the current unix domain socket test setup does not fit?

--
&quot;Normally, sandboxed apps cannot use Mach IPC, POSIX semaphores and shared memory, or UNIX domain sockets (usefully). However, by specifying an entitlement that requests membership in an application group, an app can use these technologies to communicate with other members of that application group.&quot;

https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html
|ooops. sorry.
|oh, that's true. I just tried it myself on windows, and it actually cleans up the path. I think that simplifies a lot of path manipulation in gomobile source code.
|wrap this in a function (mkOpenALPkg?) that returns an err, and if err != nil, log.Fatal.
Currently the errors in Close/Flush are not reported.
|optionally, this file-gzip-tar writers can be refactored and mkpkg can reuse it. But it can be in a separate CL.
|I think we need this in a package doc or a separate README so that people can find this easily.
|Thanks. I updated the code so that env vars starting with &quot;=&quot; are passed without any modification.
|I guess darwin,!arm,!arm64 doesn't work. is it a bug in build tag handling?
or was the previous one broken because of the file name of the other file zoneinfo_darwin_armx.go?
|this belongs to a separate cl possibly with doc updates and link to your issue # - but still we want users not to depend on availability of State in init for portability.
|2015
|GROOT?
|s/th pkgpath/the pkgpath
|done
|done.
|yeah, i encountered the issue while working on gomobile build and planned to change it in the following cls.
|Done
|Done
|Soon, the code path will start using the stripped ndk that doesn't require 7z.
or do you want the winstrap to include 7z?
|sadly yes. extracted NDK contains readonly files, which prevents clean up of the temp directory. :-( Anyone who uses temp directories to copy external packages may end up with the same problem. I think os.RemoveAll really should provide high-level, less-platform-dependent semantics.
|best-effort.I don't care what strange intermediate errors occur while traversing trees as long as the following os.RemoveAll succeeds.
|do you want to commit as it is for now?
|how about giving a different name for each test?
|dstBin.Close to be nice?
|needs a comment on what this value is - e.g. // onlyc crawshaw can run it with this key ;-)
|you can utilize a nil channel if t &lt; 1*time.Second.
|why not kill it when &lt;-timedout is handled?
if select catches &lt;-exited first (killed by p.Kill here) before timedout's closing, the error message may be confusing.
|cp(dst, src string) error
|filepath.Dir and filepath.Dir?
|does this mean that it's not feasible to run cpu profile at all, or  it is skipped just because the test cannot run the following uname?
|what is this?
|Pause pauses
|one time.Duration is unnecessary.
|// Total returns
|should this exception be mentioned in the long help message?
|turned out I have to check the valid ctx was passed in first (like in init_from_context).
|that is because of the mem_read call from Java_go_Seq_readUTF16 (line 280)
|ah, I see. done. Also changed MEM_WRITE.
|See line 337.
|removed.
|Done
|notifyInitialized?
The name runComplete is confusing and misleading; I thought it had to be always paired with runStart.
|call windowDrawLoop here to make it clear it's not called when current_native_activity == nil.
|need a comment.
|?
|cocoa events?
|I think the reason for the thread id check in run (initThreadID) in darwin_amd64.go applies here as well.
|should it include all old hardware info?
|is there a way to auto generate this map?
|2015

same for other files.
|why is it needed?
|i guess these are default and can be omitted.
|I am confused. is it necessary to have @synthesize for each @property?
|only if len(b) != 0
|reuse goVersion output already stored in 'version'?
|t.Fatalf(&quot;computing diff failed: %v&quot;, err)
|parameterize the ndk version too - so ndk upgrade causes less line changes.
|Done
|PATH often has multiple elements, this needs comparison against each element
|ndkccbin?
|too long for a single line. break it. 

btw, error strings starting with upper case and ending with . are not recommended. But I don't know how strict we need to be here because the error seems to be used to convey the instruction to the user.
|prefixLen
|add TODO? I will be puzzled by this comment but lack of Android/Darwin handling.
|right. done.
|Done
|Done. required.
|Done
|Done
|Done
|currently windows version is not yet available. how about using the full ndk version for windows? Or make useStrippedNDK a flag in this CL. Either is fine.
|pass -n and -x?
|do we still need to create apk for buildN?
|to include this step for buildV, 

w, err := apkcreate(&quot;lib/armeabi/lib&quot;+libName+&quot;.so&quot;)
if err != nil {
   return err
}

if !buildN {
   r, err := os.Open(libPath)
   ...
   if _, err := io.Copy(w,r); ...
}
|why is it better than having it in manifestTmpl?
|if buildV
|either mention that this requires adb, or install our version in runInit
|removed. There is a go generate rule we are using internally, but will update after this
|removed *output.
|does it mean that if the officially released version of Go is used, this does not rebuild the standard library? The original go build help message is a bit confusing. 

by the way, as the go build help message is changed, we have to keep this in sync? How about just mentioning the set of supported flags and redirecting users to reference go build help message?
|what corresponds to 'release' in gomobile context?
|Curious. Is there a way to create a package doc (command doc) that includes the command/subcommand usage?

Or.. go generate runs 1) build, 2) run the command to get the help message, 3) piggyback the output to doc.go...?
|-i

flags select android/ios/architecture optionally. Even when tool chains for all possibilities are available, user may want to test on a specific case. Or, maybe take GOOS/GOARCH env?

flags to control debug/release build mode?
|how about a flag for it?
|random thought: would be nice to have an option to write to the disk or print out  the default AndroidManifest.xml data - so users can use it as a template to start with.
|copyright message
|for windows .exe
|err2
|err3
|check the goroot permission early - before fetching/compiling...
|you're right, if we use non-blocking, we need to retry in case of EINTR. The initial motivation was to make closer to what android liblog is implementing. But liblog is handling other types of logs and this code path is most likely for panic message (except the builtin print) which can be large but truncated one is not desirable. So I agree that that's not enough justification for non-blocking.

Blocking socket simplifies the code a lot and this code should not run in most cases; I switched back to blocking socket.

I was afraid of unresponsiveness during panic but we can handle it later if it turns out to be a real problem. App programmers should avoid panic.
|Done. I use _SOCK_NONBLOCK.
|Done
|oh, right! why didn't I think about it. Done.
|Renamed to stubs_android.go.
|Done
|Done
|oops. fixed.
|Right, the problem was, so far this docker file doesn't pin the go version - so I had no idea what version I or other users were using (and what's worse, docker build also got confused). Now I pinned the tip version. Thanks for the advice!
|Yes, I noticed that (about 70M more). Should I revert back? The only reason I favored git clone was that's the only way I know to check what's in the tip. (version of tip)
|fixed. btw, strangely, use of the binary release creates a slightly bigger docker image.
|Done
|let's be consistent about putting the 'apk:' prefix on the error messages. w.clearCur() may return an 'apk:'-prefixed error already. How about adding the prefix only when returning an error from exported methods? Of course, it's not perfect (ex. Writer.Close -&gt; Writer.clearCur -&gt; fileWriter.Close...) but not worse.
|?
|apkw := NewWriter(f, privKey)
|t.Skip
|const serialNo = 0x5462C4dd
|You're right. Returning just subdir now.
|binEndNamespace?  is it intentional?
|There can be multiple xmlns attributes and it seems this overwrites the previous entry.

For example,
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
          xmlns:tools=&quot;http://schemas.android.com/tools&quot;
          package=&quot;com.example.hello&quot;&gt;
...

map[int][]binEndNamespace?
|why?
|Done
|nice!
|Done
|Done
|Done
|will there be other package to support loading of user-supplied fonts or user-selected fonts?

How about updating the cl description to 
mobile/font: platform-independent access to system fonts
|Why is Monospace special? Will there be serif or sans-serif too?
|it seems that you have enough information to preallocate the large enough buf. Something like 12 + 16*len(tags) + sum(dataLens)
|// version 1.0
|these fields are not relevant? Can you provide a link to the spec for reference?
|?? 
Comment why this is commented out, or use t.Skip?
|prefixed the param names with &quot;param_&quot; to avoid any conflicts in case any of the param names is 'res' or 'err'.
|updated the commands with the -output option.
|https://go-review.googlesource.com/#/c/2380/
|Done
|No particular reason but my bad memory. Changed.
|Done. It seems that MoreAssers.assertEquals just returns null pointer exception when null arrays are passed in. Specialized the 0 length array test case in bind/java/SeqTest.java.
|Done
|good idea. ptal.
|removed. leftover from debugging.
|done;done;done.
|how did you test it?
|per minux's email, I guess there are cases that need to be handled differently (e.g. ANDROID_CPU_ARM_FEATURE_LDREX_STREX )
Can we use these android_getCpuFamily/Features like in http://osxr.org/android/source/ndk/tests/device/test-cpufeatures/jni/test_cpufeatures.c#0049 ?
|do you want to check this in now? it seems the runtime for x86 does not have _rt0_arm_linux1 equiv that android.c depends on yet.
|removed.
|put the docker image file after -v option and before /bin/bash.

docker run --rm -v $GOPATH/src:/src /bin/bash -c 'cd /src/your/project &amp;&amp; ./make.bash'
|We adjust the types by using C wrappers for the problematic functions.
|Also add -o option for bind.
|return filepath.Walk(...
|It looks like a bug - need to call os.MkDirAll on filepath.Dir(dst) I guess.
|We can return if assetsDirExists is false. One less indent leve.
With buildX, printcmd should run only when assetsDirExists.
|oops. sorry.
|Done
|Yes. I don't know yet though.
|Now I have paramInfo defined globally.
|Yes. Added TODO.
|I was thinking to check the availability of clang-format and if so, call it. But you are right. And I don't need to bother in most cases if gomobile bind takes care of it eventually.
|Done. paramInfo.
|I just realized this is interesting. 
the caller calls run(callbacks) and run replaces the global var with the passed in param. 

Confusing. Maybe we should rework my previous cl/10117 to follow this pattern instead - use the snapshot of the cbs and each file works with the local(?) version of callbacks snapshot.
|GoSeqRef is a type returned from go_seq_readRef and passed to go_seq_writeRef. This type allows those functions to handle both Go proxy object (with only refnum property set) and Objective-C stub object (with obj property set). 

For a Go object passed to obj-c, we create a proxy object based on the refnum from go_seq_readRef. For an Objective-C object passed to Go and passed back to objective-C land, we want go_seq_readRef to return the Objective-C object (obj). 

I removed GoSeqProxyObject now. My intention was to use GoSeqProxyObject as a base class of all Go proxy object so that I can save a couple of lines per each proxy object type def generated by gobind. (initWithRef). But it seems that the generating the code with gobind is not difficult and one less type makes already-complicated seq_darwin.m simpler. 
See objc/testpkg/objc_testpkg/GoTestpkg.*. 

Destroy call is still hidden in GoSeqRef's dealloc (one less thing in seq.h).

What do you think?
|Done
|Done
|removed.
|Done
|Done, in cl/10639
|Good point. I prepared 
https://go-review.googlesource.com/#/c/10639/ 
but this depends on changes to bind/seq Go package (proposed in cl/10638).
I will send out cl/10639 for review after the cl/10638 is submitted.
|Thanks.
|no reason other than I am not fluent in objective-C yet.
|Done
|what's this '6' from?
|you can panic here instead of the following if id == -1 check
|line 203-204 can be replaced with find_class.

I still don't understand why lookup by &quot;[B&quot; didn't work previously and how the recent initSeq change fixed this.
|nice. do you have a cl to remove app.GetConfig's ClassFinder already?
|can we use deferred Unlock?
|i am lost - is it hard to change to send the texture deletion request to the thread through a channel?
|why not make key to be just an int, and set finalizer on img?

Also, you think it's too much to make the caller responsible for calling a destroy method when it's unnecessary so that this finalizer setup is avoided?
|package ignore
|I wonder if we need to go with a more strange name in order to reduce the false positives - matching a regular go type that happens to have the same Refnum method.
|Done
|Now I use Fatalf, so in case the test times out due to slow gomobile int, I hope Logf shows up in the log.
|Done
|Done
|Done. Yeah, the original sentence was wrong.

Just a note in case there are questions from users: the PATH used in Android Studio may not be the PATH user configured in their user profile, depending on how Android Studio was launched. The plugin searches usual places where the Go is installed.
|Done. 
Users can skip this if the gomobile is installed in the PATH.
|Done
|Done
|are all these files necessary?
|instructions on how to update the scodetest project (if ever needed) and what files are necessary to be in vcs would be helpful
|the cl description should be, skip test if if ANDROID_HOME is unset
|what do you think about

switch tkn.Name.Local {
default:
  q = append(q, ltoken{tkn, line})
case &quot;uses-sdk&quot;:
  return nil, fmt.Errorf(...)
case &quot;manifest&quot;:
  ...
}
|still necessary?
|shouldn't it be compared against MinSDK?
|Is there any other requirement (necessary platform version etc.)? 

Currently I can't make internal/binres/binres_test.go pass in my environment (TestEncode failed with attrs not matching) so I wonder if there is any other requirements that I have to ensure
|how about making it check the existence of the file (or in other place) so in case it's not found, the error message instructs how to install the platform support?
|2016
|%d
|nit: s/return/returns
|s/(jbyteArray)//
|Is it necessary when _param_x is not a copied slice?
|I see. I was confused by the last sentence of toSlice comment.

// toSlice takes a nbyteslice (jbyteArray) and returns a byte slice
// with the data. If cpy is set, the slice contains a copy of the data. For
// such a copied slice, generated Go code calls releaseByteSlice after use.
|Shouldn't this be long if we keep mapping Go int to java's long type? 

Related to http://golang.org/issues/11421 - actually, I realized that this is a problem for objective-c running on 64bit platform. Maybe, we just choose to treat int as either 32bit or 64bit, generate cgo code accordingly, clearly document this and recommend to use int32 or int64 in API for binding whenever possible.
|s/javaPkg/prefix
|is this copy of setter param unavoidable? For []byte type field setter, how many copies are necessary?
|nit: s/use/uses
|seems like this file needs to be manually gofmt'd
|how about having a separate type (fileType) for fileType instead of string? That will make the API self-explanatory
|include the fileType info
|case *types.Var is covered already
|Please comment what mapping it is doing. I am confused by the mapping of Pointer, Named types.
|C int type is different from Go int type (e.g. sizeof(c int) = 4 in amd64).
I overlooked it when writing objective-c generator. I wonder if we have to fix it (intptr_t?)

Hmm, cgo maps int to C.int...
|I don't understand this
|Can you add a comment somewhere about the copy behavior?
When the byte slice/string is copied, and when not.
|if s == &quot;&quot; {
  return nil
}
return errors.New(s)
|%d
|Isn't it NULL_REFNUM?
|blank at the end
|how about go_seq_from_objc_bytearray?
|go_seq_go_to_refnum
|why is it necessary to copy seq_darwin.m?
|can you add corresponding tests in bind/java and bind/objc if these are not covered by other existing test cases?
|nit: can fit in
|just return T.Kind() != types.String
|why is this repeated?
|benchmark

How about 
// Package benchmark contains benchmarking bound functions for internal use.
|How about putting this under bind/internal? And, name the package 'benchmark' instead of 'benchmarkpkg'
|why only on darwin/linux?
|blank line. I assume the above sentence is not the comment of Run
|how about s/bin/buf for consistency?
|isn't k.size() already an int?
|shouldn't this test inspect the RefMap contents?
|please don't skip { }.
|can we align the params differently (maybe align it to the first param) or not break the line?
|no line break
|extra space at the end
|Does this imply that a Go thread may remain attached to JVM after it returns to Go from the recv cgo call? Isn't it possible that JVM and Go runtime interfere?
|where is it used?
|if ok &amp;&amp; intf.NumMethods() &gt; 0 {
   intfs = append(intfs, o)
}

one line shorter.
|internal/binres: unmarshal map from xml
|the only non-nil err case is when the lengths don't match. don't need to compare the values?
|Drawing is done outside of GLKView. 
It is not obvious to me how app package now prevents gl command execution when the app goes to background. Shouldn't it make sure to  take some of the steps described here?

https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/ImplementingaMultitasking-awareOpenGLESApplication/ImplementingaMultitasking-awareOpenGLESApplication.html#//apple_ref/doc/uid/TP40008793-CH5-SW1
|self.paused = YES doesn't work?
|need comment.
|Is this sufficient to prevent drawInRec from being called again when the app enters background/foreground back and forth?
|I wonder how this message (from an existing internet company's commercial) ended up as test data.
|transform.Transformer

same typo in Encoder comment
|to decode
|Encoder or Decoder?
|is this also a change (!barrier) necessary to avoid deadlock?
|oh, that is because of this mismatching vanity import path.
|always skip?
|why can't 'return nDst, nSrc, err' from here?
|TODO(crawshaw): ...
|it's not clear to me how the accesses to cStrings map are serialized. Can you explain in comments?
|change parg to unsafe.Pointer[3]? If you don't plan to fix this soon, please put your name on TODO(crawshaw)
|I don't know what this Init means. Need to improve the comment.
|comment
|// import &quot;golang.org/x/text/unicode/bidi&quot;
|it's moving to unicode/bidi/bidi not unicode/bidi
|please comment how this number is computed.
|comment on how this number is computed.
|cannot parse the last sentence.
|The names of these constants
|need to warn or prevent the use of as, xx as the index.
|If this is called multiple times, will only the last call be effective? Or, is it more like AppendBytes or WriteBytes?

Will the return values be similar to io Write? (# written bytes, error)
|If it does not consume all the bytes due to the paragraph separator, does the n account the paragraph separator too? In this case the err will be non-nil?

--
When will people want to reuse a Paragraph by calling SetBytes or SetString, instead of creating a new Paragraph instance? If reusing the existing Paragraph instance does not make much sense, would NewParagraph or NewParagraphFromString(ooops, ugly..) help not worrying about invalidation of ordering, etc?
|if the base direction &quot;is&quot; ..
|Is the base direction always either left-to-right or right-to-left? No mixed or neutral?

Why is it necessary even when p.Direction exist? 

I am a bit confused by the terms 'paragraph direction' and 'base direction' in the tr.
|can this be just named &quot;Run&quot;? Does &quot;logical run&quot; have a different meaning?
|If the terminology came straight from unicode/icu, I am fine with reusing it. I am not familiar with all these so I pattern searched only the tr9 with 'logical run'.
|of r?
|they modify.
|ReverseString
|to to -&gt; to the
|first?
|missing '.' at the end.
|remove blank line
|where is it used?
|i cannot find the definition of the pairValues array here. Need to rephrase?
|double spaces before 'matching'
|s/there/they
|can this be a local var of this method?
|_ON
|how about
for _, loc := range p.pairPositions
|-1: 0, 1 ?

Also do you plan to convert this comment more like go comment?
|shouldn't it return an error in case any of the validation fails?
|no validateEmbeddingLevel?
|Ah, now I see - use of switch introduced the loop label :-(
I am fine with the previous form if you want. (sorry)
|use switch.
|switch
|switch
|I didn't know clang doesn't accept -o if multiple input files are supplied. I cannot find it from the manual. 

It's unclear to me why the names of these objects matter either. I thought we only care about the final archive name. Maybe I am missing something.
|can't we compile all source files in one command by supplying the list of filenames?
|this can go into the above if {}.
|i = ~i
|I don't think this comment is true. It's possible that an app has a long-lived java object implementing a Go interface, and occasionally calls a Go function with the same object throughout the app lifetime.
|tab
|Shouldn't we test Java object reference map? (testJavaRef*)
|isn't internal.SortTags enough?
|should log.Fatalf for &quot;n&quot;? I don't see this bracket type (none) in the current BidiBrackets.txt though.
|xor-ed
space at the end
|4?
|I just wondered why not export the Sorter interface instead of SortTags, (so sort.Reverse works). Then, I realized this is an internal package and this should be ok.
|I didn't know 'unique' can be used as a verb.  how about 'selects unique tags' or 'filter duplicate tags'?
|s/currency/currency unit ?
|if s is
|what are these State and PatternFunc for? Accidentally included in this cl?
|continue?
|err cannot be non-nil, right? shouldn't it be 
typePkgs[i] = types.NewPackage(importPath, path.Base(importPath))
continue
|fmt.Errorf(&quot;package %q: %v&quot;, path, err)
|ctx.Import
|Does this error message contain enough info on what package caused the error? If not we'd better add the info into the error.
|instead of pkgs[i].Name, pkgs[i].Dir, how about using path - the one user provided?
|We will need to address this eventually. But for now I feel that asset inclusion is pretty experimental (iOS gomobile bind doesn't support asset yet!), and I think we can consider the namespace later. Instead, let's just disallow name duplicates to avoid surprise - e.g. gomobile bind successfully builds .aar, and later application picks an asset arbitrarily.
|do you know how this handles duplicate assets? (asset name conflict?)
|I see both Currency{0} and Currency{} in this code. When should I prefer one over another?
|Need theScreen.mu.Unlock, or use defer?

Is it necessary to lock throughout the loop?
In sendLifecycle, modification around 'w' is done without lock. So, I assume it may be safe to do the same here, but I may be wrong.
|need to update comment?
|This change includes a lot of stuff. I suggest splitting this to multiple CLs.

I suggest limiting the change to 'gomobile bind' instead of trying to make gobind, gomobile share more code and as a result introducing behavior changes in gobind. I am not yet convinced if gobind -outdir's behavior should be changed. 

Maybe yes, but I am not sure.

2) If the bind package's APIs have to be changed (I guess so), make it in a separate CL.

3) CL for 'gomobile bind' for Android. 

4) CL for 'gomobile bind' for iOS.

5) CL for documentation change.

6) Then, we can revisit to see if refactoring to move Binder to the bind package makes sense.

Also make sure any of exported types and functions well documented.
|no line breaks
|all exported names must have comments
|it's not being used anywhere.
|do it in a separate cl if you intend to address this TODO
|this is irrelevant to the scope of this change. please revert
|Interestingly, android's package name rule does not follow the spec either. For example, _ is a valid character according to Character.isJavaIdentifierStart, but android rejects a package name if the component starts with _. According to Character.isJavaIdentiferPart, '?' is an accepted character, but android rejects it too.

So, I am proposing -
1) Just replace non-alphanumeric with '_' when the package name is used as part of the package name based on the current implementation. (except the case where the first character becomes '_'.  In that case, I will append 'go' prefix to make android happy)
2) Use the the unmodified (but capitalized) go package name as the app name.  

What do you think?

---
Java valid id test result:

0:DIGIT ZERO
	may start a Java id: false
	may be part of a Java id: true

a:LATIN SMALL LETTER A
	may start a Java id: true
	may be part of a Java id: true

A:LATIN CAPITAL LETTER A
	may start a Java id: true
	may be part of a Java id: true

_:LOW LINE
	may start a Java id: true
	may be part of a Java id: true

-:HYPHEN-MINUS
	may start a Java id: false
	may be part of a Java id: false

!:EXCLAMATION MARK
	may start a Java id: false
	may be part of a Java id: false

$:DOLLAR SIGN
	may start a Java id: true
	may be part of a Java id: true

?:HANGUL SYLLABLES C548
	may start a Java id: true
	may be part of a Java id: true

??:PILE OF POO
	may start a Java id: false
	may be part of a Java id: false
|Done
|will it be still undesirable if I apply this rule only to the package name, not the app name?
|delete :-)
|Specifically what prevents the go/importer from using the default GOPATH?

--
We need to check os.Symlink reliably works on windows. You can use symlink func in init.go, but that will be potentially too expensive.
|My question was more like why go/importer cannot work without modifying the build.Default
 
But I think the current code should be okay.
|I wished this change was in a separate cl.
|surprisingly... yes. It made android/386 tests run on android-L - except the a few test failures due to error messages from text relocation (golang.org/issues/13201). 

should i limit this to android?
|this change broke android/386 - crashes with CALL 0x10(GS). 

I tried to debug it but couldn't figure out how this runtime.setldt is called when CGO_ENABLED=1.

it seems setldt is called by either runtime.clone or runtime.ldt0setup. It doesn't seem that either of them is called when cgo is enabled. Am I missing something?
|based on what 'go help install' says, I think this is a bug if not a documentation bug.
|is it valid quality factor part such as either 'q' or '=' or both are missing. e.g. en-gb;0.5 en-gb;q0.5? If not, should consume return an error to indicate errInvalidWeight?
|is this used only in ParseAcceptLanguage?
Is it not an option to make it lazy-initialized with sync.Once, or put this into ParseAcceptLanguage?

I tried sync.Once approach and could reduce the binary size by ~400k.
|Done
|I didn't know open can be used on unix domain socket path names. I can prepare a cl to change write_err_android.go to use open, but don't know what flag values I need to use.
|I will address this in a separate cl.
|updated.
|thanks! 
Shouldn't it be $0-16?
When should I supply this arg size?
|Done
|Done
|Done. Also added TODO.
|Done
|fmt.Fprintln
|add &quot;Update golang/go#13145&quot; so github does some wise thing to update the issue thread and you can revert this back once the issue is ever resolved.
|s/tabs/tags
|can we just avoid the named parameters and be explicit? I had to double check if the orig was ever modified.

if best.conf &lt;= No {
   if len(want) != 0 {
        return nil, want[0], No
   }
   return nil, Tag{}, No
}
return best.have, ...

or 

if best.conf &gt; No {
   return best.have, ...
}
if len(want) &gt; 0 {
    return nil, want[0], No
}
return nil, Tag{}, No
|nit: 'should always' or 'can'?
|nit: Danish, instead of French?
|(optional) how about adding the following code instead of this sentence? 

  supported := ... // map from tag to value.
|It's probably due to my lack of knowledge in this domain yet. It's not obvious to me how this approach makes the confidence scores &quot;more valuable&quot;. What do you mean by &quot;more valuable&quot;?
|thanks for this detailed explanation.
|fyi. convention on deprecation. 
https://github.com/golang/go/issues/10909
https://go-review.googlesource.com/#/c/10188/6/src/syscall/exec_plan9.go
|Done
|Done
|Done
|PTAL.
btw, I couldn't find a good test case for this yet.
|how about using androidAPIPath (bind_androidapp.go) instead until we come up with a better solution?
|Done
|done.
|How about

// Whether we are adding code instrumentation, such as for the race detector (flag_race != 0). 

or next to flag_race, // then instrumenting is true.

As more cases that use code instrumentation, I hope this comment is getting updated.
|would be nice if the relationship between flag_race and this new var is explained.
|LGTM.
|in race mode -&gt; during instrumentation?
|PTAL.
|I generated these mappings based on go tool cgo -godefs. (instead of byte, cgo maps [108]byte to [1080int8, but byte array is easier to use)

'man unix' also shows the UNIX_PATH_MAX.
|thanks! 
is there gofmt like tool that works for .s?
|updated the stubs_android.go and print1_write_android.go as well. fd is int type, so I expect it to be int32.
|needs update
|Let's avoid 2nd person sentences if possible.

// Notify must be called at most once and before any calls to Enable.
|i don't think it's desirable to allow unprotected access to the 'sender' var from enable.
|why does it matter? If someone in the future makes the internal  'enable' capable of handling multiple senders, that's good. The enable function (of android at least) internally involves another lock, and blocking on channels. I am not sure how long I can follow the relationship of all these locks and channels easily, and afraid that can be sources of subtle bugs in the future. Would be nice if we can limit the scope of the lock (senderMu).
|I think it's better to limit accesses to the 'sender' var only in this file. Because the 'enable' func has per-platform implementation and there are other locks involved, limiting the scope of the lock will help code maintenance.

senderMu.Lock()
s := sender
senderMu.Unlock()

if s == nil {
   return errors.New(..)
}
return enable(s, t, delay)
|access to sender needs to be protected or synchronized. Or, just panic - requiring to set the sender and not change once it's set.
|s/Snder/Sender
|sgtm
|How about just letting the user set an exported Sender var once before calling Enable? (like os.Stderr, ...) Enable checks whether the sender is set. The global Sender should remain unchanged once set. 

Otherwise, the sender needs proper protection - The comment &quot;Notify is not safe for concurrent use&quot; is not sufficient currently. Notify must not be called once Enable is called because there could be a goroutine that's going to access the sender.
|what if value=USD.Value(v), Symbol.Default(TWD)
|how expensive is it? why not just run it by default and skip it only if t.Short (builder will run with -test.short)?
|t.Fatal?
|// Value ...
|t.Logf or drop?
|does this TODO address the case where the symbol is printed at the end?
|Is this space always necessary regardless the kind of symbol?
|It will be clearer to explicitly say this creates a new Formatter variant with the specified currency. Not 'sets'.
|shouldn't this be named Currency? (consistent with f.Kind)
|Ah, I misunderstood.

currency.Symbol.Default() looks better than currency.Symbol.Currency().
|shouldn't there be a range check? lang+1 &lt; len(x.index)
|Instead of the test case index, consider logging the language.Tag, currency name, and the formatter name.
|isn't it 
// language-&gt;currency-&gt;type-&gt;symbol?
|remove
|what is the value of symbols[0]? Is it always non-nil?

If p == 0 and &amp;sym == &quot;&quot;, currently data[curIndex][typ] can be nil or remain as &quot;&quot; depending on on the symbols[0]. I don't know if that's intended.

If symbols[0] cannot be nil, I think moving the check p == 0 &amp;&amp; *sym == &quot;&quot; close to the above p update may be more readable.
|symbolData := []byte{0}
symbolLookup := map[string]uint16{&quot;&quot;: 0}  // 0 means default, so block that value.
|doesn't this apply to other packages (commonPkgs?)  preinstalled on darwin?
|if it's rare and let's just log. (I thought there was the errno variable we can query but I may be wrong).
|should we check ALooper_pollAll's return code and make this return an error message (e.g. converted from errno) in case of ALOOPER_POLL_ERROR or ALOOPER?
|given the current APIs, the only thing I can think of is an error type sensor Event. Now the question is how useful the error info is, how common(?) it is, and in case of an error, what users are expected to do typically?
|return n

Naked returns are okay if the function is a handful of lines. Once it's a medium sized function, be explicit with your return values.
|there are interfaces and structs.
|Switched to GoVarsABool.

Now setter seems odd too. What do you think about setGoVarsABool, instead of GoVars_setABool?


What if, we define an interface GoVars which has static methods?

@interface GoVars {
}

+ (BOOL) ABool;
+ (void) setABool(BOOL v);
...

@end

BOOL v = [GoVars ABool];
[GoVars setABool:v];

vs.

BOOL v = GoVarsABool();
GoVars_setABool(v);

Similarly, const is mapped to a static method of the interface.

For consistency, I think static functions also could become static methods of GoVars.

BOOL v = GoStructsIdentityWithError(s, &amp;ret, &amp;err);

vs.

BOOL v = [GoStructs IdentityWithError:s ret:&amp;ret error:&amp;err];

Given that users already started using them, I wonder how much of freedom we have in changing generated signatures, and... the result looks still ugly.
|Thanks! I will do it in a subsequent cl. I screwed up my git client again. :-(
|// A frame
|I don't understand the need of this new type yet
- shouldn't the size.Event cover the window resize or orientation change cases? If we have this, will the system send both events whenever window resize happens?
- when will users want to use this type instead of their own custom event types?
|fyi. We need example update and gomobile gl tutorial.
|s/idly//
|What prevents producing more work while a.worker.DoWork runs and eventually allows us to get out of loop1?
|In order to
|what if the sensor package keeps track of enabled sensors and if there is no active sensor, never attempts to read events?

BTW, in theory, if a remaining sensor was enabled with a huge delay rate, I think (maybe wrong), any attempt to enable extra sensors or disable the sensor may be blocked until the outstanding readsignal is processed which may be long. I don't know if in practice, this issue can occur.
|is it safe to assume that calls to drawgl are serialized?
workAvailable is being used only drawgl, can this be a local var?
|i want to stay away from the link to 'github.com' urls and stick with golang.org urls. If golang.org redirect doesn't handle parameters, how about fixing it instead?
|just checking: can we always assume len(src) &gt; 0?
|// len(ctx.work) == workbufLen
|how about 'It provides access to the fmt.State interface and the sentence and language-related context'?
|convenience methods in interface def? how big will this interface be?
|https://golang.org/design/text/12750-localization
|add link

https://golang.org/issues/12750
|you may want to print the tc.tag.
|remove 'text/'
|Done
|Done
|Done
|I am now wondering if we should map untyped int and untyped float types to java.math.BigInteger and java.math.BigDecimal respectively. For objective-c, NSNumber or, NSDecimalNumber? WDYT?
|minor: there is a slight chance that the stack dump from panic does not capture the concurrent calls if the other one returns in the meantime.
|clever
|in case of blocking call, enqueue returns a value. Is that value a meaningful one to print or log for debugging?
|it seems github markdown doesn't interpret this as an ordered list item. Try 1 (number), or use unordered list
|Shouldn't there be an option to use a non-global Messages? 
Let's assume I depend on a package A, and the author of package A registered a variant that conflicts with my translation. If I prefer my translation, what is my option?
|is this &quot;other&quot; a reserved value for a special meaning? (like default in switch/select?)
|value types
|one of
|%[2]s
|%#[2]s
|I prefer the original form - not spanning across multiple lines.
|same. if err != nil in a separate line is more readable.
|Yes, adb devices list unauthorized devices. I don't remember how adb push or other commands behave  with unauthorized devices though.

fyi Another approach is adb wait-for-device with timeout.
|my bad. I misread a doc (the initialization steps: framework - +load - global constructor order) and assumed clang was doing something different. Probably, this is it.
|add comment:  // Copying moves a block to the heap
|Is this necessary? go_seq_recv is called after the reference to the objective-c object was passed to Go through the gobind-generated code. That means, the registeration code must have been run and proxies should not be null.  If my assumption is not right, access to proxies in this form will be racy.

Of course, extra check to generate meaningful error message is good.
|comment. 
This is for the documentation page
|Move this comment near the property group and instead comment that this is for the main app view.
|delete, or todo?
|delete
|if there will be only one manager and that's allocated from c side, one option is to keep m in the c land (no c type and go type conversion business...)
|compare
|Is it not possible to put this code in darwin_armx.go instead of a separate .h file? One less file to maintain.

(Same for android.h)
|you're right. it's completely outdated. 
Keeping this doc in sync is currently a manual process.
It would be nice if the mobile package also provides the up-to-date document. I sent a git pull request https://github.com/robpike/ivy/pull/10 that implements a Help function. Please take a look.
|this is the class gobind generates for robpike.io/ivy/mobile. 
It's unfortunate that this class path does not include 'Ivy&quot; in the class name or package name.

The call site looks like:

go.mobile.Mobile.Eval(expr)
|yes.
|updated comment.
|Comment on who it sends the event to.
|Sensor events will be sent to s. A typical example of ...
|Done
|done.
|switched to prefix.
For swift bindings, we will not need to use prefix, though.
|test

type I3 interface {
       F() I1
}
|need to fix the cause of this empty line generation.
|sorry this is complicated.

I think we should export @interface GoInterfacesI1 
not @protocol GoInterfacesI1 in this case.
|should not be generated, right?
|with
|looks like a valid package name. how about &quot;&lt;nil&gt;&quot;?
|I thought it would become NSString.
|do you know what caused this?
|NSString*
|Done
|I believe this issue is also about the native go app, so it doesn't fix this issue yet.

Find the use of rfc1034Label in build_androidapp.go - I thought the same sanitization as used in ios would work for android but apparently it doesn't (sorry).  It seems that when used for android package name (that used in AndroidManifest.xml), that value should not include &quot;-&quot;.
|should we handle other cases as well? (name beginning with a digit, illegal characters? containing a special character, etc)

http://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html

In some cases, the internet domain name may not be a valid package name. This can occur if the domain name contains a hyphen or other special character, if the package name begins with a digit or other character that is illegal to use as the beginning of a Java name, or if the package name contains a reserved Java keyword, such as &quot;int&quot;. In this event, the suggested convention is to add an underscore.
|can't strings.Title be used instead?
|I don't know. I am removing the redirection for now and will find out when I get to a windows machine.
|right. I was attempting to make the default android gradle lint task happy, but there are a couple of more lints (non-critical) it complains about, so I decided to turn off lint check.

btw, this is now in setup.go (androidManifest const)
|Done
|Done
|That's how Android Studio set up a project for vcs by default, and how gradle recommends. We don't need such inefficiency, and now setup.go will handle this.
|removed.
|strange. it was dropped while copying files from a project created through android studio and gradle build never complained about it. recovered.
|I hate this but  http://gradle.org/docs/current/userguide/gradle_wrapper.html

This allows for users to build the project without setting various env vars and installing gradle by themselves.

This is auto-generated by android/gradle. I don't know what to do with the copyright. The page doesn't say anything but these wrappers should be submitted to vcs as well.

Or, should we just remove all this gradle dependency?
|I could convert this gomobile bind call step as a gradle task of the ':hi' project.

+) we don't need all this make.*, all.*, but ask users to run
  ./gradlew build 
or
  ./gradlew installDebug
and
  ./gradlew clean

-) many users may be new to gradle and that gradle task may distract and confuse users. make.bash makes it clear that gomobile bind command runs underneath. Users of a different build system other than gradle can pick it up and adopt quickly.

I don't know what is better.
|Thanks!

This is due to the files extracted from .gz files in tmp directory.
The very same problem we encountered when we tried to delete temporary directory. I now address the problem by resetting the read only flag of all the files after extracting .gz/.zip files.
|from the asl manual, i found

     In this example, the aslclient argument is NULL.  This is sufficient for
     a single-threaded application, or for an application which only sends log
     messages from a single thread.  When logging from multiple threads, each
     thread must open a separate client handle using asl_open.  The client
     handle may then be closed when it is no longer required using asl_close.

I don't know if that's because aslclient works to serialize the logging, or there is a certain complicated logic requiring per-thread aslclient. Can you please check if this is sufficient?
|As discussed offline, man pages for ios and osx are different, and the ios version doesn't mention it at all. But probably log package's internal locking might be sufficient. We can write a test program to check.
|is it impossible that load throws an exception?
|KeyCharacterMap.get returns 0 if the key is not one that is used to type Unicode characters.  It seems key.Event uses -1 to indicate that
|what is AKEY_STATE_VIRTUAL?
|can you please add a comment here to explain when 'paint' event is generated? it's triggered only after the lifecycle, and touch events - that was not very obvious until I read teadapp code.
|(tangential) package 'size' looks strange. I wish we could use window*.
|// touch begin
|// touch end
|shouldn't we compare g and b as well before reporting it as 'red' based on 'r' only?
|what's the default representation of color.Color? Wouldn't center.RGBA() be more human friendly?
|I'd replace this section wktn the wiki page, and leave the above section untouched.

The app, and gobind package docs provide important background info to help developers guess how programming with this mobile repo will look.
|I think this need linked from the following 'Building apps' section. wdyt?
|Done
|Done
|that's an option. I think that belongs to a separate CL.
|emoji character is fine to be used as a package name or app name. Just the app identifier should not include them. In xcode, those illegal characters are replaced with '-' or '--'. Here, I copy what xcode is doing to generate the uniform type identifier. I found some difference between apple's documentation and the implementation. So, I reimplemented it. PTAL.
|Done
|if we keep this part in a separate file, it will be easier to auto update the list when running the the release script.
|Done
|Optionally, set the absolute path to the gomobile binary if the gomobile binary is not located in the GOPATH's bin directory.
|Done
|Done
|Really good point. I made a significant change to this CL. Now users need to implement the protocol. No delegation or anything else is required. 

Basically, the generated objective-c code registers a proxy function and the bind internal looks up the proxy function by the interface name.
|Done
|Done
|I will remove this empty space before submitting.
|Done
|Done.
|Removed.
|Done
|Done. - I think this is Android studio's property though.
|Done
|Done. 

But... I don't understand this. 
Why don't I add copyright to README and README.md?
|removed. 
We should be careful not to add junks accidentally after opening this in android studio.
|Done.
|Done
|Done
|Done
|darwin/386 simulator. Anyway removed. I don't know if we will ever support that kind of simulator.
|Done - I don't know what intellectual property in this file we want to protect :-)
|Done
|removed.
|removed. and added the instruction in README.
|Removed.
|Ack
|mention vendor.bash
|can we have a vendoring script that makes it easy to update the vendored copy in the future?
|make tcp:12533 a const or a configurable var.
|if input keyevent doesn't accept human friendly code names, how about 
const KEYCODE_POWER = &quot;26&quot; ?
|is it possible to move this common code (common between testapp and the app_test) to a separate package and reuse?
|when running gomobile init, removeAll is used to clean up the GOPATH/pkg/gomobile directory.
|maybe it's time to consider const for golang.org/x/mobile/app?
|apply to init?

do you plan to apply it in build/bind commands in separate cls?

Is it not possible to compute buildX value just after flag parsing - so it gets true if buildN is true?
|I think there are still cases in build_iosapp.go and bind.go
|apply this in runBind too?
|doesn't it make the init_test output or -v, -x output non-determinstic or unreadable?

If the performance gain is not very big, let's not bother.
|Done
|hah, so 0.2 is also buggy. 0.2.1.
let's see how big number it will get before getting out of beta.
|does this fix the issue 11741?
|change
|should we do the basic sanity check about the density? 
(negative or zero numbers etc)
|I will rely on nigeltao for correctness review - this state transition logic seems to be complicated. documentation on the state transition may help for future maintainers.
|/Users/jbd/...
|I changed the bind code so seq.h is no longer needed.
|(not related to this cl)
will users ever use 'e' without calling Filter? 
I want to know why a.Events don't return the result of event.Filter.
|Done
|Done
|Done
|TODO ios bind
|why do we stop and return here?
|Good point. done.
|Done
|would be nice if the returned error can show which build caused failure. 
One possibility is to maintain all env vars in a map (keyed by goos+goarch) and do 
  for _, platform := range []string { &quot;arm&quot;, &quot;arm64&quot;, &quot;x86_64&quot; } {
      p, err := goIOSBindArchive(name, mainFile, envs[&quot;darwin+&quot;+platform])
      if err != nil {
            return fmt.Errorf(&quot;%s: %v&quot;, platform, err)
      }
      paths = append(paths, p)
  }
|out of curiosity: can we build all in parallel?
|from offline discussion - we will make seq.h as minimal as possible, or desirably make the generated file doesn't expose any dependency on other headers.
|for 1.6
|to be honest, I don't know :-P
I just copied what I heard when I saw burcu's ios build cl.
|xcrun lipo
to support developers who are switching between multiple tool chains.
|i think I had to add -s flag for the ar command run in go tool. I don't know if it's no longer necessary when adding additional objects to an existing archive created with -s option.
|split the line please

func(w io.Writer) error {
   return bind.GenObjc(...)
}
|if buildX {
   printcmd(&quot;cp ...&quot;)
}
|I think some of the info here deserves package-level doc. 
The lifecycle + stage + cross concept is new so users need good intro to the concept &amp; example.

I wish we could include diagrams into go doc. :-)
|shouldn't this be changed if there is no way to support install for iOS?
|i am not familiar with ExceptionCheck/ExceptionClear. do we need ExceptionClear before ExceptionCheck?
|why should this be a a global var and GlobalRef'd? I may be wrong - gerrit doesn't allow me to search easily - and it seems this is being used only in ANativeActivity_onCreate. Can't this be computed locally in the function?
|Does this mean that users must avoid init function that depends on TMPDIR or other env vars set here?
|doesn't err carry any interesting info to help users? (I guess not)
|package doc for future code maintainers :-) - about what this is about and why it's needed and what's needed (ANDROID_HOME, javac version, ... and  SDK version if it matters.)
|I found log.Fatal is not a good choice - it os.Exit so the deferred clean up functions don't run. We need to panic or have some atexit facility to delete tmpdir.
|build.go has pkg defined. Can we avoid the global var to avoid confusion or make this use the pkg var?
|while you are at this, can you change it to be golang.org/x/mobile/bind?
|when is envInit called or androidArmEnv is being populated? (sorry, gerrit prevents me from searching the cl thoroughly...)
|when do users need compile non-main pkg?
|the comment is slightly confusing given that it is possible to build non-main packages. Rewording it like
// When we are building a main package we will need a tmpdir for assembling the final apk/app.
|if gomobilepath == &quot;&quot;

btw, why can't envInit return an error in case gomobilepath is empty?
|doesn't seem to be used
|move this todo close to iosEnv
|if pkgImportsAL(pkg) {
|can you move this after the the line 115 so that all the logic around buildO is collocated.
|first with -lang=&lt;target&gt; where target is either java or objc, and again with -lang=go.
|just say 'more Go types'? I am afraid we promise too much.
|is it okay to use 'archive' to call a .so file? an archive or a shared library that you can include in a Xcode or Android Studio project respectively.
|Yes, it seems that the framework is a bundle where the files are structured in a particular way. In my test framework, it has Headers directory that includes all headers, and a fat archive, and bunch of symlinks. I still need to figure out where the assets should be. Otherwise, I think we are good to produce {PackageName}.framework bundle.
|thanks. go ahead.
|pointer to the gobind cmd pkg doc. I will update the doc tomorrow.
|How about Android NDK-like APIs - given that there is no NDK in iOS?
|is it guaranteed to have only one outstanding call to drawgl function at any given time? Otherwise, please use different channels for in and out.
|uintptr for change instead of int or uint32?
|is it okay to drop -llog? Isn't it needed by android.c?
|need lock or sync.Once
|if err != nil {
   if os.IsNotExist(err) {
      return nil
   }
   return err
}

if !fi.IsDir() {
   return nil
}
|we will need the asset package for easy raw asset access from gobind app as well.
|is this still necessary?
|I think it's desirable to have matching behavior, but good documentation should suffice.

Before seeing this CL, I thought I may write a f that returns when a 'exit' or 'back' button is clicked (like in some android apps). If it's translated to iOS app, I don't know what it means - f returns, but app.Main blocks, so the app hangs until iOS complains the ui doesn't respond? The ideal is to provide consistent behavior, but I don't want to be locked in either just because iOS doesn't support it. We need clear documentation then users can tailor the behavior of their f based on the platform.
|Does it imply that f in cross-platform apps must not return unless there is an unrecoverable error that causes crash?
|does pixelsPerPt ever change? can't this be computed once?

Also, how about caching the width/height values and suppressing event.Config sending if they were not changed?
|is it possible to make, when f terminates, the NSApp's stop is called to terminate the app?
|sorry for confusing. What I meant was &quot;Yes, delete it&quot;
|Yes!
|Even though c-shared mode doesn't require main to be called now, gobind relies on the main being called. In main, app.Run is called and the start callback initializes Java-Go communication.  

The problem is if the main exits (because app.Run returns), go runtime exits and kills the app. :-(

Many things have changed in cgo recently. If we can manage to split gobind app, native Go app initialization logic, we may able to consider gobind app not to use main of the go package.
|In the current form, the behavior of Filter depends on the order of RegisterFilter calls (e.g. init order). I am afraid of filter functions changing the event or returning nil - can  you provide an example when such behavior is necessary?
|do me a favor: can you add comments on methods and what the params do?
|don't we need to add a code to check the param is not NULL?
|I agree that we don't need more than 2^8. 
But is it guaranteed that AMotionEvent_getPointerId return values (int) can be always converted into uint8?
|can we write an android platform specific test case that ensures use of tzdata?
|why is it ok not to check the ok return value?
|reference https://github.com/golang/go/issues/13581
|event/key: add Compose key

--
https://golang.org/doc/contribute.html#change describes the convention used

&quot;The first line of the change description is conventionally a one-line summary of the change, prefixed by the primary affected package, and is used as the subject for code review mail. The rest of the description elaborates and should provide context for the change and explain what it does. If there is a helpful reference, mention it here.&quot;
|i will try to find a way to merge this code later (maybe under internal/trace/*)
|Done.
|Made the generateTrace check and return an error.

But this test checks not only the count never drops below 0, but also whether the goroutines blocking on channel or syscall are excluded from the runnable/running goroutine counts. So I left this test - but simplified.
|In generateTrace (trace.go), shouldn't we also fix how ctx.grunnable is counted? 

Currently, trace.EvGoCreate increments ctx.grunnable. EvGoWaiting decrements ctx.grunnable, which is good. 

EvGoInSyscall however doesn't. For EvGoInSyscall preceded by the fake GoCreate event, we need to adjust the grunnable. Or, when handling EvGoCreate, increment the grunnable conditionally.
|sure
|This description would be clearer if it explains when an EvGoCreate event can be followed by EvGoWaiting/EvGoInSyscall instead of EvGoStart - that's an artifact of trace collection in the middle of program execution.
|I guess this is for go1.8
|skip+1?
|missing package doc
|I think this is true only for HeapInUse/HeapSys, not all heap_*
|I am afraid I am understanding this probably due to lack of knowledge on how heap_released is updated. Can you help me understand what is 'the current form'?

Also, in the doc of MemStat.HeapIdle, HeapIdle-HeapReleased is suggested to estimate how much go runtime is holding to avoid cost of memory return and remap.   Does that mean that this is still useful?
|wow. how about mentioning that the ordering of fields are important as well in the mstats type comment?

or, couldn't mstats embed MemStats?
|What do you think about citing tcmalloc doc or malloc.go?
|I see. It also seems doc in malloc.go needs update.
|What do you think about mentioning that huge HeapIdle-Heapreleased may indicate that recently the live heap size was spiked (garbage)?
|Would be nice if there is an explanation on what it means to &quot;return memory to the OS&quot; here. It's not munmap. The concept of MADV_DONTNEED is confusing (oh, moreover, linux's MADV_DONTNEED is bsd's MADV_FREE and there is linux's MADV_FREE). 

Can this counter decrease? (in mheap.allocSpanLocked, I see this counter get decremented. Does this mean that some memory was reacquired for the heap?)
|I assume deleting a field is not an option for compatibility reason, right?
|s/Go/MemStats
|nit: is it possible to move those fields useful for debugging runtime internals to the end of this struct?
|is there non-heap object? 
(asking this because &quot;HeapObjects is the number of allocated heap objects&quot;).
|delete this comment?
|unix epoch???
|unless GOGC=off
|shouldn't it be &quot;(1+gcController.triggerRatio)&quot;?
|isn't it returned to mcache first any more?
|is
|is this happening independently of GC or at the end of GC cycle? (based on the comment in runtime/debug.FreeOSMemory, I guess the former)
|'since go1.8' instead of 'now'
|following function
|need definition of 'label map of a context' in one of previous sections. First appeared here.
|`context.DoWithLabels`
|move type ProfileLabels struct {   } before SetProfileLabels.

And, s/specified map of profile labels/specified profile labels/
|s/They/The associated set of labels/

BTW the following sentence sounds redundant to me.
|extra blank at the end
|for GoStart/GCWorkerStart: the associated GoEnd, ...
|in this case _g_.tracelastp doesn't need be updated?
|(optional) I prefer to have this logic (emit only when heapStats is changed) in generateTrace, not in here. Or how about making the method name more explicit (e.g. emitHeapCountersIfChanged)?
|gobind
|with
|drop -prefix=&quot;&quot;
|is this necessary? I thought the suffix of the file was sufficient, but I may be wrong.
|what's wrong with void?
|It's an improvement. I wonder if it also need to check whether gomobile init set up the environment for ios build correctly (e.g. pkg is available)?
|comments for the fields
|It's complex enough so deserves comments (what you described in the commit message). How about moving this a separate function (mayEmitMarkAssist?)?

case traceEvGoStart:
   ctx.emitSlice(...)
   ctx.mayEmitMarkAssist(...)
case traceEvGoStartLabel:
   ctx.emitSlice(...)
   ctx.mayEmitMarkAssist(...)
|skip the comment
|add an entry for the markassist event
|Is it safe to call traceWriteStack or other buf mutator functions from traceEvent after this point?
|definitely not ok. Most of trace* write functions (except traceString, etc) were proxies to traceEvent function. Here it checks if the buf has a room for the event record, and it starts a new buffer otherwise. Then, later in line 543, traceWriteStack is called and may grow the buffer more. Then, without rechecking the capacity of the buf, it attempts to write to buf. I think deferring the check later (after traceWriteStack) will be ok.
|if traceWriteString has a buffer management logic like traceEvent (including the traceEvBatch record write), I don't think we need to duplicate this code here.
|can we wrap this in a traceCacheTable.reset() method that does mem.drop and cleanup?
|This check is unnecessary because this doesn't write data to buf, and traceWriteStack has its own check.
|No need to write traceEvBatch record? I am afraid the next events that assume precedent traceEvBatch will cause confusion. Dmitry may know better though.
|how reliable is this hash function? What happens when there is collision?

In previous traceStackTable.find, there is a measure for collision, but I cannot find it in the current code.
|comment needed. alternatively, move some comment for addNonGo to here.
|cpuprof.log != nil
|how is it computed? len of extra is currently only 512.
|s/use use/use
|removed.
|Why is it safe to access trace.enabled without any locking? (Probably, it's okay but I am curious)
|Is this bg sweep activity traced?
|when trace is disabled, do we need to go through all goroutines and reset this traceSweep field? 
If trace is disabled just after traceGCSweepStart is called but before any of trace.GCSweepSpan or trace.GCSweepDone is called, none will reset the traceSweep field, and may cause crash during next tracing.
|It seems too strict.
Is it impossible to start tracing during sweep, so only traceGCSweepDone is called?
|Because it's not clear to me what makes it guaranteed to have traceGCSweepStart/Done always paired.
I guess the answer is trace.enabled can't be set or reset during Sweep because StartTrace/StopTrace that mutate trace.enabled requires stopTheWorld before any mutation. And, while sweep is in progress, stopTheWorld can't proceed. Is it correct?
|to be safe, reset traceSwept and traceReclaimed
|This is again because I didn't assume the traceGCSweepStart/traceGCSweepDone are always paired. If they are always paird, yes, it doesn't make it more safe.
|ooops. yes. done.
|how about data instead of dirty?  (there is no clean or promoted one..)
|Patch Set 5:

ios is not happy about fork/exec.
http://build.golang.org/log/faabfff6f6f6f0d1de2add84bb67be3bef47f2fc

skip the test or fallback to the old test for ios?
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(8 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; (1 comment)


 &gt; (1 comment)

It's still a bug. https://github.com/golang/mobile/blob/master/bind/java/seq_android.go#L39

In fact, it's much worse when go calls a method implemented in java's interface proxy implementation. I have some idea to experiment with. I will return to the issue when crawshaw returns.
|Uploaded patch set 3.
|Patch Set 3:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(10 comments)

Thanks!
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Patch Set 6: Code-Review+2

I don't know why it requires code review again when patchset 5 (+2'd) and 6 are identical.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Run-TryBot+1
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1:

(8 comments)
|Patch Set 4:

(6 comments)
|Patch Set 5: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2:

Users will need to implement their own id generation logic for event serialization for multiple devices anyway, and this proposed API doesn't prevent it. But I agree with Burcu that the use of pointers here is not user friendly and can easily lead misuse. Why not having an ID field in touch event?

Can you also add the motivation of the cl and the user code snippet in the commit message? Thanks.
|Patch Set 7:

(1 comment)
|Patch Set 8: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 3:

(4 comments)
|Patch Set 3:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 4:

(1 comment)

Thanks!
|Patch Set 4:

(1 comment)

Thanks!

Let's not put too much effort to make the complete installation instruction now.
|Patch Set 6: Code-Review+2
|Uploaded patch set 1.
|Patch Set 2:

fyi https://go-review.googlesource.com/#/c/9301
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

&gt; I wasn't ever imagining a second copy of that asm shim. It works,
 &gt; but I'm not very happy with myself for not finding a better way.
 &gt; 
 &gt; How about for now just testing that the symbol is visible, and not
 &gt; calling it? I'll keep hunting for a way to get the runtime to
 &gt; generate a cgo function wrapper for main.main on android/arm.

done.
I hope testing from the mobile repository can complement. I will look into general mobile repo testing next.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Does CL 9002 actually fix the test? I suspect that CL is necessary
 &gt; for buildmode=c-shared to work on android/arm, but I don't see how
 &gt; it causes the test to fail.

You're right. It doesn't address the issue. Updated #10548 with the failure details. Still need to investigate what's going on. 

Should I file a separate issue for newosproc0 and link to it instead of #10548? This doesn't address the current builder failure either.
|Patch Set 8:

&gt; &gt; &gt; Yeah, I verified that forever looping in the invoked function
 &gt; &gt; fixes
 &gt; &gt; &gt; the problem on PPC64le.
 &gt; &gt; &gt;
 &gt; &gt; &gt; Minux, if you want, I can send out a CL?
 &gt; &gt;
 &gt; &gt; I've sent CL 9246 that doesn't use a forever looping thread.
 &gt; 
 &gt; Thank you, both for finding and fixing the issue!

android/arm seems to be affected by this change (#10548) too.
should the similar fix be applied to arm? 
In dashboard, there is no linux/arm section to reference. For android/arm, dashboard is a bit noisy, but I could reproduce the failure locally.
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

congrats!
|Patch Set 2: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3: -Run-TryBot

&gt; Please update this after cl/9009 is submitted to use the buildmode
 &gt; method.

Thanks. Done. 
I hoped I could include linux/386 in this cl, but it seems build tools don't accept the buildmode yet for linux/386.
|Patch Set 3:

&gt; (1 comment)
 &gt; 
 &gt; minor nitpick

thanks. updated.
|Patch Set 3: Run-TryBot+1
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

&gt; Uploaded patch set 2.

added missing init_test.go
|Patch Set 3:

I see what's happening.
This is because we are invoking tools through --toolchain, which was introduced originally by rsc to compare old and new tools. See 

https://github.com/golang/go/blob/master/src/cmd/go/build.go#L1909

So, this is not a bug of the build tool. It's a problem of gomobile.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Is your change to src/cmd/dist/test.go in another CL?

yes. after test for android. Updated the commit message; it doesn't fix  the issue yet.
|Patch Set 1:

(5 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

checked my modified test program didn't run the main.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

I just checked if it's similar to how gcc_darwin_arm.c handles it.
btw, do you plan to merge gcc_darwin_arm.c and this file eventually?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)

what was the command that caused the &quot;Process is running&quot; message - 'continue'?
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3:

Having both Destroy &amp; finalizer based destruction sounds good to me - if Destroy method will be ever used.

BTW I looked into the audio package and it's not clear where to call the new Destroy method. Moreover, I couldn't tell where else the context will be referenced after NewPlayer call. (bug?)
|Patch Set 3:

(5 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)

Please check my comment on patch set 3 (about interaction between ALooper_pollAll and the ASensorEventQueue).
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

thanks.
|Patch Set 6:

(9 comments)
|Patch Set 6:

(1 comment)
|Patch Set 6:

(4 comments)
|Patch Set 7:

(2 comments)
|Patch Set 8:

(2 comments)

My comments I sent as replies to comments on Patch set 6 seemed lost.
|Patch Set 9: Code-Review+2

Thanks!
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

The crash log. https://gist.github.com/hyangah/7ed2e062ed55d7860d72
|Uploaded patch set 3.
|Patch Set 0:

Yes, patch 2 crashes, patch 3 doesn't crash. (I intended to create a separate change for each case but screwed up with my git branching...)

Doing heavyweight tasks from go before app.Run seems to trigger the crash. My guess is that delegating the heavyweight tasks to another goroutine delayed the task after app.Run(so, JavaInit, etc) by luck; that prevented the crash I observed from patch 2. Does it make sense?

I am not sure if it's related to the issue 9416 yet.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Patch Set 3:

(4 comments)
|Patch Set 4:

moved the discussion to https://github.com/golang/go/issues/10187.
Probably, I will abandon this change.
|Abandoned
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)

LGTM
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 6:

This CL introduced a new test failure for android-arm builder.
It's concerning to see syscall.Setenv overwrites 'want' as shown in the failure log.

--- FAIL: TestFixedGOROOT (0.00s)
	env_test.go:33: after setenv runtime.GOROOT()=&quot;/data/local/tmp/goroot&quot;, want &quot;/os\x00a/local/tmp/goroot&quot;
	env_test.go:39: after unsetenv runtime.GOROOT()=&quot;/data/local/tmp/goroot&quot;, want &quot;/os\x00a/local/tmp/goroot&quot;
FAIL
exitcode=1go_android_exec: adb shell rm -rf /data/local/tmp/runtime.test-34925
FAIL	runtime	33.962s
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Run-TryBot+1

Interesting. TryBot doesn't try against the latest Go. The parent rev matters. Sync'd my branch and am trying again.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: -Code-Review

&gt; The purpose of the defs_arm_linux.go is to generate
 &gt; defs_linux_arm.go.
 &gt; 

Is it still true? The contents of defs_linux_arm.go look divergent from what's in here.
It seems that defs_linux_arm.go went through the c-to-go conversion work https://codereview.appspot.com/171490043 and what's the modern way 
to manage these files now?

 &gt; We should update the comment instead (cgo -godefs).
 &gt; In fact, all such defs_*.go needs updating.

 &gt; Patch Set 1: Code-Review+2

I accidentally pressed it. 
Hmm, gerrit is strange. I can do +2 on my change?
|Abandoned

abandoning. All defs_*.go need doc updates.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Patch Set 3: Run-TryBot+1
|Patch Set 2:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 2: Code-Review+2 Run-TryBot+1
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 7:

(1 comment)

wow.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(7 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(7 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

(4 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(1 comment)

submitting.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(1 comment)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2:

(3 comments)

example/libhello/main.go needs update.
|Patch Set 4: Code-Review+2
|Patch Set 1:

(8 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)

don't worry. the first init call should not affect the expected command execution at all.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2

nice.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)

yeah, this fixes the build.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(5 comments)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(5 comments)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 2:

(4 comments)

tested manually in android 5.0.1 and 4.4.4.
|Uploaded patch set 5.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Abandoned

Duplicate of https://go-review.googlesource.com/#/c/3350

some git mistake...
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 4.
|Patch Set 2:

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)

One thing I feel uncomfortable with this reverse-engineering (instead of calling aapt) is there is no doc or promise on the xml format.

Eventually we will need an end-to-end testing to check if the output can be digested by android, or similar to the output of aapt.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 1:

(2 comments)
|Patch Set 5: Patch Set 4 was rebased
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)

requiring VOLUME mount definitely limits the usage of the docker image.  But until we have better build story (with crawshaw's gomobile, etc)  this is the best option I can think of at this moment, to avoid surprises such as golang/go#9372
|Patch Set 2: Code-Review+2
|Patch Set 1:

(6 comments)
|Patch Set 0: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

Do you want to add a comment on Stop somewhere?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+1

I am not given an option to give +2.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

&gt; Does this fix an issue?

updated the commit msg

 &gt; (2 comments)

changed to use the name without capitalization. strings.Title is nice though, thanks.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

cocoapods has a feature to create a xcode workspace template for users and my understanding is that they have a template stored in github https://github.com/CocoaPods/pod-template and download/configure it when a new workspace or project needs to be created. We can consider a similar approach.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Patch Set 2:

(2 comments)
|Patch Set 1:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch Set 3:

(4 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

tested on windows.
|Patch Set 2: Code-Review+2

(1 comment)

David is a commiter (+2'er) so could submit this CL by clicking +2 by himself.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+1

I will let Nigel approve.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 50487b2c8df85006baf8506aad9f18e197fdbff8 by Hyang-Ah Hana Kim
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 65e8f02f00b6bd2bc1d5dff9b6be1ec96ed4a360 by Hyang-Ah Hana Kim
|Patch Set 2:

(1 comment)

I don't understand the motivation. Why does one try to bind packages with unsupported types? Wouldn't it be more confusing if gobind completes without any error but some exported names are omitted?

Instead of trying to bind the entire package, I think it's better for users to prepare and bind only a wrapper package that lists entry point functions used by app - especially, when the package is big and only a small fraction of the api is being used by mobile app, wrapping will help reducing the generated .so file size for android. For convenience, gobind should export names transitively e.g.,

`gobind foo` should bind foo.Foo and bar.Bar.  

package foo

import ( 
  &quot;bar&quot;  // bar may have exported names other than Bar, but only Bar is exported.
  &quot;realfoo&quot;
)

func Foo(v bar.Bar) { realfoo.Foo(v) }
|Patch Set 5:

&gt; (1 comment)
 &gt; 
 &gt; &gt; (1 comment)
 &gt; &gt;
 &gt; &gt; I don't understand the motivation. Why does one try to bind
 &gt; &gt; packages with unsupported types? Wouldn't it be more confusing if
 &gt; &gt; gobind completes without any error but some exported names are
 &gt; &gt; omitted?
 &gt; &gt;
 &gt; &gt; Instead of trying to bind the entire package, I think it's better
 &gt; &gt; for users to prepare and bind only a wrapper package that lists
 &gt; &gt; entry point functions used by app - especially, when the package
 &gt; is
 &gt; &gt; big and only a small fraction of the api is being used by mobile
 &gt; &gt; app, wrapping will help reducing the generated .so file size for
 &gt; &gt; android. For convenience, gobind should export names transitively
 &gt; &gt; e.g.,
 &gt; &gt;
 &gt; &gt; `gobind foo` should bind foo.Foo and bar.Bar.
 &gt; &gt;
 &gt; &gt; package foo
 &gt; &gt;
 &gt; &gt; import (
 &gt; &gt; &quot;bar&quot;  // bar may have exported names other than Bar, but only
 &gt; Bar
 &gt; &gt; is exported.
 &gt; &gt; &quot;realfoo&quot;
 &gt; &gt; )
 &gt; &gt;
 &gt; &gt; func Foo(v bar.Bar) { realfoo.Foo(v) }
 &gt; 
 &gt; 
 &gt; Some packages are meant to be called both from Go and Java/ObjC.
 &gt; Without markers similar to the Cgo //export directive, the exported
 &gt; set of those packages reveal no information about whether something
 &gt; was meant for Java/ObjC callers or just for Go callers. Gobind is
 &gt; meant to make using Go from a foreign package as easy as possible.
 &gt; Splitting up or contorting (the Go-only part of) a package's API
 &gt; just to suit gobind counters that goal.
 &gt; 
 &gt; For example, I have a generic Android wrapper package that
 &gt; contains, among other things:
 &gt; 
 &gt; Bundle interface {
 &gt; PutByteArray(key string, b []byte)
 &gt; GetByteArray(key string) []byte
 &gt; GetInt(key string) int
 &gt; }
 &gt; 
 &gt; Activity interface {
 &gt; IsChangingConfigurations() bool
 &gt; Finish()
 &gt; GetRetained() RetainedState
 &gt; SetRetained(RetainedState)
 &gt; OnEvent(evt string)
 &gt; IntentBundle() Bundle
 &gt; }
 &gt; 
 &gt; It also contains Lifecycle:
 &gt; 
 &gt; Lifecycle struct {
 &gt; ...
 &gt; }
 &gt; 
 &gt; that implements lifecycle methods:
 &gt; 
 &gt; func (l *Lifecycle) OnResume(a Activity)
 &gt; 
 &gt; func (l *Lifecycle) OnPause(a Activity)
 &gt; 
 &gt; func (l *Lifecycle) OnDestroy(a Activity)
 &gt; 
 &gt; func (l *Lifecycle) OnCreate(a Activity, bndl Bundle)
 &gt; 
 &gt; Every Android Activity has an instance of Lifecycle to track its
 &gt; lifecycle.
 &gt; 
 &gt; I also have a different, app-specific package containing a Go
 &gt; delegate type for every Activity.
 &gt; 
 &gt; Now, let's say a button in SomeActivity is clicked and its delegate
 &gt; kicks off a goroutine for loading some data. When done,
 &gt; SomeActivity's UI need to be updated. However, it is often not a
 &gt; good idea to do anything UI-related, even from the Android UI
 &gt; thread, while the Activity is not running.
 &gt; 
 &gt; Lifecycle tracks the resumed status of its Activity and exposes a
 &gt; channel,
 &gt; 
 &gt; type Task func(a Activity)
 &gt; 
 &gt; func (l *Lifecycle) TaskChan() chan Task
 &gt; 
 &gt; Lifecycle runs Tasks received on the task channel on the UI thread,
 &gt; but only when the activity is resumed. Otherwise it blocks.
 &gt; 
 &gt; The point of the example is that while I may be able to twist the
 &gt; API or split it in two packages to make gobind happy, I don't see
 &gt; why the existence of a Go-only API (TaskChan) should make gobind
 &gt; complain because it can't understand channels.
 &gt; 
 &gt; In other words, I don't think it is an error to have exported API
 &gt; that gobind does not support. It is merely a gobind limitation.
 &gt; Therefore, the more appropriate behaviour is to ignore unsupported
 &gt; API, not error out.
 &gt; 
 &gt; Another objection is the confusion arising from missing generated
 &gt; API. I agree that it is confusing, but I don't think that is reason
 &gt; enough to error out. Another way would be to expose a verbose flag
 &gt; to gobind and gomobile that outputs information about ignored API.

I think the best practice for gobind would be to design the wrapping package to include only the minimal set of APIs necessary for binding. But clearly this cl reduces the pain caused by a couple of unsupported types.

Instead let's report these skipped APIs as comments in the generated java/obj-c source code (desirably, with explanation on what types are not supported). 

Later when suddenly .so file size increases because gobind supports more types, users can diff the generated source code and read the explanation.


 &gt; 
 &gt; Your final objection is binary size. My proposal doesn't change the
 &gt; binary size at all. You may argue that it is easier to bind a big
 &gt; API, bloating .so size, but as long as the list of bound packages
 &gt; are explicit arguments to gobind I don't think anyone will be
 &gt; surprised to see a jump in library size when including a package
 &gt; with a large API.
|Patch Set 6: Code-Review+2
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 74ee969d3ffc95befa9a96a6590c36d71b6afd52 by Hyang-Ah Hana Kim
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

no affected change in bind/testdata?
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(6 comments)
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 5: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)

Nice
|Patch Set 1: Code-Review+2

I didn't abort because it's not clear to me how android behaves - is it okay to abort the app before the logger prints and reacts to the fatal message?
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2:

(5 comments)
|Patch Set 3:

&gt; (1 comment)

Here is the failure log. 

https://gist.github.com/hyangah/84abca54e260c7b11c81
|Patch Set 3: Code-Review+2

&gt; That failure is before this patch set and would be seen in current
 &gt; master. It is the current known ordering of binres against aapt.

I see. I misread your previous message and didn't checkout this cl. Sorry. Now the test passes with this patchset.

 &gt; 
 &gt; binres_test.go lines 285-289 (not sure how to link line numbers in
 &gt; gerrit) of this change call sort.Sort which uses the Name field, an
 &gt; int type, to sort on to call out the issue of the difference but
 &gt; make it acceptable for now as it's not been shown to cause error.
 &gt; 
 &gt; I'm not experienced with gerrit or how one pulls down code to
 &gt; review, but I don't see the commit hash of this change in your git
 &gt; log output, 5006a12761, which is why I'm leaning towards it missing
 &gt; on your end.
 &gt; 
 &gt; The only other consideration I have is sort.Sort is producing
 &gt; different results on different systems, but each Name field is
 &gt; unique to each set of attributes (5, 6, 7) so I don't see any
 &gt; reason for there to be an error with sort as I understand it.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Speaking of which: when is the appropriate time to require Go 1.6?
 &gt; :)

maybe with go1.7? x/tools drops its go1.4 support just now.
|Uploaded patch set 1.
|Patch Set 4:

Hello,
Thanks for the awesome work! Especially, it's nice to see you made both objc and java binding working at the same time. 

I will try to review this asap. 

I was trying to see how the generated code would look by looking into bind/testdata/*.golden files. It seems they are not up-to-date. (e.g. I don't see any package whose names are gomobile_bind). Can you update them?
|Patch Set 8:

(18 comments)

will look at the test files later.
|Patch Set 13: Code-Review+2

(7 comments)
|Patch Set 13:

(1 comment)

Do you see any performance improvement from this change?
Would be nice if we had some benchmark.
|Patch Set 22:

(3 comments)

+2. Thanks a lot for this awesome work! A couple of nitpicking.
|Patch Set 23:

Thanks!! +2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 4:

(3 comments)
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Do you need to go install gomobile and then run go generate for
 &gt; doc.go?
done
|Uploaded patch set 1.
|Patch Set 1:

&gt; I suggest instead to update the symlink function (and any other
 &gt; functions that needs to create new files), to ensure that
 &gt; directories are created as necessary.

Thanks for the suggestion. Doing so will changes semantics of helper functions that we wanted to mirror unix commands (so, -x, -v flags work). This cl fixes the obvious bug - I  forgot to create a file and symlink unexpectedly worked without the parent directory.
|Patch Set 3:

(5 comments)

It really simplifies the code! 
I am fuzzy about Go's and JVM's thread management, so I will rely on Crawshaw for thorough review.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 2: Code-Review+2

For obj-c, object pinning and ref count assignment occurs in assignRefnumAndIncRefcount and it's called when the object is passed to Go.  So I think it doesn't have the same problem.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Abandoned
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(3 comments)
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

i didn't look at language/display/tables.go - opening it caused my chrome to crash. it's a generated file so I guess fine.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 3: Code-Review+2
|Uploaded patch set 1.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Abandoned

created the same cl as cl/17749, by mistake
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(3 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2

(3 comments)
|Patch Set 1:

&gt; I've made an alternative to this API which I think is superior,
 &gt; albeit a slightly breaking change: https://go-review.googlesource.com/#/c/17705/1
 &gt; 
 &gt; Unless there are any objections, I would prefer to abandon this CL.

I prefer cl/17705 too - much clearer to have separate encoder/decoder.
|Patch Set 1:

(7 comments)

I still need to read the spec.
|Patch Set 3: Code-Review+2

(2 comments)
|Patch Set 1:

(15 comments)
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)

nice.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

where do the messages logged with standard Java Logger go in android? would it make android debugging difficult?
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(3 comments)
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 1:

(2 comments)

Thanks. Will see if the test can be fixed. 

(I am on leave from today, and will be back on monday. My response will be slow)
|Patch Set 4: Code-Review+2

(1 comment)

Once you address the minor comment I will submit it. Thanks!
|Patch Set 5:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

Thanks!
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

thanks! can you sync your client - I think crawshaw submitted his changes.
|Patch Set 2:

(6 comments)
|Patch Set 2:

fyi. this change broke android/386 - 
Segfault immediately without any trace. Let me see if I can get more info through gdb.
|Patch Set 3:

&gt; Is there some way I can set myself up android/386 in a VM or
 &gt; something so that I can not rely on your to test things when I
 &gt; break everything? :-)

Oh, sorry for the late response. It's already merged. :-)

Yes, I just cherrypicked this change. Maybe it surfaced a bug in existing code. Note: android builds binary with buildmode=pie by default.

Re: testing

Unfortunately there is no easy way to experiment android/386 for now. Crawshaw plans to set up a builder using the real x86 device, but it will take some time.

I dumped my testing procedure on 
https://docs.google.com/document/d/1bydZTq2B3mxOfFn42OMv2Mz2uMllAL4H0nmHXCesxbM/edit#heading=h.xfzf1ae7n0cp

Running gdb is quite an adventure now.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)

PTAL

I also made a change to use the sanitized name for the default apk - Android complains if the apk name contains some unicode characters.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

&gt; Can we drop this in cmd/link instead?

Yes, I will take a look at mwhudson's cls and drop this.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Patch Set 1: Code-Review+2

Thanks! I verified it works again.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

Congrats!
|Patch Set 1: Code-Review+2
|Patch Set 5:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Reverted

This patchset was reverted in change: Ie8b89a9ac6e5b6906b3a4de21122d694cf7a2d0a
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

About the home for the function; how about asking golang-dev?
|Patch Set 3: Code-Review+2

(1 comment)

nice.
|Patch Set 4:

LGTM
|Patch Set 1: Code-Review+2
|Patch Set 2:

thanks
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 2:

(3 comments)
|Uploaded patch set 4.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Patch Set 3:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

it was due to my workspace had outdated x/image/draw.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)

surprising...
|Patch Set 2: Code-Review+2
|Patch Set 1:

empty commit
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(5 comments)
|Patch Set 1:

(3 comments)

ha! I should've caught the missing files.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

the tree closes (for new features) on nov 1.
|Uploaded patch set 5.
|Patch Set 4:

(4 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

&gt; (1 comment)


you are right. The test depends on only compiled .a files.
And, this CL is wrong - the bug is the .a files were not in the pkg/android_arm directories any more (maybe due to buildmode pie). Will revert this and send the right fix.
|Abandoned
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

(4 comments)
|Uploaded patch set 6.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Abandoned

merged into cl/15991
|Patch Set 3:

(3 comments)
|Patch Set 3:

(1 comment)
|Patch Set 6:

(3 comments)
|Patch Set 8:

(1 comment)
|Patch Set 8: Code-Review+2

or please document (comment) on enable functions so that the lock must be held when enable is being called.
|Patch Set 6:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(11 comments)

For Formatter vs FormatFunc, I think Formatter is ok but I will let more experienced @gri decide.
|Patch Set 2: Code-Review+2

(5 comments)
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Do you know if these are accessible as properties from inside
 &gt; swift?

Unfortunately, they are not accessible like properties. Only Objective-C @property declarations are imported by Swift as properties, and @property directive cannot be used for class-level properties(?) like these.
--
from https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html

&quot;myTextField.textColor = UIColor.darkGrayColor()
myTextField.text = &quot;Hello world&quot;

NOTE: darkGrayColor() is followed by parentheses, because darkGrayColor() is a class method on UIColor, not a property.&quot;

-- 
In Swift, there are computed type properties which would be potentially useful in direct swift binding.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 1:

(3 comments)
|Patch Set 1: Code-Review+2
|Patch Set 3:

(2 comments)
|Patch Set 7: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+2

My understanding is that this cl fixes the data race by initializing the glctx from the init, not just by moving glctx into app.App. If so, please update the description.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1:

This is a copy of robpike.io/ivy/demo/demo.ivy. I will let Rob decide.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(5 comments)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)

aren't there be crash cases that would be no longer reproducible by converting all functions to blocking mode? e.g. crash triggered by running in a different thread, or misuse of gl api that modifies some params after non-blocking enqueue function returns
|Patch Set 1: Code-Review+2
|Patch Set 2:

(7 comments)
|Patch Set 3: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2:

(2 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(4 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 5:

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Abandoned
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 8:

(2 comments)
|Patch Set 1:

&gt; Thanks for the CL.
 &gt; 
 &gt; One of the reasons I've been delaying adding these types is they
 &gt; are only compatible in one direction. That is, a Go function
 &gt; func F() uint16
 &gt; can be wrapped in Java as
 &gt; public int F()
 &gt; but when used as a parameter, the function
 &gt; func F(x uint16)
 &gt; becomes
 &gt; public void F(int x)
 &gt; .
 &gt; 
 &gt; Now it is possible to call F from Java with a value not
 &gt; representable as a uint16. What should the binding do? (My instinct
 &gt; is it should throw an exception, if we decide to support the type
 &gt; at all.)

I am afraid that the exception to handle this case will complicate the code generation quite a lot. Also, we have to think about handling an interface method that returns uint*.

Another option is to apply some reasonable conversion from Go side if any. One possibility I was thinking about is 'v mod max(uinttype) - 1'. The motivation is from how go behaves when a uintX type var overflows. 

	var i = uint8(0xff)
	fmt.Println(i+2)

currently returns 1.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 3: Code-Review+2

Run go generate to update doc.go too
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 1:

(4 comments)
|Patch Set 3: Code-Review+2

thanks.
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

sorry for the delay.
|Patch Set 1:

(5 comments)
|Patch Set 2: Code-Review+2

we will need to update the gobind doc to explain error type binding.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

made the order consistent (darwin before linux)
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 2:

(6 comments)

Thanks for the review.

Now all the gradle, project setup is done through setup.go command.
I wished the android SDK's android command tool did this for me, but
unfortunately, the android command tool doesn't seem to be actively
maintained any more. The android create project command produces
a project structure that's no more consistent with the project management
guide in the developer site, that still uses mavenCentral instead of jcenter (what 
Android Studio uses now), and more importantly, the tradle-wrapper properties
is outdated so the project doesn't build. :-(
 
So, I decided to just build android-gradle compatible structure myself.
|Abandoned
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2

Thanks for the fix.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(6 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

probably, before your keyboard work, it was never called from detached state.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2:

&gt; &gt; Hana and I discussed this once, but I don't remember what we
 &gt; &gt; decided. I recall reasoning along the lines of: it works out
 &gt; better
 &gt; &gt; to copy the android example out of the mobile repository before
 &gt; &gt; trying to build it, but I'm not sure. So leaving for Hana.
 &gt; 
 &gt; I would update the new mobile guide with cp instructions if that is
 &gt; the case. Hana?

Yes, please update the document.

Back then I put the .gitignore in the example directories, not in the top level directory. David worried about multiple .gitignore files sprinkled over the tree - so it was slightly different from this CL case. Then, we talked about the option of recommending users to copy the example and not run xcode/android studio directly from the directory.
|Patch Set 2: Code-Review+2

I will put the ivy examples in the mobile repo soon.
Unlike the trivial example/bind apps, I expect many changes from contributors and us in the future. This makes our and their lives much easier.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6.
|Uploaded patch set 1.
|Patch Set 1:

One problem of this approach is the user implementation of the interface must subclass the stub class. That limits user's choice and potential name conflicts (ref/delegate properties). 

Another approach I can think of is to depend on the delegate pattern.

@protocol GoTestpkgI
-(void)Fn;

// This is used by gobind to find an object to send call:in:out and ref messages to.
-(GoTestpkgIStub*)GobindStub;
@end
@interface MyI &lt;GoTestpkgI&gt; {
}
@property (strong) GoTestpkgIStub* stub;

@end

@implementation MyI {
}

-(id)GobindStub;

@end
@implementation MyI {
}

-(id)init {
    ...
    self.stub = [GoTestpkgIStub initWithDelegation:self];  // user's responsibility
    return self;
}
-(id)GobindStub {
    return self.stub; // user's responsibility
}
@end
|Uploaded patch set 2.
|Patch Set 2:

Updated to use the second approach.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 2:

(4 comments)

PTAL.
|Uploaded patch set 6.
|Patch Set 5:

(1 comment)
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(7 comments)
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

(4 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 3:

(6 comments)
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

This never ends. 
How about changing the builder and buildlet not to test mobile subrepo unless they are testing on supported platforms?
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2

(3 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Abandoned
|Uploaded patch set 1.
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Abandoned

sent by mistake.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

nice. go tool is really powerful.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

put everything in subcommand.

android sdk info (that depends on user's environment) is also added.

 &gt; The use of install -x -n looks great, but I think UI could be
 &gt; simpler.
 &gt; 
 &gt; There's no need for -v. It doesn't tell us anything we cannot
 &gt; quickly infer from the revision number and uname -a. If you want to
 &gt; add a parentheses on the gomobile version line that says either
 &gt; (android) or (android, ios), that would tell us all we would need
 &gt; from uname -a too.
 &gt; 
 &gt; I think we can also avoid printing the go version. Let's ask users
 &gt; for that.
 &gt; 
 &gt; That leaves the subcommand working exactly like the go tool's
 &gt; version subcommand: printing a single line of text and not having
 &gt; any options.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)

thanks! you found a bug!
|Uploaded patch set 1.
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1:

Thanks! It was dropped in the middle of event package reorg..
|Patch Set 2:

(1 comment)

- do we know how we include and access assets to the framework?
- can you please test if by calling the gomobile bind again with the same target framework, it updates the depending project as well. When I manually tested last time it magically worked; it would be nice if you double check it.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; How big are the mov files? If they're huge, maybe they should be
 &gt; put in cloud storage?

Good point. In fact, both ivy versions are released, so no point of putting the video files. I modified the slide to include the links to the appstore and the playstore.
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

I am very sorry. I messed up while moving code around branches. I think now the changed code size is reasonable.
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Patch Set 1: Code-Review+2

(2 comments)

no need to update the tests?
|Patch Set 2:

related to this: where are all these magical tags documented?
|Patch Set 1: Code-Review+2
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1:

does the init test pass?
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(6 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(7 comments)
|Patch Set 3: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2

(3 comments)

thanks for the cl.
|Patch Set 3:

(2 comments)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

In the current form, users still refer to touch events with event.Touch, which is not bad.

Just mapping 'touch moves' to ChangeNone sounds strange. 
The touch moved, so the location has been changed? What is the motivation of deleting TouchType?

Currently we have examples that use old style. Can we write an example app that uses the new app.App and app.Main interface and handles touch events' change state? That may give us a better idea.
|Patch Set 2: Code-Review+2

(1 comment)

Simplification is good. I hope your comment around the Change type about exceptions (touch, mouse ...) is sufficient even when we cannot find a better name for ChangeNone.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

no objection. the debug package doesn't offer much yet.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 2: Code-Review+2

nice nice.
can you test with an example that involves the net package before submission?
also please run the bind/java test too. thanks.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

abandoning. 
cl/11711 makes this obsolete.
|Abandoned
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(2 comments)

much nicer.

One random thought:
For Go bind apps or future non-NativeActivity apps that want to use our app&amp;gl packages, it may be still useful to have a bind/java/Go.java that calls loadLibrary and makes the current context available to Go side (Go.init(ctx)).
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

Please remove the audio.apk included in this cl
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)

it worked for me.
|Patch Set 1: Code-Review+2
|Patch Set 3:

(4 comments)

what's the performance implication of putting all in one thread?
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 4: Code-Review+2
|Patch Set 1:

(1 comment)

thanks a lot.

run go test in the bind directory. It will fail, but that's because the  test golden file is wrong.

run go test -update will update the golden file.
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 3: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 4:

Is there a tracking issue or doc that describes the relationship between sensor and the new motion packages, and the motivation?
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2

(2 comments)

would be nice if there is a test to ensure we exercise the tzdata parsing path.
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Change has been successfully cherry-picked as f58d095fc586f2233d296426070b6c353f35bc9d by Hyang-Ah Hana Kim
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; &gt; &gt; &gt; 2 observations for far:
 &gt; &gt; &gt; &gt; 1. Some of the initially created goroutines are in
 &gt; &gt; &gt; blocked/syscall
 &gt; &gt; &gt; &gt; status. We need to figure out how they are accounted (sched
 &gt; &gt; &gt; latency
 &gt; &gt; &gt; &gt; time or blocking/syscall time).
 &gt; &gt; &gt; &gt; 2. I can't make sense of the numbers I see in the profile
 &gt; &gt; (using
 &gt; &gt; &gt; &gt; the trace you sent me offline). There is 61'000 seconds of
 &gt; &gt; sched
 &gt; &gt; &gt; &gt; latency rooted in StartTrace. And there are only 115
 &gt; goroutines
 &gt; &gt; &gt; &gt; created during StartTrace (looking at &quot;goroutines&quot; row in
 &gt; &gt; trace).
 &gt; &gt; &gt; &gt; That's like 500 seconds of latency per goroutine. There seems
 &gt; &gt; to
 &gt; &gt; &gt; be
 &gt; &gt; &gt; &gt; something wrong.
 &gt; &gt; &gt;
 &gt; &gt; &gt; Fake EvGoCreate events are OK. There are two different
 &gt; problems:
 &gt; &gt; &gt; 1. Analysis of EvGoWaiting and EvGoInSyscall is wrong. It
 &gt; &gt; &gt; attributes blocking time for these events as scheduler latency.
 &gt; &gt; &gt; That's why you see thousands of seconds of scheduler latency,
 &gt; &gt; while
 &gt; &gt; &gt; it's not scheduler latency at all, it's blocking time.
 &gt; &gt; &gt; 2. Your trace contains 55K blocked goroutines. Dumping initial
 &gt; &gt; &gt; state for them takes 170ms (2 events + 1 traceback per
 &gt; &gt; goroutine).
 &gt; &gt; &gt; That time is accounted as scheduler latency for runnable
 &gt; &gt; &gt; goroutines.
 &gt; &gt; &gt; A related issue is that traceback is very slow, which adds to
 &gt; the
 &gt; &gt; &gt; problem.
 &gt; &gt;
 &gt; &gt; Mailed cl/25572 for the first problem. It resolves the bogus
 &gt; sched
 &gt; &gt; latency in your trace.
 &gt; 
 &gt; Mailed cl/25573 for the second issue.

Yes, that is better. I noticed last night that the bug also affects other analysis as well and was about to work on another way.

So, _goroutines in Gwating, _GSyscall, or _Gdead states are covered with your fix. I guess there is no goroutine in _Grunning state. Goroutines in _Grunnable are okay (just incorrect creator stack). Is it possible that any goroutines are in _Gidle(?) or _Gcopystack state?
|Patch Set 2:

Thanks! Abandoning this for cl/25573.
|Abandoned
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 1:

(2 comments)

I didn't move generateTrace to internal/trace package in this cl - that's a lot bigger change it turned out. But it's a good idea to test generateTrace in the all trace stress tests. I will try to move to internal/trace (or internal/trace/traceview package?) in a separate CL.
|Patch Set 3:

&gt; (1 comment)

This test is clearly flaky and sleep is not desirable. 
As Boris pointed out - I need testing of parsing. How about having a pre-generated trace (probably, from a good successful run), and check whether it's counting the runnable goroutines correctly?
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1
|Change has been successfully cherry-picked as c24cc40075d77b96bbf1f217dcdcff651229e89b by Hyang-Ah Hana Kim
|Patch Set 1:

(1 comment)

This is a very low risk, bug-fix CL but I am afraid it's too late for Go 1.7.
|Patch Set 1: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2:

(6 comments)

Thanks! - good read for education purpose.
|Patch Set 4:

(2 comments)
|Patch Set 4:

(5 comments)
|Patch Set 5: Code-Review+2

(1 comment)

Thanks for your kind explanation. It seems the latest version is not uploaded yet but I guess that is just a minor modification.
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 1:

(3 comments)

Thanks!
|Patch Set 4: Code-Review+1
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 11:

(7 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1

(1 comment)

Splitting actually helps code readability. Is it possible to write a test?
|Uploaded patch set 1.
|Patch Set 1:

&gt; I don't fully understand the use case and the criteria for
 &gt; detecting &quot;no activity&quot;.
 &gt; If we could detect when our threads are not actually running on
 &gt; CPUs, that may be useful. But this change does not do the
 &gt; detection, instead it uses vaguely related criteria which can have
 &gt; both false positives and false negatives.
 &gt; What if threads are actually running on CPUs and are doing useful
 &gt; work?
 &gt; What if only a subset of threads is descheduled, but few threads
 &gt; are making progress?
 &gt; What if there are no runnable threads at all? Do we want to show it
 &gt; in red? If yes, then why do we start red only after 10ms and not
 &gt; immediately?
 &gt; Absence of diagnosis is bad, but wrong diagnosis is even worse. You
 &gt; never know if you can trust it or not.
 &gt; 
 &gt; Linux kernel tracepoints provide info wrt thread scheduling. We
 &gt; could use them if necessary. Another option would be to enable CPU
 &gt; profiling whenever we are tracing and trace CPU samples. Absence of
 &gt; CPU samples on a thread provides more objective info wrt thread
 &gt; state. CPU samples will also open way for some very useful analysis
 &gt; on programs. Namely, given enough samples and all other info in the
 &gt; trace we can provide a very detailed latency analysis for RPC/HTTP
 &gt; handlers; e.g. X% relates to CPU latency and this is CPU profile of
 &gt; exactly this handler (or family of handlers); Y% is spent waiting
 &gt; for this mutex; Z% is spent waiting for GC, etc. So adding them
 &gt; looks like a useful thing.

I thought there should be events triggered by runtime.sysmon (so
chose 10ms), but reading sysmon code I am not sure if that's the case.
I agree explicit instrumentation from runtime would be better. Capturing
cpu profiling may be better than depending on linux kernel's tracing
capability for portability reasons. Will take a look today.
|Abandoned
|Uploaded patch set 1.
|Assignee added: Peter Weinberger
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

Do you consider making the empty prefix the default in the future?
Or is it going to break clients' code and benefit is minimal so not planned?
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Abandoned

so obsolete
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

(4 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2:

(6 comments)

I wish we had a better test to assure the correctness of this change (something that involves many different stacks, high-P, etc.). For now can you run the tests in runtime/trace/ using the stress utility? 
https://godoc.org/golang.org/x/tools/cmd/stress

Would be nice if the commit message also reports slowdown in benchmarks in go source tree.
|Patch Set 2: Run-TryBot+1
|Patch Set 1:

Ideally, I think we need put all the commits locally made here to the github.com/google/pprof repo one by one to make sure they are properly applied. Then, we write a tool to automate import process, add headers that indicate these files were machine generated and should not be manually modified. Finally, use the tool to create a import commit.
|Patch Set 4:

(3 comments)
|Patch Set 3: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 8833af3f4b891b13d747b1af375cc57e8db29909 by Hyang-Ah Hana Kim
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(2 comments)
|Patch Set 3: Code-Review+2
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(1 comment)

Also ping'd Derek.
|Patch Set 3:

&gt; Patch Set 2: Run-TryBot+1 Code-Review+1
&gt; 
&gt; Do the Delve guys need to see this?

Derek said LGTM. :-)
|Change has been successfully cherry-picked as b1868cf10770eed86688631ac46d2d510e0621a6 by Hyang-Ah Hana Kim
|Patch Set 1:

Thanks for the CL.
Since it's a go package, I don't have any objection on adding Go specific interpretation support. But I wonder if others have different opinions. What if the StructField type or other types in dwarf package should be extended to have []Field to contain attributes from the Entry, or Offset - to minimize Go-specific interpretation?

David, Matthew, and Heschi, what do you think?
|Patch Set 2:

&gt; Patch Set 1: Code-Review+1
&gt; 
&gt; (1 comment)
&gt; 
&gt; &gt; Since it's a go package, I don't have any objection on adding Go specific interpretation support. But I wonder if others have different opinions.
&gt; 
&gt; This seems fine to me, there's plenty of existing Go-specific stuff here.
&gt; 
&gt; &gt; What if the StructField type or other types in dwarf package should be extended to have []Field to contain attributes from the Entry, or Offset - to minimize Go-specific interpretation?
&gt; &gt; 
&gt; 
&gt; Types already have the Offset: t.Common().Offset.

StructField is not a Type though.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; (1 comment)
&gt; 
&gt; Adding appengine-awareness to standard packages (even in x/) is pretty gross and sad.
&gt; 
&gt; I don't like Google-isms in here.

Good point. This sync map is relatively new and unknown. I expect most transition to it from other sync primitives to happen with go1.9. So I am ok without this change. (but, thanks Bryan!)
|Patch Set 1: Run-TryBot+1
|Patch Set 1: Code-Review+2

Please also mention this cl fixes a bug in the existing code.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2:

&gt; Patch Set 2: TryBot-Result-1
&gt; 
&gt; 1 of 18 TryBots failed:
&gt; Failed on linux-amd64: https://storage.googleapis.com/go-build-log/f7eb06b6/linux-amd64_26eecad0.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

I can't figure out where this failure comes from. I can't reproduce it locally on my linux/amd64.
|Patch Set 2:

&gt; Abandoned
&gt; 
&gt; This isn't a merge. I'll send a real merge.

Thanks! For the future reference, what is the command to do the merge correctly? I think I used git merge but clearly misused it.
|Done
|Tests for arithmetic ops added in cmd/compile/internal/gc/testdata/arith_ssa.go.
|Done
|NaCl only has amd64p32, which does not use SSA yet.
|Done
|Done
|SSARegNum0 in comment
|SSARegNum1 in comment
|As the Location Name now contains &lt;&gt;, maybe in cmd/compile/internal/ssa/html.go:362 (in LongHTML), html.EscapeString(r[v.ID].Name())
|Is it necessary to introduce a scope here?
Oh I see, it is for the &quot;goto&quot;.
|Probably we don't care now. What I was doing is that the tuple is assigned with one register for the value, and flag is implicit; Select1 will get the same register as the tuple value, and regalloc thinks the tuple register get clobbered so Select0 (flag) after Select1 would not work. I don't think this logic is necessary for the new mechanism.
|&gt; Add some helper methods to config for generating these tuple types? More readable, reduces duplication with rules below.

There is MakeTuple in cmd/compile/internal/ssa/type.go. You can also define Ops in gen/*Ops.go with something like typ: &quot;(Int64,Int64)&quot; (see genericOps.go:/Add32carry).
|Seems on Plan 9 this function is not called?
Also perhaps have a fallback value on Plan 9, as I am not sure /dev/swap is implemented on all flavor of Plan 9.
|Ok, sounds good.
|MOVWnop has &quot;resultInArg0&quot; set, so regalloc will pick the input register as the output.
|I think it's fine to remove this line, and perhaps combine this case and the case above.

Maybe add some comments about operand ordering?
|This should be v. This might fix 8-bit fib?
|I think inputs[0] and inputs[1] should be swapped. Stores have arg0=ptr, arg1=val. (although FP stores seem not implemented yet).
|The assembler would use a tmp register (REGTMP) for large offset, and emits multiple instructions. The assembler might be buggy in some cases, will check (and fix).
|MOVDstorezero
|MOVWstorezero, same for the next line
|MOVHstorezero for these 4 lines
|MOVDstorezero for these 2 lines
|MOVDstorezero
|MOVDstorezero
|Copy should do similar thing as MOVDconvert. Maybe combine with the next case (but need to check type for floats, maybe later).
|two

I think the reason for two NOPs is at cmd/compile/internal/gc/cgen.go:2356 and cmd/compile/internal/gc/plive.go:1397. Maybe add a comment here as well.
|R3
|GetG does not need to lower. If you set hasGReg in config.go and name g register &quot;g&quot;, regalloc will know and use it.
|Does LessThan (and LessEqual in the next line) cover both signed and unsigned? CMPU is suffice? Sorry I'm not very familiar with these instructions.
|MOVHconst and MOVBconst seem to not work? Remove if they are not used anywhere.
|Yes, it is counting instructions.
|These two changes are because ARM64 assembler is buggy on embedding constants into some instructions. Will fix the assembler.
|Done. Unused flags maybe all gone at that time though.
|ADD $-8, R3
constant is generally the first operand
|Remove this line. R0 is used for constant 0.
|ADD $-8, ... for these two lines
|Based on runtime/mkduff.go, it has DUFFZERO but no DUFFCOPY. It's fine to not use it for now.
|Probably you want Align()%8 ?
|4 ?
|Align()%8 ?
|add the ADD instructions to comment
|Remove this. Now arg2 is memory.
|add the ADD instructions to comment
|It seems when y is too big it shifts by uint(-1). The comment on PPC64Ops.go says only about shift 0-127. Is this value also guaranteed to produce correct result?
|Given that CMP and CMPU are distinct instructions, I guess we don't need Uxx Ops?
|Potentially y still could be 64-bit constant? Then this could go wrong.
Maybe we should only use CMP with MOVDconst, and CMPW with MOVWconst.
|remove empty line
|I would write it in one line.
|aux. same for the next 5 lines.
|-arg0 ???
|Int32? Also the next line.
|This comment is for AMD64.
|either
|Yes, it is definitely fine for next CL.
|Ah, there are many!
I send a CL golang.org/cl/25480 that removes flags from regMask. Flag allocator still assumes only one flags value is live at a time. Is there benefit to have more than one flags values live at same time on PPC? If not, we can simply assume a pseudo FLAGS register containing all the flag bits.
|It seems it is easy to remove flags from the reg allocator. However, the flag allocator (and maybe the scheduler) also uses the flag regMask, and currently it assumes only one flag value is live at a time.

That's said, the regMask for flag allocator can be a separate variable (i.e. not in the limit of 64). How many flags registers you'll need?
|Given that bit 57 of the shift is important, I think it should be Int64.
|Yes. SGTM.
|Ah, &quot;bit 57&quot; is the 1&lt;&lt;6 bit. I thought it was 1&lt;&lt;57 bit... Then Int32 is fine. The type mostly affects what load/store instruction to use when the value is spilled.
|add a comment about the magic bit 57.
|Other ops that takes a constant are named *const. Maybe ADDconstForCarry if it doesn't sound too long for you. (Sorry I forgot this at the first round.)
|&gt; I'd like to do this in the next CL (which includes all the other shifts, and would conflict with this change if I did it now).

No problem.
|aux &amp; 64 looks odd to me (what if aux=256?). Since we don't generate bad const shifts, it may be ok not to mention that.
|Shouldn't this clobber flags? gp2carry1 does not specify it.
|Done
|Also this?
|Done
|This?
|DUFFZERO is a sequence of STOSL. Does it clobber flags?
|Done
|Done
|Yes, thanks. Done.
|Not really matter: these should be SizeL.
|Is EQV bitwise op? I guess EQV 0 0 results -1? Then AND 1 is still needed for this, although not needed for NeqB.
|Then does it clobber flags?
|Yes, on ARM and ARM64 properly typed loads are used, so it is possible to eliminate some extensions if the argument is a properly typed LoadReg (see cmd/compile/internal/arm/ssa.go:639).
|In cmd/internal/obj/asm9.go:86, there is a comment for AND: /* logical, no literal */
From the hardware manual, it seems that AND const instruction always set CR, whereas OR/XOR const instructions do not.
|Done
|It is (at least for now) called only with nonzero input (0 is not a bitcon). I added a sanity check anyway.

This function probably should stay internal inside the assembler. gc.log2 and ssa.log2 may be unified (gc imports ssa), or gc.log2 could be gone when old backends all gone.

Thinking further, maybe we can have a (non-internal) package that includes all the bit tricks, and possibly teach the compiler to use intrinsics for that package on appropriate architectures.
|I wanted to make sure the type of the value does not change. It probably does not matter. all.bash still passes with sign check removed. Updated the CL.
|This case seems not to work with NaN?
It is fine for now as the rewriting rules are disabled.
|These do not work, because of NaN?
|true -&gt; b?
|Should it be Int64? Or because it is held in a FP register, it needs to be a Float type (so storeByType works)? Also lines below.
|32-bit float?
|Ok, I eventually understand how this instruction works. Maybe add some comment emphasizing that FP register always hold 64-bit?
|not sure about this
|I think conjecture (1) is correct
|Perhaps a good idea. This will also change shift ops on ARM, and also the assembler. Will be a separate CL.
|This is actually register shifted by a constant. On ARM there is also register shifted by a register, which uses genregshift.
|This is probably not correct? It seems the original condition tests &gt;, = bits whereas the inverted condition tests &lt;, = bits. Maybe the latter should test &lt; and unordered bits.
|It would be good if someone can test for big-endian PPC64.
|What is this for?
|unordered
|You probably don't need to reserve R2 in non-shared case. Old backend seems not to.
|Yes. I think they are named after Overflow Set/Clear.
|You probably want to toggle the tests when SSA is turned on by default. (I used to have them on a local commit for testing, but not mailed)
|I have a fix using map. This may be fine since it happens rarely. If it turns out there is some practical code that compiles too slowly, we can switch to map.
|Done
|The cache only affects compiler speed probably in a non-critical way. I'll leave it for later.
|Yes. For 32-bit offset, it emits two instructions and uses TMP register.
You could do it either for 32-bit, or only for 16-bit. For the latter, since the offset to SP of locals and args are not known as this step, it may end up with larger than 16-bit (probably not so often), in which case the assembler will use two instructions and TMP register.
|They were documented in MIPS64Ops.go. Comment added here also.
|No, MIPS64 has 32 full DP registers. The even numbers were used for compatibility with MIPS32.
|The conversion takes two FP registers but a MOV instruction can move between FP and integer registers. Reg allocator will insert a OpCopy for doing that when necessary.
That said, when an integer-in-FP-register is spilled, we need to use proper load/store instructions. Fixed in the new patch set, mips64/ssa.go, loadByType and storeByType.
|Done
|I think so. But this code probably never run on other architectures where control values are flags.
|As they all named with GetClosurePtr, maybe we can check the name?
|Done
|It is enabled in SSA. I don't think we need to change the old backend now.
|It is not enabled by default, as there are not so much optimization. Can be enabled by SSATEST=1.
|Maybe assign to result here and then we don't need ret. Stores can return nil explicitly.
|Oh I see. I overlooked the logging. Thanks.
|plan9/386 build is broken. This should be FP. (Sorry)
|Now you've done it. Remove this comment.
|remove the second tab here as well?
|Is there any problem with &quot;new&quot;?
|arg3 -&gt; memory
|A while ago I ran the coverage tool on the rules for ARM and this kind of rules indeed got fired. I think some of the constants come from operations on bitmasks (say, from lowering shifts), which are machine specific.
|Yes, a comment in runtime would be good, although the compiler already relies on the signature of runtime.newobject to pass parameters in and out.
|Your method looks nice, thank you! A name comparison is simpler, but if it turns out not enough, we can pass gc.Sym through interface.
|Yes, we can. That's how we lower If to branches. But we can't make new blocks in rewriting.
|Done
|Done
|Done
|Done
|These may be generic, which could be used for at least 386 Xadd (if we do that).
|Yes, this makes it a little harder. We get closures from the table, so it is hard to check if we can lower the op.

I'll need to delay my CL https://go-review.googlesource.com/c/27936/ to incorporate this in some way.
|add this comment to asm_amd64p32.s as well?
|It seems 8-byte alignment is not a hard requirement. Then I don't think we should add this padding. Two implementations of Xadd64 is ok.
|&gt; Of course, I'd be much happier if the compiler just 8-byte aligned 8-byte fields.

I am thinking that, too. Otherwise I am not sure how AddUint64 in sync/atomic (which requires 8-byte alignment) could be useful at all.
|Done
|remove (seems our convention is starting with lower case)
|also MOVWZload
|also MOV*storezero (I should add them to ARM64 and MIPS64, too.)
|It was in a directory with // errorcheckandrundir -0 -d=ssa/intrinsics/debug,
so individual file does not need that comment.
Now I move it out of that directory, because is has different build tag.
|These instructions do not take offset, so AuxInt must be zero.
|Done
|The condition above already covers this, right?
|This will result in different types for LHS and RHS. That's why I have MOVDreg there on ARM64 (and optimize to NOP when possible). I am not sure this is a problem, maybe not for now (IIRC it was once a problem on ARM, but it might be because other rules were a bit aggressive).
|Seems the instruction is not supported by the assembler (yet)?

Yes, we could move this logic into SSA, perhaps along with other optimization rewritings (not in this CL).
|&gt; Seems the instruction is not supported by the assembler (yet)?

Ok, the assembler does support these instructions, but PPC64 SSA doesn't yet know how to lower Lrot. We can turn that on once the lower rules are added.
|What does FLOGR do for all-0 and all-1 input?
|So, it always clobbers R(n+1) if output is Rn?
|Why does it clobbers R3? Does FLOGR always clobber some register? If so, document it in cmd/internal/obj/s390x.
|It seems what it actually does is
rtmp := 1
isel rt, rtmp, r0, cond
|So, if we are running on non-AMD64 machine, this actually installs the packages to GOROOT. Do we want that?

Maybe it is fine to run this test only on AMD64 machines?
|make.bash only install packages for native architecture, or the one GOARCH is explicitly set to. This will install amd64 packages on any architecture. Maybe still ok...
|also set GOOS=linux? In case (native GOOS, amd64) is not a valid combination (is there any?).
|Done
|Done
|Because now we resolve inter-package direct calls earlier, and we want the target address already known. initfunc (not in any package) calls addmoduledata (in package runtime). Instead of special case them, put them in dependency order.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Changed the places where they get used. Now we don't need them.
|Done
|Done
|Done
|Done
|Done
|Done
|Ah, this is copied from old code (relocsym). Fixed.
|Done
|Yes. In fact the fallthrough at line 488 (base) was wrong.

t.action is never used except at line 462 (base), where it is a constant &quot;skip&quot;. Removed.
|Done
|Done. Changed to &quot;set&quot;.
|countRegs of v2 will be decremented back to 1 as the original value will be kicked out at line 402.
|Done
|Spill still occurs and most of them still remain.
|Yeah, I forgot to remove the debug flag. Anyway, this does not completely work yet. Will incorporate your comments in next version.
|not sure why we round it to 8 on amd64p32 (cmd/compile/internal/gc/align.go:288)...
|&gt; The only part that scares me about this is: what if the caller's frame is not Go? I can't remember the details about how C-&gt;Go calls work.... looking I think this will probably be OK because the only functions called on the C stack in this case are nosplit? 

It looks to me C-&gt;Go call is ok. On C stack it is called through crosscall2 (runtime/cgo/asm_ppc64x.s), which sets up a frame, and calls nosplit function before switching to Go stack. On Go stack, runtime.cgocallback sets up a frame.
|Done
|Done
|Done
|Thanks. Added.
|Done
|PPC doesn't need this as it has the entire function prologue at the beginning, unlike some other architectures where the call of morestack is at the end of the function.
|Added. Thanks.
|This is a bitmask, and once a bit gets set, it's never cleared. So we will not lose the bit if there exists a non-&quot;-1&quot; somewhere in the function.
|Done
|I would call it LinkReg
|Some other ops, like Duff's devices, also generate CALL instructions and make it non-leaf.
I think it is fine here -- we can be conservative.
|Yes, by conservative I mean we can mark non-leaf function leaf (therefore prohibit the use of LR), but not the other way.
|Pull this out of the outer loop as well?
|Not really matters, but it seems too many empty lines to me...
|mention R31 is the temp register
|I'll look into the test for ARM and put it into a separate CL.
|Done. Yes, this is clearer.
|Done
|Ah, it should be one line down. I meant to break the loop, because of your comment in line 107. Thanks.
|Fixed.
|I meant a known offset from SP. Globals do need write barriers, though.
|The scheduler runs after the writebarrier phase, so that is unchanged. A check in writebarrier.go is added.
|Type is needed for typedmemmove (which takes type as a parameter). Yes, stores are just pointers.
|Added a check. Yes, this is ensured in building SSA.
|Done. invalidateCFG is called in f.NewBlock, so this was fine.
|Done
|Yes, fixed.
|for future reference, you don't need to save R9, R11. they are not live at entry of this function.
|Go ABI (currently) has all registers caller-save (except SP). Callee can change any registers, except PC (R15), LR (R14), SP (R13), and g (R10). You could even use g in NOSPLIT function, as long as you restore it before return.

For assembly calling assembly, you don't have to strictly follow the ABI, e.g. you could have registers live across function boundary (there are runtime functions that does this). But it may be better not to change SP manually. For example, if SP is not changed inside the function, the arguments in poly1305_auth_armv6 (R4-R7) are always available at the arguments slots.
|for future reference, no need to save R9, R11, R14.
|for future reference, no need to save R9, R11, R14.
|Could you add a comment about how 228 is calculated?
|Saving and restoring SP is not necessary, given that the functions it calls restores SP before return. Also it is bad for the assembler and the runtime to determine the per-PC SP delta.
Just subtract 168 from SP at the end.
|arg1
|The values of these constants could be simply 32 and 64 :)
|this can be both 32-bit and 64-bit, right?
|It is ok to support new instructions in the assembler. For example, for ARM we support ARMv5, but the assembler support ARMv6 and ARMv7 instructions. The compiler does not generate them, but assembly code can still use them to get better performance, given that they are guarded with architecture checking.

I think if the instruction work for both 32-bit and 64-bit, it would be good to set the mode for both. (Also for your comment below) I agree that we don't want to clean up old code in this commit, but since you are adding a new field, it would rather have correct value.
|this does not work on 64-bit?
|put these later, not interleaved with load/stores
|this does not work on 64-bit?
|this does not work on 32-bit?
|These are never used, but should also work on 32-bit, right?
|Thanks for checking. I think either 4 or 8 is ok. What about mips32, in benchmarks on 4 vs. 8, and in what GCC is doing?
|The go1 benchmark is a better test suite (at $GOROOT/src, run ../bin/go test -bench=. ../test/bench/go1). If 4-alignment is performant, it is ok to set it to 4 for both. Also what alignment does GCC use?
|We could set mips64 function alignment to 4. I don't think 8 is strictly required by the hardware. Could you test the performance on both 32-bit and 64-bit with 4 and 8 alignment?
|make op.mode int type and drop the conversion
|just use ctxt.Diag for consistency
|this change is ok, but why does it matter?
|ok.
|add a comment that leaf function with no frame is marked as NOSPLIT.
also remove this empty line.
|combine these two cases
|mips32 -&gt; mips, and rename the file in testdata.
|mips32 -&gt; mips
|mips32 does not have RSB.
|also test the new instructions you added.
|mipsOperandTests
|delete therefore
|This is incorrect. You'll lose precision when adding 1&lt;&lt;32 in float32, resulting in rounding error. Read the comment at line 3712. An example is x = 0x80000081 (https://play.golang.org/p/dw3KG5caAC).

On the other hand, if y is float64, you have enough precision for adding 1&lt;&lt;32. So one way could be that you always convert to float64 with this method, then do a float64-&gt;float32 conversion if y is float32.
|undo
|undo
|I think you only need to special-case float&lt;-&gt;uint32 here. Smaller uints are ok to go through int32 as the table above does, which is simpler.
|remove therefore here, too
|use tab to indent
|name it twoToThe32.
|-4 -&gt; ^3
|I think this may be problematic. If this pointer-typed value is saved on stack (the register allocator may decide to do so), and seen by the garbage collector, bad things may happen, as this may be not a valid pointer.

Ideally you need to do this at the code generation, i.e. make this part of the atomic op and expand to multiple instructions in genSSA. Since atomics never applied on pointers to stack, you may be able to work around it by mark the AND scalar typed (uintptr). If you do the latter, do add a comment.
|Ok. I thought we would not want to depend on this particular behavior of the allocator, but it is probably not likely to change. Ok for now.
|Yes, the operation itself is ok. The only problem is if the garbage collector sees the adjusted pointer on stack. Let me clarify what I was saying. Say, if you allocate two 1-byte objects that happen to be consecutive in addess:
x := new(byte) // got address 0x1000
y := new(byte) // got address 0x1001
...
x is dead here
temp := y&amp;^3 // saved on stack, temp = 0x1000
...
goroutine got preempted, temp is still on stack
If at this point the garbage collector comes to scan its stack, it will find a live pointer &quot;temp&quot; pointing to a dead object (x), then bad thing may happen.
What I meant is that you need to hide the adjusted pointer from the GC, either by marking it as a scalar, or preventing it from saving on stack, for which you can do it by doing pointer adjustment in codegen.
|// returns 0 if arg1 is 0, otherwise arg0?
|I think you can make LR allocatable. (see CL 30597 and 32179)
|// ... atomic add constant. It does not affect the effective address.
|You don't have to make tuple. You can lower two parts separately:
(Select0 (Add32carry &lt;t&gt; x y)) -&gt; (ADD &lt;t.FieldType(0)&gt; x y)
(Select1 (Add32carry &lt;t&gt; x y)) -&gt; (SGTU x (ADD &lt;t.FieldType(0)&gt; x y))
|Just to make sure, does the instruction behave correctly for all-0 and all-1 word?
|this should never happen, right?
|duplicate of line 335?
|duplicate of line 339?
|Could you add some comment about the algorithm? This is a little hard to read.
|Either put space on both side of ==, or no space.
|You can write
(MOVBreg &lt;t&gt; x:(...)) &amp;&amp; ... -&gt; @x.Block (MOVBload &lt;t&gt; ...)
|I'm not sure this is correct. If c has some high bit set (say c = 0xffffff00) and x is negative, you will get high bits cleared, but it should not.
|Ah, I somehow thought it was AND after extension (instead of before). You're right.
|MOVWnop
|I think this is true in general, you don't need to require x and y are XOR. Right?
|Maybe (AMDconst [c] x) &amp;&amp; int32(c)==-1 -&gt; x, just in case c has some arbitrary high bits.
|I am not sure this is true, as constants may be generated from any previous phases. Even if this is true, it is safer to guard it, especially for the ones that affects correctness.
|It's probably good to write int32(c) &gt; int32(d), since c and d may have arbitrary high bits, especially when mixing zero- and sign- extensions.
|You don't need those, right?
|What is the difference between MUL and MULT?
|ok if this is performant.
|Is it a single instruction or synthesized? Does it run faster than calculate to LO and then move? I think the latter may help the pipeline as the result of mul may not available right away, and meanwhile there may be some other instructions between the mul and the move that can be executing. Or the hardware is smart enough to optimize it?
|document the semantics of these instructions, like &quot;returns arg1 if arg2 is 0, otherwise arg0&quot;
|MOVW Rarg1, (Rarg0)
|Int32
|4(R1) ?
|MOVWconst
|This can be simply v.Op.nilCheck
|reorder these lines to
From.Type
From.Reg
To.Type
To.Reg
|same here
|check v.Reg() == v.Args[0].Reg()
|same here
|It would be clearer to add a comment in the assembly form for this kind of long sequence. (also the long atomics below)
|remove this empty line
|remove this empty line
|If arch is ARM (the case above), it fallthroughs here, and ehdr.flags is overwritten.
|remove empty line
|remove empty line
|put this comment on the previous line.

why do you need to set this flag though?
|mips2? not mips32?
|Ok, LGTM.
|single space (apply to all your CL). Thanks.
|tab
|add a comment that this is aligning ptr
|make style consistent. maybe using tab between opcode and operands, and space after comma.
|align
|I couldn't see why R2 is aligned here.
|remove this instruction. otherwise the assertion become useless.
|remove this instruction.
|min(R1, R2)
|// R3 ..., R8 ...
|min(R1, R2)
|// R3 ..., R8 ...
|Do we need signal 65-128?
|12 is enough
|12 is enough
|please update this function to incorporate the new write barrier mechanism for ctxt (see CL 31764).
|also this function.
|single space before period, thanks. (there was a CL a while ago updating all the comments to make it consistent)
|I think it is 1 arg and the stack slot for saving LR.
|-4. This is allocating space to save a fake LR.
|On other architectures we call runtime.badmorestackg0 first, for better error message. I think you want to do it too.
|... here call runtime.badmorestackgsignal first
|also here, for storing ctxt with write barrier. (CL 31550)
|update this function to use new write barrier mechanism (see CL 31655).
|R1

also update this function with the new write barrier on ctxt.
|Is is possible to use SYS_clock_gettime for this? (see CL 32177)
|What are the 4 args for? Required by C code?
|16 is enough
|Thanks for the comment.
|does load to R0 actually crash? maybe use a store.
|-4
|add copyright header
|Does is really exist on system? If not, add a comment.
|This is a union on system, right? If so, add a comment.
|I think 32-bit architectures use hash32.go instead.
|mips32 and mips64 have same signal table, right?
|Then you don't need to duplicate this file. Just update the build tag in the mips64 one and maybe rename it to _mipsx.
|The OS does not support syscall with 9 args?
|a7
|a8
|Could you point out where is this code?
Also I suppose it is not too hard to modify the existing perl script to generate this. Then we can check that in.
|remove one empty line
|remove empty line
|remove empty line
|stripping -&gt; striping
|remove empty line
|why is 8-alignment necessary?
|If it works correctly on hardware for 4-aligned addresses, I am not convinced you'll need to force 8-alignment even in sync/atomic.

Even if you want to do it in sync/atomic, I think you can do it at the redirection step, something like
if addr&amp;7 != 0 {
  panic(...)
} else {
  runtime/internal/atomic.Xadd64(...)
}
|Add an explanation why it is disabled (because external linking is not supported, due to issue #XXXX).
|tests -&gt; test
|You might need to put this change into the same CL that adds this package, otherwise bootstrapping might fail. I am not entirely sure though.
|Yes, it is good to make bootstrap remain working on other architectures while some, but not all of your CL submitted. You may want to rearrange code to do so if necessary. Thanks.
|also this line.
|gp.sched.ctxt is used in this line. Should setting ctxt be before this line?
|Sorry, I still don't understand it. What's the difference between MIPS32's Xadd64 and 386's and ARM's? Why does it require 8-byte alignment?
|reflectcallmove

Also this comment is missing on other architectures.
|ADDV $8, R29, R3, and remove line 370.
Not your change, but maybe just fix it as well.
|ADD $FIXED_FRAME, R1, R5, and remove line 427
|for hybrid barrier, you'll need to do write barrier before copy, right? Or it is ok because dst memory can only be zero before copy?
|stepAssignWhere(dst, src, reason, where)
|Should where be call instead of n?
|same here
|no need to save R8 now. (in the previous version R8 was used to save R13, but it is no longer this case now)
|no need to save R8.
|This is nice!
|This can be at the beginning, then you don't have to save/restore g in poly1305_blocks_armv6.
|Done. Also send CL 31760 fixing #17381 on other architectures.
|Done
|Yes, it also affects SIGQUIT. Changed the comment to just say signal.
|Done
|Done
|Done. (also below)
|simply MOVV R0, 16(R29)
|The comment in line 447 is wrong... Sorry. (probably copied from PPC then forgot to update.) R31 is LR. I think you can use R1.
|I think this can be R31.
|It looks like R4 is live across call to gosave&lt;&gt; in asmcgocall below. Looks like R1 is ok.
|Ah, this was my fault...
|From CL 31754, it seems preferred to use (XOR (MOVDconst [-1]) ...)
|this is a little hard to read, maybe something like
&quot;if x is larger than -y (y is negative), then slicemask is -1&quot;.
maybe also comment that generic opt rewrite Sub const to Add -const.
|C files start at 0x100000000 (1&lt;&lt;32). Tried that first but got a few failures, mostly with clang.
|Done
|s.freeReg(r) (now moved to line 909) is called only with registers allocated to Phis. These registers are excluded in line 897. So I don't think it will pick a &quot;free&quot; register which is actually allocated at the end of p.
|I am not sure. Russ may have a better answer?
|Thanks for catching the bug and the fix.

nit: I would put conversion on LHS: int(v.ID) &gt;= len(rewrite)

Besides fixing out-of-bound, the way I understand it is that if v.ID &gt;= len(rewrite), v is copied from another value, and we don't need to (and should not) copy v again. Maybe add a comment, as this is not that obvious (at least to me).
|Thanks.
|Good point. Changed to not use Chdir.
|also mips64 (which is the builder that timeouts).
|drop the parentheses on type (also below)
|It seems that the problem is not only for uintptr.

var (
	x uint
	y = x
	z = uint64(y)
)

On 64-bit machine, this also doesn't work.
|Oh, yes. Now it reuses wbs.
|Done
|ctxt.Arch.ByteOrder is enough
|I don't understand this. Why is it necessary?
Anyway, this is for MIPS64. Should be a separate CL.
|Why is it necessary?
|nit:
if r.Size != 4 {
    return -1
}
ld..Thearch.Lput(...)
|ctxt arg is not used. You can remove it.
|Yeah, I think we should. We don't want it silently generate wrong code.
|AND $^7 looks better to me.
|(..., , uintptr ctxt)
It takes 4 args.
|remove this space
|add a comment that this call frame does not save LR
|This doesn't sound clear to me. Maybe something like
&quot;O32 ABI allows us to smash 16 bytes argument area of caller frame&quot;?
|4*14 + 8*6 - 16 is clearer
|same here
|sw
|In external linking, libc jumps to here? If so, add a comment for the calling convention.
|remove one empty line
|It looks like on other architectures we don't mention these names. I am not sure we want to do it here.

Also, it seems in GCC assembly it is either &quot;$30&quot; or &quot;fp&quot;, but not &quot;$fp&quot;.
|I am not sure &quot;pseudo-instruction&quot; is the proper term. They are real instructions, just with a different name.
|MIPS
|Probably because ZeroWB is only generated with assignments with right=nil (gc/ssa.go:insertWBmove), whereas gc/walk.go:applywritebarrier doesn't apply write barrier if right=nil.

For zeroing (like *t = T{}), currently it generates temp (gc/walk.go:1564, also gc/order.go:417 for large struct), so right is not nil (CL 35261 is an attempt).
|Done
|Thanks for the CL!

It seems to me that based on the discussion on https://golang.org/issue/17082, we have not decided to drop ARMv5 support at the beginning of Go 1.9 cycle. So maybe we have to wait. Will do detailed review after we make the decision to drop ARMv5.
|there is a global variable typedmemmove you can use (defined at the end of gc/go.go)
|obj.LSym now
|Because the compiler doesn't emit these instructions (for now)?
|That's right. I was just worried the fields of Prog being changed so the compiler needs to set them in the new order.
|cmd/link
|Mention &quot;Go&quot; in the string?
Does Delve expect a specific format?
|Just prog.From = a[0] and check Type is TYPE_CONST?
|You can delete this comment.
|This is not &quot;fix&quot;. It was not supported before. So maybe &quot;add support&quot;.
|s/in/on/
|why not just use count?
|Are we also testing negative cases where c is not in proper range? Or, since it affects correctness, it is already covered by other tests?
|also delete this function
|To answer the question in issue #19027: this stops creating statictmp for zero value at line 688 (walkexpr ARRAYLIT).
|maybe also remove this comment
|(here)
|racewalk (instrumentnode function, racewalk.go:368) does not handle STRUCTLIT.
|The zeroVal function in ssa.go:2518 can only handle array of length 0 and 1.

I don't remember exactly for instrumenting. I am taking a look.
|Removed. Tried to pass pointer for reuse but it doesn't seem to help much.
|Done
|Done
|Doesn't seem to make much difference. Leave the check in (same as deadstore and loop rescheduling).
|This is just extra sanity check. I'll see if removing this helps anything on performance.
|Done
|Done
|Done
|Done
|The second sentence is right -- we need to look at a if a.Block == w.Block &amp;&amp; !done.contains(a.ID). Here the true branch is actually &quot;we don't need to look at a, so pop up w&quot;. Maybe I should swap the two branch.
|Done
|use space on both sides, or neither
|no need to say word
|No need to add ones that are not used.
|s/MLS/MULS/
also mention the other two instructions you added.
|update this comment
|Line 243 and 244 don't look right
|Why?
|How about this?
|I see why you do this. This is to clear bit 20, i.e. the S-bit. I think you want to signal error (in asmout) if the S-bit is set, instead of silently generating wrong instructions.
|Could the misc-vet checker check gofmt as well?  This kind of thing is likely to be missed in human review.
|Cool!
|I'm not sure I really understand the change to MULA. Does the assembler front end mis-populated the Prog's fields, or does the assembler back end emits the wrong encoding?
|s/MLS/MULS/. Use the name of the instruction that you added.
|Could you also add the encoded form as comments, so the encoding is also tested? Like s390x.s in this directory.

It's unfortunate that we didn't do it before. But it would be good to add this test for new instructions, and to make sure it is correct and we won't accidentally break it.

Also test other instructions you added (RBIT, REV, etc.).
|Put these near CLZ.
DATABUNDLE and DATABUNDLEEND are pseudo instructions. It's better not to interleave real and pseudo instructions.
|You don't need to say this. Better explain what the instruction does: they perform 16-bit multiplication (and add).
|put MULABB with MULAWB
|also here
|remove empty line
|You don't need &lt;t&gt; for this. The general rule is: the top level value doesn't need type -- it will have the same type as the original value. The values you created for intermediate results need type.
|no need to say word
|I think you can always import cmd/internal/obj. Just generate a dummy use like &quot;var _ = obj.ANOP&quot; like the line below for math.
|How about putting into cmd/compile/internal/gc/testdata/cmp.go?
|Ok.
|What is the problem with NaCl?
|Thanks. Sounds good.
|comment // not actual syntax
|add a comment that the result must be assigned back to n
|Not sure this comment is really helpful: at least Rlist is not present here.
Maybe better describe what transformation is happening here?
|Do we need this condition? It seems n.Left cannot be nil.
|I think you still want this line
|properly
|update numbering
|I think you want to remove this before submission.
|two &quot;instead&quot; make it hard to read.
|OpOffPtr with auxint=2*pt.Size() is better
|Why this CL doesn't make infinite loop yield?
|Does this CL have any real effects on the interaction with loopbce?
|The code-review tool doesn't automatically add the branch name. I added it manually. Did I do something wrong?
|The rules look correct. But could you show an example when the rules are triggered? I would think (MOVBZreg x) has type like int64 whereas x has type uint8, so when rewriting MOVBZreg to MOVDreg they still have different types?
|Done
|Done
|Done
|Done
|Yes. Will do in a separate CL. It will probably very big, as it touches essentially all the Store ops.
|This is https://go-review.googlesource.com/c/38150/
|Done
|Fixed in the follow-up CL.
|We used to make ITab value has interface type when decomposing interface (and IData has pointer type). This is fixed in CL https://go-review.googlesource.com/c/36838/. Removed this condition.
|Checked with Austin -- it is ok to eliminate these 3 write barriers, but they are harmless and it is safer (for the future) to have write barriers. Removed this condition.
|A similar condition existed in the old write barrier code (gc/walk.go:needwritebarrier), but removed in CL https://go-review.googlesource.com/c/37109/.

Yes, it is very rare, triggered only 3 times, all in runtime. One of them is for defer.
|Removed. Now the write barrier pass can group them in a single branch if they are consecutive write barrier stores, but still make multiple calls.
|It was due to a mistake in passing types in a decompose rule. Fixed now. (but still use storeType, explained in another comment)
|Tried this. But I think it may be still better to store scalars first, then pointers, so write barrier stores for pointers can be grouped together with a single branch, and scalar values don't need to live across write barrier call. Added a comment.
|Clarified.
|Done
|lowercase
|Do we require ARMv5TE? Is there ARMv5 machine that doesn't support this instruction?
|It makes more sense to use To.Reg as destination.  Can you change the assembler front end and back end to use this convention? It doesn't affect user assembly code. Just change the internal representation.
|The conversions look redundant. int64(int16(c*d)) should be enough
|same here
|this should be 16-bit arg2.
|Yes, it will. (Initially I wrote continue probably to avoid revisiting, but it didn't work.) And Phi ops are already special-cased above.
|The parameter's base register may be set to SP. But I think we still want to print FP in  this case.
|Done
|Not really sure this is the best name -- technically every instruction (except NOP) has effect. &quot;hasSideEffects&quot; is ok, not too long. What do you think?
|panic after Printf
|When would this happen?
|remove &quot;else&quot;
|&quot;compile&quot; would be enough. Linking is not a problem here.
|This looks overkilling.  Just do something like

//go:noinline
func div(x, y uint32) uint32 { return x/y }

func main() { a := div(XXX, XXX); if a != XXX { panic(&quot;FAIL&quot;) } }
|this doesn't looks the right place for testing division. Maybe you can just copy &quot;trivial&quot; and make a division in it.
|place cases in numerical order. they are not strictly in order now, but still mostly in order.
|drop _ARM.
|gofmt (equal signs are aligned)
|divider
|this can be
hardDiv = (hwcap &amp; _HWCAP_ARM_IDIVA) != 0
|Just to make sure, did you try building and running as shared library and dynamic linking? I remember that I tried to do a similar thing for soft float, but there was some problem when accessing global variable in shared library mode.
Try adding something that does division in misc/cgo/testshared and misc/cgo/testcshared. It is possible that the test suite just didn't do any division and didn't cover this function.
|Go's bool has value 0 or 1. Comparing with 1 is enough. CMP $0, Ra is probably better.
|Don't you need to add cases of DIV, DIVU to oprrr?
|single space. Please run gofmt.

Do you plan to support non-Linux systems?
|why not use bool?
|use named constant, like the ones in line 12, 13.
|the operands should be swapped
|Alignment is not required on ARM64, and LoweredZero always stores 8 bytes at a time. So just -8 is fine.
|No, it was still correct, just unnecessary. This value is used in a less-than-or-equal test. Since the increment is 8, &lt;= s-1 and &lt;= s-8 are actually same.
|Added.
|Added a TODO.
|This could happen when e.b is the non-loop predecessor, where b2l[e.b.ID] will be nil or the outer loop.
|a.Index
|Should this include AMD64P32?
|Ok, thanks. I thought it should and I was asking whether it does, sorry for being unclear.
|Done
|Then SP/SB register will be freed in the loop below. But the value may be still live (after a call). Spill and reload of SP/SB will be inserted.

An alternative way is not to free SP/SB registers.
|Because this analysis is on values, not registers, before allocating registers.
liveSet tracks what value's register needs to be live at the entrance of the current block. The value's use after the call is recorded in s.values[v.ID].uses.
|Done
|Would this be 128 bytes? StackSmall is defined as 128.
|dupok symbols are dedup'd when they are loaded. We could set anything we want there. Currently the symbol's package is set to the containing package when it is first loaded, then when a second symbol is loaded from another package, we see it is a dup and just ignore it, without changing the package. There we don't know yet where the symbol will be laid down. So we set it here to the package where we lay down the symbol, when we decide it. We don't need to do anything when we dedup the symbol, since the field will be overwritten here.
|four
|From the spec there is no quaternion division.
|remove the parentheses for the second &#124;&#124;
|add an empty line and comment that the rules below are breaking constants.

remove the extra parentheses. both the pair for != and the pair for ^uint64(0) are necessary.
|remove the space. &amp;^ is an operator.
|0x100
|Why &quot;isARMImm12(uint32(c&#124;d)&quot; is not enough to prevent the loop? If c&#124;d fits in imm12, the breaking rule shouldn't be triggered.
|Just use names a, b and mention that a, b fit in imm12.
|0 is &quot;valid&quot; but you shouldn't break up 0 into two 0's. If that happens, there is something wrong.

For uint64(-1), you could write ^uint64(0).
|Could this happen? This means it has at most 6 &quot;effective bits&quot; and should fit in imm12?
|Could you also add the compiler speed benchmark as in the earlier version of your CL? (but update it for your current code)
|This one looks like a significant slowdown. Could you investigate?
|Could you explain why you need (!isARMImm12(uint32(c)) &#124;&#124; !isARMImm12(uint32(d)))?
|Returning 0 for non-match seems simpler, and easier to write.
|comment that it returns x&lt;&lt;32 &#124; y when you break v to x - y
|this needs comment
|Again, this doesn't look right. This will stop folding things like (ORconst [1] (ORconst [2] x)).
|The two arms of &#124;&#124; look identical. I assume you meant 'd' instead of 'c' in one of them.

This would make it stop folding (OR [1] (OR [2] x)). I think what you actually want is whether (c&#124;d) fits in the instruction.
|Im -&gt; Imm. I think immediate is usually abbreviated as imm.
|How fast are these loops? It seems this code will probably run many times against many constants in a compilation of a reasonable sized program.
|Done
|Is there a way to test the concurrency safety?
|Great! Thank you.
|Are you planning on removing the corresponding fields in obj.Link?
|Are you going to change all the architectures? If not (maybe others don't have many globals?), should we remain this as function that takes ctxt5 as first arg? So it is consistent with other architectures. Also oplook, aclass, oprrr, etc.
|Yes. I have no strong preference on them being functions or methods. Removing newprog from passing around does seem cleaner.
|Maybe &quot;... as part of the literal pool (c.pool)&quot;?
|It may be good to add that each function has a fresh ctxt5.
|This can be simply &quot;switch c.aclass(a)&quot;.
|optimize (lowercase)
|calculation
|Can you remove this line?
|Thanks, Brad.

Wei, so maybe just mention his contribution in the commit message.
|We don't use Signed-off-by. Maybe you could mention his work in the commit message. Better, let him submit his contribution in a separate CL if the work is separable. Does he sign the CLA?

Brad, could you help on this? I'm not very sure here.
|period at the end.
|36?
|Why return value is promoted to 8 bytes? (crc takes 8 bytes because of the alignment of p, which is right). Did I miss something?
|Use space between operands. Apply to the whole file.
|Can't you use your newly-added TBZ here?
|36?
|You need also add this variable to os_darwin_arm64.go. Do you plan to support darwin?
|Oh, it was ok because the Follow pass in the assembler detects they are dead and elide them. But now I deleted Follow...
|This can be t := c.newprog(). No need to copy the struct.
Or a local stack-allocated t is enough? t := Prog{Ctxt: c.ctxt}
|By saying globals, you mean NAME_STATIC? Globals can also be NAME_EXTERN. I'm not sure I understand correctly...
This is just a sanity check, so it's probably fine.
|You could lift this out of the if now.
|Isn't this always true? It seems p.From can only be SCON?
|Isn't this always true?
|also this function
|The use of cursym in this function can stay as cursym, as it is just a local variable. Is there a reason to change them?
|Ok. It probably generates one more load instruction for each c.cursym, but probably not a big deal. Leave it to you.
|This looks a bit hacky. A better way would be use a new aclass and new entry in optab. You can set to this aclass only when GOARM==7. There seems already a C_SCON you could use.
|This, and WORD, PCDATA, and FUNCDATA are not necessary. You should add a case in func cmp such that instructions that accept C_LCON also accept C_SCON. Then only special case C_SCON when there is a different encoding.
|I remember that Matthew attempted to do this, but it didn't work for shared library. I don't know what didn't work last time and why it works this time, but since the trybot is happy I assume it is ok.
|Keep the original CSINV CS, to test we recognize the CS condition as an alias of HS. This line should be
CSINV	CS, R1, R2, R3 // CSINV HS, R1, R2, R3 // 232082da
|Keep the &amp;31. Actually it should be &amp;15. It is better to make sure with extra care that we only write this 4-bit field here. Also add this in other cases.
|CSET etc. are currently used in many places. Why does it work now?
|Oh, there is &amp;31 in case 18. That makes sense. And CCMP and FCCMP are rarely used. Thank you for catch it.
|What is this for? Could you remove?
|You don't need to write the instruction in comment if the printed form is the same as the input. It is only needed when the printed form is different.
|You can delete this now.
|Realized in CL https://go-review.googlesource.com/c/41653/, you'll also need to update anames5.go. FWIW, we should auto-generate that file...
|Why not? We can assemble &quot;BIC $c, r&quot; as &quot;AND $(~c), r&quot;.
|Isn't this file generated? This is probably my fault in my previous change that forgot to update this file... Thanks for fixing it.
|I read the new liveness code and believed this is ok.
|OpVarXXX shouldn't update WBPos nor emit debug output. So maybe just handle them here and continue?
|LGTM.
|Need to mention ARM. Maybe something like &quot;fix operand order of ARM's MULA instruction&quot;.
|lowercase
|I don't think the issue applies to ARM. This assembles to &quot;MOVW.HS&quot;. Almost all the ARM instructions can be conditional and take a &quot;.Cond&quot; suffix. MOVW is not an exception. As this SSA op compiles to a MOVW instruction, I think MOV and W should stay together.
|// For MLA-like instructions, the addend is the third operand.
|No need for this.
|Add a line &quot;Updates #20096&quot;.
|Inline this.
Otherwise it looks weird that a function named &quot;addendArgs&quot; is called even when the instruction has nothing to do with addend.
|add them to the end
|Done
|Done
|Done
|Done
|return 0, 0 without the &quot;else&quot;.
|update this comment
|Fixes #19844. (so GopherBot can automatically close it)
|What do &quot;first round&quot; and &quot;second round&quot; mean? Can we just have one?
|Could this be &quot;uint32(c)&quot;? We probably don't want high bits of the result to be all 1s, although it might be harmless.
|Need to update anames5.go.
|Add x&amp;y==0.
|Remove the quotes
|Parentheses are unnecessary.
|Return 0, 0 when i &gt;= 26?
|&quot;point to&quot; is unclear. Maybe &quot;adjust i just above lower 8 effective bits of v&quot;.
|the complement of lower 8 effective bits
|Parentheses are unnecessary.
|No need for the type conversion and parentheses.
|subr64 and subr64a are same.
|bic32a?
|bic64a?
|need := []string{
  &quot;main(SB)&quot;,
  &quot;fmthello.go:6&quot;,
}
|I believe comment is ok.
|Is there a way to generate it instead of hand-written? Also, could we have better name than &quot;my_&quot;?
|Did you make sure that this include has no bad effect on other architectures?
|Thanks. Sounds good. Yeah, you could mention this.
|Is there any problem for ARM64? Does the regeneration produce a different struct? If so, you can also include that in this CL.
|Move test here?
|This has mixed tabs and spaces. Also in gogo.cc.
|Good to know. Sorry about it.
|return early?
|These tests are irrelevant to the change.
|2017
|How about &quot;mayHaveSuffix&quot;?
|If p.As is not in the map, zero value is returned, so it can be simply
if spwInst[p.As] &amp; T_SBIT == 0 { ... }
And then can be merged with the outer if.
|Remove &quot;: &quot;. What is this for?
|There are also the .P and .W suffix. Currently there are several places where we check them, for example, in oprrr. Is it possible that we could unify the checking mechanism?
|I wonder whether there is a way we could test that the invalid instruction are indeed rejected. Maybe an &quot;// errorcheck&quot; in the (top level) test directory could do?
|Use opcode as index, so we can avoid the lookup loop. Something like
var sInst = []bool{
  AAND: true,
  ...
}

Or maybe use AAND-obj.ABaseARM, to save some space.
|remove one empty line. In fact the sentence below (MULS example) can be removed.
|longer
|unnecessary parentheses
|I remember I thought about the potential quadratic behavior when I wrote the code, but I must have missed something...
|Maybe we could keep a counter of WB ops in the current block, decrement it each time we rewrite one.
|I guess we want to keep Google Inc.?
|Do we merge this file with the README file?
|keep them at the end, as the original file does.
|I think a better fix would be putting these into a separate optab entry, which only accept FREG NONE FREG. Then we don't need the test here. And adjust buildop accordingly.
|remove &quot;rc/&quot;
|What is this for? Identical error messages generated multiple times?
|use switch statement.
|llvmTypeAllocSize
|llvmTypeSize
|Add a TODO for adjusting the threshold later?
|too many &quot;s&quot;
|this name sounds something bad is happening...
|Why is it pointer to bool? I guess it doesn't really matter.
|As this runs after shuffle, is it possible that the spill is live in a &quot;copy&quot; generated from shuffle? I guess not, as the spill is defined in the loop and d has single predecessor. Well, even this could happen, we just conservatively abort sinking, which is fine.
|In theory we only need to make it not sink into this exit. It could still sink to other exits where the spill is live, right? I guess this way is fine, being simpler and safer for Go 1.8. (and we no longer need it for Go 1.9)
|t.Error
|It looks this will not be undo. So just delete commented code?
|(also here)
|Could you write the constants in hex? I understand that you have to write it again in decimal in the comment, but it is clearer in hex to see which encoding should be chosen.
|Let's don't put MOVW.S into this CL, as it is still under discussion.
|Don't you need to change case 106 and 107 in asmout?
|Use something more precise. Maybe fix constant decomposition.
|This seems indented too much.
|Is there a reason to remove the assertion?
|manufacture
|awareness?
|Could these allocas be simply inserted at the beginning of the entry block?
|nit: would it be ai or aInst?
|Probably not directly related to the CL, is it by any chance related to issue 20492?
|Could you add a comment about what this instruction is (load R2 from where)?
|So this is inserted to the current function instead of the trampoline function. Doesn't the compiler already do it? Does it overwrite anything?
|Is R12 free to use? I see we mark R12 non-allocatable in shared mode, but not in normal mode.
|targetaddr?
|I think you can remove this note (no longer apply).
|I think the idea we discussed in Issue 20492 is that for external linking, you'll need trampolines for all cross-section calls. So this condition may need to change to something like s.Sect != r.Sym.Sect in external linking. Also need to be sure that the trampoline and the caller are in the same section.
|I think it is clearer to put this comment inside the if.
|I'm still a little concerned about R12 here. In non-shared build mode, R12 is not reserved. Normally registers are not live across function calls, so this is fine. But there may be special cases (for example, Duff's Device)?
|Ok, thanks. I think we are fine with R31 (at least for now).
|In external linking (which I think could be static or dynamic), when does R12 need to hold the function entry address? Is it only needed for stubs created by the external linker? If this is the case, using R31 should be fine, because we no longer need the external linker to create call stubs.

If R12 is needed in other cases, we probably have to use R12 then. Normally it is ok. For special cases like runtime.duffzero/duffcopy, we can tell the compiler that R12 will be clobbered. Is there any other case that CALL does not kill registers?

I'll go read the ABI doc. But leave a comment first.
|So, if I understand correctly, using R31 is ok even with external linking as long as we are not linking PIC and non-PIC together?

I'm not worried about linking PIC and non-PIC at the moment. I'm not sure this even works on other architectures as well as on PPC64 even if R12 is set.

It is possible to create static binary with external linking:

$ CGO_ENABLED=1 GOARCH=ppc64le GOOS=linux CC=/usr/bin/powerpc64le-linux-gnu-gcc go build -ldflags='-linkmode=external -extldflags=-static' hello.go
$ file hello
hello: ELF 64-bit LSB  executable, 64-bit PowerPC or cisco 7500, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=ce00110b7d2deaf27d65e5b5211cf70760f123fb, not stripped
|remove one space
|lvalue (use the bool)
|But int32 and uint32 are not &quot;equivalent&quot;... What did I miss?
|Better be &quot;ext&quot;? (found by reading the test)
|fix encoding of move to CPSR
(better be specific)
|This is the RFS instruction which moves FPSR to general purpose register predating VFP. The one in the next line is WFS for the other direction. We don't support non-VFP floating points, so we should update them to the VFP form.
|If the printed form is the same as the input, no need to write it again in comment. It seems this is the case for all the MOVW ones you added in this CL.
|this should be removed
|also this
|Sounds a good idea. Will look into it.
|Done
|Done
|It looks like this is ok. Seems run.go can parse the build tag and directive like this.

However, seems run.go only looks for tests in test/fixedbugs but not in its subdirectory... We probably need a dummy fixedbugs/issue19507.go. We have &quot;rundir&quot; and &quot;compiledir&quot; but no &quot;builddir&quot; though. Maybe just rundir.
|Done
|Done
|Done
|Be specific in commit message. This sounds like all these instructions are broken, which sounds very scary, but this is clearly not the case. For the point 1 below, it could be something like &quot;fix encoding of MOVBS.U&quot; or &quot;fix setting U bit in MOVBS shifted register offset&quot;.
|Can you do this in a separate CL? They are two unrelated issues.
|Could you also remove the moves to/from label here, as well as at line 1166 and 1176?
|It does print &quot;bad shift&quot;.
|Why change to SP? To mimic real code it should be SB.
And it doesn't make sense to do pre/post-indexed move with an external address.
|Moving to/from a label doesn't make much sense. It might work. But I don't see any point to write code like that. I suggest to remove those tests with labels.
|Same as above. Should be SB.
|As you are here, we should change to use instruction name in Go syntax, MOVB/MOVBS. Since you already print p, &quot;bad shift: %v&quot; is enough.
|This doesn't look correct. The register (&quot;Rx&quot; in Rx&lt;&lt;0) is encoded in the low bits of p.From.Offset. This change makes only R0 accepted. In fact I think the original check is correct: it accepts Rx&lt;&lt;0, and nothing else.
|It would be good to test non-zero shift.
|Done
|minor: maybe append -o asmfile later after we determine asmfile, then we don't need the loop at line 155.
|genLoad is called by resolveVarContext (at line 687). With this, resolveVarContext may return an expr that still has var context pending? This seems a bit convoluted.
|Ok. Thanks for the explanation and the comment. Make sense.
|Where is it set? I tried &quot;s := []int{1,2,3}; s[1] = 5&quot;, but this is not set.
|Ok. The assignment s[1]=5 also works after I update gofrontend. Seems https://go-review.googlesource.com/c/46170/ does it. Thanks.
|Not sure why this is changed. Seems indirect_expression should take the type of the value after dereference.
|Patch Set 1:

On mips64 TestGdbBacktrace test passes but TestGdbPython still sometimes fails.

I think there are two things:
1. one of the builder machines is not of pure 64-bit environment, and somehow GDB's python fails to access 64-bit address.
2. on mips, GDB does weird things for backtracing (like heuristic-fence-post), which I am still reading GDB's source code to understand.

So, if we keep this variable, set it to false for mips64?
|Patch Set 2: Run-TryBot+1 Code-Review+2

&gt; Patch Set 2:
&gt; 
&gt; Rebased. Happy to change this to skip the test on mips64{,le} if it is still broken Cherry.

It works on MIPS now.
|Uploaded patch set 1.
|Uploaded patch set 2.: Patch Set 1 was rebased
|Uploaded patch set 3.: Patch Set 2 was rebased
|Uploaded patch set 4.: Patch Set 3 was rebased
|Uploaded patch set 5.
|Patch Set 1:

(2 comments)
|Patch Set 5: Run-TryBot+1
|Change has been successfully cherry-picked as 8cc3f4a17e2f4d63e090fd7bd39bee697521fddf by Cherry Zhang
|Uploaded patch set 1.
|Uploaded patch set 2.: Patch Set 1 was rebased
|Patch Set 2: Run-TryBot+1

rebased. restart trybot.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; (1 comment)

The IEEE standard says
&quot;When either an input or result is NaN, this standard does not interpret the sign of a NaN. Note, however, that operations on bit strings -- copy, negate, abs, copySign -- specify the sign bit of a NaN result, sometimes based upon the sign bit of a NaN operand.&quot;
And
&quot;negate(x) copies a floating-point operand x to a destination in the same format, reversing the sign bit.&quot;

So it is ok to always flip the sign bit.
|Uploaded patch set 3.: Patch Set 2 was rebased
|Uploaded patch set 4.: Patch Set 3 was rebased
|Uploaded patch set 5.: Patch Set 4 was rebased
|Patch Set 5: Run-TryBot+1
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1
|Uploaded patch set 7.: Patch Set 6 was rebased
|Patch Set 7: Run-TryBot+1
|Patch Set 7:

Trybot failure is unrelated.
|Change has been successfully cherry-picked as 7b9873b9b9daba332be582cf8a9249b7430311f8 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 7d70f84f547a1b60279985fa91c407ddfde9bd64 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.: Patch Set 1 was rebased
|Change has been successfully cherry-picked as 7bd88a651d0d9f8b314989475b337a0edf225bd1 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.: Patch Set 2 was rebased
|Change has been successfully cherry-picked as 6b6de15d327142a19c978c8b9811310b174fd60b by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 6adb97bde72b97310f9a75a4e286cd2ef236b271 by Cherry Zhang
|Patch Set 3: Code-Review+2

(5 comments)

Thanks for doing this!
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 6:

(1 comment)
|Patch Set 7: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as d8181d5d75821ad5b78ea7f4163dd86ac29f740a by Cherry Zhang
|Uploaded patch set 1.
|Uploaded patch set 2.: Commit message was updated
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Just noticed this, sorry for the delay, what does this do to the generated binary size?  I.e., does this reduce line number churn in the debugging information?

Yes, it does. This is the number I measured in July (for ARM):
			before		after
cmd/go binary size	8360380		8303036 (-0.7%)
.gopclntab		1201793		1186137 (-1.3%)
.debug_line		 694966		 657483 (-5.4%)
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

rebased on to tip
|Change has been successfully cherry-picked as 46ba59025f527b2cfc5ef0d5ec47be45971ba672 by Cherry Zhang
|Patch Set 3: Code-Review+2

(3 comments)

I still don't have PPC64 machine access, so, just by visual inspection...
|Patch Set 2: Code-Review+2

The assembly implementation looks good to me, although it may result in different numbers than the old backend does for numbers that do not fit in uint32. I guess it is fine by the spec?

An alternative way (safer but less efficient) would be doing float-&gt;int64-&gt;uint32 in the frontend.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as ae9570a5b95b0b321f91f504661e9c36dc1caa0e by Cherry Zhang
|Patch Set 1: Code-Review+2

(6 comments)
|Patch Set 1: Code-Review+2

(6 comments)

LGTM. (again, visual inspection only)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as 83208504fe2bbe91dae99111593de54cca1cdca0 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 114c05962cd5a9924cd23f1263d08f0fd757bdb7 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; Is there same perhaps true for MVN?

MVN is fine. The old backend does not generate it.
|Change has been successfully cherry-picked as 00692402162ecc3df33af2b3ce48142b0ff9429c by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; Patch Set 1: TryBot-Result-1
&gt; 
&gt; 1 of 18 TryBots failed:
&gt; Failed on linux-amd64-race: https://storage.googleapis.com/go-build-log/51f5484e/linux-amd64-race_83f595f2.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

Trybot failure seems unrelated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Change has been successfully cherry-picked as 111d590f86e2c9a55ec08d95fc4e9adea9232f0c by Cherry Zhang
|Patch Set 3: Code-Review+2

(10 comments)
|Patch Set 1: Code-Review+1

(10 comments)
|Patch Set 3: Code-Review+1

(4 comments)

LGTM. Wait for Lynn.
|Patch Set 3:

(3 comments)
|Patch Set 5:

(2 comments)
|Patch Set 5: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(4 comments)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(5 comments)
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1
|Change has been successfully cherry-picked as 0484052358ffdfb64cd533b3ea55f7c2b9d0b7bd by Cherry Zhang
|Patch Set 1:

(1 comment)

Haven't read through, just reply a comment.
|Patch Set 2: Code-Review+2

(4 comments)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(2 comments)
|Uploaded patch set 4.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Happy to see some motion on this. Could you perhaps add some words describing what's going on and references to where more information can be found about this encoding? I don't think it'll ever be really easy to understand, but bitconEncode is pretty mysterious as it stands.

Yes, this encoding is not easy to describe. I added some comments about bitconEncode.
|Patch Set 4: Run-TryBot+1
|Change has been successfully cherry-picked as 748aa84424418fb71c2528e7340df0ad6075b265 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as ed1ad8f56cc51cc55a8c12514e1c2b3098c1218b by Cherry Zhang
|Patch Set 2: Code-Review+1

(5 comments)

Ok, I think I start to understand how the PPC float registers work.

FMOVSZ, FMOVSX seem not used anywhere?
|Patch Set 3: Code-Review+2

(3 comments)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 4c4ca8312064cc47bc3b3cd5efc43ff5b89f4dff by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(2 comments)
|Change has been successfully cherry-picked as d99cee79b98dfb6c1cd8e64c96845ee29aa28b4c by Cherry Zhang
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Forgot to add to Commit message, also marked &quot;g&quot; as clobbered by calls (e.g., SetG).
&gt; 
&gt; This could also rebase to master pretty easily (if I knew the git incantation to make that happen).
&gt; 
&gt; Any clues about PPC shared libraries would be helpful.

I just grep Flag_shared and found in cmd/compile/internal/gc/cgen.go:2357 (in Ginscall) there is a special case for PPC calling deferreturn (remember the two NOPs?).
|Patch Set 1:

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; Not sure if this helps with the shared library issue, my guess after a quick look at the trivial test using gdb is that R2 is not being restored correctly somewhere.  I can probably look into it in more detail later today.  Almost everything on the stack was from runtime.

The missing instruction in the deferreturn special case is an instruction setting R2. Maybe this is the problem.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 1e94d79f9dbe032d9c8c0f461ca6fb96e20c0b85 by Cherry Zhang
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Thank you. Was Duff's device enabled on darwin/arm64 before SSA? If so, I think a spin-off issue should be opened to re-enable support.

No, it was not enabled with the old backend (and I overlooked it when doing SSA).
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as e6f1a886bc49e920533b3e95e96f4965000b9821 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Change has been successfully cherry-picked as 659dd4f1d7ed4e040d32346fa18c4ae3311ed81a by Cherry Zhang
|Patch Set 2: Code-Review+1

(2 comments)

LGTM, except for the FP conditional branches.
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; Anyone else who's looking at this, I've isolated the miscompilation for &quot;trivial&quot; to any one of mstart1, gentraceback, or mapassign1 (i.e., any one of those compiled w/ SSA causes a crash)

By visual inspection on the assembly of mstart1 from the old backend, it seems when flag_shared there is one extra instruction to load R12 when doing closure call. See cmd/compile/internal/ppc64/gsubr.go:589. I am not sure it applies only to closure calls, or to all function calls.
|Patch Set 5: Code-Review+1

(4 comments)

LGTM. Just not so sure about the increase of stack guard on all arches, and the debug prints in the test (seems a good idea but not sure about convention/consistency).
|Patch Set 7: Code-Review+1
|Patch Set 7: Code-Review+2

Be sure to decrease the stack guard in a follow-up CL.
|Patch Set 1: Code-Review+2

(1 comment)

I have a fix using map
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; (1 comment)
&gt; 
&gt; I have a fix using map

Seems polygerrit includes my incomplete comment... I didn't intend to say it twice.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; &gt; &gt; Patch Set 1: Code-Review+2
&gt;  &gt; &gt;
&gt;  &gt; &gt; (1 comment)
&gt;  &gt; &gt;
&gt;  &gt; &gt; I have a fix using map
&gt;  &gt; 
&gt;  &gt; Seems polygerrit includes my incomplete comment... I didn't intend
&gt;  &gt; to say it twice.
&gt; 
&gt; Send me your CL, we can use that one if it is better.

Sent https://go-review.googlesource.com/c/27236/
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 04e76f295f434bf1bd5ef3b01eed42b638a8b321 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 3d5cf72ca9beaedc5dcc8b094945de95fa35a670 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; I think we should consider re-specializing sparse map. On my phone, but will send more details soonish.

&gt; Patch Set 1:
&gt; 
&gt; I think we should consider re-specializing sparse map. On my phone, but will send more details soonish.

Sparse maps are mainly used in regalloc, which I assume is performance critical. I don't want to change that for now. Also a store of size larger than 2G is probably extremely rare.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as a7277e5494c696a4798b99e1e55d55acf61211de by Cherry Zhang
|Patch Set 4:

&gt; Patch Set 3:
&gt; 
&gt; My earlier comment about re-specializing sparse map stems from the fact that, as written, sparse map isn't even a perfect match for regalloc. The use of int32 means it still needs to be copied back and forth to IDs. I wrote CL 27329 that migrates part of regalloc away from the existing sparse map. Just something to consider--shoehorning everything into one sparse map implementation might not be the right choice, given how straightforward the implementation is.

Ah, your CL looks nice. I agree that currently there are a bit overloaded uses of sparse maps. Need to consider carefully. FYI, I also have a CL https://go-review.googlesource.com/c/25082/ for fixing some line numbers, which also touches sparse map.
|Patch Set 1: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Change has been successfully cherry-picked as 310a40b4f2d602786becb3a5ed28394311c41ffa by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3: Commit message was updated.
|Patch Set 2:

(3 comments)
|Patch Set 3: Run-TryBot+1
|Change has been successfully cherry-picked as e71e1fe87e144ec10287a10b6a41a543762dabff by Cherry Zhang
|Patch Set 3: Code-Review+2

(1 comment)

Is it also enabled on amd64p32?
|Patch Set 3:

(1 comment)
|Patch Set 4:

(2 comments)
|Patch Set 9:

(1 comment)
|Patch Set 3: Code-Review+2

(2 comments)
|Patch Set 2:

LGTM. Thank you!
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 7f27f1dfdd81c978d4868917d7622e09b288ecb0 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(2 comments)

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)
&gt; 
&gt; Seems reasonable. Part of me still wonders whether this wouldn't be better done in nilcheckelim, though, where the fact that newobject returns non-nil could be easily propagated throughout the rest of the function. (Or does this CL handle that as a side effect?)

With copy propagation all nil checks on the pointer returned from runtime.newobject is removed. It does not yet handle
	t := new(T)
	p := &amp;t.f
	x = *p
I'll add a rule for removing nil checks on OffPtr of new(T).
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)
&gt; 
&gt; Seems reasonable. Part of me still wonders whether this wouldn't be better done in nilcheckelim, though, where the fact that newobject returns non-nil could be easily propagated throughout the rest of the function. (Or does this CL handle that as a side effect?)

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; (2 comments)
&gt; &gt; 
&gt; &gt; Seems reasonable. Part of me still wonders whether this wouldn't be better done in nilcheckelim, though, where the fact that newobject returns non-nil could be easily propagated throughout the rest of the function. (Or does this CL handle that as a side effect?)
&gt; 
&gt; With copy propagation all nil checks on the pointer returned from runtime.newobject is removed. It does not yet handle
&gt; 	t := new(T)
&gt; 	p := &amp;t.f
&gt; 	x = *p
&gt; I'll add a rule for removing nil checks on OffPtr of new(T).

I am not sure if it covers all the cases.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; &gt; &gt; Seems reasonable. Part of me still wonders whether this wouldn't be better done in nilcheckelim, though, where the fact that newobject returns non-nil could be easily propagated throughout the rest of the function. (Or does this CL handle that as a side effect?)
&gt; &gt; &gt; 
&gt; &gt; &gt; With copy propagation all nil checks on the pointer returned from runtime.newobject is removed. It does not yet handle
&gt; &gt; &gt; 	t := new(T)
&gt; &gt; &gt; 	p := &amp;t.f
&gt; &gt; &gt; 	x = *p
&gt; &gt; &gt; I'll add a rule for removing nil checks on OffPtr of new(T).
&gt; &gt; 
&gt; &gt; I am not sure if it covers all the cases.
&gt; 
&gt; The perfect is the enemy of the good. Out of curiosity, do you have a count of how many times these rules trigger during make.bash? (Regen the rules with 'go run *.go -log', run make.bash, grep rulelog for the relevant line numbers.)

Zero                632     1677
NilCheck           5880    20347
NilCheck OffPtr     152      406
The first number is for make.bash, second all.bash, on darwin/amd64.
|Patch Set 3:

(1 comment)

&gt; Patch Set 3:
&gt; 
&gt; &gt; Zero                632     1677
&gt; &gt; NilCheck           5880    20347
&gt; &gt; NilCheck OffPtr     152      406
&gt; &gt; The first number is for make.bash, second all.bash, on darwin/amd64.
&gt; 
&gt; Awesome.

Thanks!
|Change has been successfully cherry-picked as b2e0e9688a512970ea8d270238c8ff3bbf85cbe1 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 2f679d74e638ac7514a6b6b32f5d28a9980c22c3 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+1
&gt; 
&gt; I think you need to enable test/intrinsic.go for arm64 (the architecture isn't listed in the +build line, not sure if that means it's included or excluded)

Thank you. I did not know this test. arm64 build tag added.

This CL collide with CL https://go-review.googlesource.com/c/28076/... Maybe hold it for later.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

&gt; Patch Set 1:
&gt; 
&gt; &gt; Patch Set 1: Code-Review+1
&gt; &gt; 
&gt; &gt; I think you need to enable test/intrinsic.go for arm64 (the architecture isn't listed in the +build line, not sure if that means it's included or excluded)
&gt; 
&gt; Thank you. I did not know this test. arm64 build tag added.
&gt; 
&gt; This CL collide with CL https://go-review.googlesource.com/c/28076/... Maybe hold it for later.

Updated. Also added atomics.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(4 comments)
|Change has been successfully cherry-picked as 4354ffd38b7ebdf7b4ee9ff614939ed77f872acd by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Abandoned

mail the wrong one...
|Uploaded patch set 1.
|Abandoned

mail the wrong one
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as f9dafc742d7c0e892b6e4ff17cb9ec7165887e44 by Cherry Zhang
|Patch Set 1:

Thanks for doing all these!

I think we should use &quot;mips&quot; for MIPS32, and &quot;mips64&quot; for MIPS64, just like arm and arm64. Ian, is it what you think?
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; No, it wasn't discussed, it's actually motivated by 'cmd/internal/obj/mips' being picked up by mips64.

Given the similarity (maybe I should say identity) between MIPS32 and MIPS64, I think cmd/internal/obj/mips can be used for both 32-bit and 64-bit, with some rather small modification, just like cmd/internal/obj/x86 is used for both 386 and AMD64. That is also the reason I chose cmd/internal/obj/mips instead of mips64. (Sorry I didn't make it completely portable across the two, but I think it only needs very small work.)
|Patch Set 2: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 1c53a1b1975adf69c594fbbd5b1ca13d783f9817 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as f1ef5a06d296fd0ba604a62ebb30531cef7ae74a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 644c16c76cc11034b124763a039a7164cb3e1abc by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 4d5bb76279a7b0043bef97156a39ae1bef923e6d by Cherry Zhang
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Change has been successfully cherry-picked as 14ff7cc94c4e167dbd80c96996b43f96bb9c17fb by Cherry Zhang
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 70fd814f53ba57e6523363d865a6ba49063bfa15 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

It should be safe to link normal and large packages into a single binary, as long as it passes the linker check. So, the standard library can always be installed as normal, as long as the linker don't put them too far apart (what is the order the linker used to lay down packages?). So it probably fine not to change the go command. I imagine we only need to build a small number of packages with -largemodel for which the linker complains.
|Patch Set 1:

Yes, these are all valid arguments. I am not insisting on getting this CL in. Mostly for discussion purposes.

I also heard the idea that this mode is always on. That is, the assembler backend always inserts NOPs before jumps, leaving space for the linker to rewrite to indirect jumps, and the linker makes the decision.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Abandoned

Abandoned. Use https://go-review.googlesource.com/c/29397/ instead.
|Patch Set 1: Code-Review+2

This has no interference with CL 28950, right?
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as 8ff4260777aabe4ec7a92cba8c7dcce24f7fbf2b by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(2 comments)
|Change has been successfully cherry-picked as 38d35e714a55f2e4bb67caadac7e61f8c1967d88 by Cherry Zhang
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 964639cc338db650ccadeafb7424bc8ebb2c0f6c by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; It would be nice if we had some more tests of the pclntab data. As it is, I can't think of an easy way to add a test for this.

Yes, that would be nice, but I am not sure what the best way is. There are tests in cmd/objdump and debug/gosym that tests the pclntab, on specific symbols, but not everyone (runtime and the toolchain may cause many symbols to change). I found the issue when I was playing with the linker that changes the order of functions it lays down, and triggers those tests.
|Change has been successfully cherry-picked as bb12894d2b51f8a50c0783db6043247758706466 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as 882dd1c3baff19cfe8d59bc1f69d766b38540fa5 by Cherry Zhang
|Patch Set 2:

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; (1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as c1bee49cac710af467f6450e104f920eafe344f7 by Cherry Zhang
|Patch Set 1: Code-Review+1

(3 comments)

I think you need to add s390x build tag to test/intrinsic.go to enable the test.
|Patch Set 2: Code-Review+2
|Patch Set 6: Code-Review+2

(1 comment)

Since you no longer use MOVWconst and MOVBload ops, delete them from ppc64/ssa.go and gen/PPC64Ops.go.
|Patch Set 2: Code-Review+1

(2 comments)
|Patch Set 2:

&gt; Patch Set 2: Code-Review+1
&gt; 
&gt; BTW, why are these rules amd64-specific? Shouldn't be shared by all platforms that support unaligned reads (e.g.: ARMv6+)?

We also do this on ARM64, and, I believe, S390X. We don't do it on ARM(32), as we still keep ARMv5 compatibility. As Keith pointed out, it is better for the rules to be in machine-specific forms.
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 4:

LGTM
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 38cd79889ece342643b56ad6d496ef8931ca9272 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3:

(2 comments)
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1

(10 comments)
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1
|Patch Set 6:

&gt; Patch Set 5: Code-Review+2
&gt; 
&gt; This looks right to me, but there's a part of the organization I'd like to see changed if it's possible.
&gt; 
&gt; You are effectively inserting a new phase into the linker:
&gt; 
&gt;   textaddress
&gt;   trampoline
&gt;   pclntab
&gt;   ...
&gt;   reloc
&gt; 
&gt; and you're doing it by reusing almost all of the reloc logic and calling it from textaddress. I think this would be easier to read if you did two things:
&gt; 
&gt; first, give yourself a new top-level function called after textaddress, and ideally reused as little of the (already pretty complicated) relocsym function as possible.
&gt; 
&gt; second, how much duplication is there if you make a copy of relocsym and strip away the parts you don't need? It looks like it might not be very much code, and would be easier to understand if it weren't tangled up.

refactored as suggested.
|Uploaded patch set 7.
|Patch Set 7: Run-TryBot+1

(3 comments)
|Uploaded patch set 8.
|Patch Set 7:

(3 comments)
|Patch Set 8: Run-TryBot+1
|Change has been successfully cherry-picked as 7c431cb7f9780fcaf58b9ef07028d5129e1e5fe7 by Cherry Zhang
|Patch Set 9:

&gt; Patch Set 9:
&gt; 
&gt; This broke TestLldbPython on OS X 10.12 Sierra. See #17463. Any ideas?

No. It runs fine on OS X 10.11. I don't have a 10.12 machine. Maybe try to find one today.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; No tests?

issue16016.go is the test, though it is flaky as it depends on GC.

&gt; 
&gt; This fixes something that's flaky, not something that's a binary state (building or not building).
&gt; 
&gt; This regressing is quite plausible without people noticing.
&gt; 
&gt; I expected better testability and tests with the new compiler.

We have test/live.go to test liveness. But for this particular one it is the auto-generated wrapper

&lt;autogenerated&gt;:1: live at entry to (*R).Foo: .this vals

So the magic comment there doesn't work. Maybe we can add a mechanism to test this as well (maybe another CL).

The liveness code is still old code, though.
|Patch Set 1:

&gt; Maybe we can add a mechanism to test this as well (maybe another CL).

https://go-review.googlesource.com/c/29652/
|Change has been successfully cherry-picked as 3dfb92f254ed4f94e3c98a789c171a1cd9c2563d by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as d586aae1f44ebdf0e8f92137856b4b62c41cac6a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(2 comments)
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Should we also try spilling a general purpose register to
&gt; an FP/vector register?
&gt; 
&gt; Most non-numerical code should have pretty low pressure on
&gt; the FP/vector registers. The only downside is that on some
&gt; processors inter-unit data movement is slow and on some
&gt; architectures, it's impossible to move data between units
&gt; without going through memory (e.g. ppc).

May be a good idea, at least on some architectures. Will give it a try (not in this CL).
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(3 comments)
|Change has been successfully cherry-picked as f876fb9baeef1798b2f6c30fde8f695b127fdad2 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Cherry, if that looks like a flake to you, please file a bug.

Yes. I just ran the same commit on linux-386 gomote and it passed. Filed Issue #17238.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as ba94dd34385af3352660fb4bfa2a2d97fb937088 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 9d4b40f55d2298fcb69e049b031e2e3ce8a1de8c by Cherry Zhang
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(1 comment)
|Patch Set 2:

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; LGTM.
&gt; For amd64p32 we round the start of the return values to a multiple of 8.  Maybe to prevent unaligned loads?

Yes. But for two pointer arguments or two pointer return values we pack them together. Don't know why we do it differently.
|Change has been successfully cherry-picked as 4d07d3e29c467484801b84dfeb762d2ee00979a9 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as fedb0b30188952dc082672cbd45b39a49136d29c by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1: TryBot-Result-1
&gt; 
&gt; 1 of 16 TryBots failed:
&gt; Failed on darwin-amd64-10_11: https://storage.googleapis.com/go-build-log/515f266d/darwin-amd64-10_11_6282eff3.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

Trybot failure is issue #17161.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Change has been successfully cherry-picked as b662e524e4d393f7c99fe281f8c95f7b2f7015a8 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(5 comments)
|Patch Set 4:

PPC64 shared library failure:
##### ../misc/cgo/testshared
--- FAIL: TestTrivialExecutable (0.39s)
	shared_test.go:41: executing ./bin/trivial (trivial executable) failed exit status 2:
		unexpected fault address 0x81d670e800003ffc
		fatal error: fault
		[signal SIGSEGV: segmentation violation code=0x1 addr=0x81d670e800003ffc pc=0x81d670e800003ffc]
		
		goroutine 1 [running, locked to thread]:
		runtime.throw(0x3fff81d6be25, 0x5)
			/tmp/workdir/go/src/runtime/panic.go:582 +0xa0 fp=0xc42004be70 sp=0xc42004be40
		runtime.sigpanic()
			/tmp/workdir/go/src/runtime/signal_unix.go:275 +0x2b8 fp=0xc42004bed0 sp=0xc42004be70
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004bef0 sp=0xc42004bef0
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004bef0 sp=0xc42004bef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004bf58 sp=0xc42004bef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004bfc0 sp=0xc42004bf58
		
		goroutine 17 [syscall, locked to thread]:
		runtime.goexit()
			/tmp/workdir/go/src/runtime/asm_ppc64x.s:1082 +0x4
--- FAIL: TestTrivialExecutablePIE (0.50s)
	shared_test.go:41: executing ./trivial.pie (trivial executable) failed exit status 2:
		unexpected fault address 0x89e670e800003ffc
		fatal error: fault
		[signal SIGSEGV: segmentation violation code=0x1 addr=0x89e670e800003ffc pc=0x89e670e800003ffc]
		
		goroutine 1 [running, locked to thread]:
		runtime.throw(0x3fff89e6be25, 0x5)
			/tmp/workdir/go/src/runtime/panic.go:582 +0xa0 fp=0xc42004be70 sp=0xc42004be40
		runtime.sigpanic()
			/tmp/workdir/go/src/runtime/signal_unix.go:275 +0x2b8 fp=0xc42004bed0 sp=0xc42004be70
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004bef0 sp=0xc42004bef0
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004bef0 sp=0xc42004bef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004bf58 sp=0xc42004bef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004bfc0 sp=0xc42004bf58
		
		goroutine 17 [syscall, locked to thread]:
		runtime.goexit()
			/tmp/workdir/go/src/runtime/asm_ppc64x.s:1082 +0x4
--- FAIL: TestCgoExecutable (1.99s)
	shared_test.go:41: executing ./bin/execgo (cgo executable) failed exit status 2:
		unexpected fault address 0x9b7e70e800003ffc
		fatal error: fault
		[signal SIGSEGV: segmentation violation code=0x1 addr=0x9b7e70e800003ffc pc=0x9b7e70e800003ffc]
		
		goroutine 1 [running, locked to thread]:
		runtime.throw(0x3fff9b7ebe25, 0x5)
			/tmp/workdir/go/src/runtime/panic.go:582 +0xa0 fp=0xc42004fe70 sp=0xc42004fe40
		runtime.sigpanic()
			/tmp/workdir/go/src/runtime/signal_unix.go:275 +0x2b8 fp=0xc42004fed0 sp=0xc42004fe70
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004fef0 sp=0xc42004fef0
		runtime.init.1()
			/tmp/workdir/go/src/runtime/mstats.go:408 +0x3c fp=0xc42004fef0 sp=0xc42004fef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004ff58 sp=0xc42004fef0
		runtime.main()
			/tmp/workdir/go/src/runtime/proc.go:141 +0x108 fp=0xc42004ffc0 sp=0xc42004ff58
		
		goroutine 17 [syscall, locked to thread]:
		runtime.goexit()
			/tmp/workdir/go/src/runtime/asm_ppc64x.s:1082 +0x4
SIGQUIT: quit
PC=0x138754 m=0

goroutine 13 [syscall, 9 minutes]:
syscall.Syscall(0x3, 0x4, 0xc42009ce00, 0x200, 0x0, 0x138734, 0x0)
	/tmp/workdir/go/src/syscall/asm_linux_ppc64x.s:17 +0xc fp=0xc42001dbc0 sp=0xc42001dba0
syscall.read(0x4, 0xc42009ce00, 0x200, 0x200, 0x2dd480, 0xc420017338, 0x0)
	/tmp/workdir/go/src/syscall/zsyscall_linux_ppc64le.go:783 +0x4c fp=0xc42001dc28 sp=0xc42001dbc0
syscall.Read(0x4, 0xc42009ce00, 0x200, 0x200, 0x9cc54, 0x19ffe0, 0x41001)
	/tmp/workdir/go/src/syscall/syscall_unix.go:161 +0x44 fp=0xc42001dc80 sp=0xc42001dc28
os.(*File).read(0xc420266088, 0xc42009ce00, 0x200, 0x200, 0x0, 0x19ffe0, 0x200)
	/tmp/workdir/go/src/os/file_unix.go:156 +0x4c fp=0xc42001dcd8 sp=0xc42001dc80
os.(*File).Read(0xc420266088, 0xc42009ce00, 0x200, 0x200, 0xc420016000, 0x20360, 0x1b3280)
	/tmp/workdir/go/src/os/file.go:101 +0x4c fp=0xc42001dd50 sp=0xc42001dcd8
bytes.(*Buffer).ReadFrom(0xc42009e2a0, 0x2c1620, 0xc420266088, 0xc42001de48, 0x1, 0x13c58)
	/tmp/workdir/go/src/bytes/buffer.go:175 +0x14c fp=0xc42001ddd0 sp=0xc42001dd50
io.copyBuffer(0x2c13e0, 0xc42009e2a0, 0x2c1620, 0xc420266088, 0x0, 0x0, 0x0, 0xc4200139d8, 0x0, 0x1370c)
	/tmp/workdir/go/src/io/io.go:384 +0x2f4 fp=0xc42001de68 sp=0xc42001ddd0
io.Copy(0x2c13e0, 0xc42009e2a0, 0x2c1620, 0xc420266088, 0x19dd60, 0xc420013980, 0xc42001df80)
	/tmp/workdir/go/src/io/io.go:360 +0x50 fp=0xc42001ded8 sp=0xc42001de68
os/exec.(*Cmd).writerDescriptor.func1(0x687b0, 0xc420013980)
	/tmp/workdir/go/src/os/exec/exec.go:253 +0x4c fp=0xc42001df48 sp=0xc42001ded8
os/exec.(*Cmd).Start.func1(0xc42039c420, 0xc42043c900)
	/tmp/workdir/go/src/os/exec/exec.go:370 +0x30 fp=0xc42001df90 sp=0xc42001df48
runtime.goexit()
	/tmp/workdir/go/src/runtime/asm_ppc64x.s:1083 +0x4 fp=0xc42001df90 sp=0xc42001df90
created by os/exec.(*Cmd).Start
	/tmp/workdir/go/src/os/exec/exec.go:371 +0x39c

goroutine 1 [chan receive, 9 minutes]:
testing.(*T).Run(0xc42027a180, 0x1e7b4e, 0xe, 0x1f1408, 0x7c900)
	/tmp/workdir/go/src/testing/testing.go:657 +0x270
testing.RunTests.func1(0xc42027a180)
	/tmp/workdir/go/src/testing/testing.go:803 +0x64
testing.tRunner(0xc42027a180, 0xc420095ad0)
	/tmp/workdir/go/src/testing/testing.go:620 +0x8c
testing.RunTests(0x1f1540, 0x2d8cc0, 0x12, 0x12, 0x0)
	/tmp/workdir/go/src/testing/testing.go:809 +0x25c
testing.(*M).Run(0xc42044bec8, 0x1e5626)
	/tmp/workdir/go/src/testing/testing.go:753 +0x84
_/tmp/workdir/go/misc/cgo/testshared_test.testMain(0xc420095eb8, 0x0, 0x0, 0x0)
	/tmp/workdir/go/misc/cgo/testshared/shared_test.go:161 +0x5bc
_/tmp/workdir/go/misc/cgo/testshared_test.TestMain(0xc420095eb8)
	/tmp/workdir/go/misc/cgo/testshared/shared_test.go:170 +0x48
main.main()
	_/tmp/workdir/go/misc/cgo/testshared/_test/_testmain.go:86 +0xbc

goroutine 25 [syscall, 9 minutes]:
syscall.Syscall6(0x110, 0x1, 0x76f0, 0xc420084ac0, 0x1000004, 0x0, 0x0, 0xc42043c8a0, 0x0, 0x1362c)
	/tmp/workdir/go/src/syscall/asm_linux_ppc64x.s:41 +0xc
os.(*Process).blockUntilWaitable(0xc4202b62d0, 0xc4203fd130, 0x1, 0x10)
	/tmp/workdir/go/src/os/wait_waitid.go:28 +0x80
os.(*Process).wait(0xc4202b62d0, 0xc420266090, 0x0, 0x0)
	/tmp/workdir/go/src/os/exec_unix.go:22 +0x3c
os.(*Process).Wait(0xc4202b62d0, 0x0, 0xc42039c4f8, 0xc420084ca8)
	/tmp/workdir/go/src/os/exec.go:115 +0x2c
os/exec.(*Cmd).Wait(0xc42039c420, 0x0, 0x0)
	/tmp/workdir/go/src/os/exec/exec.go:434 +0x54
os/exec.(*Cmd).Run(0xc42039c420, 0xc42009e2a0, 0x0)
	/tmp/workdir/go/src/os/exec/exec.go:279 +0x60
os/exec.(*Cmd).CombinedOutput(0xc42039c420, 0xd, 0xc420084ee0, 0x0, 0x0, 0xc42039c420)
	/tmp/workdir/go/src/os/exec/exec.go:494 +0x120
_/tmp/workdir/go/misc/cgo/testshared_test.run(0xc42027a840, 0x1e6f09, 0xb, 0xc420084ee0, 0x1, 0x1)
	/tmp/workdir/go/misc/cgo/testshared/shared_test.go:40 +0x88
_/tmp/workdir/go/misc/cgo/testshared_test.TestTrivialPIE(0xc42027a840)
	/tmp/workdir/go/misc/cgo/testshared/shared_test.go:430 +0x160
testing.tRunner(0xc42027a840, 0x1f1408)
	/tmp/workdir/go/src/testing/testing.go:620 +0x8c
created by testing.(*T).Run
	/tmp/workdir/go/src/testing/testing.go:656 +0x250

r0   0x3	r1   0xc42001dba0
r2   0x0	r3   0x4
r4   0xc42009ce00	r5   0x200
r6   0x0	r7   0x0
r8   0x0	r9   0x0
r10  0x0	r11  0x0
r12  0x0	r13  0x2e44e0
r14  0x11	r15  0xc42009c000
r16  0x200	r17  0x8
r18  0xffffffffffffffff	r19  0x201cd2
r20  0x4	r21  0xc41ffed5fa
r22  0xf7	r23  0x100000
r24  0x3fffc7618d50	r25  0x4f1e0
r26  0x8	r27  0x2
r28  0x0	r29  0x0
r30  0xc420001520	r31  0x138734
pc   0x138754	ctr  0x0
link 0x138734	xer  0x0
ccr  0x52400002	trap 0xc00
*** Test killed with quit: ran too long (10m0s).
FAIL	_/tmp/workdir/go/misc/cgo/testshared	600.010s
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; PPC64 shared library failure:
&gt; 
&gt; I'll try to have a look at this today.

Thank you!
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; PPC64 shared library failure:
&gt; &gt; &gt; 
&gt; &gt; &gt; I'll try to have a look at this today.
&gt; &gt; 
&gt; &gt; Thank you!
&gt; 
&gt; OK, I know what is going wrong but I don't really know how to fix it.
&gt; 
&gt; Background: when making position independent code on ppc64le, r2 us used to store a per-module TOC pointer. Much hair is lost maintaining this invariant. The one that matters here is that when invoking a function via a function pointer, the PC of the first instruction of the function needs to be in r12 so that two prologue instructions can derive the correct value of r2 for that function from it.
&gt; 
&gt; During process startup, runtime.init.1 is the first function that needs to grow the stack. So it calls, from runtime.init.1+56 into morestack. morestack saves LR (runtime.init.1+6) into gobuf.pc. Then at the end of newstack, gogo loads the value of gobuf.pc into $r12 and jumps to it. This is the instruction branching back to the start of the function which is now actually executed. It jumps to the instructions that derive the value of $r2 from $r12 but these now get it wrong (by 60) and then the first access to global data goes wrong and the process crashes.
&gt; 
&gt; In some sense the right fix is probably to have morestack save and gogo restore the value of r2 on ppc64 (needless but not harmful when not dynlinking agaict).

Thank you! This is very helpful information.

David, yes, I am trying to save r12 into the unused reserved space and reload it after call of morestack.
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; The one that matters here is that when invoking a function via a function pointer, the PC of the first instruction of the function needs to be in r12 so that two prologue instructions can derive the correct value of r2 for that function from it.
&gt; 
&gt; I haven't looked at this closely, but can't we simply view this as a call to morestack that's returning to the function that needed to grow the stack?

I think the tricky part is r12 (or r2) needs to be recovered.
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; PPC64 shared library failure:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I'll try to have a look at this today.
&gt; &gt; &gt; 
&gt; &gt; &gt; Thank you!
&gt; &gt; 
&gt; &gt; OK, I know what is going wrong but I don't really know how to fix it.
&gt; &gt; 
&gt; &gt; Background: when making position independent code on ppc64le, r2 us used to store a per-module TOC pointer. Much hair is lost maintaining this invariant. The one that matters here is that when invoking a function via a function pointer, the PC of the first instruction of the function needs to be in r12 so that two prologue instructions can derive the correct value of r2 for that function from it.
&gt; &gt; 
&gt; &gt; During process startup, runtime.init.1 is the first function that needs to grow the stack. So it calls, from runtime.init.1+56 into morestack. morestack saves LR (runtime.init.1+6) into gobuf.pc. Then at the end of newstack, gogo loads the value of gobuf.pc into $r12 and jumps to it. This is the instruction branching back to the start of the function which is now actually executed. It jumps to the instructions that derive the value of $r2 from $r12 but these now get it wrong (by 60) and then the first access to global data goes wrong and the process crashes.
&gt; &gt; 
&gt; &gt; In some sense the right fix is probably to have morestack save and gogo restore the value of r2 on ppc64 (needless but not harmful when not dynlinking agaict).
&gt; 
&gt; Or rather, save $r12?  Or if we save $r2, branch to after the point in the prologue where it is derived from $r12, which the compiler could handle in its splitstack code so that no return PC adjust is required.  Plan B is to open code the save/restore around the call to split stack, using the one of the 2 unused dwords (out of 4) that are reserved in PPC.

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; PPC64 shared library failure:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I'll try to have a look at this today.
&gt; &gt; &gt; 
&gt; &gt; &gt; Thank you!
&gt; &gt; 
&gt; &gt; OK, I know what is going wrong but I don't really know how to fix it.
&gt; &gt; 
&gt; &gt; Background: when making position independent code on ppc64le, r2 us used to store a per-module TOC pointer. Much hair is lost maintaining this invariant. The one that matters here is that when invoking a function via a function pointer, the PC of the first instruction of the function needs to be in r12 so that two prologue instructions can derive the correct value of r2 for that function from it.
&gt; &gt; 
&gt; &gt; During process startup, runtime.init.1 is the first function that needs to grow the stack. So it calls, from runtime.init.1+56 into morestack. morestack saves LR (runtime.init.1+6) into gobuf.pc. Then at the end of newstack, gogo loads the value of gobuf.pc into $r12 and jumps to it. This is the instruction branching back to the start of the function which is now actually executed. It jumps to the instructions that derive the value of $r2 from $r12 but these now get it wrong (by 60) and then the first access to global data goes wrong and the process crashes.
&gt; &gt; 
&gt; &gt; In some sense the right fix is probably to have morestack save and gogo restore the value of r2 on ppc64 (needless but not harmful when not dynlinking agaict).
&gt; 
&gt; Thank you! This is very helpful information.
&gt; 
&gt; David, yes, I am trying to save r12 into the unused reserved space and reload it after call of morestack.

Saving and reloading r2 and jump to the point after setting r2 seems to work (however, saving and reloading r12 seems not...). Will update the CL.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1
|Patch Set 5:

(1 comment)

PPC64 shared library also works now.
|Uploaded patch set 6.
|Patch Set 6:

(1 comment)
|Uploaded patch set 7.
|Patch Set 7:

(1 comment)
|Change has been successfully cherry-picked as 4c9a372946347304094cbf5306cce6336d11e64b by Cherry Zhang
|Patch Set 8:

(1 comment)

&gt; Patch Set 8:
&gt; 
&gt; (1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as d0e92f61e5c5c59395d9b1a3b4f5c7b90dec5bc8 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 68331750dac5a38c5158f57ab19e3e99d11a59e3 by Cherry Zhang
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 8aadcc551e1610d4185c36624c8105f4303fe7ec by Cherry Zhang
|Patch Set 1: Run-TryBot+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as 2756d56c894e5b044907da74b6d5f3c684eab00d by Cherry Zhang
|Patch Set 2:

(2 comments)

What is the performance gain by doing this?

Is there any effect on backtracing and/or debugging?
|Patch Set 3: Code-Review+1

(1 comment)

I think most of the time it should be fine. I'm still a little concerned about signals. On runtime/signal_linux_s390x.go:88, the signal handler uses the LR the OS gives. It may be already wrong for non-leaf function after calling another function and return, but not too bad in a sense it's still pointing to the current function's body. I'd need to think a little more.
|Patch Set 3: Code-Review+2

LGTM. In the runtime traceback code and signal handling code, we always load LR from stack for functions with non-zero frame.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(3 comments)
|Change has been successfully cherry-picked as d26b0661c23dedc5c3e2c2ed2ca6250e440bf010 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(6 comments)

Also added a test.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; With the hybrid barrier, is this also going to require adding a ZeroWB operation?

I think so. (I leave a comment in cmd/compile/internal/ssa/gen/genericOps.go)
|Patch Set 2:

PTAL. Is this ready to sumbit?
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(2 comments)
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Change has been successfully cherry-picked as f6aec889e1c880316b1989bdc6ce3b926cbe5fe4 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as c7e855658d73b85f345c9a0ac81de42acad7ae9b by Cherry Zhang
|Patch Set 2: Code-Review+1

(5 comments)

It would be great if this code is written in Go idiom, without manual manipulation of SP. Maybe it's fine to fix the bug first. Could it be fixed in Go 1.8?
|Patch Set 3: Run-TryBot+1 Code-Review+2

(1 comment)

&gt; Patch Set 2:
&gt; 
&gt; (5 comments)
&gt; 
&gt; What would be Go idiom for a follow-up CL? Would it leave R13 alone (including the MOVM.DB.W instructions?) and use explicit offsets?

Yes, not changing R13 would be great. You could still use small offset by setting R13+168 in another register and offset from that register. MOVM can still be used if necessary, just not the .DB.W form (so the base register is not updated).
|Patch Set 8: Code-Review+2

(1 comment)

Consider adding a test in test/writebarrier.go
|Patch Set 2:

&gt; Patch Set 1:
&gt; 
&gt; This is OK but I think it will break the build if committed as is, so ideally it should be paired with the one that changes cmd/internal/obj/mips

Yes, please put this and CL 31475 in a single CL. Otherwise it won't build (on any architecture) when one of the two is submitted.
|Patch Set 3: Code-Review+1

(10 comments)
|Patch Set 4: Code-Review+1

(4 comments)

&gt; Patch Set 4:
&gt; 
&gt; Besides merging cmd/internal/obj patch with this one, I moved one small hunk from cmd/asm patch here, to not break the build.

Thanks for taking care of that.
|Patch Set 5: Code-Review+2

(2 comments)
|Patch Set 8:

&gt; Patch Set 8:
&gt; 
&gt; These are mips32 function alignment (4 vs. 8 bytes) benchmark results:
&gt;                                      old ns/op      new ns/op       delta
&gt; BenchmarkBinaryTree17-4              29859198395     29890708696     +0.11%
&gt; BenchmarkFannkuch11-4                16292965698     16330951527     +0.23%
&gt; BenchmarkFmtFprintfEmpty-4           566             566             +0.00%
&gt; BenchmarkFmtFprintfString-4          1494            1476            -1.20%
&gt; BenchmarkFmtFprintfInt-4             1282            1278            -0.31%
&gt; BenchmarkFmtFprintfIntInt-4          2029            2018            -0.54%
&gt; BenchmarkFmtFprintfPrefixedInt-4     2073            2073            +0.00%
&gt; BenchmarkFmtFprintfFloat-4           5993            5990            -0.05%
&gt; BenchmarkFmtManyArgs-4               8327            8226            -1.21%
&gt; BenchmarkGobDecode-4                 107807236       107545992       -0.24%
&gt; BenchmarkGobEncode-4                 105871823       105400306       -0.45%
&gt; BenchmarkGzip-4                      3284081031      3304984505      +0.64%
&gt; BenchmarkGunzip-4                    464336149       464086830       -0.05%
&gt; BenchmarkHTTPClientServer-4          452525          446311          -1.37%
&gt; BenchmarkJSONEncode-4                224022625       223503622       -0.23%
&gt; BenchmarkJSONDecode-4                668755544       669023018       +0.04%
&gt; BenchmarkMandelbrot200-4             29828010        29813299        -0.05%
&gt; BenchmarkGoParse-4                   27238986        27235419        -0.01%
&gt; BenchmarkRegexpMatchEasy0_32-4       966             968             +0.21%
&gt; BenchmarkRegexpMatchEasy0_1K-4       6690            6688            -0.03%
&gt; BenchmarkRegexpMatchEasy1_32-4       1060            1076            +1.51%
&gt; BenchmarkRegexpMatchEasy1_1K-4       8556            8555            -0.01%
&gt; BenchmarkRegexpMatchMedium_32-4      1550            1546            -0.26%
&gt; BenchmarkRegexpMatchMedium_1K-4      406700          407472          +0.19%
&gt; BenchmarkRegexpMatchHard_32-4        24015           23661           -1.47%
&gt; BenchmarkRegexpMatchHard_1K-4        719060          709881          -1.28%
&gt; BenchmarkRevcomp-4                   5203637518      5202903471      -0.01%
&gt; BenchmarkTemplate-4                  603882595       605678487       +0.30%
&gt; BenchmarkTimeParse-4                 4078            4091            +0.32%
&gt; BenchmarkTimeFormat-4                9054            9073            +0.21%
&gt; 
&gt; benchmark                           old MB/s     new MB/s     speedup
&gt; BenchmarkGobDecode-4                7.12         7.14         1.00x
&gt; BenchmarkGobEncode-4                7.25         7.28         1.00x
&gt; BenchmarkGzip-4                     5.91         5.87         0.99x
&gt; BenchmarkGunzip-4                   41.79        41.81        1.00x
&gt; BenchmarkJSONEncode-4               8.66         8.68         1.00x
&gt; BenchmarkJSONDecode-4               2.90         2.90         1.00x
&gt; BenchmarkGoParse-4                  2.13         2.13         1.00x
&gt; BenchmarkRegexpMatchEasy0_32-4      33.12        33.02        1.00x
&gt; BenchmarkRegexpMatchEasy0_1K-4      153.05       153.10       1.00x
&gt; BenchmarkRegexpMatchEasy1_32-4      30.18        29.72        0.98x
&gt; BenchmarkRegexpMatchEasy1_1K-4      119.67       119.68       1.00x
&gt; BenchmarkRegexpMatchMedium_32-4     0.64         0.65         1.02x
&gt; BenchmarkRegexpMatchMedium_1K-4     2.52         2.51         1.00x
&gt; BenchmarkRegexpMatchHard_32-4       1.33         1.35         1.02x
&gt; BenchmarkRegexpMatchHard_1K-4       1.42         1.44         1.01x
&gt; BenchmarkRevcomp-4                  48.84        48.85        1.00x
&gt; BenchmarkTemplate-4                 3.21         3.20         1.00x
&gt; 
&gt; For mips32, gcc and llvm align functions to 4 bytes.

Thanks for checking. Yes, this is good.
|Patch Set 3: Code-Review+1

(5 comments)
|Patch Set 5: Code-Review+1

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 8:

LGTM
|Patch Set 3:

(4 comments)
|Patch Set 6: Code-Review+1

(4 comments)
|Patch Set 7: Code-Review+2
|Patch Set 1: Code-Review+1

(21 comments)

Thank you for doing this.
What is the minimum requirement for the hardware? Are the instructions you used are generally available?
|Patch Set 6: Code-Review+1

(7 comments)

&gt; Patch Set 1:
&gt; 
&gt; The instruction set supported by this port is MIPS32r1.

Thanks.

Also make sure to run SSA check. (run make.bash with GO_GCFLAGS=-d=ssa/check/on)

T
|Patch Set 6:

(1 comment)
|Patch Set 10:

(2 comments)
|Patch Set 10: Code-Review+1
|Patch Set 10: Code-Review+2

(1 comment)
|Patch Set 3: Code-Review+1

(5 comments)
|Patch Set 7: Code-Review+2

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 4: Code-Review+2
|Patch Set 2: Code-Review+1

(3 comments)
|Patch Set 6: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2:

Please don't submit MIPS32 CLs until all CLs are reviewed (and the builder is up running). Otherwise it may break builds due to missing dependency. Thanks.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; I'm helping bring up their builders.
&gt; 
&gt; Nobody cares more about keeping https://build.golang.org/ black than me. :)
&gt; 
&gt; I figure if the trybots pass on trivial CLs, we could submit them already and ease their load, making their tree easier to manage. That's what I submitted the test skip one earlier.

Great!

&gt; 
&gt; When do you want to start submitting them?

I thought we submit them all after all the CLs are approved. But it is ok to submit trivial ones first :)
|Patch Set 2: Code-Review+2
|Patch Set 5:

(5 comments)

(Haven't finished reading the assembly)
|Patch Set 6: Code-Review+1

(18 comments)
|Patch Set 9:

(8 comments)

memclr_mipsx.s and memmove_mipsx.s are imported. I think this is fine as ARM's are also imported from the same source. But I'd like someone to confirm. Brad?
|Patch Set 10: Run-TryBot+1 Code-Review+1

LGTM. Brad, if you are ok with imported code (memclr_mipsx.s and memmove_mipsx.s), go ahead and submit.
|Patch Set 12:

&gt; Patch Set 12:
&gt; 
&gt; Actually I think the Inferno license on memset and memmove is troubling, as is the similar license on runtime/vlrt.go.  We have Inferno licenses on the compiler and linker code, but that is OK because user programs do not incorporate that code.  If we put code with this license into the Go runtime, that means that anybody who distributes a program that links against the Go runtime (at least the MIPS version) needs to follow the rule &quot;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&quot;  We do not want our users to have to know to do that.

Thank you, Ian. This is a good point. Then what about ARM?
|Patch Set 13:

(4 comments)
|Patch Set 14: Run-TryBot+1 Code-Review+2

(1 comment)
|Patch Set 15: Run-TryBot+1
|Patch Set 4: Code-Review+1

(4 comments)
|Patch Set 5: Code-Review+2
|Patch Set 2:

(6 comments)
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 2: Run-TryBot+1

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 4: Code-Review+2
|Patch Set 5:

LGTM
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

(1 comment)
|Patch Set 5:

&gt; Change has been successfully cherry-picked as d3a3b74aa1eec3417a754d798a4cad487949fa77 by Brad Fitzpatrick

This change is actually no longer needed. The 8-byte alignment is not really necessary.
|Patch Set 5:

&gt; Patch Set 5:
&gt; 
&gt; Filed https://github.com/golang/go/issues/17786

Thanks!
|Patch Set 3: Code-Review+2

(4 comments)
|Patch Set 4:

LGTM
|Patch Set 2: Code-Review+2

(3 comments)
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as a9ecc67d46e12a127b6b40b62d62b689cc511de4 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Run-TryBot+1 Code-Review+2

(4 comments)
|Patch Set 2:

LGTM
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

PS3: capitalize a few letters in comment as suggested in CL 31760 review.
|Change has been successfully cherry-picked as b55cee1893283cc55e99fb041fc0067f56924926 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Change has been successfully cherry-picked as 698bfa17a842890043098b972446e9b8dbc20841 by Cherry Zhang
|Patch Set 2: Code-Review+1

(4 comments)
|Patch Set 4: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2

(2 comments)

Maybe we could add a generic rule to fold (Slicemask const) to 0 or -1. Each architecture has rules to fold the constant, but it would need ~3 steps to fold this.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 4f1ca8b6f92d69a889a6884d3b8393fdcf530e2b by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

&gt; Patch Set 3: Code-Review+2
&gt; 
&gt; Was going to grumble about platform-specific hair in regalloc, but it's already got hair there, so never mind for this CL. LGTM.

Agree. Code generation makes it a little harder to make dynamic decisions. Maybe we can do better, say, by moving some into config, or generating functions to change the masks which are called dynamically.
|Change has been successfully cherry-picked as f9238a76ff0082071527ce8ec94542a297f594f8 by Cherry Zhang
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 4f6d479186f8a0303159f04c3673f6ea80b45a03 by Cherry Zhang
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 5c59cb4aa308828884079b13f100b539448a0861 by Cherry Zhang
|Uploaded patch set 1.
|Change has been successfully cherry-picked as c69dd3f0547e5846ce259a02d0b6ad9f19b566b6 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

Quentin, could you test it on Sierra? Thanks.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 9d1efba28db4c045356c92c20f98cf12b5f31d72 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 0dabbcdc435e4babf76bd561cfe67a486404d73a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; It's a little odd that you need to hit two files for this one, and only one for the mips case.  It might not hurt to have a comment linking the two, either indicating how one depends on the other (if that's what's going on) or indicating how there are two routes to moving zeroes into FP registers (if that's what going on).

It was actually a bug in asm7.go: FMOV ZR, Fx was mis-assembled. The compiler does not generate it directly, so it was not uncovered. This change hits the bug. There isn't this bug on MIPS.
|Change has been successfully cherry-picked as a866df26711c615dfe92ab1b00d256d3d1085f0e by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

Not sure whether this is good...
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Maybe run more reps on PPC?

I rebased and run benchmarks again, 25 runs on each architecture, got somewhat different results: (both old and new are rebased)

AMD64:
name                      old time/op    new time/op    delta
BinaryTree17-12              2.77s ± 1%     2.77s ± 2%     ~     (p=0.345 n=22+22)
Fannkuch11-12                3.05s ± 0%     3.14s ± 0%   +3.06%  (p=0.000 n=24+22)
FmtFprintfEmpty-12          51.1ns ± 0%    51.0ns ± 1%   -0.16%  (p=0.012 n=21+21)
FmtFprintfString-12          143ns ± 2%     143ns ± 1%   +0.30%  (p=0.011 n=24+22)
FmtFprintfInt-12             125ns ± 0%     123ns ± 0%   -1.60%  (p=0.000 n=19+21)
FmtFprintfIntInt-12          185ns ± 1%     184ns ± 0%   -0.81%  (p=0.000 n=22+20)
FmtFprintfPrefixedInt-12     191ns ± 3%     199ns ± 1%   +4.23%  (p=0.000 n=24+23)
FmtFprintfFloat-12           287ns ± 1%     288ns ± 0%   +0.30%  (p=0.000 n=22+21)
FmtManyArgs-12               825ns ± 0%     833ns ± 0%   +0.94%  (p=0.000 n=24+24)
GobDecode-12                7.18ms ± 1%    7.17ms ± 0%     ~     (p=0.620 n=24+23)
GobEncode-12                6.07ms ± 1%    6.09ms ± 1%   +0.31%  (p=0.004 n=21+25)
Gzip-12                      277ms ± 1%     276ms ± 1%     ~     (p=0.113 n=24+23)
Gunzip-12                   38.6ms ± 2%    38.1ms ± 0%   -1.18%  (p=0.000 n=24+24)
HTTPClientServer-12         91.2µs ± 3%    94.3µs ± 2%   +3.38%  (p=0.000 n=20+21)
JSONEncode-12               17.4ms ± 1%    16.5ms ± 1%   -4.96%  (p=0.000 n=24+24)
JSONDecode-12               54.8ms ± 1%    55.1ms ± 1%   +0.55%  (p=0.000 n=23+25)
Mandelbrot200-12            4.46ms ± 0%    4.45ms ± 0%   -0.16%  (p=0.000 n=24+23)
GoParse-12                  3.46ms ± 1%    3.50ms ± 1%   +1.19%  (p=0.000 n=22+25)
RegexpMatchEasy0_32-12      85.2ns ± 1%    85.7ns ± 1%   +0.63%  (p=0.000 n=22+24)
RegexpMatchEasy0_1K-12       963ns ±18%     849ns ± 1%  -11.84%  (p=0.000 n=25+23)
RegexpMatchEasy1_32-12      84.6ns ± 6%    84.1ns ± 4%     ~     (p=0.097 n=25+24)
RegexpMatchEasy1_1K-12       362ns ± 1%     363ns ± 2%   +0.35%  (p=0.008 n=23+21)
RegexpMatchMedium_32-12      126ns ± 0%     126ns ± 0%   -0.31%  (p=0.004 n=17+23)
RegexpMatchMedium_1K-12     38.8µs ± 1%    38.8µs ± 0%     ~     (p=0.537 n=24+23)
RegexpMatchHard_32-12       1.96µs ± 0%    1.96µs ± 1%     ~     (p=0.076 n=25+22)
RegexpMatchHard_1K-12       59.0µs ± 0%    59.1µs ± 0%     ~     (p=0.068 n=22+20)
Revcomp-12                   429ms ± 1%     443ms ± 0%   +3.35%  (p=0.000 n=21+20)
Template-12                 57.1ms ± 1%    57.8ms ± 1%   +1.24%  (p=0.000 n=23+24)
TimeParse-12                 306ns ± 1%     307ns ± 1%   +0.31%  (p=0.000 n=24+22)
TimeFormat-12                347ns ± 2%     330ns ± 0%   -4.76%  (p=0.000 n=24+25)
[Geo mean]                  59.2µs         59.1µs        -0.25%

PPC64:
name                     old time/op    new time/op    delta
BinaryTree17-2              4.66s ± 2%     4.67s ± 2%    ~     (p=0.316 n=25+25)
Fannkuch11-2                4.39s ± 1%     4.28s ± 1%  -2.40%  (p=0.000 n=23+23)
FmtFprintfEmpty-2           119ns ± 1%     116ns ± 1%  -2.52%  (p=0.000 n=22+25)
FmtFprintfString-2          303ns ± 1%     302ns ± 2%  -0.47%  (p=0.006 n=23+25)
FmtFprintfInt-2             234ns ± 1%     240ns ± 1%  +2.33%  (p=0.000 n=22+22)
FmtFprintfIntInt-2          351ns ± 1%     355ns ± 2%  +1.23%  (p=0.000 n=23+25)
FmtFprintfPrefixedInt-2     348ns ± 1%     351ns ± 1%  +0.79%  (p=0.000 n=23+23)
FmtFprintfFloat-2           502ns ± 1%     496ns ± 1%  -1.10%  (p=0.000 n=25+23)
FmtManyArgs-2              1.53µs ± 2%    1.55µs ± 1%  +0.94%  (p=0.000 n=25+23)
GobDecode-2                12.9ms ± 2%    12.9ms ± 2%    ~     (p=0.122 n=25+23)
GobEncode-2                11.7ms ± 2%    11.6ms ± 3%  -1.30%  (p=0.000 n=25+24)
Gzip-2                      502ms ± 1%     504ms ± 1%  +0.45%  (p=0.000 n=24+23)
Gunzip-2                   86.3ms ± 1%    85.4ms ± 2%  -1.14%  (p=0.000 n=21+23)
HTTPClientServer-2         68.5µs ± 3%    68.3µs ± 5%    ~     (p=0.389 n=25+25)
JSONEncode-2               38.3ms ± 2%    38.1ms ± 2%    ~     (p=0.126 n=25+25)
JSONDecode-2                124ms ± 2%     125ms ± 2%  +0.52%  (p=0.043 n=25+25)
Mandelbrot200-2            5.86ms ± 1%    5.89ms ± 2%  +0.58%  (p=0.000 n=23+23)
GoParse-2                  5.84ms ± 1%    5.88ms ± 2%  +0.75%  (p=0.004 n=23+25)
RegexpMatchEasy0_32-2       326ns ± 0%     329ns ± 1%  +0.66%  (p=0.000 n=23+24)
RegexpMatchEasy0_1K-2      1.46µs ± 1%    1.45µs ± 1%  -0.50%  (p=0.000 n=24+24)
RegexpMatchEasy1_32-2       352ns ± 1%     355ns ± 1%  +0.68%  (p=0.000 n=21+24)
RegexpMatchEasy1_1K-2      1.81µs ± 1%    1.79µs ± 1%  -1.26%  (p=0.000 n=25+22)
RegexpMatchMedium_32-2      416ns ± 1%     416ns ± 1%    ~     (p=0.985 n=23+24)
RegexpMatchMedium_1K-2     70.0µs ± 2%    70.2µs ± 1%  +0.20%  (p=0.025 n=24+22)
RegexpMatchHard_32-2       3.99µs ± 0%    3.86µs ± 1%  -3.49%  (p=0.000 n=21+23)
RegexpMatchHard_1K-2        115µs ± 1%     114µs ± 1%  -0.24%  (p=0.009 n=22+21)
Revcomp-2                   1.00s ± 3%     0.99s ± 4%    ~     (p=0.464 n=25+25)
Template-2                  112ms ± 2%     115ms ± 2%  +1.96%  (p=0.000 n=23+23)
TimeParse-2                 547ns ± 1%     545ns ± 1%  -0.39%  (p=0.000 n=21+23)
TimeFormat-2                763ns ± 1%     695ns ± 1%  -8.92%  (p=0.000 n=23+24)
[Geo mean]                  120µs          119µs       -0.45%
|Patch Set 2:

(1 comment)
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Is this going into Go 1.8? If not please move issue 16187 to the Go 1.9 milestone.

I think this can be in 1.8.

But this CL does not really fix #16187. It indeed removes spills for that code, but doesn't make it much faster.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

(1 comment)

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; (1 comment)

done
|Change has been successfully cherry-picked as 348275cda626edf60e1d11a83b2e78d83088ccef by Cherry Zhang
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Run-TryBot+1 Code-Review+1

That's probably fine for Go1.8. Is it possible to generate trampolines for external linking on PPC64, too? Like in CL 31143, maybe a few kinds of trampolines are needed for different build modes. Then we can have a single mechanism to handle this problem.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Yes, I think for Go 1.9 this can be changed so trampolines are done for both internal and external linking on ppc64le.  I felt it was too later to try and do it in Go 1.8 since the previous fix for external linking on ppc64le had been available and used for a while.

SGTM. Thank you.
|Patch Set 1: Code-Review+2
|Patch Set 2:

LGTM
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

&gt; Patch Set 1:
&gt; 
&gt; Can we just move the field near the top of the struct?  Perhaps just after pad0?

Done. Looks ok to me.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Flake is https://go-review.googlesource.com/c/33423/ if anybody wants to +2

I think you meant the flake in https://go-review.googlesource.com/c/33236/?

This one seems also a flake? Will file an issue if not already existed.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Patch Set 3:
&gt; &gt; 
&gt; &gt; Flake is https://go-review.googlesource.com/c/33423/ if anybody wants to +2
&gt; 
&gt; I think you meant the flake in https://go-review.googlesource.com/c/33236/?
&gt; 
&gt; This one seems also a flake? Will file an issue if not already existed.

Filed issue #18006. Test passed locally on this CL.
|Change has been successfully cherry-picked as bbe96f5673fbb379ec3da581dba0d9cd603cc0d1 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2: TryBot-Result-1
&gt; 
&gt; 1 of 16 TryBots failed:
&gt; Failed on linux-amd64-race: https://storage.googleapis.com/go-build-log/ca5c4e65/linux-amd64-race_f9d914bf.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

Flake is https://go-review.googlesource.com/c/33423/.
|Change has been successfully cherry-picked as 01b4ddb37724b0cd0a1f0a62956f9e0e706bb10c by Cherry Zhang
|Patch Set 1: Run-TryBot+1 Code-Review+1

(1 comment)
|Patch Set 2: Code-Review+1

(1 comment)

I think it is probably not too hard to write a standard Go test in cmd/compile/internal/ssa/cse_test.go. But this test may be ok. I'll let Brad to decide.
|Patch Set 2: Code-Review+2
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; Does one of us need to push the Submit button?

ok.
|Change has been successfully cherry-picked as a34fddf46c47a86e7a7cab32be858f7e8d0feb70 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; no test, no gain

Not sure what is the best way to test it. It needs a very large file and needs very long time to compile...
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; no test, no gain

It seems possible to make your code generator in #17926 into a test. Can I adapt it?
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

&gt; Patch Set 2:
&gt; 
&gt; no test, no gain

Added a test that generates a large assembly file with very far conditional branches.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(1 comment)

&gt; Patch Set 3: Code-Review+2
&gt; 
&gt; (1 comment)
&gt; 
&gt; This fix looks okay to me, but I'm puzzled at the test, and wondering if we did something (somewhere else, not this CL) to break floating point arithmetic to cause the random test to fail?

Sorry, I didn't get it. What floating point change/test?
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4: Run-TryBot+1
&gt; &gt; 
&gt; &gt; (1 comment)
&gt; &gt; 
&gt; &gt; &gt; Patch Set 3: Code-Review+2
&gt; &gt; &gt; 
&gt; &gt; &gt; (1 comment)
&gt; &gt; &gt; 
&gt; &gt; &gt; This fix looks okay to me, but I'm puzzled at the test, and wondering if we did something (somewhere else, not this CL) to break floating point arithmetic to cause the random test to fail?
&gt; 
&gt; 
&gt; &gt; Sorry, I didn't get it. What floating point change/test?
&gt; There was some message about rand flaking out in mips64 (I think) and it also flaked on one of your tests.  That seemed a hair suspicious to me....

The mips64 one was due to timeout. Machine does not have hardware FP and kernel emulation is too slow. Test is now skipped upon CL https://go-review.googlesource.com/c/33326/. For other flakes, one is #17927, and I filed #17947 for the other.
|Change has been successfully cherry-picked as 1e3c57c2cc1500b12a35a859f3d6e8aa27aeebc5 by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2:

LGTM
|Patch Set 1:

I replied on the issue tracker (as below). For that reason, trace=all may not work either...

I tried to trace n64_sendfile on linux-mips64 gomote machine. Now it sees the syscall,

=== RUN   TestLinuxSendfile
--- FAIL: TestLinuxSendfile (0.22s)
	fs_test.go:1122: no sendfile system call found in:
		[pid  4003] n64_sendfile()              = 22
		[pid  4006] +++ exited with 0 +++
		[pid  4005] +++ exited with 0 +++
		[pid  4004] +++ exited with 0 +++
		+++ exited with 0 +++
but it fails to get the arguments as it uses different ABI, so the regexp match later in the test function fails.

Also changing to trace n64_sendfile would break systems on which strace is using the 64-nit ABI (because the syscall is named sendfile there...). (One possible way is to try both...)
|Patch Set 2: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 526b2f85ce8e4b1b16f3122e0a5700c04b6de199 by Cherry Zhang
|Patch Set 2:

(1 comment)
|Patch Set 3:

(1 comment)

Leave the actual review to Robert and Matthew. I just point out that uintptr or uint64 is not special here: e.g. on 32-bit machine int32-&gt;int case also doesn't work.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(2 comments)
|Change has been successfully cherry-picked as ed0b232cdc48398c2074369852e5db8bdcb866aa by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; Our cmd/asm doesn't reject this code:
&gt; MOVD 0(R1), F1 // loading 64-bit float into odd register
&gt; 
&gt; and the current CL will mishandle this by rewriting it to
&gt; MOVD 0(R1), F2
&gt; MOVD 4(R1), F1
&gt; 
&gt; Do we need to care about such cases? cmd/compile is careful
&gt; not to generate such invalid code (though the hardware will
&gt; treat ldc1 $f1 the same as ldc1 $f0.)
&gt; 
&gt; Perhaps we should make cmd/asm reject such invalid code, or
&gt; I can make the rewrite more robust by treating F1 as F0 in
&gt; this case.
&gt; 
&gt; Any suggestions?

I think you can do the check just at where you are doing the rewriting. This way it can catch both errors in assembly code and compiler bugs (in case somehow we mess it up).
|Patch Set 2:

LGTM
|Patch Set 1: Run-TryBot+1 Code-Review+1

(5 comments)

This is for Go 1.9, right?
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; This can be for 1.8, and I believe it is required to make cgo work for 32-bit MIPS.

I thought cgo is also for 1.9. Maybe it is ok to be 1.8 if we can check it in before next beta.
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1

(9 comments)
|Patch Set 2: Run-TryBot+1 Code-Review+2
|Patch Set 1:

FYI, I just grep mips on the test directory and found some other tests need to be enabled/adjusted for mips:
../test/fixedbugs/issue11656.go -- may work if the data segment is not executable, but it's good to make it more robust
../test/nosplit.go -- seems accidentally skipped due to issue #18317
../misc/cgo/test/issue9400/asm_mips64x.s -- need to enable this one
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 3444e5b3551060ab8cc0d4c70a9dce823d8f569a by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; &gt; TryBots are happy.
&gt; 
&gt; I feel like this isn't the right fix for this bug.
&gt; 
&gt; The code generated after walk processes the CALLPART looks ok to me:
&gt; 
&gt; .   CONVNOP l(18) tc(1) FUNC-func()
&gt; .   .   PTRLIT l(18) esc(no) tc(1) PTR64-*struct { F uintptr; R X }
&gt; .   .   .   STRUCTLIT l(18) esc(no) tc(1) STRUCT-struct { F uintptr; R X }
&gt; .   .   .   .   TYPE &lt;S&gt; l(18) tc(1) implicit(true) type=PTR64-*struct { F uintptr; R X } PTR64-*struct { F uintptr; R X }
&gt; .   .   .   STRUCTLIT-list
&gt; .   .   .   .   STRUCTKEY l(18) x(0) main.F
&gt; .   .   .   .   .   CFUNC l(18) tc(1) uintptr
&gt; .   .   .   .   .   .   NAME-main.(X).Print-fm u(1) a(true) l(18) x(0) class(PFUNC) tc(1) used(true) FUNC-func()
&gt; 
&gt; .   .   .   .   STRUCTKEY l(18) x(8) main.R
&gt; .   .   .   .   .   STRUCTLIT l(18) tc(1) main.X
&gt; .   .   .   .   .   .   TYPE main.X u(1) a(true) l(5) x(0) class(PEXTERN) tc(1) type=main.X main.X main.X
&gt; .   .   .   .   .   STRUCTLIT-list
&gt; .   .   .   .   .   .   STRUCTKEY l(18) x(0) main.A
&gt; .   .   .   .   .   .   .   SLICELIT l(18) esc(h) tc(1) SLICE-[]byte
&gt; .   .   .   .   .   .   .   .   LITERAL-0 u(1) a(true) l(18) untyped number
&gt; .   .   .   NAME-main..autotmp_5 u(1) a(true) l(18) x(0) class(PAUTO) esc(N) tc(1) used(true) STRUCT-struct { F uintptr; R X }
&gt; 
&gt; The STRUCTLIT for X has a STRUCTKEY for A but not for B, but that is fine, just as if I had written that in source code.  Somehow B is not getting initialized by subsequent rewrites.  I think the temp variable fix in this CL is just papering over a larger issue in STRUCTLIT processing (potentially triggered in more ways than the CALLPART path demonstrated in #18410).

Comparing
        caller(X{A: []byte{}}.Print)
vs.
        t := X{A: []byte{}}.Print
        caller(t)
(both without this CL) After walk, there is an explicit zeroing generated in the assignment case, though I don't know where it is actually generated...

.   CALLFUNC-init
.   .   AS l(20) tc(1)
.   .   .   NAME-main..autotmp_14 u(1) a(true) l(20) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   ADDR u(2) l(20) tc(1) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_13 u(1) a(true) l(20) x(0) class(PAUTO) esc(N) tc(1) addrtaken used(true) STRUCT-struct { F uintptr; R X }

===============

.   AS-init
.   .   AS l(24) tc(1)                                             // &lt;--- zeroing here
.   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

.   .   AS l(24) tc(1)
.   .   .   NAME-main..autotmp_17 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   ADDR u(2) l(24) tc(1) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

It looks like there is a memory zeroing missing, which might be not specific to CALLPART or STRUCTLIT.
|Patch Set 2:

Thanks for the explanation. Assigning to temp indeed triggers zeroing. Is there any other place that we generate struct literal without assignment? Maybe closure?

This seems to generate more temps than needed. For example, if the parent node is already OAS, this also generates a temp (along with another zeroing and a copy). (but how to detect it?)
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; &gt; Patch Set 2:
&gt; &gt; 
&gt; &gt; Thanks for the explanation. Assigning to temp indeed triggers zeroing. Is there any other place that we generate struct literal without assignment? Maybe closure?
&gt; &gt; 
&gt; &gt; This seems to generate more temps than needed. For example, if the parent node is already OAS, this also generates a temp (along with another zeroing and a copy). (but how to detect it?)
&gt; 
&gt; &quot;This&quot; meaning my change, or the existing code?  In this CL, the parent node is CALLPART, not OAS; the temp is only unnecessary in the case that all fields are provided.  I suppose that could be checked.

&quot;This&quot; means this CL, and the &quot;parent node&quot; means the parent of CALLPART. In the case of
        t := X{A: []byte{}}.Print
        caller(t)

before this change:
.   AS-init
.   .   AS l(24) tc(1)
.   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

.   .   AS l(24) tc(1)
.   .   .   NAME-main..autotmp_17 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   ADDR u(2) l(24) tc(1) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

.   .   BLOCK l(24)
.   .   BLOCK-list
.   .   .   AS u(100) l(24) tc(1)
.   .   .   .   DOT u(100) l(24) x(0) tc(1) assigned main.F uintptr
.   .   .   .   .   IND u(100) l(24) tc(1) assigned STRUCT-struct { F uintptr; R X }
.   .   .   .   .   .   NAME-main..autotmp_17 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   .   CFUNC u(2) a(true) l(24) tc(1) uintptr
.   .   .   .   .   NAME-main.(X).Print-fm u(1) a(true) l(20) x(0) class(PFUNC) tc(1) used(true) FUNC-func()

.   .   BLOCK l(24)
.   .   BLOCK-list
.   .   .   AS-init
.   .   .   .   AS u(100) l(24) tc(1)
.   .   .   .   .   NAME-main..autotmp_20 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*[0]byte
.   .   .   .   .   CALLFUNC u(100) l(24) tc(1) nonnil PTR64-*[0]byte
.   .   .   .   .   .   NAME-runtime.newobject u(1) a(true) x(0) class(PFUNC) tc(1) used(true) FUNC-func(*byte) *[0]byte
.   .   .   .   .   CALLFUNC-list
.   .   .   .   .   .   AS u(2) l(24) tc(1)
.   .   .   .   .   .   .   INDREGSP-SP a(true) l(24) x(0) tc(1) addrtaken PTR64-*byte
.   .   .   .   .   .   .   ADDR u(2) a(true) l(24) tc(1) PTR64-*uint8
.   .   .   .   .   .   .   .   NAME-type.[0]uint8 u(1) a(true) l(20) x(0) class(PEXTERN) tc(1) uint8

.   .   .   .   BLOCK l(24)
.   .   .   .   BLOCK-list
.   .   .   .   .   AS u(100) l(24) tc(1)
.   .   .   .   .   .   NAME-main..autotmp_19 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) SLICE-[]byte
.   .   .   .   .   .   SLICEARR u(100) l(24) tc(1) SLICE-[]byte
.   .   .   .   .   .   .   NAME-main..autotmp_20 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*[0]byte
.   .   .   AS u(100) l(24) tc(1)
.   .   .   .   DOT u(100) l(24) x(0) tc(1) assigned main.A SLICE-[]byte
.   .   .   .   .   DOT u(100) l(24) x(8) tc(1) assigned main.R main.X
.   .   .   .   .   .   IND u(100) l(24) tc(1) assigned STRUCT-struct { F uintptr; R X }
.   .   .   .   .   .   .   NAME-main..autotmp_17 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_19 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) SLICE-[]byte

=========================
after this change:
.   AS-init
.   .   AS u(2) l(24) tc(1)
.   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) main.X

.   .   BLOCK l(24)
.   .   BLOCK-list
.   .   .   AS-init
.   .   .   .   AS u(100) l(24) tc(1)
.   .   .   .   .   NAME-main..autotmp_20 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*[0]byte
.   .   .   .   .   CALLFUNC u(100) l(24) tc(1) nonnil PTR64-*[0]byte
.   .   .   .   .   .   NAME-runtime.newobject u(1) a(true) x(0) class(PFUNC) tc(1) used(true) FUNC-func(*byte) *[0]byte
.   .   .   .   .   CALLFUNC-list
.   .   .   .   .   .   AS u(2) l(24) tc(1)
.   .   .   .   .   .   .   INDREGSP-SP a(true) l(24) x(0) tc(1) addrtaken PTR64-*byte
.   .   .   .   .   .   .   ADDR u(2) a(true) l(24) tc(1) PTR64-*uint8
.   .   .   .   .   .   .   .   NAME-type.[0]uint8 u(1) a(true) l(20) x(0) class(PEXTERN) tc(1) uint8

.   .   .   .   BLOCK l(24)
.   .   .   .   BLOCK-list
.   .   .   .   .   AS u(100) l(24) tc(1)
.   .   .   .   .   .   NAME-main..autotmp_19 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) SLICE-[]byte
.   .   .   .   .   .   SLICEARR u(100) l(24) tc(1) SLICE-[]byte
.   .   .   .   .   .   .   NAME-main..autotmp_20 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*[0]byte
.   .   .   AS u(100) l(24) tc(1)
.   .   .   .   DOT u(2) l(24) x(0) tc(1) assigned main.A SLICE-[]byte
.   .   .   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) main.X
.   .   .   .   NAME-main..autotmp_19 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) SLICE-[]byte

.   .   EMPTY u(2) l(24) tc(1)
.   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) main.X

.   .   AS l(24) tc(1)
.   .   .   NAME-main..autotmp_22 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

.   .   AS l(24) tc(1)
.   .   .   NAME-main..autotmp_21 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   ADDR u(2) l(24) tc(1) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_22 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) addrtaken assigned used(true) STRUCT-struct { F uintptr; R X }

.   .   BLOCK l(24)
.   .   BLOCK-list
.   .   .   AS u(100) l(24) tc(1)
.   .   .   .   DOT u(100) l(24) x(0) tc(1) assigned main.F uintptr
.   .   .   .   .   IND u(100) l(24) tc(1) assigned STRUCT-struct { F uintptr; R X }
.   .   .   .   .   .   NAME-main..autotmp_21 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   .   CFUNC u(2) a(true) l(24) tc(1) uintptr
.   .   .   .   .   NAME-main.(X).Print-fm u(1) a(true) l(20) x(0) class(PFUNC) tc(1) used(true) FUNC-func()

.   .   BLOCK l(24)
.   .   BLOCK-list
.   .   .   AS u(100) l(24) tc(1)
.   .   .   .   DOT u(100) l(24) x(8) tc(1) assigned main.R main.X
.   .   .   .   .   IND u(100) l(24) tc(1) assigned STRUCT-struct { F uintptr; R X }
.   .   .   .   .   .   NAME-main..autotmp_21 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }
.   .   .   .   NAME-main..autotmp_18 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) main.X
.   AS u(100) l(24) colas(true) tc(1)
.   .   NAME-main.t u(1) a(true) g(1) l(24) x(0) class(PAUTO) f(1) tc(1) used(true) FUNC-func()
.   .   CONVNOP u(2) l(24) tc(1) FUNC-func()
.   .   .   NAME-main..autotmp_21 u(1) a(true) l(24) x(0) class(PAUTO) esc(N) tc(1) assigned used(true) PTR64-*struct { F uintptr; R X }


In the generated machine code now there are two zeroing and one copy, whereas there in only one zeroing before.
|Patch Set 2:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 92ecd7893308ad222bfdd33b10be1cce769a3cdf by Cherry Zhang
|Patch Set 1:

(1 comment)

R=go1.9
|Patch Set 1: Code-Review+1

This looks simple and safe at this point of the cycle. Looking at the trybot failures, at least for https://storage.googleapis.com/go-build-log/cb7f5c9f/darwin-amd64-10_11_0a0ba10b.log, it seems the generated/removed nil checks are ok. A quick benchmarking on go1 benchmarks also shows no significant performance regression. But still need to fix the test...
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

Coincidentally I send CL 35499. Let's use yours.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Abandoned

dup of CL 35498
|Uploaded patch set 1.
|Patch Set 9:

&gt; Patch Set 9:
&gt; 
&gt; &gt; Patch Set 9:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 9:
&gt; &gt; &gt; 
&gt; &gt; &gt; Keith, are you looking for real reviews of this now?
&gt; &gt; 
&gt; &gt; Yes, thanks.  It's pretty much ready to go.
&gt; &gt; Hasn't been tested on non-x86 yet, but that can probably happen on an as-needed basis.
&gt; 
&gt; I gave the PPC version of this a look, it complained (a lot) along the lines of
&gt; 
&gt; 00000 (/.../go/src/runtime/alg.go:47)	MOVW	$3735936685, &quot;&quot;.p+4(FP)
&gt; 00004 (/.../go/src/runtime/alg.go:47)	MOVW	$3735936685, &quot;&quot;.p(FP)
&gt; /.../go/src/runtime/write_err.go:14: illegal combination MOVW LCON NONE NONE LAUTO
&gt; 00056 (/.../go/src/runtime/alg.go:51)	MOVW	$3735936685, &quot;&quot;.p+4(FP)
&gt; 
&gt; I'll see if I can make sense of this, operand ordering on PPC is sometimes wonky.

This looks like that PPC doesn't allow moving constant to memory without going through a register.
|Patch Set 11: Code-Review+2

(2 comments)
|Patch Set 3: Code-Review+2

(1 comment)

It looks correct to me, but I'm not familiar with the detail of S390X instruction encoding. Since Bill LGTM'd, I'll +2.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Is this fixing a regression from Go 1.7?
&gt; 
&gt; Too late for optimizations for Go 1.8.

R=Go1.9
Seems not a regression.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; This looks fine for the REP instructions.
&gt; I'm less sure about the duff instructions.  The segv will then happen inside the duff zero/copy routine.  Do we get the correct exception panic/trace behavior in that case?  If we do, then a test would be good.

For code like

func f(t *[8]int) [8]int {
        return *t
}

With this CL, when t is nil, the panic happens in duffcopy. Normally, the stack trace still shows main.f because the traceback code skips runtime frames. But you can see it under GOTRACEBACK=system.

Default:
goroutine 1 [running]:
main.f(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/tmp/x.go:28 +0x40
main.main()
	/tmp/x.go:9 +0x32

GOTRACEBACK=system:
goroutine 1 [running]:
panic(0x1058480, 0x1096bd0)
	/Users/cherryyz/src/go/src/runtime/panic.go:531 +0x490 fp=0xc420031ea8 sp=0xc420031e08
runtime.panicmem()
	/Users/cherryyz/src/go/src/runtime/panic.go:63 +0x5e fp=0xc420031ec8 sp=0xc420031ea8
runtime.sigpanic()
	/Users/cherryyz/src/go/src/runtime/signal_unix.go:290 +0x29f fp=0xc420031f18 sp=0xc420031ec8
runtime.duffcopy()
	/Users/cherryyz/src/go/src/runtime/duff_amd64.s:407 +0x348 fp=0xc420031f20 sp=0xc420031f18
main.f(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/tmp/x.go:28 +0x40 fp=0xc420031f30 sp=0xc420031f20
main.main()
	/tmp/x.go:9 +0x32 fp=0xc420031f88 sp=0xc420031f30
runtime.main()
	/Users/cherryyz/src/go/src/runtime/proc.go:185 +0x20a fp=0xc420031fe0 sp=0xc420031f88
runtime.goexit()
	/Users/cherryyz/src/go/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc420031fe8 sp=0xc420031fe0

Is it a concern? On the other hand, we already do it on some other architectures. If it is a concern should we back off?
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as fddc004537b90e46c894e9b22c291759fcd1209e by Cherry Zhang
|Patch Set 2: Code-Review+1

(2 comments)
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Patch Set 3:
&gt; &gt; 
&gt; &gt; &gt; gcc includes flag information in the producer string, is what I meant.
&gt; &gt; 
&gt; &gt; Oh, sorry.  In fact, believe it or not, in GCC you can record on a per-flag basis whether it should be included in the producer string.  Assuming the rather complex defaults don't get it right.
&gt; &gt; 
&gt; &gt; I don't personally have an opinion on whether we should include some cmd/compile flags in the producer string but I think it would be awful if delve made decisions based on the presence or absence of those flags.
&gt; 
&gt; I think the flags are supposed to help with reporting/diagnosing errors.
&gt; It's also conceivable that they might be sensitive to -N and/or -l.

It seems helpful to see what is useful for Delve.
It seems clang doesn't include flags, at least on Mac.
|Patch Set 2: Run-TryBot+1 Code-Review+1

(1 comment)
|Patch Set 4: Run-TryBot+1
|Patch Set 4: Code-Review+2
|Patch Set 4: Run-TryBot+1 Code-Review+1

(3 comments)
|Patch Set 6: Run-TryBot+1

(1 comment)
|Patch Set 6: Code-Review+2
|Patch Set 7: Run-TryBot+1
|Change has been successfully cherry-picked as 579297e1e14423a7d48733f5c1b475873bd3bfef by Cherry Zhang
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 2: Run-TryBot+1 Code-Review+2

(2 comments)

&gt; Patch Set 2:
&gt; 
&gt; &gt; Cherry, how does this interact with your change to do all write
&gt;  &gt; barrier insertion in SSA?
&gt; 
&gt; It probably either doesn't affect it, or will make it easier. But if that work has already started, it might conflict.

Yeah, this doesn't affect my changes (besides perhaps trivial merge conflict), and it helps simplifying the front end.
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

(2 comments)
|Patch Set 3:

(1 comment)
|Change has been successfully cherry-picked as a833485828f02b098c67127ed8be8e78493aaf4b by Cherry Zhang
|Patch Set 2:

&gt; Patch Set 1:
&gt; 
&gt; &gt; schedule is pretty heavyweight. We need much less here--I think
&gt;  &gt; just a temporary ordering that respects the memory store chain.
&gt;  &gt; 
&gt; 
&gt; I'll look at just ordering the values of interest, but won't be able to until after work today.  If someone else has time before then, feel free.

I'm working on getting the store ordering in a cheaper way. Will send CL soon. But I'm not sure it is simple enough for 1.8.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

Not sure this is simple enough for 1.8.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)
&gt; 
&gt; I feel like there is a simpler algorithm.  We can find the last store in the block like deadstore.go does it.  Then just walk back through the store chain to order the stores.
&gt; I'll hack up a CL.

How do we walk back? Build a dependency map while we go through all the values in the first time?
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

PS2: don't do store ordering if there is no NilCheck.
|Patch Set 2:

R=go1.9
Use CL 35485 instead for Go 1.8.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)
&gt; 
&gt; I feel like there is a simpler algorithm.  We can find the last store in the block like deadstore.go does it.  Then just walk back through the store chain to order the stores.

Redid the first part of store ordering like deadstore.go does.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1
|Uploaded patch set 6.
|Patch Set 6:

(8 comments)
|Patch Set 6: Run-TryBot+1
|Uploaded patch set 7.
|Patch Set 7: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as 98061fa5f3a2410c97625cf5eb5a2cd8816bb558 by Cherry Zhang
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 6ad2d6aa922368224730a347d6a82387d4770c40 by Cherry Zhang
|Patch Set 7:

(3 comments)

You can use multi-CL branch (https://godoc.org/golang.org/x/review/git-codereview#hdr-Multiple_Commit_Work_Branches). Don't duplicate changes in multiple CLs.
|Patch Set 1:

(1 comment)

This part looks good to me. Are you going to add support to the assembler's frontend (cmd/asm)? Look at cmd/asm/internal/arch/arm.go:/IsARMMULA, etc., also add tests.
|Patch Set 3: Run-TryBot+1 Code-Review+1

(4 comments)
|Patch Set 7: Run-TryBot+1

&gt; Patch Set 7:
&gt; 
&gt; Sorry for my mistake, it seems I can not find my original git repository. So I have to edit my update via the web page.

You can download your commit from Gerrit web UI, or just do
git fetch https://go.googlesource.com/go refs/changes/65/35565/7 &amp;&amp; git checkout FETCH_HEAD
|Patch Set 12:

(4 comments)
|Patch Set 18: Run-TryBot+1

(1 comment)

LGTM except the change to MULA.
|Patch Set 25: Run-TryBot+1 Code-Review+1

(4 comments)
|Patch Set 28: Run-TryBot+1
|Patch Set 28: Code-Review+2
|Patch Set 28:

(1 comment)
|Patch Set 28:

(1 comment)
|Patch Set 29: Run-TryBot+1
|Change has been successfully cherry-picked as c5ddc558baa9884050ddf26dd93c91e9297509b8 by Cherry Zhang
|Patch Set 2: Run-TryBot+1 Code-Review+1

(2 comments)
|Removed Run-TryBot+1 by Cherry Zhang &lt;cherryyz@google.com&gt;

|Patch Set 5: Code-Review+2

(1 comment)

Wait until the other CL submitted.
|Patch Set 6:

&gt; Patch Set 6:
&gt; 
&gt; Cherry, Ben does not have submit access. Please submit when this is ready.
&gt; 
&gt; Be sure to rebase + re-run Trybots if the git parent is old or the git parent is unsubmitted.

This CL depends on CL 35565, so let's wait for the other CL submitted.
|Patch Set 6:

&gt; Patch Set 6:
&gt; 
&gt; Run TryBot?

Could you rebase to pick your another CL? Then we can run trybot and submit.
|Patch Set 7: Run-TryBot+1
|Change has been successfully cherry-picked as 8577f81a10f4e5b5736119cdd960c44a5ad600f5 by Cherry Zhang
|Patch Set 2: Code-Review+2

ARM64 seems missing.
|Patch Set 3:

&gt; Patch Set 2:
&gt; 
&gt; &gt; Patch Set 2: Code-Review+2
&gt; &gt; 
&gt; &gt; ARM64 seems missing.
&gt; 
&gt; Oops, yes.  Fixed.

LGTM.
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Those links don't all work for me.

Ok, changed back to pasting.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as bed8129ee69f5b2d32cd84e4cc0e3e3be50366dc by Cherry Zhang
|Patch Set 3:

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; I'd like to understand what happened to fannkuch11, but that can be done in a followup.

Filed golang.org/issue/18977 for the followup.
|Patch Set 6: Code-Review+1

(12 comments)

The changes in walkrange and SSA look good to me.
Not sure the changes in the front end (before walk) are really necessary: e.g. I removed the FORUNTIL case in bimport.go and bexport.go, and everything seems ok.
|Patch Set 9: Code-Review+2

(1 comment)

I tried undoing the changes in esc.go, fmt.go, inl.go, and typecheck.go, it seems still ok. So they may be not needed.
|Patch Set 10:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as f69a6defd1da6509b8f0f54f9ae60e4bf740891d by Cherry Zhang
|Patch Set 1: Code-Review+2

&gt; Patch Set 1:
&gt; 
&gt; Please review skeptically. It is late and I'm not sure this catches every case. I think this should be backported to 1.8 so please suggest simplifications to this CL if you think there are any that can be made.

This looks safe to me. It seems to cover all the cases but I can't be really sure. Would be good to have a test for the bug.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; PS2: added test which reproduces the bug, PTAL.

LGTM.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as b53f0f8c96a46b3cce0f1073787b74dd23f57a80 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Can you run the go1 benchmarks on both this CL and the other one, to see if there are any performance implications here?

The performance difference is within noise. Probably the benchmarks assign globals very rarely.

name                      old time/op    new time/op    delta
BinaryTree17-12              2.74s ± 0%     2.74s ± 1%    ~     (p=0.686 n=19+19)
Fannkuch11-12                3.10s ± 1%     3.10s ± 0%    ~     (p=0.558 n=18+19)
FmtFprintfEmpty-12          51.1ns ± 3%    50.8ns ± 0%    ~     (p=0.689 n=19+19)
FmtFprintfString-12         83.5ns ± 0%    83.5ns ± 0%    ~     (p=0.278 n=20+19)
FmtFprintfInt-12            86.8ns ± 1%    86.3ns ± 1%  -0.57%  (p=0.000 n=20+20)
FmtFprintfIntInt-12          129ns ± 0%     129ns ± 0%    ~     (all equal)
FmtFprintfPrefixedInt-12     155ns ± 1%     155ns ± 1%    ~     (p=0.874 n=19+20)
FmtFprintfFloat-12           246ns ± 0%     247ns ± 0%  +0.28%  (p=0.000 n=19+19)
FmtManyArgs-12               533ns ± 0%     535ns ± 0%  +0.45%  (p=0.000 n=16+19)
GobDecode-12                7.18ms ± 1%    7.19ms ± 0%    ~     (p=0.060 n=20+20)
GobEncode-12                6.05ms ± 0%    6.06ms ± 0%    ~     (p=0.221 n=19+18)
Gzip-12                      270ms ± 0%     269ms ± 1%  -0.37%  (p=0.000 n=19+18)
Gunzip-12                   38.4ms ± 0%    38.2ms ± 0%  -0.34%  (p=0.000 n=19+19)
HTTPClientServer-12         97.7µs ± 1%    97.6µs ± 1%    ~     (p=0.628 n=18+18)
JSONEncode-12               16.5ms ± 1%    16.4ms ± 1%  -0.27%  (p=0.000 n=19+18)
JSONDecode-12               54.6ms ± 1%    54.4ms ± 0%  -0.37%  (p=0.001 n=19+17)
Mandelbrot200-12            4.47ms ± 0%    4.47ms ± 0%  +0.04%  (p=0.001 n=19+18)
GoParse-12                  3.46ms ± 1%    3.44ms ± 1%  -0.61%  (p=0.003 n=20+19)
RegexpMatchEasy0_32-12      85.3ns ± 0%    85.0ns ± 0%  -0.30%  (p=0.000 n=16+19)
RegexpMatchEasy0_1K-12       205ns ± 0%     206ns ± 1%  +0.26%  (p=0.006 n=14+17)
RegexpMatchEasy1_32-12      82.8ns ± 0%    82.9ns ± 1%    ~     (p=0.196 n=16+15)
RegexpMatchEasy1_1K-12       357ns ± 0%     357ns ± 0%    ~     (p=0.925 n=18+16)
RegexpMatchMedium_32-12      125ns ± 1%     125ns ± 0%    ~     (p=0.100 n=15+15)
RegexpMatchMedium_1K-12     38.6µs ± 1%    38.4µs ± 0%  -0.42%  (p=0.000 n=20+18)
RegexpMatchHard_32-12       1.95µs ± 0%    1.94µs ± 0%  -0.57%  (p=0.000 n=19+17)
RegexpMatchHard_1K-12       59.2µs ± 0%    58.8µs ± 0%  -0.57%  (p=0.000 n=19+18)
Revcomp-12                   445ms ± 0%     441ms ± 0%  -0.80%  (p=0.000 n=20+20)
Template-12                 57.4ms ± 1%    57.3ms ± 1%    ~     (p=0.165 n=20+20)
TimeParse-12                 314ns ± 0%     313ns ± 1%  -0.20%  (p=0.000 n=19+19)
TimeFormat-12                334ns ± 0%     334ns ± 0%    ~     (p=0.760 n=18+16)
[Geo mean]                  52.4µs         52.4µs       -0.17%

name                      old speed      new speed      delta
GobDecode-12               107MB/s ± 1%   107MB/s ± 0%    ~     (p=0.064 n=20+20)
GobEncode-12               127MB/s ± 0%   127MB/s ± 0%    ~     (p=0.230 n=19+18)
Gzip-12                   71.9MB/s ± 0%  72.2MB/s ± 1%  +0.37%  (p=0.000 n=19+18)
Gunzip-12                  506MB/s ± 0%   508MB/s ± 0%  +0.34%  (p=0.000 n=19+19)
JSONEncode-12              118MB/s ± 1%   118MB/s ± 1%  +0.28%  (p=0.000 n=19+18)
JSONDecode-12             35.6MB/s ± 1%  35.7MB/s ± 0%  +0.37%  (p=0.001 n=19+17)
GoParse-12                16.7MB/s ± 1%  16.8MB/s ± 1%  +0.62%  (p=0.002 n=20+19)
RegexpMatchEasy0_32-12     375MB/s ± 0%   376MB/s ± 1%  +0.24%  (p=0.002 n=16+20)
RegexpMatchEasy0_1K-12    4.99GB/s ± 0%  4.97GB/s ± 1%  -0.46%  (p=0.000 n=14+17)
RegexpMatchEasy1_32-12     386MB/s ± 0%   386MB/s ± 1%    ~     (p=0.228 n=16+15)
RegexpMatchEasy1_1K-12    2.86GB/s ± 1%  2.86GB/s ± 1%    ~     (p=0.885 n=18+16)
RegexpMatchMedium_32-12   7.96MB/s ± 1%  7.97MB/s ± 0%    ~     (p=0.684 n=20+15)
RegexpMatchMedium_1K-12   26.5MB/s ± 1%  26.7MB/s ± 0%  +0.42%  (p=0.000 n=20+18)
RegexpMatchHard_32-12     16.4MB/s ± 0%  16.5MB/s ± 0%  +0.57%  (p=0.000 n=19+17)
RegexpMatchHard_1K-12     17.3MB/s ± 0%  17.4MB/s ± 0%  +0.57%  (p=0.000 n=19+18)
Revcomp-12                 571MB/s ± 0%   576MB/s ± 0%  +0.81%  (p=0.000 n=20+20)
Template-12               33.8MB/s ± 1%  33.9MB/s ± 1%    ~     (p=0.167 n=20+20)
[Geo mean]                 113MB/s        114MB/s       +0.24%

The benchmark result for CL 36355 is posted there. Cross comparison:
old=this CL, new=CL 36355
name                      old time/op    new time/op    delta
BinaryTree17-12              2.74s ± 1%     2.81s ± 1%  +2.62%  (p=0.000 n=19+19)
Fannkuch11-12                3.10s ± 0%     3.13s ± 0%  +1.17%  (p=0.000 n=19+18)
FmtFprintfEmpty-12          50.8ns ± 0%    50.8ns ± 1%    ~     (p=0.066 n=19+17)
FmtFprintfString-12         83.5ns ± 0%    84.1ns ± 1%  +0.71%  (p=0.000 n=19+20)
FmtFprintfInt-12            86.3ns ± 1%    87.0ns ± 1%  +0.79%  (p=0.000 n=20+20)
FmtFprintfIntInt-12          129ns ± 0%     129ns ± 0%  +0.37%  (p=0.002 n=17+19)
FmtFprintfPrefixedInt-12     155ns ± 1%     155ns ± 1%    ~     (p=0.959 n=20+19)
FmtFprintfFloat-12           247ns ± 0%     247ns ± 1%    ~     (p=0.929 n=19+20)
FmtManyArgs-12               535ns ± 0%     525ns ± 1%  -1.82%  (p=0.000 n=19+19)
GobDecode-12                7.19ms ± 0%    7.18ms ± 1%    ~     (p=0.184 n=20+19)
GobEncode-12                6.06ms ± 0%    6.05ms ± 1%    ~     (p=0.271 n=18+19)
Gzip-12                      269ms ± 1%     268ms ± 1%    ~     (p=0.070 n=18+19)
Gunzip-12                   38.2ms ± 0%    38.2ms ± 0%    ~     (p=0.840 n=19+19)
HTTPClientServer-12         97.6µs ± 1%    96.1µs ± 1%  -1.46%  (p=0.000 n=18+19)
JSONEncode-12               16.4ms ± 1%    16.4ms ± 0%    ~     (p=0.098 n=18+19)
JSONDecode-12               54.4ms ± 0%    54.5ms ± 0%  +0.25%  (p=0.000 n=17+17)
Mandelbrot200-12            4.47ms ± 0%    4.46ms ± 0%  -0.19%  (p=0.000 n=18+17)
GoParse-12                  3.44ms ± 1%    3.45ms ± 1%  +0.38%  (p=0.008 n=19+17)
RegexpMatchEasy0_32-12      85.0ns ± 0%    84.4ns ± 1%  -0.80%  (p=0.000 n=19+20)
RegexpMatchEasy0_1K-12       206ns ± 1%     205ns ± 1%    ~     (p=0.792 n=17+19)
RegexpMatchEasy1_32-12      82.9ns ± 1%    82.8ns ± 1%    ~     (p=0.950 n=15+18)
RegexpMatchEasy1_1K-12       357ns ± 0%     357ns ± 1%    ~     (p=0.737 n=16+18)
RegexpMatchMedium_32-12      125ns ± 0%     126ns ± 1%  +0.40%  (p=0.005 n=15+20)
RegexpMatchMedium_1K-12     38.4µs ± 0%    38.5µs ± 0%  +0.31%  (p=0.000 n=18+18)
RegexpMatchHard_32-12       1.94µs ± 0%    1.95µs ± 1%  +0.21%  (p=0.016 n=17+19)
RegexpMatchHard_1K-12       58.8µs ± 0%    58.8µs ± 1%    ~     (p=0.573 n=18+20)
Revcomp-12                   441ms ± 0%     430ms ± 0%  -2.57%  (p=0.000 n=20+19)
Template-12                 57.3ms ± 1%    57.6ms ± 1%  +0.55%  (p=0.004 n=20+20)
TimeParse-12                 313ns ± 1%     315ns ± 0%  +0.52%  (p=0.000 n=19+15)
TimeFormat-12                334ns ± 0%     334ns ± 0%    ~     (p=0.065 n=16+14)
[Geo mean]                  52.4µs         52.4µs       +0.02%

name                      old speed      new speed      delta
GobDecode-12               107MB/s ± 0%   107MB/s ± 1%    ~     (p=0.186 n=20+19)
GobEncode-12               127MB/s ± 0%   127MB/s ± 1%    ~     (p=0.248 n=18+19)
Gzip-12                   72.2MB/s ± 1%  72.3MB/s ± 1%    ~     (p=0.064 n=18+19)
Gunzip-12                  508MB/s ± 0%   508MB/s ± 0%    ~     (p=0.823 n=19+19)
JSONEncode-12              118MB/s ± 1%   118MB/s ± 0%    ~     (p=0.093 n=18+19)
JSONDecode-12             35.7MB/s ± 0%  35.6MB/s ± 0%  -0.25%  (p=0.000 n=17+17)
GoParse-12                16.8MB/s ± 1%  16.8MB/s ± 1%  -0.38%  (p=0.009 n=19+17)
RegexpMatchEasy0_32-12     376MB/s ± 1%   379MB/s ± 1%  +0.84%  (p=0.000 n=20+20)
RegexpMatchEasy0_1K-12    4.97GB/s ± 1%  4.97GB/s ± 1%    ~     (p=0.363 n=17+19)
RegexpMatchEasy1_32-12     386MB/s ± 1%   386MB/s ± 1%    ~     (p=0.893 n=15+18)
RegexpMatchEasy1_1K-12    2.86GB/s ± 1%  2.86GB/s ± 1%    ~     (p=0.463 n=16+18)
RegexpMatchMedium_32-12   7.97MB/s ± 0%  7.94MB/s ± 1%  -0.39%  (p=0.000 n=15+19)
RegexpMatchMedium_1K-12   26.7MB/s ± 0%  26.6MB/s ± 0%  -0.31%  (p=0.000 n=18+18)
RegexpMatchHard_32-12     16.5MB/s ± 0%  16.4MB/s ± 1%  -0.21%  (p=0.018 n=17+19)
RegexpMatchHard_1K-12     17.4MB/s ± 0%  17.4MB/s ± 1%    ~     (p=0.586 n=18+20)
Revcomp-12                 576MB/s ± 0%   591MB/s ± 0%  +2.63%  (p=0.000 n=20+19)
Template-12               33.9MB/s ± 1%  33.7MB/s ± 1%  -0.54%  (p=0.004 n=20+20)
[Geo mean]                 114MB/s        114MB/s       +0.12%
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 160914e33ca6521d74297291d801062cc44d794d by Cherry Zhang
|Patch Set 3: Cherry Picked

This patchset was cherry picked to branch release-branch.go1.8 as commit 548d1d9cb2bcee70bc23ae893029b417b18823fa
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 67cd1fa780aba6ca76e6f43092a2fb80e170dc93 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 1edfd647618afadfeda029372ce169f42821e156 by Cherry Zhang
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2

Thanks for the examples.

&gt; 1. Rules to remove load-hit-stores, e.g.:
&gt; 
&gt;      (MOVDload [off] {sym} ptr (MOVDstore [off2] {sym2} ptr2 x _)) &amp;&amp; sym == sym2 &amp;&amp; off == off2 &amp;&amp; isSamePtr(ptr, ptr2) -&gt; (MOVDreg x)
&gt; 
&gt;    I'm not certain if the MOVDreg is redundant here or not. The sym check might be enough to guarantee identical types.

Both sym may be nil, in which case it is probably hard to tell.

&gt; 
&gt; 2. Rules to remove the MOVBZreg inserted by If lowering, i.e.:
&gt; 
&gt;      (If cond yes no) -&gt; (NE (CMPWconst [0] (MOVBZreg cond)) yes no)
&gt; 
&gt;    followed by:
&gt; 
&gt;      (MOVBZreg x:(MOVDLT (MOVDconst [c]) (MOVDconst [d]) _)) &amp;&amp; int64(uint8(c)) == c &amp;&amp; int64(uint8(d)) == d -&gt; (MOVDreg x)
&gt; 
&gt;    Technically the intermediate types used here should probably be bools, but it looks like they are currently uint64s (looks safe though). I'll probably replace the CMPWU with a TMLL (test under mask) soon which will remove the need for the MOVBZreg in the If lowering.
&gt; 
&gt; 3. Rules to optimize ANDs, e.g.:
&gt; 
&gt;      (AND (MOVDconst [0xFF]) x) -&gt; (MOVBZreg x)
&gt; 
&gt;    In this case the MOVBZreg type will match the AND.

This makes sense.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as a146dd3a2fdf87bab90ee1f636c38cd3444e55fa by Cherry Zhang
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Is this something the compiler's SSA rewrite rules should do instead?

I'm not sure. I think it only works when we know i and j are non-negative, but the compiler probably doesn't know.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; &gt; Change code of the form `i + (j-i)/2` to `int(uint(i+j) &gt;&gt; 1)`.
&gt; 
&gt; These aren't identical, even when i and j are non-negative. They can disagree in parity: https://play.golang.org/p/f2gBLyEQCA
&gt; 
&gt; Need to think about whether that matters here.

Yeah, it also needs j&gt;=i.
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Fixes #19067?

This CL is mailed before the issue is filed. Will do in the next update.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(4 comments)

&gt; Patch Set 1:
&gt; 
&gt; Fixes #19067?

Done
|Change has been successfully cherry-picked as c4ef597c47a00c3f78916425153aefa171a3b12f by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 5bfd1ef036f2cd549f78a0acd3e2666b42bcc07d by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; Do the PtrSize-&gt;RegSize CL before this one also.

Done. Moved to CL https://go-review.googlesource.com/c/37720/.
|Change has been successfully cherry-picked as c8eaeb8cba52a1eb688245e0f6935d560cf1569d by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as c4b8dadb4060a8456801ad64c9c5642a737dba19 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(2 comments)
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Uploaded patch set 4: Patch Set 3 was rebased.
|Patch Set 4: Run-TryBot+1
|Change has been successfully cherry-picked as 211c8c9f1a1d11a6f5c42e85ec78cd06a69fbe0c by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(2 comments)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as 9ebf3d5100a52b2c0ebcbf9754c02d1edf7a035f by Cherry Zhang
|Patch Set 6:

&gt; Patch Set 6:
&gt; 
&gt; Looks like this CL series broke the no-opt builder:
&gt; 
&gt; https://build.golang.org/log/ff1f5717d01793e1e9db519d4e33277233cb4707
&gt; 
&gt; The error messages change after the following CL.

Yes, I have filed a bug https://github.com/golang/go/issues/19571.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Patch Set 1:
&gt; 
&gt; (2 comments)

Fixed.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(3 comments)
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1
|Change has been successfully cherry-picked as 1b85300602f8530e505ad5b8b033a15f5521d1a7 by Cherry Zhang
|Patch Set 6:

&gt; Patch Set 6:
&gt; 
&gt; I don't see why, but this CL increases both compiler alloc and CPU by about 1%. Just FYI.
&gt; 
&gt; name       old time/op     new time/op     delta
&gt; Template       204ms ± 4%      206ms ± 4%  +0.99%  (p=0.000 n=99+99)
&gt; Unicode       82.9ms ± 4%     83.4ms ± 3%  +0.66%  (p=0.000 n=98+93)
&gt; GoTypes        545ms ± 3%      550ms ± 4%  +0.99%  (p=0.000 n=95+97)
&gt; SSA            3.89s ± 3%      3.94s ± 2%  +1.10%  (p=0.000 n=97+99)
&gt; Flate          124ms ± 4%      125ms ± 3%  +0.44%  (p=0.029 n=98+95)
&gt; GoParser       146ms ± 4%      147ms ± 3%  +0.91%  (p=0.000 n=100+96)
&gt; Reflect        351ms ± 4%      355ms ± 4%  +0.95%  (p=0.000 n=98+97)
&gt; Tar            106ms ± 5%      107ms ± 6%  +0.79%  (p=0.011 n=96+98)
&gt; XML            201ms ± 4%      205ms ± 5%  +1.66%  (p=0.000 n=95+93)
&gt; 
&gt; name       old alloc/op    new alloc/op    delta
&gt; Template      40.9MB ± 0%     41.4MB ± 0%   +1.35%  (p=0.000 n=10+9)
&gt; Unicode       30.3MB ± 0%     30.4MB ± 0%   +0.23%  (p=0.000 n=9+9)
&gt; GoTypes        115MB ± 0%      118MB ± 0%   +2.31%  (p=0.000 n=10+9)
&gt; Flate         26.3MB ± 0%     26.4MB ± 0%   +0.62%  (p=0.000 n=10+10)
&gt; GoParser      32.5MB ± 0%     32.8MB ± 0%   +0.92%  (p=0.000 n=10+10)
&gt; Reflect       80.5MB ± 0%     81.5MB ± 0%   +1.26%  (p=0.000 n=10+10)
&gt; Tar           27.3MB ± 0%     27.6MB ± 0%   +0.77%  (p=0.000 n=10+10)
&gt; XML           43.1MB ± 0%     44.5MB ± 0%   +3.05%  (p=0.000 n=8+9)
&gt; 
&gt; name       old allocs/op   new allocs/op   delta
&gt; Template        402k ± 0%       403k ± 1%     ~     (p=0.247 n=10+10)
&gt; Unicode         322k ± 0%       322k ± 1%     ~     (p=0.274 n=8+10)
&gt; GoTypes        1.18M ± 0%      1.19M ± 0%   +0.40%  (p=0.000 n=10+9)
&gt; Flate           246k ± 1%       245k ± 1%     ~     (p=0.796 n=10+10)
&gt; GoParser        326k ± 1%       326k ± 0%     ~     (p=0.912 n=10+10)
&gt; Reflect        1.02M ± 0%      1.02M ± 0%     ~     (p=0.165 n=10+10)
&gt; Tar             259k ± 0%       259k ± 1%     ~     (p=0.829 n=8+10)
&gt; XML             406k ± 0%       408k ± 0%   +0.45%  (p=0.000 n=8+9)

Thanks for letting me know. Could you try if CL https://go-review.googlesource.com/c/38294/ helps?
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Change has been successfully cherry-picked as d75925d6bad2576bd80c442ff3b23ba22ffb2c68 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(1 comment)
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4:

(1 comment)
|Change has been successfully cherry-picked as 78200799a290da7d53ebbd50c04e432a4ab14eec by Cherry Zhang
|Patch Set 1:

This was once in assembly, but we changed to Go implementation, because the latter performs better. See https://go-review.googlesource.com/16444. Do you have real benchmark for this?
|Patch Set 9:

(6 comments)
|Patch Set 2: Code-Review+2
|Patch Set 2: Run-TryBot+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; One thing I'm curious about is whether sym1 and sym2 are ever the same sym (as opposed to one is nil and the other is not.

Tried to let in print something in canMergeSym when both syms are non-nil but equal. Seems it never happened (running all.bash on AMD64 and ARM64).
|Change has been successfully cherry-picked as 3557d546090c7fedd69562c88d20767397de835d by Cherry Zhang
|Patch Set 3: Cherry Picked

This patchset was cherry picked to branch release-branch.go1.8 as commit a508843677011e24b01dba8e2f8685321d6ec7ac
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Ping Cherry/Russ.

Sorry for the delay. I'll have a look tomorrow, at worst by the end of this week.
|Patch Set 1: Run-TryBot+1 Code-Review+2
|Patch Set 1: Code-Review+2

Verified it indeed fixes MIPS64.
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as ba48d2002e705dd85b2ee840ac42da8cbc206027 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1: TryBot-Result-1
&gt; 
&gt; 3 of 16 TryBots failed:
&gt; Failed on linux-amd64-race: https://storage.googleapis.com/go-build-log/5bbe1cea/linux-amd64-race_fa740477.log
&gt; Failed on linux-386: https://storage.googleapis.com/go-build-log/5bbe1cea/linux-386_909d209b.log
&gt; Failed on nacl-386: https://storage.googleapis.com/go-build-log/5bbe1cea/nacl-386_4e1e5974.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

Failures are issue #19163.
|Patch Set 1:

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; Additional test case: https://github.com/golang/go/issues/19179#issuecomment-281350328

This is a different bug, issue #19217.
|Change has been successfully cherry-picked as a355639c6046edae6b3a5190bc78260c2fe3b063 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 6464e5dc4b84a4348e6698f97c5bfc462a0e3a5e by Cherry Zhang
|Patch Set 2: Cherry Picked

This patchset was cherry picked to branch release-branch.go1.8 as commit fa51e363acfe3888b70a6da763faa1adc52424af
|Patch Set 1: Code-Review+2

So the problem is that the operand is a local variable symbol with a non-SP register. Maybe gc.AddAux should check the base register and the symbol agree? (not in this CL)
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(1 comment)

&gt; Patch Set 1: -Run-TryBot
&gt; 
&gt; Can you rebase your change so we can re-run the try bots?

Done.
|Patch Set 2:

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; I'm slightly concerned that this is plastering over a real problem with inlining making these disagreeing signatures visible.

As I mentioned in the issue there are more disagreeing signatures, mostly from *byte or *any vs. unsafe.Pointer. Not sure we ought to fix them all. Maybe instead we should make the inliner not pull these functions into export data?
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Change has been successfully cherry-picked as f6fc0dd620a838be3c98acc798ba58d6cbb0bac2 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2

(2 comments)

32-bit MIPS also has intrinsified atomics.
|Patch Set 1: Code-Review+2

(3 comments)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3:

CL https://go-review.googlesource.com/c/38078/ attempted to remove the not-really-used DIV, DIVU pseudo-instructions. What about just make them real instructions (use same instruction name)? So user assembly code that uses these instructions (if any, probably none) still works on ARMv7.
|Patch Set 8: Run-TryBot+1

(4 comments)

&gt; 2. remove MOD and MODU

Does the hardware divider have MOD, MODU instructions?
Could you provide a link to documentation of the instructions? I can't find it.

&gt; 3. implement DIV as SDIV and DIVU as UDIV

This SGTM. It is probably still good to email golang-dev to make sure user code is not broken.
|Patch Set 9: Run-TryBot+1

(6 comments)

&gt; 1. I would like to support other platforms such as NetBSD and so on. But I have no such environment now, and will do it in the future. Shall we go on with linux only now?

Yeah, Linux-only is ok for this CL. You may add TODO to other platforms.

&gt; 
&gt; 2. There is neither MOD nor MODU in arm32. There is a full list of instructions in the official manual.

I wonder whether we want to still synthesize MOD/MODU, with just hardware DIV/DIVU? Just rewrite to div-mul-sub.
|Patch Set 14: Run-TryBot+1

(2 comments)

&gt; Patch Set 14:
&gt; 
&gt; Why this CL is pending? Due to the undetermined simulated div/mod?

Sorry for the delay. I was side-tracked in other things. Personally I still prefer to remove synthesized DIV/DIVU, but it doesn't need to be in this CL.

&gt; 
&gt; Shall we put that aside? But change the 
&gt; DIVUHW	Rq, Rr, Rs in vlop_arm.s
&gt; 
&gt; to the hard code of it 
&gt; WORD 0x.........
&gt; 
&gt; Then we can use the hardware divider without anymore concerns.

No, please don't.
|Patch Set 14:

&gt; Patch Set 14:
&gt; 
&gt; What do you mean by &quot;this doesn't looks the right place for testing division. Maybe you can just copy &quot;trivial&quot; and make a division in it.&quot; ?
&gt; 
&gt; Create a new directory &quot;misc/cgo/testshared/src/trivial_1/trivial_1.go&quot; and do division in it? Or directly do division in misc/cgo/testshared/src/trivial/trivial.go ?

Something like &quot;misc/cgo/testshared/src/division&quot;
|Patch Set 16: Run-TryBot+1 Code-Review+1

(1 comment)
|Patch Set 17:

&gt; Patch Set 16:
&gt; 
&gt; I am quite confused. My changes are all related to arm, but why linux-386 failed? Even previous TryBots is successful, just move the division test from testshared/src/implicit to testshared/src/division?

No worries. This seems unrelated. It could be just flaky tests.
|Patch Set 19: Run-TryBot+1
|Patch Set 19: Code-Review+2
|Change has been successfully cherry-picked as 69261ecad6dd2f3efd5e4a249325ea27311526b6 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 7: Run-TryBot+1 Code-Review+1

Thanks for doing this. I suggest that you split it to two CLs: one for the tests, and one for TST.
|Patch Set 7:

(1 comment)

&gt; Patch Set 7:
&gt; 
&gt; I will create a new CL once I finish the full test in arm.s.

Is your plan to wait for the full test, or to get this part in first? The TST part LGTM.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as b43fabfb30be8a8f5d73800f1a35836af2b098ee by Cherry Zhang
|Patch Set 1: Cherry Picked from branch master.
|Patch Set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 2327d696c12155c6b94b3e1e74cbf059d2e07f37 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 9b480521d84654c90f6030675e1e10655b180274 by Cherry Zhang
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 6fd5e2549ad530dc6f8504de61f1e49fa4f336ea by Cherry Zhang
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; No test? If something's important enough to backport to a point release, it definitely warrants a test.

It's hard to write a reliable test: the value of interest must live in F15 to trigger the failure, but we don't have control of that.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as e471ad9189d1eba54c8cb5414c47e413cea78df2 by Cherry Zhang
|Patch Set 3: Code-Review+2
|Patch Set 1: Code-Review+2

&gt; Patch Set 1:
&gt; 
&gt; Some of the most common CSE'd values after these are OpAddr SB/SP. They don't fit as nicely into the constant cache because they have meaningful Aux values. They could be shoehorned in, though, by adding Aux support, and in the process, we could potentially expand the constant cache to include strings.
&gt; 
&gt; I'm on the fence about whether it's worth doing. Input welcome.

I guess it depends on the benefit? I can imagine some OpAddr may be very common. But once you've done OpAddr, (OffPtr (Addr {x} SB/SP)) can again be &quot;constant&quot;. I don't think we want to go too far though.
|Patch Set 2:

I'm happy to get rid of them (and I made the compiler not to use them). The standard library doesn't use them in assembly, either. But I didn't delete them because I was worried about user assembly code. Maybe ask on golang-dev?
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 15b37655bc0b786d3cd6e41553263963fbebd642 by Cherry Zhang
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; We'd like this backported to 1.8.  Do I need to create an issue to do that?

I think this is not a regression, so no need to backport to 1.8. If you have other concerns, you can create an issue or reopen the original one (I'm not sure what the convention is).
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Patch Set 1 was rebased.
|Patch Set 2: Run-TryBot+1
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1

(2 comments)
|Patch Set 5:

(1 comment)
|Uploaded patch set 6: Patch Set 5 was rebased.
|Patch Set 6: Run-TryBot+1
|Change has been successfully cherry-picked as c8f38b339875e020f50bedbdb8cfd8a7a1ef12b1 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 8a44c8efaefbbda6dd7ab4ee9a5e449fefbf5e1a by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

Do I submit this?
|Patch Set 1:

Seem to need rebase... Vladimir, could you rebase it?
|Patch Set 2: Run-TryBot+1

&gt; Patch Set 2:
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; Seem to need rebase... Vladimir, could you rebase it?
&gt; 
&gt; Sure, here it is.

Thanks
|Change has been successfully cherry-picked as 24dc8c6cb52aaa2680d0817298d109cb12098cda by Cherry Zhang
|Patch Set 2: Run-TryBot+1 Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 793e4ec3dd440ddb68ec4d154f5711ef76d32b60 by Cherry Zhang
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

&gt; Patch Set 1:
&gt; 
&gt; No impact. Seems like maybe a reasonable idea anyway.
&gt; 
&gt; name       old alloc/op    new alloc/op    delta
&gt; Template      41.4MB ± 0%     41.4MB ± 0%    ~     (p=0.052 n=10+10)
&gt; Unicode       30.4MB ± 0%     30.4MB ± 0%    ~     (p=0.353 n=10+10)
&gt; GoTypes        118MB ± 0%      118MB ± 0%    ~     (p=0.853 n=10+10)
&gt; SSA            891MB ± 0%      888MB ± 0%  -0.35%  (p=0.000 n=10+10)
&gt; Flate         26.4MB ± 0%     26.4MB ± 0%    ~     (p=0.631 n=10+10)
&gt; GoParser      32.8MB ± 0%     32.8MB ± 0%    ~     (p=0.123 n=10+10)
&gt; Reflect       81.4MB ± 0%     81.4MB ± 0%    ~     (p=0.579 n=10+10)
&gt; Tar           27.5MB ± 0%     27.5MB ± 0%  +0.05%  (p=0.014 n=9+9)
&gt; XML           44.4MB ± 0%     44.4MB ± 0%    ~     (p=0.696 n=10+8)
&gt; 
&gt; name       old allocs/op   new allocs/op   delta
&gt; Template        401k ± 0%       400k ± 0%    ~     (p=0.143 n=10+10)
&gt; Unicode         321k ± 0%       322k ± 0%    ~     (p=0.247 n=10+10)
&gt; GoTypes        1.18M ± 0%      1.18M ± 0%    ~     (p=1.000 n=10+10)
&gt; SSA            7.92M ± 0%      7.92M ± 0%    ~     (p=0.436 n=10+10)
&gt; Flate           242k ± 1%       242k ± 0%    ~     (p=0.579 n=10+10)
&gt; GoParser        324k ± 0%       323k ± 0%  -0.33%  (p=0.035 n=9+10)
&gt; Reflect        1.01M ± 0%      1.01M ± 0%    ~     (p=0.353 n=10+10)
&gt; Tar             257k ± 0%       257k ± 0%    ~     (p=0.161 n=9+9)
&gt; XML             405k ± 1%       404k ± 1%    ~     (p=0.971 n=10+10)

Do it a little more seem to help.
|Change has been successfully cherry-picked as ce584e516e79c2b4a3fc9570db695d2d4629485a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Abandoned

CL https://go-review.googlesource.com/c/38380/ disables -N to be applied to runtime. No need for this.
|Patch Set 2:

So this fixes https://github.com/golang/go/issues/19571? Then we don't need https://go-review.googlesource.com/c/38345/.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; &gt; So this fixes https://github.com/golang/go/issues/19571? Then we don't need https://go-review.googlesource.com/c/38345/.
&gt; 
&gt; Huh. I guess so.

Thanks! Abandoned the other CL.
|Patch Set 2:

(1 comment)

The code looks good. I don't quite understand the performance hit...
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 3: Code-Review+1

(1 comment)
|Patch Set 3: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(2 comments)
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(2 comments)
|Change has been successfully cherry-picked as 8a5175df35d20aa97afcbea63e86ba14ecafdc88 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 3a1ce1085ad08296557e8a87573fae4634ce7d8e by Cherry Zhang
|Patch Set 3:

Would ARM32, ARM64, PPC64, MIPS all go wrong then?
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Would ARM32, ARM64, PPC64, MIPS all go wrong then?
&gt; 
&gt; Yeah, looks like an ancient copy-and-paste :). The comment reads:
&gt; 
&gt; // large stack: SP-framesize &lt; stackguard-StackSmall
&gt; 
&gt; But then none of them subtract StackSmall from framesize before comparing with stackguard (like x86 does).
&gt; 
&gt; It's a micro-optimization, but might be nice to change every architecture to be  the same.

Thanks. Would you like to fix them all?
|Patch Set 4:

(1 comment)
|Patch Set 5: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+1

The change looks ok. Just wonder why reporting error early is not friendly with concurrent backend.
|Patch Set 1: Code-Review+2

&gt; Patch Set 1:
&gt; 
&gt; &gt; The change looks ok. Just wonder why reporting error early is not friendly with concurrent backend.
&gt; 
&gt; A fair question. yyerror and friends access a bunch of global state--nerrors, a slice of errors, etc. There are only a few errors that occur in the backend, and it's much simpler to push those earlier/later than to introduce a bunch of concurrency safety to the error handling code. We may want to do that later, but in the meantime, working around it simplifies things--and there's still *lots* to do to get a concurrent backend working. :)

Thanks for the answer! SSA backend still raise a number of errors. But I guess they are ok because they are fatal errors that panics the compiler anyway...
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Change has been successfully cherry-picked as a1cedf08428bdb91916bb5317c8413212308048c by Cherry Zhang
|Patch Set 1: Code-Review+1

(2 comments)

LGTM
|Patch Set 1:

(3 comments)

Do you have some benchmark result for this change? At a high level, I think this kind of changes need to be based on actual speedup.
|Patch Set 3: Code-Review-1

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; My patch makes about 50% improvement in time, and saves 30% (remains two instructions, while eliminate 1 word in the constant pool) in space.

You need to demonstrate the performance of Go programs before and after this CL. You can use the Go1 benchmarks, in $GOROOT/test/bench/go1.
|Patch Set 9: Run-TryBot+1

(6 comments)
|Patch Set 13: Run-TryBot+1

(4 comments)

&gt; Patch Set 12:
&gt; 
&gt; In patch set 12, I did
&gt; 
&gt; 1. updated the comments in the break functions.
&gt; 2. attached a more reasonable comparison result (old1 vs new2) of the go1 benchmark test.
&gt; 3. attached the compiler speed benchmark test result.
&gt; 4. explained why 0xffffffffffffffff is better than 0 for invalid results of break functions.
&gt; 5. explained why (!isARMImm12(uint32(c)) &#124;&#124; !isARMImm12(uint32(d))) is needed.
&gt; 6. explained the slow down of HTTPClientServer-4 was not due to my patch.
&gt; 
&gt; You are appreciated to feedback.

Could you reply in-lined comments in-place? It is easier to read the code and comment together. Thanks.
|Patch Set 19: Run-TryBot+1

(4 comments)
|Patch Set 19:

&gt; Patch Set 19:
&gt; 
&gt; R=khr
&gt; 
&gt; I will let others decide whether these performance improvement numbers justify adding any new code or complexity because I'm not sure myself.

I'm also not sure that the performance improvement weighs against the complexity.
|Patch Set 22:

&gt; Patch Set 20:
&gt; 
&gt; &gt; I've taken a hack at fixing this in the assembler instead of the compiler.  Please take a look at https://go-review.googlesource.com/41612 (still needs tests).  Tell me what you think.
&gt; 
&gt; I also vote for doing it in the assembler. Just let the compiler folds all constants together.

I also think it is better to do it in the assembler.
|Patch Set 3:

This seems to break big-endian PPC64
https://build.golang.org/log/03e3f42d597ce190b162bdaa599104de833deb3a
Maybe the bootstrap build tag trick didn't work there?
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Patch Set 3:
&gt; &gt; 
&gt; &gt; This seems to break big-endian PPC64
&gt; &gt; https://build.golang.org/log/03e3f42d597ce190b162bdaa599104de833deb3a
&gt; &gt; Maybe the bootstrap build tag trick didn't work there?
&gt; 
&gt; Weird. I don't see how. Do you happen to know what Go version /usr/local/go-bootstrap is? Is there any chance that it's somehow from the middle of the Go 1.8 cycle, when the go1.8 build tag had been defined but runtime.SetMutexProfileFraction hadn't?

gomote run user-cherryyz-linux-ppc64-buildlet-0 /bin/cat /usr/local/go-bootstrap/VERSION.cache
devel +8aadcc5 Thu Oct 6 14:57:00 2016 +0000
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1:

Does test need to be cherry-picked?
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; Does test need to be cherry-picked?
&gt; 
&gt; Not necessarily, but I wanted something to test the cherry-pick of the fix.

Make sense. LGTM. (The file should probably be named issue19403.go though.)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 257b01f8f47ace2ddd75efe37d8a0353888bce14 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(1 comment)
|Change has been successfully cherry-picked as 0bae9b083bdbf4d15d65fe175eaa98e4a83d22ea by Cherry Zhang
|Patch Set 5:

MIPS32?
I believe the syscall number is 4045.
|Patch Set 2: Code-Review+1

(4 comments)

My knowledge of this package is not up to date with your recent changes. It took me a little while to follow.
|Patch Set 2:

My knowledge of this package is not up to date with your recent changes. It took me a little while to follow.
|Patch Set 4: Code-Review+2

(4 comments)
|Patch Set 2: Run-TryBot+1

(9 comments)
|Patch Set 2: Code-Review+1
|Patch Set 3:

(1 comment)
|Patch Set 3: Run-TryBot+1

(2 comments)

&gt; Patch Set 3:
&gt; 
&gt; (1 comment)
|Patch Set 4: Run-TryBot+1 Code-Review+2
|Change has been successfully cherry-picked as ab636b899cbfe40ad310d7b50d1a443724f5970a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+1

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Change has been successfully cherry-picked as b53acd89db5847b9ddcba076df89bef8788dd348 by Cherry Zhang
|Patch Set 1: Code-Review+2

(3 comments)
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+2
|Patch Set 3: Code-Review+2

&gt; Patch Set 3:
&gt; 
&gt; I guess I'd like to know a little bit about why these were originally checked for in the assembler, and why they're no longer needed--or to know that it was a bug to begin with. I've added Cherry here in the hopes of shedding some light on that. I suspect it started in one arch and got copied around to the rest, but not sure which was the first. :)

It seems they come from the recent refactor https://go-review.googlesource.com/c/40985/.
|Patch Set 6:

(1 comment)

Thank you for prototyping and benchmarking. Your change seems a bit hacky though. Commented below.
|Patch Set 9: Run-TryBot+1 Code-Review+1

(1 comment)
|Patch Set 11: Run-TryBot+1
|Patch Set 11: Code-Review+2
|Change has been successfully cherry-picked as a04180633503139827096068d6194d2acd2de636 by Cherry Zhang
|Patch Set 2: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 7b0b52ef2b2b86eef3b73859ceaa986c8c0e47f7 by Cherry Zhang
|Patch Set 1: Code-Review+1

Looks good to me, but wait for Keith.

Need a test. Could be simply

type T int64
func f(x, y int64) (int64, T) {
        a := x / y
        b := T(x) / T(y)
        return a, b
}
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Needs a test and probably more careful checking instead of blindly ignoring type, wanted to test with trybots. 
&gt; 
&gt; Wasn't there a discussion about relaxing type equivalence for CSE in general, which would also solve this?

I'm not sure if there was one. But I'm also thinking about it. CSE should probably compare the underlying type, instead of the named type, at least for basic types?
|Patch Set 2:

&gt; Patch Set 2: Code-Review+1
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 1:
&gt; &gt; &gt; 
&gt; &gt; &gt; Needs a test and probably more careful checking instead of blindly ignoring type, wanted to test with trybots. 
&gt; &gt; &gt; 
&gt; &gt; &gt; Wasn't there a discussion about relaxing type equivalence for CSE in general, which would also solve this?
&gt; &gt; 
&gt; &gt; I'm not sure if there was one. But I'm also thinking about it. CSE should probably compare the underlying type, instead of the named type, at least for basic types?
&gt; 
&gt; Keep in mind we want something as simple as possible for 1.8.2.  This CL with a test added would fit the bill.
&gt; I think comparing underlying types in CSE would be the right thing.  I think the only type distinction that really needs to survive in SSA (except for DWARF generation) is ptr vs. nonpointer and float vs. int. 
&gt; I'm hesitant to make that a 1.8.2 CL unless it is simpler than I imagine.

Of course. My question is about long term.
|Patch Set 1: Run-TryBot+1

(3 comments)
|Patch Set 4: Run-TryBot+1 Code-Review+1

(3 comments)
|Patch Set 5: Run-TryBot+1
|Patch Set 5: Code-Review+2
|Change has been successfully cherry-picked as 2b6c58f6d559ef2621f677e016aba08a6b8aad19 by Cherry Zhang
|Patch Set 4: Code-Review+2

(2 comments)

&gt; Patch Set 4:
&gt; 
&gt; https://perf.golang.org/search?q=upload:20170426.1

Thank you, Dave. It looks nice.
|Patch Set 2:

(2 comments)
|Patch Set 3: Run-TryBot+1 Code-Review+2
|Change has been successfully cherry-picked as aecf73fc3193cbcb1d6b02c64dcd3bf7f0317bd2 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 2: Code-Review+1

(1 comment)

The change looks good to me. But I think we'd like to wait a few days for golang-dev discussion.
|Patch Set 2:

(1 comment)
|Patch Set 5: Run-TryBot+1
|Patch Set 5: Code-Review+2
|Change has been successfully cherry-picked as 4b2f7b4b51180424c4e84b50d99e1fba5b6f3e89 by Cherry Zhang
|Patch Set 6:

RELNOTE=y
|Patch Set 6:

&gt; Patch Set 6:
&gt; 
&gt; &gt; Patch Set 6:
&gt; &gt; 
&gt; &gt; RELNOTE=y
&gt; 
&gt; What's this?

This is for collecting release note. Nothing to do for you.
|Patch Set 1:

(1 comment)
|Patch Set 2: Run-TryBot+1 Code-Review+1

(3 comments)
|Patch Set 3: Run-TryBot+1 Code-Review+2

(2 comments)
|Patch Set 4: Run-TryBot+1
|Change has been successfully cherry-picked as 9dd86654181264cc7c76c929f3df20d11251e23a by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(4 comments)
|Change has been successfully cherry-picked as fb0ccc5d0ac41edc545a877691d84bbb86801a07 by Cherry Zhang
|Patch Set 3: Run-TryBot+1

Need benchmark results.
|Patch Set 11: Run-TryBot+1

(15 comments)
|Patch Set 13: Run-TryBot+1

(2 comments)
|Patch Set 15: Run-TryBot+1
|Patch Set 15: Code-Review+2
|Change has been successfully cherry-picked as 6897030fe3de43bbed48adb72f21a6c2d00042cd by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 2: Run-TryBot+1 Code-Review+2

&gt; Patch Set 2: Code-Review+2
&gt; 
&gt; Looks good to me, I'm surprised we don't have a test for this though...

Could we add some test?
|Patch Set 3: Run-TryBot+1

(1 comment)

&gt; Patch Set 3:
&gt; 
&gt; &gt; Uploaded patch set 3.
&gt; 
&gt; Considering that ARM64 decoder needs at least one week to upstream, I add a test here and such Goobj format inconsistency bug can be caught easily from now on.

It would be good to have some tests in cmd/internal/goobj to parse object file, but not necessarily in this CL.
|Patch Set 3:

&gt; Patch Set 3: TryBot-Result-1
&gt; 
&gt; 1 of 18 TryBots failed:
&gt; Failed on linux-arm: https://storage.googleapis.com/go-build-log/8a24c45d/linux-arm_ffa61264.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.

Ah, this is issue #19811.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Patch Set 3: TryBot-Result-1
&gt; &gt; 
&gt; &gt; 1 of 18 TryBots failed:
&gt; &gt; Failed on linux-arm: https://storage.googleapis.com/go-build-log/8a24c45d/linux-arm_ffa61264.log
&gt; &gt; 
&gt; &gt; Consult https://build.golang.org/ to see whether they are new failures.
&gt; 
&gt; Ah, this is issue #19811.

I guess we can skip test on ARM now, and check this in. Re-enable test when we fix #19811.
|Change has been successfully cherry-picked as b2363ee9f6c37f0c0ac0dd6b992c0de54c7d40f5 by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Run-TryBot+1 Code-Review+1

(1 comment)
|Patch Set 1: Run-TryBot+1 Code-Review+2

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2:

&gt; Patch Set 2: Code-Review-2
&gt; 
&gt; (Temporary -2 to block submission during discussion)
&gt; 
&gt; Where is the bug about this?

It looks like I got it wrong when I first did the port, probably from misreading the man page. The man page of ptrace(2) reads

PTRACE_GETREGS, PTRACE_GETFPREGS
              Copy  the tracee's general-purpose or floating-point registers, respectively, to the address data in the tracer.  See &lt;sys/user.h&gt; for infor?
              mation on the format of this data.

On MIPS, sys/user.h has only one type, struct user. But ptrace actually expects struct pt_regs.

Seems nobody noticed until now...

&gt; 
&gt; Which test does this fix? Does this need a new test?
&gt; 
&gt; Is the only purpose of this change for external users using the syscall package, or for the runtime/std itself?

I don't see anywhere in runtime/std uses this. (Otherwise we would find the bug much early)

&gt; 
&gt; Is this fixed in x/sys/unix?
|Patch Set 2: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+1

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Change has been successfully cherry-picked as 3b263e43a972fdc2877748035197ab42bc44b492 by Cherry Zhang
|Patch Set 1: Run-TryBot+1 Code-Review+2

(1 comment)

R=go1.10
Leave for Go 1.10.
|Removed Code-Review+2 by Cherry Zhang &lt;cherryyz@google.com&gt;

|Patch Set 1:

plan9-arm failure is real. FWIW, in runtime/sys_plan9_arm.s we should have written &quot;SWI $0&quot; instead of &quot;SWI 0&quot;.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; plan9-arm failure is real. FWIW, in runtime/sys_plan9_arm.s we should have written &quot;SWI $0&quot; instead of &quot;SWI 0&quot;.

I filed #20378.
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; plan9-arm failure is real. FWIW, in runtime/sys_plan9_arm.s we should have written &quot;SWI $0&quot; instead of &quot;SWI 0&quot;.
&gt; 
&gt; I filed #20378.

This is fixed now. You can rebase and try again. We can target Go 1.9 for this.
|Patch Set 2: Code-Review+2
|Change has been successfully cherry-picked as c7cae34b194d6b189d5ae3dab5d331ba7c3b4fa9 by Cherry Zhang
|Patch Set 3:

(3 comments)
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; The assembler errors are tested in a different way, such as cmd/asm/internal/asm/testdata/amd64error.s which is referred in func TestAMD64Errors(t *testing.T) of cmd/asm/internal/asm/endtoend_test.go.
&gt; 
&gt; But a full error test for arm seems to be another big task, shall we focus on check wrong  .S in the issue? It is not hard to add a new cmd/asm/internal/asm/testdata/armerror.s with a few illegal &quot;.S&quot; instructions.

SGTM.

&gt; I can not figure out a simple way to combine all checks of illegal suffixes during current code freeze period.
&gt; 
&gt; Maybe we can do it in two steps,
&gt; 
&gt; 1. Combine part of them in the beginning, such as this patch.
&gt; 2. Merge special cases one by one in the future.

This is ok. We don't have to do all in one CL. Just something to think about.
|Patch Set 7: Run-TryBot+1 Code-Review+1

(4 comments)
|Patch Set 10: Run-TryBot+1

(1 comment)
|Patch Set 12: Run-TryBot+1
|Patch Set 12: Code-Review+2

(2 comments)
|Change has been successfully cherry-picked as 5e797879350e749e49dc627d717ca069b6c833f3 by Cherry Zhang
|Patch Set 1: Code-Review+2

(2 comments)

Looks pretty safe for Go 1.9.
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(1 comment)

Tried locally. Everything seems to work well :)
|Patch Set 1: Code-Review+2
|Patch Set 2: Run-TryBot+1

(1 comment)
|Patch Set 13: Run-TryBot+1
|Patch Set 13: Code-Review+2
|Patch Set 1: Run-TryBot+1

(2 comments)
|Patch Set 1: Code-Review+1
|Patch Set 1:

(1 comment)
|Patch Set 6: Run-TryBot+1

(1 comment)

&gt; Patch Set 1:
&gt; 
&gt; Sometimes a unique error will be reported twice, and a check is added 
&gt; for that. In my opinion only two different errors can be treated as &quot;multiple errors&quot;.

This makes sense. Do you know where the duplicated error messages are generated?
|Patch Set 7:

&gt; Patch Set 6:
&gt; 
&gt; Multiple &quot;illegal combination&quot; is due to &quot;func oplook&quot; invoked twice. It seems no easy way to avoid (during code freeze).

Ok, thanks. It is not urgent to fix the duplicated errors. I just wanted to know where it comes from.
|Patch Set 9: Run-TryBot+1
|Patch Set 9: Code-Review+2
|Change has been successfully cherry-picked as b8a4eb4bd8820ca50fee3aff4b8d5adb7a0a9b49 by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; LGTM, thanks for putting that together.

Thank you.
|Change has been successfully cherry-picked as 4e2a157ab26ea2b700159968a65305391ff6ad7f by Cherry Zhang
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(3 comments)

&gt; Patch Set 1:
&gt; 
&gt; FWIW, I can run simple panic/recover examples with this, but my more complicated defer/panic testcase is not working quite yet, still debugging.

I guess it's ok to check in this and debug in a later CL, if you like.
|Patch Set 4: Code-Review+2

(3 comments)
|Patch Set 1: Code-Review+2

(2 comments)
|Uploaded patch set 1.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; LGTM. 
&gt; 
&gt; Per our discussion, seems like leaving the useCopyForLoadstore sequences commented out is the right solution for now. I will work on fixing the CABI code to allow those changes.

Thank you.
|Change has been successfully cherry-picked as 0db6f0388211b35d05bcb8121a53845dc25c48a5 by Cherry Zhang
|Patch Set 13: Run-TryBot+1

(3 comments)
|Patch Set 22: Run-TryBot+1

(1 comment)
|Patch Set 23: Run-TryBot+1
|Patch Set 23: Code-Review+2
|Change has been successfully cherry-picked as c8ab8c1f99123173aa8840f82f2eb947f7353617 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as 1e0819101b476f807bf8ef3fd50f1ee26691f33e by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2

(1 comment)

Thanks. This looks very similar to what I did for BComplexType class, plus the debug info which I have not done yet. I'll rebase my stuff onto it and go from here.
|Uploaded patch set 1.
|Change has been successfully cherry-picked as 2252dc7c8684809105648ff8ee5c828b47fa482e by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

(2 comments)

Thank you!
|Uploaded patch set 1.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; LGTM.

Thanks!
|Change has been successfully cherry-picked as 193807df861276716e7d89df78cd3910797d96ca by Cherry Zhang
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 0aede73917c89d048211b3731fb19157acfe4431 by Cherry Zhang
|Patch Set 1:

(5 comments)
|Patch Set 3:

(3 comments)
|Patch Set 4:

(2 comments)

Generally looks good. Thanks.
|Patch Set 4:

(1 comment)
|Patch Set 4: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+2
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 2: Code-Review+1

(3 comments)
|Patch Set 3: Code-Review+2
|Patch Set 2: Run-TryBot+1
|Patch Set 2: Code-Review+2

(1 comment)
|Change has been successfully cherry-picked as d3d548913570f7b7c1ae2672624607d5831032b1 by Cherry Zhang
|Patch Set 1: Code-Review+2
|Patch Set 5: Run-TryBot+1
|Patch Set 5: Code-Review+2

(1 comment)
|Patch Set 5:

(1 comment)
|Patch Set 5:

(2 comments)
|Patch Set 7: Run-TryBot+1
|Change has been successfully cherry-picked as a38c8dfa44f32eb464b826c7f7a50e51f73506e0 by Cherry Zhang
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; (3 comments)
&gt; 
&gt; LGTM

Thank you!
|Change has been successfully cherry-picked as 283e8398093a2edd2c0dfb80ea139ad87abd5b67 by Cherry Zhang
|Change has been successfully cherry-picked as 4958f9e2fe6744a36188a9d97d7db1da696b848a by Cherry Zhang
|Patch Set 4:

&gt; Change has been successfully cherry-picked as 4958f9e2fe6744a36188a9d97d7db1da696b848a by Cherry Zhang

Sorry, I clicked wrong button...
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; No problem, if you wanted to +2 then we're all good.

Actually, I have a concern: the _div etc. aren't really dead. The assembler backend turns DIV/DIVU/MOD/MODU pseudo-instructions into calls to them.

https://go.googlesource.com/go/+/master/src/cmd/internal/obj/arm/obj5.go#598
https://go.googlesource.com/go/+/master/src/cmd/internal/obj/arm/asm5.go#1483

The compiler doesn't generate theses pseudo-instructions, and I found no use of them in our code base. Once I wanted to get rid of them, but didn't make it through. See https://groups.google.com/d/msg/golang-dev/e9wdJVk43Z4/Tg64O18bCwAJ
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; &gt; Patch Set 4:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 4:
&gt; &gt; &gt; 
&gt; &gt; &gt; No problem, if you wanted to +2 then we're all good.
&gt; &gt; 
&gt; &gt; Actually, I have a concern: the _div etc. aren't really dead. The assembler backend turns DIV/DIVU/MOD/MODU pseudo-instructions into calls to them.
&gt; &gt; 
&gt; &gt; https://go.googlesource.com/go/+/master/src/cmd/internal/obj/arm/obj5.go#598
&gt; &gt; https://go.googlesource.com/go/+/master/src/cmd/internal/obj/arm/asm5.go#1483
&gt; &gt; 
&gt; &gt; The compiler doesn't generate theses pseudo-instructions, and I found no use of them in our code base. Once I wanted to get rid of them, but didn't make it through. See https://groups.google.com/d/msg/golang-dev/e9wdJVk43Z4/Tg64O18bCwAJ
&gt; 
&gt; It doesn't seem like we have any such assembly in the stdlib. It all builds fine with GOARCH=arm GOARM=5.
&gt; Should I revert this?
&gt; We should add a test that tickles this code path.
&gt; I can revise the CL to rename those functions with runtime prefixes.

If we keep the pseudo-instructions, we'd have to add the functions back. I agree that having a test would be good. (Personally I'd still like to get rid of the pseudo-instructions.)
|Patch Set 1:

(1 comment)
|Patch Set 2:

&gt; Patch Set 2: TryBot-Result-1
&gt; 
&gt; 1 of 18 TryBots failed:
&gt; Failed on linux-arm: https://storage.googleapis.com/go-build-log/b7c2c31b/linux-arm_a7cd31ad.log
&gt; 
&gt; Consult https://build.golang.org/ to see whether they are new failures.
&gt; Benchmark results for linux-amd64 are available at:
&gt; https://perf.golang.org/search?q=cl:45703+try:T3219b951f

It looks like run.go doesn't use &quot;go build&quot; for rundir. It invokes the compiler and the linker directly, but doesn't run the assembler... We probably have to run &quot;go build&quot; ourselves.
|Patch Set 5: Code-Review+2
|Patch Set 5:

Thanks for the fix. Sorry about the wrong click in the other CL.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; Nice cleanup, LGTM. 
&gt; 
&gt; This is a nit, but ... not sure why your auto vars receiving return from makeTempVar are named &quot;it&quot;, better to use something like &quot;p&quot; (for pair).

Thanks for review.
Changed auto var name to &quot;p&quot;.
|Change has been successfully cherry-picked as e48380c9a5afff036d3121e9e62fabf71ebeec5d by Cherry Zhang
|Patch Set 1: Run-TryBot+1 Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)

Thanks for review!
|Change has been successfully cherry-picked as 6604938f0030f82ed816d53d3f8c413e02ae3dab by Cherry Zhang
|Uploaded patch set 1.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; LGTM, thanks. I had noticed that but never got around to fixing...

Thanks!
|Change has been successfully cherry-picked as 567c5a471973e4bbe97b5b693400ea95f899c411 by Cherry Zhang
|Patch Set 2: Code-Review-1

MOVB R1&lt;&lt;0(R2), R3 is legal, and correctly assembles to
e19230d1        ldrsb   r3, [r2, r1]
although I agree that the &quot;&lt;&lt;0&quot; syntax is a little awkward.
|Patch Set 4: Code-Review-2

(6 comments)
|Patch Set 10:

(3 comments)

The fix for 1 looks ok to me.
|Patch Set 14: Code-Review+2

(1 comment)
|Patch Set 14: Run-TryBot+1
|Patch Set 17: Run-TryBot+1

&gt; Patch Set 14:
&gt; 
&gt; Though there are other cases can not be tested in armerror.s due to the &quot;multiple errors&quot;, I thought the assembler work fine, at least those cases are detected than omitted.
&gt; 
&gt; We can find a better solution in go 1.10.

Sure. This is ok.
|Change has been successfully cherry-picked as e00a38c89a4e0afa985072bdffe5dd30de7eccda by Cherry Zhang
|Patch Set 18:

&gt; Patch Set 17:
&gt; 
&gt; If this CL is merged, then a relative full encoding test for arm32 is finished. Some corner cases are omitted, which use the constant pool and is hard to calculate offset by hand.

That's fine. Don't try to calculate the address of constant pool. The assembler is free to choose where to put the constants anyway.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)

Thanks!
|Change has been successfully cherry-picked as f31c9e566ff6fcda1d703c497ae5149c7289b86b by Cherry Zhang
|Patch Set 1: Code-Review+2

(1 comment)
|Patch Set 1: Code-Review+1

Could this also happen for struct smaller than 8 bytes, say
struct {
  f1 int8
  f2 [0]uint32 // instead of uint64
  f3 int8
}
?

If so, we probably have to be explicit with the padding?
|Patch Set 1: Code-Review+2

&gt; Patch Set 1: Code-Review+1
&gt; 
&gt; Could this also happen for struct smaller than 8 bytes, say
&gt; struct {
&gt;   f1 int8
&gt;   f2 [0]uint32 // instead of uint64
&gt;   f3 int8
&gt; }
&gt; ?
&gt; 
&gt; If so, we probably have to be explicit with the padding?

Ok, I think this is already handled.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; Eek, good catch. Not sure how I missed that the first time around.
&gt; LGTM.

Thanks!
|Change has been successfully cherry-picked as b46919df97646546a67d9a28ded8094867a28255 by Cherry Zhang
|Patch Set 1:

(3 comments)

I think the idea is right overall. Some questions below.
|Patch Set 2: Code-Review+2

(2 comments)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Run-TryBot+1 Code-Review+2
|Change has been successfully cherry-picked as 87a6340e8e91c1dbcc2472d666b69536e91ec163 by Cherry Zhang
|Patch Set 1: Run-TryBot+1
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as 3785457c765018a8ca5a399da177ddc5573db68d by Cherry Zhang
|Patch Set 1: Code-Review+2

My fault... Thanks for fixing.
|Well the problem doesn't happen with gccgo because it won't create a single large text section.  Maybe a nit.
|Yes I agree.  The previous code just assumed the next section was .rodata.  It took some experimentation to understand what the possibilities were.  I found that the sections in the text segment are different if it is internal or external linking.  For internal linking it could be .glink but with internal linking the .rodata section is not in the text segment so it doesn't get to this point.
|What I was trying to say is that when elfshalloc is called, it first does name lookup and uses an existing one if it exists.  When calling elfshallocdup it doesn't do lookup at all, just creates it, regardless of whether or not there is a duplicate, so is intended for sections where duplicates are possible.  Maybe the function name is misleading.
|yes, better
|If you refer to issue #16004 there are two cases where power8 instructions are used in Go1.7 on ppc64le but not for ppc64.
|Why is this changed?  All the MOVXreg mnemonics have 1 operand?  I get an index panic here.
|There is an sp = buildReg(&quot;sp&quot;) earlier in this file and a commented sb = buildReg(&quot;sb&quot;), can the sb line be uncommented and then you can use sp &#124; sb here instead of using buildReg?

Also I believe that all the earlier regInfo definitions in this file that now use gp &#124; sp should be gp &#124; sp &#124; sb.
|This comment is a bit confusing to me, I suppose it depends on what you mean by increment-and-store or store-and-increment.  The EA value for the instruction is off+y but the register is not actually incremented until after the store has completed.  The rest of what is said is correct as far as the value for R3.
|These could be added, since there is an lwzu and stwu but they just weren't implemented.
|ADDC is the addc instruction which sets CA but not CR.  The outputs include cr.  Did you intend to use ADDC or ADDCC?
|I agree, it would be good to have the word Carry in the name.
|Shouldn't the asms with zero extend have typ UInt64?
|Float64 not Fload64
|In ARM64 they used REM, UREM, REMW, UREMW for these, which also exist in PPC64.  Couldn't those be used instead?  Much simpler to implement.  That's what I tried and it seemed to work.
|Right, they aren't, the REM* instructions in asm9.go are implemented as &quot;macros&quot;, i.e., Go asm that generate multiple power asm instructions.  I'm just noting they exist, if you prefer not to use them that's fine with me.
|These instructions are converting $31 to -1 in the disassembly.  Is that what you intend?
|Understood.  I just thought to make it clear what you wanted to generate by the testcase, it would be better to have a value that didn't get converted from a positive looking value to -1.
|When I assemble this program, vsbox is not assembling correctly.  The disassembly gives me a different instruction.
|Can you use V2 instead of V1 so it can be verified that the operands are being assembled correctly?  That is, if the assembler was swapping operands for V1 and $1 you wouldn't be able to tell.
|You added some comments here but I don't think the assignments are always consistent, i.e., From3 is sometimes a[3] and other times a[1], Reg can be a[1] or a[2].  Maybe just refer to the function where the operands are set or just say their assignment depends on the opcode.
|in power8?
|As we discussed, I think we need somewhere to be able to identify which instruction set these require.  Since this section represents the encoding of the actual ppc64 opcode in the instruction, my suggestion is to do it here.  Maybe for now just a comment before and after the new instructions?
|Typo -- should be lfiwzx.
The information I have shows that lfiwax is power6 and lfiwxz is power7. But I don't have an older machine to verify they don't work on power5.
|I can do that.
|Why the change in this value?
|Let me think about this...  The instructions that would be generated only have 16 bit offset fields, so when you say the assembler can handle it, I think it would still have to generate extra Power instructions in those cases (&gt; 16 bit).  So maybe it makes sense to leave it as 16 bit and not lower it otherwise?
|Should I remove the is16Bit check above then?
|OK but they should probably be consistent, right?  If the is16Bit check is above then it should be here too or in neither.
|OK
|OK
|Comment is wrong, at one time I was going to have both start and end symbols but instead decided to go with start only and use the length of the section in the textsectmap table.
|OK
|OK
|Not used anymore, removing it.
|OK
|No there shouldn't be any other ops.  Just wrote it the same way as the other functions.  I can change it.
|OK
|Is this comment related to unnecessary sign extension, or whether SLD/SRD could be used even in the 32 bit case?  I don't think we should use D instead of W if that is your question because the contents of the register are left differently.
|Yes you have a good point, I'm not sure if I did this intentionally or was just being sloppy.  I can remove the extensions to 64 bits for the cases where a 32 bit shift is to be done.  I think the others are needed, and I tried to follow what was done in the shift with carry rules below to be consistent.
|This same line that appears in all memclr_xxxx.s files.
|Sorry, I pulled this from the memmove file and forgot it was not clear.  Part of the problem is that not all the branch opcode variations are defined in asm9.go.  I can add some detail.
|OK
|OK
|For many of these, the VS registers &gt; 32 are being truncated.  Like this one:
MFVSRWZ VS33, R1        //      mfvrwz  r1,v1
|This disassembles to mtfprwa f31,r1
|Yes, I highlighted the wrong line, should be the line before, but the problem in this example is not the same as above.  In this case the ppc64 opcode is mtf when it should be mtv.  Here are the 4 opcodes in this block:
        MFVSRWZ VS33, R1        //      mfvrwz  r1,v1
        MTVSRD R1, VS0          //      mtvsrd  vs0,r1
        MTVSRWA R1, VS31        //      mtfprwa f31,r1
        MTVSRWZ R1, VS63        //      mtvrwz  v31,r1
|XXLANDQ VS0, VS1, VS32  //      xxland  vs32,vs0,vs1
xxlandq?
|XXSEL VS0, VS1, VS3, VS32       //      xxsel   vs32,vs0,vs1,vs3
expected order?
|XXPERMDI VS0, VS1, $3, VS32     //      xxmrgld vs32,vs0,vs1
|In theory that should be true.  When I wrote this code I was thinking more of the fact that the lis should only load the 16 bits identified by the mask.  In other code that handles relocation where t is computed this same way, it does not assume that the upper 32 bits are zero.  I'd prefer to be safe and consistent.
|OK
|We could but the test would have to be changed so it generated arm instructions instead of ppc64x and only test internal linking.  I could do it if someone suggested what instructions to add but I would have no way to test it.
|Don't understand the purpose of the randomCases.  It is generating a large set of instruction words containing random bits.  Not all possible combinations are necessarily valid instructions.
|This path doesn't look right? Usually it is at /usr/bin/objdump.
|The binary word should be f3c04322 but there is still an issue if it is changed.  The binutils objdump will name the vector registers as vs0, vs1, ... if the instruction is a vsx type.  Currently the golang disassembler just calls them v0, v1...
|Done
|Done
|Done
|Done
|Done
|Yes, once we have an align directive, all the functions like bytes.Equal, memmove, memclr could be further improved by aligning code for small loops.
|The 32 byte loop is very different and ended up with lots of #ifdefs which is why I decided to do it this way.
|Done
|Done
|Done
|This code came from Minux originally. I didn't notice the missing copyright or that it was a generated file.  So I will have to change how this gets generated to get the VS regs correctly identified instead of the direct change I did.  x86/x86asm/tables.go and arm/armasm/tables.go are the same.
|yes
|CMPU generates cmpldi, not cmpwi as your comments say.  That appears in multiple places.
|VRSAVE should not be set or saved in ppc64le code.  These lines should be removed.
|Don't change VRSAVE
|Don't change VRSAVE.
|Don't change VRSAVE
|Don't change VRSAVE
|Don't change VRSAVE
|You are assuming here that R8 has a meaningful value in it.  If that is supposed to be ROUNDS and you are assuming it was set by the call to doEncryptAsm, then that should be documented.
|OK
|Definitely looks wrong, I'm not sure what that was supposed to be.  Possibly intended to have an index register but don't remember why.
|I'm not sure on your questions.  That's the way the asm code for these was before.  I'll have to check into it.
|I followed what was done for ARM64Ops.go.
|Yes I intended that it matched the asm code.  Sorry I thought I reviewed them all carefully.  Let me try that.
|This is the way the load atomic is implemented on ppc64/ppc64le based on the C11 model for sequential consistency in other compilers/runtimes.  My understanding is that by executing the cmp and bne, that enables a dependency on what was just loaded which ensures sequential consistency. This sequence appears in the ISA document B.2.3 Safe Fetch.
|Comment is wrong, I'll fix.  The corresponding comment in ppc64/ssa.go is correct.
|Here is what I see now with this change if I force one of the dependencies from runtime.a to have a new date.

crash_test.go:172: go list -f {{.StaleReason}} runtime:
		stale dependency &quot;newer dependency /home/boger/golang/stale/go/pkg/linux_ppc64le/runtime/internal/sys.a 2017-02-14 17:25:50.412000001 -0500 EST &quot;

The information I'm trying to get is the path to the dependent file that is stale and why it is considered stale because the current message does not provide that detail.

I understand what you're saying about the messages, so I'm not sure what is best given the way the StaleReason is set.

Back to the original problem, it might be enough to get on the builder system and look at the files that runtime.a depend on (sys.a, atomic.a) to see if there are any clues on what might be wrong.
|Oh yeah that's right.  That's fine.
|Your format is fine.  I just wanted to provide as much information as possible to figure out the problem.  The reason for including p.Name is to know which package had the stale dependency.
|Is that enough precison?
|Can you use ppc64x here instead of just ppc64 so it is clear that it affects both ppc64 &amp; ppc64le.
|Could you put a comment here that this is for endianness.
|Endianness comment
|I don't see how this loop unrolling will help performance.  You still have multiple compares and branches for each block.
|How does this work if the size is not a multiple of 8?  Looks 8 bytes are always loaded, and the pointer is bumped up by 8 even though the remaining size might be less than 8.
|The comment about FSEL should be removed.
|Here is what I see in an objdump of an assembled file containing FMADD:

                        FMADD F4, F5, F6, F7
0x0000 ba29e4fc 	fmadd   f7,f4,f6,f5

I think that is generating the correct asm even though the operand ordering is not obivous.  At this point I think it would cause more trouble than worth it if we changed it.

I agree the FSEL comment shouldn't be there.
|Done
|This should be fixed now.
|When I had [s] there it gave me an error later during the build saying s was defined never used.  The size does get passed to LoweredZero using t.
|Never mind I see what I have is wrong.
|Done
|Well, there could be any combination of these instructions, maybe if I used n1, n2, and n3 that would be cleared?

That is, sometimes MOVW, sometimes MOVH, sometimes MOVB, sometimes MOVW then MOVB, etc. depending on how many bytes are left.
|Done
|Done
|Done
|Done
|Done
|The LoweredZero rule will always result in an address computation that won't be folded.  That's why I left these explicit rules for commonly used sizes.

For example if there is data on the stack at offset 32, using the LoweredRule will result in:
addi r3,r1,32
std r0,0,r3

instead of
std r0,32,r1

Also, the LoweredZero will clobber r3 which doesn't happen unless a loop is needed.
|Done
|Done
|Done
|Done
|Done
|Actually I originally had it this way, but then there ended up being enough differences I decided to split them. 
But with your other suggestions this works well so they are now merged.
|Done
|Done
|Done
|Yes should be &gt;= in both.
|Done
|Done
|Done
|Done
|In power asm you can only move from a value from a GPR to CTR.
There isn't a MOVD $c, CTR and I suppose theoretically there could be one but then that would generate 2 power asm instructions and I think it is best when there is a 1 to 1 mapping.
|Done
|Yeah, I went overboard with trying to generate the most efficient code for all situations and that is why the code ended up this way.  But when not in a loop the improvement is not noticeable so I will change it so it is more like LoweredZero.
|If you mean use registers other than R3 and R4, then yes it should.  I think I just followed the way the previous LoweredMove was implemented without thinking much about it.

Is there a way I can specify that the code wants to use and clobber 4 extra registers without selecting which they are?

Oops I see that I copied the comments from LoweredZero intending to update them but forgot.
|Done
|Done
|Done
|Done
|I think this line should start with lowercase.
|Mention asm here somewhere.  &quot;In the newest asm AES implementation... &quot;
|I have updated the comment.  The information on the instruction form is found in the ISA document.  Unfortunately there isn't a list for just DS form instructions but a table with all the instructions and the many forms they could be.
|The extra code is needed if AOP_RRR is used to build the instruction.  If AOP_RLDIC is used, then the fields are set correctly without the extra code.
|Done
|Done
|Done
|Yes you are correct.  My original implementation was using operands like the rld... and rlw.... but then changed it but forgot to remove the old way.
|Done
|Done
|Done
|Done
|Done
|I think it is better to do CMP $0,R7 so it is clear what you are comparing against.
|Why do you have 2 nops after the CMP?
|The function alignment is unknown (at best 8), so you can't know how the loop will be aligned?
|Please add a comment for the type of BC this is. bndz
|Same as above.
|In reviewing these I noticed the cntlzd and cntlzw instructions set the CR so added clobberFlags as needed.
|Done
|You are right, it doesn't matter.  I had looked at other examples where it was done this way but now I see they weren't quite doing the same thing.
|Here is the description from the ISA for popcntw:

A count of the number of one bits in each word of regis-
ter RS is placed into the corresponding word of register
RA. This number ranges from 0 to 32, inclusive.  So if I
don't clear the top word, it will put its count into the output 
register.

Similarly for popcntb for each byte.
|Done
|Same as above.  For each byte of the input register it will put the count for that byte in the corresponding byte of the output register.  So only the one byte we care about should have something in it.
|Updated the comments to describe what they really do.
|Done
|Done
|Done
|Done
|In asm9.go, whenever there is a branch and link instruction, a NOP is written as the next instruction.  This is to allow ld r2,24(r1) to be inserted if necessary when returning from a function call, in case the function changed the value of r2.  This insertion of ld r2 is done in genplt (earlier in asm.go) if internal linking is used, and it is expected that the GNU linker will do it if necessary with external linking.  However, in this case, the bl trampoline appears to be calling a function that is local so the GNU linker decides the ld r2 is not needed when it really is.

The ld r2 can't be added to the trampoline code because it has to be done after returning from the function call, and the function never returns to the trampoline code but to the point after the bl.

For more detail:  bl tramp sets link register (return point) to instruction after bl, then branches to the trampoline code.  The trampoline code computes target address, puts it in ctr, then calls the function using bctr, which does not alter the link register.  The function returns to the location specified by the link register, so that is where r2 must be restored.

This behavior with r2 and the GNU linker is all documented in the PowerPC64 v2 ELF ABI.
|Good point, I need to investigate this.  With dynamic linking R12 should hold the address of the call target, and I see that the code in gencallstub which should only be used for internal linking is also using R12.
|Done
|Yes we did decide that.  But I was thinking that this was simpler and should be good enough but now I see why it isn't. 

Your comment about putting the trampoline in the same section as the caller is something I hadn't considered, so I changed data.go to handle that.
|Done
|Sorry I forgot to respond to your previous comment on this.  My thinking was that this was a function call to some unknown address so there should be no expectation of r12 remaining valid.  But I can change it to what it was before.
|Only functions compiled as PIC expect R12 to hold the function's address.  It doesn't matter if it is linked internally or externally, only if the code was compiled for PIC.  In this fix trampolines are only being created for non-PIC code.  I was just trying to understand if there was any way this could be calling PIC code from non-PIC code.
|If Go code is compiled for PIC (shared or dynlink) then at the start of each function call, it expects that R12 was passed holding the function's address, and uses that to initialize R2 with the TOC address.  Executables created by default with golang are not compiled for PIC (dynamic or static), and that is the reason this bug has happened, and that is the only case now where trampolines are being created.

The question is, is it ever possible to link a program where some Go code was compiled for PIC and some not.  I don't know if there is a situation where that could happen or if the linker tries to detect it.  To be safe R12 could be used here and then indicate R12 as clobbered for the duff devices calls.

Note this does not affect C code because C code is always built with R12 and R2 set up.

My understanding is that the external linking can only create dynamic executables, and the internal linker must be used to create static executables on ppc64le.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1: Code-Review+1

LGTM
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Abandoned

Abandoning for now.  You can make this work by setting all the environment variables so that probably is sufficient.  The only value add would be to correctly map the GOOS/GOARCH value to a gcc triplet but there are so many variations I'm not sure it's worth it.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

I agree.  UGH

Just clarifying your last statement....  I assuming that means you still want me to pull out the declarations into 2 smaller files and leave the common file there so there isn't a big duplication, and you're not saying my original is OK after all?
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 2.: Commit message was updated
|Uploaded patch set 3.: Commit message was updated
|Patch Set 3:

(4 comments)

On further testing, we have found a bug in how some of the other sections are generated for the case where the text sections are split.  Still investigating, but changes will be needed.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Abandoned

Redone as 27790.
|Patch Set 1:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1: Code-Review+1

Built with it and code looks great.
|Patch Set 2:

(2 comments)

A few minor comments but the rest LGTM.
|Patch Set 1: Code-Review+1

LGTM
|Patch Set 4:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 1:

(1 comment)
|Patch Set 3:

(1 comment)
|Patch Set 5:

(6 comments)
|Patch Set 7:

(1 comment)
|Patch Set 7: Run-TryBot+1 Code-Review+1
|Patch Set 11: Code-Review+1

LGTM
|Patch Set 1: Code-Review+1

LGTM
|Patch Set 1:

(1 comment)
|Patch Set 2: Code-Review+1

LGTM
|Patch Set 1:

Not sure if this helps with the shared library issue, my guess after a quick look at the trivial test using gdb is that R2 is not being restored correctly somewhere.  I can probably look into it in more detail later today.  Almost everything on the stack was from runtime.
|Patch Set 4:

I think Cherry's comment is correct.  In libstd.so at the start of each procedure, there is code to initialize R2 and it depends on the value of R12 to do that, and I believe R12 should be the function pointer for the function being called.  The segfault occurs in runtime.recordspan after trying to use an address based off R2, and R2 looks incorrect at that point, because it was computed from R12 at the start of the function and it was wrong.

If I look at the code before the call to runtime.recordspan in the case where it works I see this:
 0x3fffb750f3b0 &lt;runtime.(*fixalloc).alloc+416&gt;:      std     r3,40(r1)
   0x3fffb750f3b4 &lt;runtime.(*fixalloc).alloc+420&gt;:      ld      r11,8(r6)
   0x3fffb750f3b8 &lt;runtime.(*fixalloc).alloc+424&gt;:      ld      r3,0(r11)
   0x3fffb750f3bc &lt;runtime.(*fixalloc).alloc+428&gt;:      mtctr   r3
   0x3fffb750f3c0 &lt;runtime.(*fixalloc).alloc+432&gt;:      mr      r12,r3
   0x3fffb750f3c4 &lt;runtime.(*fixalloc).alloc+436&gt;:      bctrl

In the case that fails the instructions before the call are totally different, and R12 is not being set:
 0x3fffb76f8418 &lt;runtime.(*fixalloc).alloc+408&gt;:      addi    r7,r3,16
   0x3fffb76f841c &lt;runtime.(*fixalloc).alloc+412&gt;:      ld      r7,0(r7)
   0x3fffb76f8420 &lt;runtime.(*fixalloc).alloc+416&gt;:      std     r7,32(r1)
   0x3fffb76f8424 &lt;runtime.(*fixalloc).alloc+420&gt;:      std     r6,40(r1)
   0x3fffb76f8428 &lt;runtime.(*fixalloc).alloc+424&gt;:      ld      r7,0(r11)
   0x3fffb76f842c &lt;runtime.(*fixalloc).alloc+428&gt;:      mtlr    r7
   0x3fffb76f8430 &lt;runtime.(*fixalloc).alloc+432&gt;:      blrl

So now it is using a blrl instead of a bctrl and when that happens R12 does not get set?
|Patch Set 5: Code-Review+1

(1 comment)

Mostly fine, just one question.
|Patch Set 5:

(1 comment)
|Patch Set 6:

Some file changes are needed to enable this on PPC64 though, right?
I had to change gc/ssa.go, ssa/config.go, and gc/regalloc.go where there were GOARCH tests for ppc64le so they also checked for ppc64.  And then add !ppc64 to the live.go and sliceopt.go.  And then it finished with ALL TESTS PASSED.
|Patch Set 7:

Not sure if your ping was intended to get an answer to your previous question -- but I can answer it to the best of my knowledge.  I believe the ppc64le build machine used for golang is a power8 from OSU, and there should also be ppc64 (BE) machines available there.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1

(7 comments)

Updates made and tested.
|Patch Set 5: -Run-TryBot

I can try to create a testcase.
|Patch Set 5:

In reply to Minux' latest comments:

I don't think generating a huge number of text sections makes the solution any simpler, and I think it would create the potential for lots of other issues.  In the Kubernetes case there could be tens or hundreds of thousands of functions meaning that many text sections.  In the golang code that creates elf sections there are not only many linked lists of sections that are searched, there are some arrays with hard coded limits (the array of section headers for one, the section name strings for another.)
|Patch Set 5:

I like Ian's idea of having a linker argument to identify the maximum text section size.  Then there isn't a hardcoded limit to compare against when determining the max size.  I will try that.

Minux you bring up a good point about hitting the limit of text sections now, I hadn't thought of that.  And I will agree there could be a better way to determine when a text section could be split.  I still fear that generating 1000s of them will result in other issues if not in golang then in the external linkers handling them.

What about generating multiple .o files rather than just one huge go.o file, maybe one per imported package (.a file), and then within those files there could be multiple text sections if they are too large.
|Patch Set 5:

What is the text size limit on Intel platforms?  Seems like there is code used for text offsets using int32 fields (e.g., the method offset table for one) so that does that mean it is not expected for a single text section in Intel to get large enough to be affected by this limit or is this handled in some way?

I'm trying to implement a max text section size argument and would like to know what an appropriate default would be.
|Uploaded patch set 6.
|Patch Set 6:

Rebase
|Uploaded patch set 7.
|Patch Set 7:

I've tried to implement a linker option to set the max text section size.  There are a few problems with this approach that make it undesirable.  First is the NSECT limit which is currently at 48.  If the new option is set to a low value then the limit (NSECT) on the number of section headers is exceeded.  Increasing NSECT to a large value leads to errors with the ELFRESERVE size, and at this point I don't know all the impacts of increasing that.  Without changing NSECT or increasing it slightly to avoid problems with ELFRESERVE it takes trial and error to determine what option values to use for the text section size since the total text size isn't known yet.

The second problem with this approach is that using a small text section size doesn't really test the situation where the linker has added trampolines or long jumps between the text sections putting an unknown amount of space between them.  That is the reason for the text section mapping code, so if the linker hasn't done anything, it isn't really being tested.

As part of my change I plan to set NSECT to 128, which is a reasonable value, doesn't cause a problem with ELFRESERVE and allows a large enough number of text sections to handle an excessively sized program on ppc64le.  It is not the absolute maximum but pretty close.  I will also work on generating a test case where a huge program is generated and then compiled and linked.
|Uploaded patch set 8.
|Uploaded patch set 9.
|Patch Set 9: Run-TryBot+1
|Uploaded patch set 10.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

From the ISA:
isel rt,ra,rb,bc // bc is a constant
rt@6 ra@11 rb@16 bc@21

fsel frt,fra,frc,frb // all fregs; same as fmadd and others
frt@6 fra@11 frb@16 frc@21

It has been my assumption that the go asm operand order is the opposite of the power asm operand order.  I'm assuming too that the fsel is correct since it is the same as the fmadd and other 4 operand FP instructions and those probably work.
|Patch Set 1: -Run-TryBot

What you are saying is (go asm in caps, power asm not)

ISEL BC,RA,RB,RT should assemble to isel rt,ra,rb,rc

Posting an update shortly.
|Uploaded patch set 2.
|Patch Set 6: Code-Review+1

LGTM
|Patch Set 5:

Thanks David, yes this is an issue with internal linking and I may have to make this work for ppc64x as well.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 4:

We are aware of the requirements for the instruction set for ppc64 BE.  It was decided in previous discussions by others that ppc64 would be required to support power5 or later.  That does not include ppc970.  This was documented on the go1.7 release page under the ports section.  
As far as Altivec, we need a runtime check to be able to tell when altivec is available.  I will put more information on what has happened so far with this in the issue.
|Patch Set 1: Code-Review+1
|Patch Set 1: Code-Review+1

LGTM, verified the Kubernetes binary now builds successfully with it.
|Patch Set 1:

I'm not sure about that, can you point me to how the assembler handles it if the offset gets to be larger than 16 bits?
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(2 comments)

This is marked ready to submit, should I resolve the questions about the rules and update this?  I don't think there is anything wrong in the way it is done now just inconsistent.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

Made updates based on the comments.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(4 comments)
|Patch Set 1: Code-Review+1

LGTM.  Tried it out on a few programs and I don't see any unnecessary sign extensions.
|Patch Set 1: Run-TryBot+1
|Patch Set 3:

(5 comments)

Looked at the disassembly of the ppc64.s and made comments where they looked different.
|Patch Set 3: Code-Review+1

(1 comment)

OK, LGTM.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

Yes, I have verified that it disassembles correctly for all CR values (using a hacked tool I have to do that).  I don't think there are any testcases yet that do extensive verification that the assembler's encoding of the generated instruction is correct, except for the testcase you mention but it has only 4 or 5 instructions.  There is another asm testcase with more instructions being tested but that only verifies that the assembler doesn't flag any errors, it doesn't try to figure out if the generated instruction is actually correct.
Once we get the disassembler working then we can add an example to a disassembly test to verify this.
|Patch Set 2:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3:

(8 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

Updates made based on Michael's comments.
|Patch Set 6:

Yes I see it, I'm checking....
|Patch Set 6:

Typo introduced in my last change to add tabs.  Fixing it now.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 4:

Does this get automatically merged into the src/cmd/vendor directory sonehow or does something explicit have to be done to make that happen?
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

I know this is late but LGTM and thanks for doing this.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

What about a testcase?
|Patch Set 4: Code-Review+1

After chatting with Carlos on this, I see how a testcase would be difficult.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 1:

Is there any significance in the name asm7.s?  The number usually associated with ppc64x is 9, but if this is just a counter then it doesn't matter.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 2:

Yes, I think for Go 1.9 this can be changed so trampolines are done for both internal and external linking on ppc64le.  I felt it was too later to try and do it in Go 1.8 since the previous fix for external linking on ppc64le had been available and used for a while.
|Patch Set 1:

I agree this should be enabled.  I will test it out too.
|Patch Set 1: Code-Review+1

Worked for me.
|Patch Set 1:

I agree, I will also test it.
|Patch Set 1: Code-Review+1

Worked for me.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1
|Patch Set 3:

(1 comment)

I will look into updating the cmd/link/linkbig_test.go testcase to verify this issue.
|Patch Set 3:

I have tried creating a testcase for this without success.  The existing testcase where lots of asm code is used to generate the huge text section does not demonstrate this problem.  How important is this to have a testcase?
|Uploaded patch set 4.
|Patch Set 4:

This problem occurs when there are too far branches on ppc64x with external linking.  Cherry did a fix for the same problem on arm using trampolines for both internal and external linking and asked that I change ppc64x so they are consistent.  I plan to work on that in Go 1.9, and I *believe* that the ftab error won't happen if there are trampolines.  I don't have an issue yet but should and will create one. So the long answer to your question is that the ftab problem should get fixed when that is done, but for now this is a simple low risk fix.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 2: Run-TryBot+1
|Patch Set 3: Run-TryBot+1
|Patch Set 3: -Run-TryBot

(7 comments)
|Patch Set 3:

He should remove the code related to VRSAVE.  Otherwise the rest LGTM.
|Patch Set 4: Run-TryBot+1
|Patch Set 4: -Run-TryBot

(1 comment)
|Patch Set 6: Run-TryBot+1
|Patch Set 6: Code-Review+2
|Change has been successfully cherry-picked as 06e5a558207f1d2bc6f61365b87925120c8549b3 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1: -Run-TryBot

I looked at the objdump and saw that there 93 not,and pairs replaced by andc in the keccafF1600 function.  There was an improvement of 5-7% in the sha3 benchmarks.  If you want me to post real results I'd have to redo.  

This occurs in other places too but sha3 was reported to me first.
|Change has been successfully cherry-picked as 695f12c21a217e0116a80c2c1a518d382cfea22e by Lynn Boger
|Patch Set 1: Run-TryBot+1
|Patch Set 1: Code-Review+2
|Change has been successfully cherry-picked as 85ecc51c4852c49b5e5bc4a52067210c58e266e0 by Lynn Boger
|Patch Set 1: Run-TryBot+1
|Patch Set 1: -Run-TryBot

I agree with Minux' comment, as I tried to say in the issue for this change yesterday.  Just changing the function alignment won't help everything because if there are functions with high use loops that previously were aligned optimally by luck they might not be aligned after this change and those will show a degradation.

Maybe this isn't possible for other reasons, but if we had a way to align only those functions that would benefit, that would reduce the code bloat but still provide the benefit where important.
|Patch Set 1:

I built the binaries in Kubernetes with and without this change to compare sizes.

2 binaries increased in size by 2.5%
19 binaries increased in size by .2% - .4%
9 binaries increased by &lt; .1%
|Patch Set 1:

We would like this change, but we can't provide any consistent benchmarks results that show that this change by itself improves performance.  When a benchmarks contains a key loop whose alignment goes from good to bad, then performance will get worse.  And right now we have nothing to force loops to be aligned optimally, so loop alignment is random.  If this is OK without performance results, we will put it in.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 09b71d563a53766ef2ab34beac6ddaea48c56783 by Lynn Boger
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

So why did the trybots work?
|Patch Set 1: -Run-TryBot

VORL and VANDL were just added to the assembler before 1.8 was frozen.  So no one else was using it yet.  The change to modify the name just went in.  It isn't generated by the compiler anywhere, only in asm files.
|Patch Set 1:

Is this OK?  Paulo and I both rebuilt and tested aes again with this change.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

If acceptance of the proposal will take a while I can just implement it both ways and remove the old way as well as others when accepted.
|Change has been successfully cherry-picked as 44053de36509f4634befbf7ad442b5debd0f0cdf by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1:

Not sure what's happening now, when I rebase and remove the change in inl.go it no longer hangs.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)

I uploaded a new change but the build still hangs if I enable the check in inl.go.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1

(5 comments)
|Uploaded patch set 7: Commit message was updated.
|Patch Set 8: Patch Set 7 was rebased
|Uploaded patch set 9.
|Patch Set 9: Run-TryBot+1
|Uploaded patch set 10: Commit message was updated.
|Patch Set 10:

&gt; (1 comment)
 &gt; 
 &gt; RELNOTE=power8 requirement

Did you want the RELNOTE in the commit message?
|Uploaded patch set 11: Commit message was updated.
|Change has been successfully cherry-picked as 95c9583a182ff2433fde9fae98f5dde9edd337e1 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3:

Here are some examples of what the output looks like with my latest update:

In the test from cmd/go:
go_test.go:260: running testgo [list -f {{.Stale}}:{{.StaleReason}} p2]
	go_test.go:275: standard output:
	go_test.go:276: true:newer source file /tmp/gotest568737091/d2/src/p2/p2.go
		
	go_test.go:260: running testgo [list -f {{.Stale}}:{{.StaleReason}} p1]
	go_test.go:275: standard output:
	go_test.go:276: true:stale dependency p2: newer source file /tmp/gotest568737091/d2/src/p2/p2.go

If I modify the date for sys.a and use &quot;go list&quot; here is what I see:
go list -f {{.StaleReason}} runtime
stale dependency atomic: newer dependency /home/boger/golang/stale/go/pkg/linux_ppc64le/runtime/internal/sys.a 

go list -f {{.StaleReason}} runtime/internal/atomic
newer dependency /home/boger/golang/stale/go/pkg/linux_ppc64le/runtime/internal/sys.a

And the output from the test that is failing in the builders:

--- FAIL: TestCrashHandler (0.15s)
	crash_test.go:167: go list -f {{.Stale}} runtime:
		true
	crash_test.go:172: go list -f {{.StaleReason}} runtime:
		stale dependency atomic: newer dependency /home/boger/golang/stale/go/pkg/linux_ppc64le/runtime/internal/sys.a 

This tells us that the atomic package is the stale dependency, and the reason is that sys.a is newer than atomic.a.
|Patch Set 3:

As I've looked more at isStale I see there are various reasons why a package could be stale other than the date.  So I think it would be best to have a detailed stale reason so we know exactly what the problem is.  To me just saying &quot;stale dependency&quot; when there could be many dependent packages doesn't help.
|Patch Set 3:

I agree updating the testcase to provide more information could help.  But I still think the StaleReason could be improved too because what it provides not is not very helpful.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1: -Run-TryBot

(1 comment)
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as ea48c9d2325dfe3ccd64a2bfeea9516cb5a1d2e3 by Lynn Boger
|Patch Set 2:

Couldn't you add an example to the asm testdata with the sh values that previously were incorrect?
|Patch Set 2: Run-TryBot+1
|Patch Set 2: -Run-TryBot

&gt; &gt; Couldn't you add an example to the asm testdata with the sh
 &gt; values
 &gt; &gt; that previously were incorrect?
 &gt; 
 &gt; There is an example with SH=52 in there already. But that doesn't
 &gt; barf.
 &gt; 
 &gt; I'm not a test expert, so I don't know why.

Apparently the testcase only verifies that the assembler accepts the opcode and operands but doesn't verify that the assembled instruction is correct.
|Patch Set 2: Code-Review+2
|Change has been successfully cherry-picked as c12cd31a3326e6b2119525cd07cebc6d6e1b52ee by Lynn Boger
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as e54bc92a2ca9a3726dcf5a72cd7e993766e16dd8 by Lynn Boger
|Patch Set 2:

(1 comment)
|Patch Set 3: Code-Review+2
|Patch Set 1: Run-TryBot+1
|Patch Set 2:

(4 comments)
|Patch Set 4: Run-TryBot+1
|Patch Set 4: Code-Review+2

LGTM
|Change has been successfully cherry-picked as d60166d5eea5084e0957e9028237cc87ecadbf7d by Lynn Boger
|Patch Set 14:

How is this tested on all platforms?  For the most part the ppc64x values look OK but some are different and I don't know if that could be a problem.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; Lynn: if you think this is a worthwhile change could you post some benchmark numbers that I can add to the commit message? As well as the math package the vendored copy of poly1305 should show some improvement too. Thanks!

Yes, it looks like it helps with several, I'll post some numbers in the issue.
|Patch Set 3:

(1 comment)
|Patch Set 3: Run-TryBot+1

(1 comment)
|Patch Set 4:

LGTM but would like Carlos to look at it too.
|Patch Set 4: Code-Review+2
|Change has been successfully cherry-picked as 17570a9afb5dc2d7d11eb3e132917e8d153a1ec9 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(7 comments)

Changes made as suggested.
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

(9 comments)
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1

Had to rebase after other changes to PPC64.rules.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(2 comments)
|Patch Set 8:

(1 comment)
|Uploaded patch set 9.
|Patch Set 9: Run-TryBot+1

(1 comment)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Patch Set 12: Run-TryBot+1
|Change has been successfully cherry-picked as 23bd9191361cccab5ca03aa2d65989efdf9d839c by Lynn Boger
|Patch Set 1: Run-TryBot+1

LGTM, we were able to build all the Kubernetes binaries without issue.
|Patch Set 2: Code-Review+2
|Patch Set 3:

We'd like this backported to 1.8.  Do I need to create an issue to do that?
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

I will add performance results to the commit message ....
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(6 comments)

Updates made.
|Patch Set 4: Run-TryBot+1
|Patch Set 4:

&gt; Patch Set 2:
&gt; 
&gt; (7 comments)
&gt; 
&gt; I'm a little worried that the existing crc32 tests don't hit all the edge cases in this implementation.

I'll see what I can find for more testcases.
|Uploaded patch set 5.
|Patch Set 5: Run-TryBot+1
|Uploaded patch set 6.
|Change has been successfully cherry-picked as b6cd22c277f49df493e3033430c32e56ecb949e3 by Lynn Boger
|Patch Set 1: Code-Review+1
|Patch Set 2: Run-TryBot+1
|Change has been successfully cherry-picked as c644a76e1f215d4ae2b210e7c9134b2291077ad3 by Lynn Boger
|Patch Set 1: Code-Review+1

LGTM
|Change has been successfully cherry-picked as 189053aee2705a16ed660b7e036e9b6d825c0e9b by Lynn Boger
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(4 comments)

Doing ldu, stdu pairs is not efficient on ppc64x.  That was the way LoweredMove was implemented before and is the reason I made this change and got a big improvement in performance.  The duffcopy would be done the same way as the previous LoweredMove and would not perform well.
|Change has been successfully cherry-picked as a8b2e4a630a5991e91095d85c604dc1fa23c1e56 by Lynn Boger
|Patch Set 1: Code-Review+1
|Change has been successfully cherry-picked as 4a1140472b3093edf9cd653666242393d7f4c2bd by Lynn Boger
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

&gt; Patch Set 1: Code-Review+1
&gt; 
&gt; (1 comment)

Based on the comments in the issue, syscall.Signal and syscall.Errno will be added to sys/unix but syscall.SysProcAttr will not.
|Uploaded patch set 2.
|Patch Set 2:

Done
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1

There was some code earlier in build.go that I deleted because it was the same loop duplicated unnecessarily.  It did not match what was in golang.
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

I noticed that Keith recently changed some of the rules in PPC64.rules and I didn't understand why.  As far as alignment needed for the generated instructions I think what is here is now correct.
|Patch Set 1: Run-TryBot+1
|Patch Set 1:

(2 comments)
|Patch Set 2: Code-Review+2
|Change has been successfully cherry-picked as d6dd7ce1c5eb0df4694f9f8ad09dc47d8d689690 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Change has been successfully cherry-picked as 9191c0b3fdd7b129007fab66f9034d595abb3876 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 7d4cca07d2c6890fb39635aaa5b3b8d902bf2cbf by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

Testcases added for ROTL, ROTLW
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(5 comments)
|Uploaded patch set 5.
|Patch Set 4:

Try again :(
|Patch Set 5: Run-TryBot+1
|Uploaded patch set 6.
|Patch Set 6: Run-TryBot+1

(3 comments)
|Change has been successfully cherry-picked as 9248ff46a82aec26164a775f3eba43e3fcfb5651 by Lynn Boger
|Patch Set 2: Run-TryBot+1
|Patch Set 2:

(4 comments)
|Patch Set 3:

(1 comment)
|Patch Set 4: Run-TryBot+1
|Patch Set 4: Code-Review+2
|Change has been successfully cherry-picked as 9459c03b29937d236a8b61e452cb02d01c7b8559 by Lynn Boger
|Patch Set 1: Run-TryBot+1
|Patch Set 1: Code-Review+1

LGTM
|Change has been successfully cherry-picked as 48582e1524ab165a179cf0199f0049e2b3019880 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2: Run-TryBot+1

(7 comments)
|Patch Set 2:

(2 comments)
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; (2 comments)

As far as I can tell, I have made the requested updates.  Have I missed anything?
|Change has been successfully cherry-picked as 8304d10763650eb3f50553fa689500f09d8fdd06 by Lynn Boger
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Change has been successfully cherry-picked as 6910e1085b191d6b202a93fafb019ff95dcc6f11 by Lynn Boger
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Patch Set 1: Run-TryBot+1
|Uploaded patch set 2.
|Patch Set 2:

(3 comments)
|Patch Set 2:

I also updated the function call assignAddress since passing and returning the values for n and sect are no longer needed.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Patch Set 3: Run-TryBot+1

I have updated this based on the comments in 20492.  The text sections will continue to be split.  For buildmodes where r2 is not guaranteed to contain the TOC address, a trampoline will be generated, otherwise not.  This seemed to make more sense than just to create trampolines for all buildmodes even if they weren't necessary.
|Uploaded patch set 4.
|Patch Set 4: Run-TryBot+1

(3 comments)
|Patch Set 4:

(1 comment)

I'm also working on the link testcase for this, the size needs to be a bit larger to identify this problem.
|Patch Set 4:

(1 comment)
|Change has been successfully cherry-picked as 738739f56543a768be1eeb9a9e33f3252f4c6da1 by Lynn Boger
|The thing that I find problematic about  h or n is that the code example never actually says host or name, and so the reader is left guessing what it stands for. With 'a' that's not a problem because of both IPAddr and addrs--the mental mapping is effortless in that case.
|I really like this comment. It both avoids having a gigantic hard-to-read number, while also giving just enough context about shift so that people could go find out more if they want to.
|I suspect that a large portion of people who are not familiar with the shift operator also are not familiar with binary numbers (this is surprisingly common among self-taught web developers).

How about using scientific notation to create a big number instead, sidestepping the whole question of shifting?
|Done
|Done
|Done
|It's a bit confusing to not have a clear distinction between message and method, like in SmallTalk. Here we're talking about the method signatures, but farther down we start talking about implementations.
|That would work for me. Would it be correct, though?
|Ah, thanks! I was sure that I was missing some important distinction.
|It's not relevant to this change list, but I've found it difficult to figure out when to say &quot;satisfies&quot; and when to say &quot;implements&quot;. (A type implements and a value satisfies?)
|s/one liners/one-liners/ I think.

http://www.merriam-webster.com/dictionary/one-liner
|How about &quot;As with the `for` statement&quot;?
|Done
|Oh, right. That's the same error.
|Done
|Ahhh. I figured there was a better way. Thanks!
|Ah, yepp. I'll make that change.

I made a suggestion in this issue for how we might update the code. https://github.com/golang/go/issues/4284
|Yeah, twice is probably enough. I'll nuke it.
|Yeah, good call, thanks.
|Yeah, the &quot;and sometimes less&quot; is good here (especially considering the tour as it currently runs in the browser has 32-bit ints). I'll change this.

A spoiler section would be neat.
|Yeah, let me give that a try.
|Yeah, good call. Done.
|I went back and forth on this. Since rand.Intn() is only called once in the example, referring to a sequence could be confusing.
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(1 comment)
|Uploaded patch set 3.
|Patch Set 2:

(2 comments)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(2 comments)
|Patch Set 2:

(2 comments)
|Patch Set 1:

(2 comments)
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Patch Set 3: Reverted

This patchset was reverted in change: I17f935521b76a35db5967cdb5e9b87bd0ab8a1bb
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 3:

Thanks for catching this. I've submitted a commit that reverts the change.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

Hm. Now I remember why I was doing the awkward build -o thing. When I say `go install` I get the following error:

can't load package: package golang.org/x/tour: no buildable Go source files in $GOPATH/src/golang.org/x/tour

I also remember trying it with`go install gotour`.

Having given this another moment of thought, though, that should clearly be an import path.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

good catch, thanks!
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 1.
|I wanted to use the ignoreFail bool, but the behavior is kinda weird. I'm not sure what's it's being used for
|Do you think this patch is still worth it? The original issue stated only if it was trivial to fix, and it's kind of becoming a gross amount of parameter checking. I just want to be sure you all really want this?
|Removed this, and found another better way, also added a test for a comment only template.
|I wasn't sure what file to put these in, but I'm pretty sure this is wrong.
|added a specific test for this in the most recent update :)
|Returning the length might be weird, but didn't know if you wanted to expose `text`.
|COPY is safer than ADD :)
|You can just replace all the ADD with COPY it works the exact same way
|I can have a script do the clone as well inside the container, unsure exactly how you usually do the releases
|omg yesssss I was going to be like &quot;hey brad I have an idea you might hate&quot;, but omg yes I wanna do that&quot;
|So FYI @bradfitz, this binary will need to compiled statically for it to work on alpine linux because musl c
|Yeah It's not going to work until we statically compile it same goes for the kubelet buildlet binary(?) that gets injected
Are those also in this repo or how do they get updated?
|dibs if evan doesn't want to because you know I'm &quot;totes OCD&quot; about this
|latest is implicit but I will make this and the others explicit
|yeah but i actually like being explicit so ill add it back
|I think it needs a GCP service account as well so not really sure if this is helpful
|I have no idea what the command is running in the screen session...
|Patch Set 1:

Yes I like this compromise :) Thanks!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 4: Patch Set 3 was rebased
|Patch Set 5:

Thanks!!
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

Hmm I tested locally but trying again
|Uploaded patch set 4.
|Patch Set 2:

ok this is super weird but `_, ok := err.(*build.NoGoError)` for that error is not working anymore, but I'm looking into why? maybe something changed on rebase. The weird thing is that is the type of error.
|Uploaded patch set 5.
|Patch Set 5:

ok I figured out the issue but I'm unsure if I like it
|Uploaded patch set 6.
|Patch Set 6:

This is also changing the behavior of `go build` to not error on test only files and I'm unsure if that's ok. This change isn't exactly trivial
|Uploaded patch set 7.
|Uploaded patch set 8.
|Patch Set 8:

(1 comment)
|Uploaded patch set 9.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.: Commit message was updated
|Uploaded patch set 3.
|Patch Set 2:

(1 comment)

&gt; Patch Set 2:
&gt; 
&gt; (5 comments)
&gt; 
&gt; R=go1.8
&gt; 
&gt; This is too subtle for this point in the cycle.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5: Patch Set 4 was rebased.
|Patch Set 5:

I rebased 0:)
|Uploaded patch set 1.
|Patch Set 1:

??
|Patch Set 1:

So I think if you clone the repo on Windows it is smart about the symlink... but I will try that and alternatively look into the git config things
|Abandoned

Going to close, Windows git doesn't smart do symlinks and I can't find a way to save the mailmap.file configuration so I think maybe if anything this could be added to docs if you all are interested but I'm not sure how often it would even be used
|Patch Set 7:

(1 comment)
|Patch Set 7:

(1 comment)
|Patch Set 11: Code-Review+1

lgtm!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

ok I have attempted to make this look more like the other README, script etc in this repo
|Uploaded patch set 7.
|Patch Set 7:

Is there an IBM Z box somewhere we can test the cross compiled binary on? I just want to make sure it actually works.
|Patch Set 7:

Adding @estesp, can someone on your end possibly try this? Thanks!
|Patch Set 7:

building on x86 box:

git clone golang.org/x/build
# check out this CL
git fetch https://go.googlesource.com/build refs/changes/42/27242/7 &amp;&amp; git checkout FETCH_HEAD
# build the dockerfile
cd env/linux-s390x-stretch
make
# make the release tarball
docker run --rm -it -v $(pwd)/artifacts:/artifacts gobuilders/linux-s390x-stretch build-release.sh 0d81858

in the artifacts directory will be a release tarball of the go 1.7 binary &amp; source for s390x
taking that tarball to a s90x box and making sure go works once unpacked
(or i can give you a tarball, how much do you trust me :)
|Uploaded patch set 8.
|Patch Set 8:

This is great! Thanks so much!
|Patch Set 1: Code-Review+1

lgtm!
|Patch Set 1: Code-Review+1

good catch LGTM
|Uploaded patch set 1.
|Patch Set 1:

ok ok I will run the builders :)
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

Just to explain a bit, after cleaning up the installs I realized systemd is not in the container? And then I wondered as to why this container could not just be started with the process as stage0 not using a systemd script. But maybe I am missing something as to how the builder works?
|Patch Set 1:

Oh ok that makes sense so making the size smaller doesn't matter then
|Abandoned
|Uploaded patch set 1.
|Abandoned

makes sense I was not too pleased with this fix myself :)
|Uploaded patch set 1.
|Patch Set 1:

really just for all the warm fuzzy feeling of making something smaller 0:)
but totally fine by me to close :)
|Patch Set 3: Code-Review+1

lgtm!
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 1: Code-Review+1

ah thanks!
|Uploaded patch set 1.
|Patch Set 1:

Not sure if you wanted it added to the arm/ppc/s390x etc builders as well.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

So this will build but the cmd/go tests are failing on ones that I assume are trying to build some &quot;C&quot; files because it's obviously failing on a muslc differentiation:

     undefined reference to `__libc_free'

in TestGoTestRaceFailures, TestGoTestRaceInstallCgo, TestTestEmpty
|Patch Set 4:

(1 comment)
|Patch Set 4:

I found it... should I change the Makefile to make sure it's compiled statically?
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

Before:
REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
go-builders/linux-x86-sid        latest              9b9e88b7655c        55 seconds ago      1.12GB
go-builders/linux-x86-std-kube   latest              91a5a7a8cb1f        8 seconds ago       986MB

After:
REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
go-builders/linux-x86-sid        latest              aab9e758925e        7 seconds ago       731MB
go-builders/linux-x86-std-kube   latest              8309123c2745        2 minutes ago       577MB
|Uploaded patch set 2.
|Patch Set 3:

Let's do more! I was born for this!
|Patch Set 3:

will do!
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Patch Set 1:
&gt; 
&gt; (3 comments)
&gt; 
&gt; Can you also update dashboard/builders.go and convert it from VMImage to KubeImage?

ah will update
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)
|Uploaded patch set 2.
|Patch Set 1: Code-Review+1
|Uploaded patch set 1.
|Patch Set 1:

I figured I would start with this one matching the others, then update them all to be more minimal...
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Sigh, this is breaking with the BSD version of base64 because the short version of the `--decode` flag is `-D` and the short version with GNU base64 is `-d`, so I get this error on Macs:
&gt; 
&gt; docker run --rm stage0/coordinator:latest base64 /go/bin/coordinator &#124; base64 -d &gt; coordinator
&gt; base64: invalid option -- d
&gt; Usage:	base64 [-hvD] [-b num] [-i in_file] [-o out_file]
&gt;   -h, --help     display this message
&gt;   -D, --decode   decodes input
&gt;   -b, --break    break encoded string into num character lines
&gt;   -i, --input    input file (default: &quot;-&quot; for stdin)
&gt;   -o, --output   output file (default: &quot;-&quot; for stdout)
&gt; write /dev/stdout: broken pipe 
&gt; 
&gt; Can we switch it up to use `--decode` instead? That should work with both versions.

Omg Macs LOL yes
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Neat, so if I'm understanding this correctly, we create a stage Docker container solely to compile the project, then copy it out of the Dockerfile (via the base64 trick) and into the scratch Dockerfile?

Yup, it's pretty hacky but it's my temporary solution til the features in the latest docker release land
|Uploaded patch set 4.
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; Getting this error on the CA cert step on my Mac
&gt; 
&gt; docker run --rm stage0/coordinator:latest base64 /etc/ssl/certs/ca-certificates.crt &#124; base64 -d &gt; ca-certificates.crt
&gt; base64: invalid option -- d
&gt; Usage:	base64 [-hvD] [-b num] [-i in_file] [-o out_file]
&gt;   -h, --help     display this message
&gt;   -D, --decode   decodes input
&gt;   -b, --break    break encoded string into num character lines
&gt;   -i, --input    input file (default: &quot;-&quot; for stdin)
&gt;   -o, --output   output file (default: &quot;-&quot; for stdout)
&gt; write /dev/stdout: broken pipe

oh eff i forgot to replace those copies with docker cp
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Patch Set 5:

&gt; Patch Set 5:
&gt; 
&gt; (1 comment)

good catch
|Uploaded patch set 6: Commit message was updated.
|Uploaded patch set 7.
|Patch Set 7:

ping :)
|Uploaded patch set 1.
|Patch Set 1:

It's slower on osx but can change
|Patch Set 1:

The container also still needs to be running
|Patch Set 1:

Interesting I stand corrected, happy to change it, I still think one command is better than 3 tho
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; Interesting I stand corrected, happy to change it, I still think one command is better than 3 tho

I guess we could
docker create
docker cp
docker em
That way we don't even start it but still it's going to take more time than just the cat haha
|Uploaded patch set 2.
|Uploaded patch set 3.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; (1 comment)
&gt; 
&gt; Do we need to forward through ports somewhere? This listens on 80, 25 and 443, or others, depending on the flags you pass through.

It makes a static binary :)
The ports can be set at runtime we don't need them in the Dockerfile unless we want to explicitly set them, but honestly EXPOSE in the Dockerfile doesn't do anything, you still would need to at least say publish all ports at runtime.
|Patch Set 3:

&gt; Patch Set 3:
&gt; 
&gt; Could we add like a &quot;serve&quot; target to the Makefile with the right port flags or a README that says &quot;start the server locally with &quot;docker run &lt;image&gt; --publish&quot; and the right flag combo?
&gt; 
&gt; (sorry I am still pretty new to local docker development)

yeah for sure, I can do the docker flags stuff but do you know if pubsubhelper needs any specific flags
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; I had no clang binary *anywhere* in the old image, so I don't see how a symlink helps.
&gt; 
&gt; But I tried it:
&gt; 
&gt; Before:
&gt; 
&gt; $ docker run -ti 550a0b2af4ec /bin/bash
&gt; root@ef4885c53b2c:/# find / &#124; grep -i clang
&gt; /etc/apt/sources.list.d/clang-deps.list
&gt; 
&gt; After:
&gt; 
&gt; $ docker run -ti e1b3ee9e7c6d /bin/bash
&gt; root@535389ff7a36:/# find / &#124; grep -i clang
&gt; /etc/apt/sources.list.d/clang-deps.list
&gt; /usr/bin/clang++
&gt; /usr/bin/clang
&gt; root@535389ff7a36:/# which clang
&gt; root@535389ff7a36:/# which clang++
&gt; root@535389ff7a36:/# gcc
&gt; bash: gcc: command not found
&gt; root@535389ff7a36:/# clang
&gt; bash: clang: command not found
&gt; root@535389ff7a36:/# echo $PATH
&gt; /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&gt; root@535389ff7a36:/# ls -l /usr/bin/clang
&gt; lrwxrwxrwx 1 root root 18 Apr 13 16:23 /usr/bin/clang -&gt; /usr/bin/clang-3.9
&gt; root@535389ff7a36:/#  
&gt; 
&gt; How does it work for you?

bleh the apt sources were wrong... updating and verifying now
|Uploaded patch set 3.
|Patch Set 3:

it unfortunately still needs the symlinks... *cries*
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

Let me know if this was kinda what you had in mind
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 4:

&gt; Patch Set 4:
&gt; 
&gt; (1 comment)

maybe I like to &quot;mom tab&quot; people :P
will change

somethimg something linux stupid middle tap never works
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; (1 comment)

Is there no coordinator binary locally? It looks like the docker cp command succeeded .. is this on a Mac or Linux?
|Uploaded patch set 1.
|Patch Set 1:

There were no images that used this as the base only linux-x86-std-sid :)
|Uploaded patch set 1.
|Patch Set 1:

(1 comment)

Sorry completely forgot about this
|Uploaded patch set 2.
|Patch Set 2:

&gt; Patch Set 1:
&gt; 
&gt; (1 comment)

Updated with User=gopher and added the PATH enviorment variable, hopefully this should work
|Uploaded patch set 3.
|Patch Set 5:

&gt; Patch Set 5:
&gt; 
&gt; Thanks! I changed &quot;Closes&quot; to &quot;Fixes&quot; in the commit message, per Go convention.

\o/
|Uploaded patch set 1.
|Patch Set 1:

It's all running in the VM under systemd now, I just realized govc will not work without the following env variables, so I am sourcing them from a file on the host since the information is secret.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

&gt; Patch Set 1: Code-Review+2
&gt; 
&gt; (1 comment)

will do!
|Uploaded patch set 3.
|Uploaded patch set 4: Commit message was updated.
|Patch Set 4:

&gt; Patch Set 3:
&gt; 
&gt; (1 comment)

my b sorry
|Done as suggested. I was thinking using a different struct
would be more readable, but it is ok to do like this.
|With __mips64 defined, it could also be n32 ABI, _MIPS_SIM == 2 (yes, 4 seems not common), so it might be still good to check it uses n64 ABI. However, for this particular definition here (typedef struct user PtraceRegs), it should be same for all ABI. We may just check defined(__mips__) so that it would also work for (future) mips32?
|Done. Also changed zsyscall_linux_mips64{,le}.go in CL 14448.
|Done
|On MIPS64, it is actually defined as [2]uint64:

#define _NSIG           128
#define _NSIG_BPW       (sizeof(unsigned long) * 8)
#define _NSIG_WORDS     (_NSIG / _NSIG_BPW)

typedef struct {
        unsigned long sig[_NSIG_WORDS];
} sigset_t;

The second element is not used, though. But we do need the right size of the struct for some syscall to work correctly. It seems specific to MIPS?
Might be ok with one uint64 on other 64-bit systems?
|Done
|Thanks for pointing it out. Sorry, I overlooked that. Fixed now.
|Done. Thanks.
|I tried to use cgo -godefs generate this file. It works, but I have to change defs_linux.go and defs3_linux.go, which would add more code copying. And the generated code needs some hand modification:
for example, the generated code is
type Itimerval struct {
        Interval Timeval
        Value    Timeval
}
while it needs to be
type itimerval struct {
        it_interval timeval
        it_value    timeval
}

So I just combined the two hand-written files (be and le).
|Agree. I'll combine them. These files was manually written before cgo -godefs works on mips64. Since it works now, I could also generate them automatically (probably with manual patches). Should we do that?
|Since we cannot change the API, Callers() needs to return a set of return pc, and we cannot change it. Maybe we could define (and export) a constant (PCBackup?), which is to be  subtracted from the return pc when backing up to the CALL instruction? Its value would be 8 for mips64, 4 for ppc64 and arm, etc.

Caller() is fine -- we do the backup here.

p.s. now this is in CL 14990.
|There are only two places dealing with the delay slots, here and traceback.go:523, where we are backing up pc to the CALL instruction. gentraceback seems not to do that. And at the other place (traceback.go:523), the pc is g.gopc, not from gentraceback.
|Now they are restructured, in CL 14991, 14992, 14993.
|Doing so would be good. But that would require restructuring the existing files, which I was afraid to do.
|Yes, I did 'go generate' these files. But I also removed lines for unsupported architectures to minimize the change of existing files. Should I just leave them as generated?
|Done
|Done
|Right. I have removed it, will push the change shortly.
|Done
|Done
|There is no official Plan 9 MIPS64 compiler publicly available. There are 32-bit MIPS compilers, va/c/l for big endian, and 0a/c/l for little endian. I did a port for MIPS64 on Plan 9 though, based on an old incomplete work of 4a/c/l.
|Right. But REGMIN etc. are not actually used in the current tool chain. I deleted the unnecessary constants and comments.
|The API requires runtime.Callers to return a set of return pc, so we cannot skip over the delay slot there. I think the way to achieve uniformity would be export a constant (or function) for pc backing up, or export another function returning a set of pc of CALL instructions. Any suggestions? Thanks.
|Maybe &quot;#p/&quot;? Just in case that /proc is mounted with something else...
|Uploaded patch set 1.
|Patch Set 1:

Sorry, it was my mistake in using iota. The fix is below, which would bring it back to 16k limit. Could someone submit a CL? I am traveling... Thanks!

diff --git a/src/cmd/internal/obj/mips/a.out.go b/src/cmd/internal/obj/mips/a.out.go
index f271a87..5523b7a 100644
--- a/src/cmd/internal/obj/mips/a.out.go
+++ b/src/cmd/internal/obj/mips/a.out.go
@@ -112,7 +112,9 @@ const (
 
        REG_HI
        REG_LO
+)
 
+const (
        // co-processor 0 control registers
        REG_M0 = obj.RBaseMIPS64 + 1024 + iota
        REG_M1
@@ -146,7 +148,9 @@ const (
        REG_M29
        REG_M30
        REG_M31
+)
 
+const (
        // FPU control registers
        REG_FCR0 = obj.RBaseMIPS64 + 2048 + iota
        REG_FCR1
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Patch Set 4:

With your CL 14476, it works well now.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7.
|Patch Set 7:

&gt; I saw something go by about delay slots. What is the strategy
 &gt; there? I would like to just fill them with NOPs for now and avoid
 &gt; the various complications.

In the current implementation, the delay slot is filled with a non-conflict instruction before the branch (except floating point branches which are always filled with NOP). I can change it to always fill NOP (at least for now).
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)

&gt; (1 comment)
 &gt; 
 &gt; we probably also need to add a relocation
 &gt; test for mips64 ELF.
 &gt; 
 &gt; please see relocationTests in debug/elf/file_test.go.

I can look into this. How does the testdata generated? like this?
gcc -c -o go-relocation-test-gcc493-mips64le.obj hello.c
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6.
|Patch Set 6:

&gt; &gt; &gt; please see relocationTests in debug/elf/file_test.go.
 &gt; &gt;
 &gt; &gt; I can look into this. How does the testdata generated? like this?
 &gt; &gt; gcc -c -o go-relocation-test-gcc493-mips64le.obj hello.c
 &gt; 
 &gt; yes.

test cases for mips64 BE and LE added.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 14: Patch Set 13 was rebased.
|Uploaded patch set 15: Patch Set 14 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10.
|Patch Set 10:

(2 comments)
|Patch Set 10:

(1 comment)
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

&gt; &gt; &gt; I suggest if we settled on a way to reduce the number
 &gt; &gt; &gt; of files, we first do a pass over the existing files.
 &gt; &gt;
 &gt; &gt; SGTM.
 &gt; 
 &gt; Let's discuss the reorganization of arch-specific
 &gt; files on #12563.
 &gt; 
 &gt; The suggest we split this CL into two parts:
 &gt; 1. assembly files
 &gt; 2. Go code changes
 &gt; 
 &gt; The size of each new CL should be about half the size
 &gt; of this one.
 &gt; 
 &gt; We can further split the Go changes into manual and
 &gt; automatic generated parts, but it won't reduce the CL
 &gt; size much.

As suggested by Minux, this CL is split into two CLs. This one
only contains the Go code, and CL 14467 has the assembly.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Patch Set 4:

(5 comments)

&gt; (10 comments)
 &gt; 
 &gt; This CL is still too big.  It wraps up all kinds of different
 &gt; changes into one.  We can proceed more quickly if you separate out
 &gt; small and obvious changes from MIPS-specific code from excess code
 &gt; copying that we need to discuss.

Thank you for reviewing. I will further split this CL.
|Uploaded patch set 5.
|Patch Set 4:

(3 comments)
|Uploaded patch set 6.
|Uploaded patch set 7.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6.
|Patch Set 3:

(2 comments)
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Patch Set 10:

(1 comment)
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8.
|Uploaded patch set 9: Patch Set 8 was rebased.
|Uploaded patch set 10: Patch Set 9 was rebased.
|Uploaded patch set 11: Patch Set 10 was rebased.
|Uploaded patch set 12: Patch Set 11 was rebased.
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(3 comments)
|Uploaded patch set 3: Patch Set 2 was rebased.
|Uploaded patch set 4.
|Uploaded patch set 5: Patch Set 4 was rebased.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Uploaded patch set 9.
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Patch Set 11:

(1 comment)
|Uploaded patch set 13: Patch Set 12 was rebased.
|Uploaded patch set 1.
|Uploaded patch set 2: Patch Set 1 was rebased.
|Uploaded patch set 3: Patch Set 2 was rebased.
|Patch Set 1:

(1 comment)
|Uploaded patch set 4: Patch Set 3 was rebased.
|Uploaded patch set 5.
|Uploaded patch set 6: Patch Set 5 was rebased.
|Uploaded patch set 7: Patch Set 6 was rebased.
|Uploaded patch set 8: Patch Set 7 was rebased.
|Abandoned

This CL is no longer needed.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 9:

(1 comment)
|oh you're right. I'll remove.
|added comment.
|Done
|could it though? a statement may only have a parentStmt if it is transaction-specific. So all statements with a parentStmt set have len(css) == 0.
|Done
|Done
|Done
|Done
|Done
|Done
|If a statement is closed, it cannot be reused. It must be re-prepared.
This test is just checking that nothing blows up if we call tx.Stmt with a closed statement.

I will update the test name to be more clear.

I suppose I could also check that prepare is called twice.
|Sure.
|Done
|Done. LMK what you think of the wording. Not sure if it's clear.
|Oh, of course. Great point, thanks Ian.
Tests added too.

There is an exception to this behavior that existed before my change - if the field is a struct or pointer-to-struct. In this case, if the field has initial values set before Unmarshal, they will still exist after Unmarshal (field is left entirely alone). I've added tests to show this behavior if you need an example (see &lt;Child&gt;&lt;/Child&gt;, read_test.go L903).
I personally think this exception is confusing. I'd like to make the behavior for structs to be consistent with other types (zero out the struct).
What do you think? Is this something I can/should change?
|thoughts on inlining this below in New()? looks like it's only used once anyway
|why are we using these packages? i don't see anything we're doing with these that couldn't be solved with pkg &quot;flag&quot;...
Am I missing something?
|This is probably for a different CL, but if we were able to take out spf13's viper/pflag, we could just inline all these flag defaults where we init the flags, instead of declaring them as constants.

The constants mean flipping up and down the page as you reason about the flag defaults.
|SGTM re: naming return vals.

This was added fairly recently (end of november) https://go-review.googlesource.com/c/32876/
I couldn't find any uses of it golang.org/x pkgs, nor cloud.google.com/go, nor google.golang.org/appengine. Not sure where else to look. Any other ideas?
I don't think Ross added it for any particular package. But I will double check with him also.
|Hm. Yea ok, I see that this method adds more confusion than it's probably worth.
The simple alternative though requires 2 unmarshals of the same json key - once for getting the TokenSource and once for getting the project id (this method would be added), which seems silly.

Renaming this type to &quot;Credentials&quot; with the intention to add more stuff from credentialsFile type also seems funky. If that's the intention, we should just export the credentialsFile type instead, no?
Maybe that is the direction we should go instead? Folks can unmarshal their json into CredentialsFile, and then call (newly exported) JWTConfig, TokenSource methods themselves?

Maybe that's too big of a change.
Anyway, how would you propose deprecating old funcs without breaking so many people?

LMK if you want to move discussion to a different medium.
|&lt;facepalm&gt;
will name the return values also.
|maybe you should check err, eg:
c := db.Pool.Get()
if c.Err != nil {/* ... */}
httpcache.NewTransport(redis.NewWithClient(c))

maybe that will help you debug?
|hey sorry this is delayed. I was thinking about inf loops here last night. just remembered.
Anyway, should there be a `continue` after L79?
|I was thinking, could it be that there is some problem where `docker run` or `docker rm` (above) never works? would an inf loop be a problem here? or we'd realize (with the awesome monitoring to come) and just kill?
|oh duh.
|this check threw me off a bunch. probably just because I'm new to the code.
but I think it might be easier to understand as 
&amp;&amp; *reverse != &quot;&quot; &amp;&amp; !strings.Contains(*reverse, &quot;,&quot;)

wdyt?
|SGTM will do.
|for my education: why aren't these using --reverse-type too?
|Ack
|what about &quot;Created&quot;? (and maybe &quot;Restarting&quot;, though not sure how that would happen for this case)
i would think you wouldn't want to try to run another with the same name if this one's just not up yet?
or, does it not really matter? i guess it's just a little wasted effort + log garbage in the end.
|I've seen Created (just generally using docker), but so briefly. Changes to Up quickly.
This probably doesn't really matter in the end.
|lol. i don't think this can ever happen though. Can we just kill the use of `ok`?
happy to submit the cl.
|Hm, but dashboard.TrybotBuilderNames constructs the slice of names from dashboard.Builders (L108) right before this map lookup (L109). Are you saying there are other things that could manipulate dashboard.Builders during this loop?
Or are you just saying that the code could change and this would help prevent regression?
|Oh I see! I've never actually followed that rule for code that I own, but I like it. Will do in future.
Thanks for the explanation Brad.
|got it
|added
|removed `exec`, b/c overcomplicated w/ `cd and build` here, and I don't think it added too much value unless I'm wrong. That ok?
|changed so there are 2 different tags
|Brad - this is the only line different btwn the two docker files.
do you want to do something fancy to de-dupe?

we could specify an ARG for the docker build command and have this line read that var and set GO_BUILDER_ENV from it?
we could generate the two docker files?

i dunno, they both seem like overkill for just 2 instances of this file.
any other/better ideas?
|should this name change too?
|brad - this is super funky, probably wrong - but cmd/buildlet/reverse.go seems to think that GO_BUILD_KEY_PATH is empty.
i ran the container with a bash session to check that it's there. it is def in the env...
not sure what's going on there.
|hey brad, sorry. yea, this is what i currently have on the c1 server.
sorry, will update the CL.

I only tried this b/c buildlet.exe does not have this process's env. when we run buildlet.exe, we pass a new env.

buildlet.exe has a default path for the go build key, which is $HOME/.gobuildkey.
which is why i tried this.

I'll update this cl.
|Done
|Done
|Done
|Done
|ooooh. I see! cool.
scaleway-prod-01 looked so similar to what this would have been, scaleway-01. I got confused.
But we set the hostname in cmd/scaleway. Here we should retrieve it so hostname + name are the same.
Got it! Will do.
|does this actually make sense? it feels odd to spin up 50 of these just to tear them down to rename them.
should i just take the plunge and make the change now?
|hey. tested, yes. but no, did not see it appear on farmer.golang
I assumed it was because this file change was not deployed anywhere?

is that wrong? you're saying i must have a bug?
i used my new stage0 binary, could see it running in the docker logs. &quot;waiting on port blah&quot;
|got it. wasn't sure.
|Ack
|Hey Brad - can you explain to me why this one has a GOARM explicitly set to 7?
|Ack
|doh. my mistake!
|ah, no it wasn't meant to be temporary. but happy to change it if you prefer. you don't think the scaleway classifier is helpful?

i should probably add a note to add the trybot and testhelper config stuff too.
|SGTM
|Ack
|SGTM
|is this ever used?
|zone?
|oh my bad.
was thinking if server.ModificationDate had no zone info attached, time.Now() would likely be a different zone, and these would be hours apart from each other.
|Patch Set 3: Run-TryBot+1

&gt; I ran the benchmark on my Mac and I started a linux-amd64 docker
 &gt; container to run the same in there and the test is passing.
 &gt; 
 &gt; I should probably wait for someone to help me with this because it
 &gt; might just be some weird configuration where tests are running.
 &gt; 
 &gt; /tmp/src/github.com/golang/go/src # uname -a
 &gt; Linux 22677279fc35 4.9.27-moby #1 SMP Wed May 10 11:51:05 UTC 2017
 &gt; x86_64 Linux
 &gt; /tmp/src/github.com/golang/go/src # go version
 &gt; go version go1.8.3 linux/amd64
 &gt; /tmp/src/github.com/golang/go/src # go test -bench 'Benchmark'
 &gt; encoding/json
 &gt; BenchmarkCodeEncoder-2                      100          14664231
 &gt; ns/op         132.33 MB/s
 &gt; BenchmarkCodeMarshal-2                      100          15508752
 &gt; ns/op         125.12 MB/s
 &gt; BenchmarkCodeDecoder-2                       20          52978583
 &gt; ns/op          36.63 MB/s
 &gt; BenchmarkDecoderStream-2                5000000               362
 &gt; ns/op
 &gt; BenchmarkCodeUnmarshal-2                     20          51798463
 &gt; ns/op          37.46 MB/s
 &gt; BenchmarkCodeUnmarshalReuse-2                30          49947951
 &gt; ns/op
 &gt; BenchmarkUnmarshalString-2              3000000               486
 &gt; ns/op
 &gt; BenchmarkUnmarshalFloat64-2             3000000               418
 &gt; ns/op
 &gt; BenchmarkUnmarshalInt64-2               5000000               372
 &gt; ns/op
 &gt; BenchmarkIssue10335-2                   3000000               555
 &gt; ns/op             320 B/op          4 allocs/op
 &gt; BenchmarkNumberIsValid-2               100000000               20.5
 &gt; ns/op
 &gt; BenchmarkNumberIsValidRegexp-2          2000000               706
 &gt; ns/op
 &gt; BenchmarkSkipValue-2                        100          14311036
 &gt; ns/op         139.78 MB/s
 &gt; BenchmarkEncoderEncode-2                3000000               458
 &gt; ns/op               8 B/op          1 allocs/op
 &gt; PASS
 &gt; ok     encoding/json   26.435s

This looks like a flaky test, not a problem with this CL.
testdata/code.json.gz lives inside the source tree. I don't see another reason it should not exist just for one os/arch.
@brad, can you confirm?
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Patch Set 3:

(9 comments)
|Patch Set 4:

(1 comment)

Ok! Great. Thanks for your careful review, Daniel.
|Uploaded patch set 5.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Patch Set 1:

Not sure who to add as reviewers.
|Uploaded patch set 2.
|Patch Set 2:

(2 comments)
|Patch Set 7:

(3 comments)
|Uploaded patch set 1.
|Patch Set 1:

prefix change for https://go-review.googlesource.com/c/39532/

looking for feedback on approach too - happy to discard if this consensus.
|Patch Set 1:

(1 comment)
|Patch Set 1:

While I still don't think that this type should have been named DefaultCredentials, as there is nothing &quot;default&quot; necessarily about the data it holds, abandoning this change for now.
Thx all for thoughts/comments.

Though, FYI, this type + FindDefaultCredentials func are not used anywhere in our code (google3, github) and only used by 3 repos on github (only one of which has any stars, github.com/codedellemc/libstorage).
|Abandoned
|Uploaded patch set 1.
|Patch Set 1:

looking for feedback on approach too - happy to discard if this consensus.
|Patch Set 1:

(1 comment)
|Patch Set 1:

(1 comment)
|Patch Set 1:

Ok, I'm going to abandon this change. I don't think the added complexity is worth it. User can roll their own to extract project id.
Thanks all for your thoughts.
|Abandoned
|Patch Set 2: Code-Review+1
|Patch Set 1: Code-Review+1

seems fine to me. are there no tests for this?

i don't have permission to +2. Do you know who I should ask to get permission?
|Patch Set 1:

if we are going to start owning this, I would like to see test coverage I think. Can you add tests for the changes you made at least?
|Patch Set 1:

&gt; Patch Set 1:
&gt; 
&gt; &gt; Patch Set 1:
&gt; &gt; 
&gt; &gt; if we are going to start owning this, I would like to see test coverage I think. Can you add tests for the changes you made at least?
&gt; 
&gt; Will do, I just added you to the approver group.

Awesome! Thanks Tuo!
|Patch Set 1: Code-Review+2

test infra in a different CL
|Patch Set 2:

LGTM still.
|Patch Set 3:

(1 comment)
|Patch Set 4: Code-Review+1

(3 comments)
|Patch Set 4:

(3 comments)

&gt; Patch Set 4: Code-Review+1
&gt; 
&gt; (3 comments)

sorry it took me so long to review.
|Patch Set 4:

(2 comments)
|Patch Set 4:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 2: Code-Review+1
|Patch Set 2: Code-Review+1
|Uploaded patch set 1.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(1 comment)
|Patch Set 1:

grpc logs this a lot when conns are idle. but it handles this itself, just is verbose about it.
are these log messages the only issue? or are you actually seeing that you cannot connect to redis?
b/c the two things may not be related.
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Patch Set 2:

(1 comment)
|Uploaded patch set 3: Commit message was updated.
|Patch Set 2:

&gt; Patch Set 2:
&gt; 
&gt; (1 comment)

oh my apologies. I've been doing it wrong for years then.
I was taught that the verb should describe the change itself, &quot;This change ___&quot; (indicative I think, instead of subjunctive), similar to the special &quot;Fixes&quot; keyword for github.
Will do it this way from now on.
|Patch Set 4:

&gt; Patch Set 3:
&gt; 
&gt; &gt; Patch Set 2:
&gt; &gt; 
&gt; &gt; &gt; Patch Set 2:
&gt; &gt; &gt; 
&gt; &gt; &gt; (1 comment)
&gt; &gt; 
&gt; &gt; oh my apologies. I've been doing it wrong for years then.
&gt; &gt; I was taught that the verb should describe the change itself, &quot;This change ___&quot; (indicative I think, instead of subjunctive), similar to the special &quot;Fixes&quot; keyword for github.
&gt; &gt; Will do it this way from now on.
&gt; 
&gt; I'm sure style varies by project. This is just what we finally settled on after years of mixed styles.

Ack
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2

I'm just poking around slowly trying to get a better feel for all the things on a high level before diving into this.
Do I need to be moving quickly on this? Are there folks waiting?
|Uploaded patch set 1.
|Uploaded patch set 2: Commit message was updated.
|Uploaded patch set 3.
|Patch Set 3:

(1 comment)
|Uploaded patch set 4.
|Patch Set 4:

(3 comments)
|Uploaded patch set 5.
|Change has been successfully cherry-picked as cd62929b50df5f332ba76d131253566891a260d4 by Sarah Adams
|Uploaded patch set 1.
|Abandoned
|Patch Set 1: Code-Review+2
|Patch Set 1:

(1 comment)
|Patch Set 1: Code-Review+2
|Patch Set 1: Code-Review+2
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 3: Commit message was updated.
|Patch Set 3:

(2 comments)
|Patch Set 3:

(2 comments)
|Uploaded patch set 4.
|Patch Set 4:

(1 comment)
|Patch Set 4:

(1 comment)
|Patch Set 4:

(2 comments)

&gt; Patch Set 4: Code-Review+1
&gt; 
&gt; Actually, I'd expect a change to cmd/scaleway in here, updating the image ID.

oh right.
|Patch Set 4:

(7 comments)
|Uploaded patch set 5.
|Uploaded patch set 6.
|Uploaded patch set 7.
|Patch Set 7:

&gt; Uploaded patch set 7.

will do, yes. sry for noise i wanted to push up the rebase.
|Uploaded patch set 8.
|Uploaded patch set 9: Commit message was updated.
|Patch Set 9:

(1 comment)
|Patch Set 9:

(1 comment)
|Patch Set 9:

(1 comment)
|Uploaded patch set 10.
|Uploaded patch set 11.
|Uploaded patch set 12.
|Uploaded patch set 13.
|Uploaded patch set 14.
|Uploaded patch set 15.
|Patch Set 15:

Hey Brad! This is ready for review FYI.
|Uploaded patch set 16.
|Uploaded patch set 17.
|Change has been successfully cherry-picked as b60de1f46f412ebf70984d40df923c12434bc24b by Sarah Adams
|Uploaded patch set 1.
|Patch Set 1:

Gah! Shoot. I should have looked at the diff before I sent the CL. Sorry about that.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Patch Set 1:

&gt; Also cover case where no rows are returned?
 &gt; Need to update other instances of {DB,Conn,Stmt,Tx}.QueryRow[Context]?

For the case where no rows are returned, I'm not sure there's really any relevant documentation we can attach to QueryRow. The documentation for this should be attached (and already is) to Scan, no? Since sql.Row has no exported fields, I'm not really sure what I would say to describe the returned *sql.Row value that wouldn't be an implementation detail.

Thoughts?
|Patch Set 1:

&gt; &gt; Also cover case where no rows are returned?
 &gt; &gt; Need to update other instances of {DB,Conn,Stmt,Tx}.QueryRow[Context]?
 &gt; 
 &gt; For the case where no rows are returned, I'm not sure there's
 &gt; really any relevant documentation we can attach to QueryRow. The
 &gt; documentation for this should be attached (and already is) to Scan,
 &gt; no? Since sql.Row has no exported fields, I'm not really sure what
 &gt; I would say to describe the returned *sql.Row value that wouldn't
 &gt; be an implementation detail.
 &gt; 
 &gt; Thoughts?

Actually, now that I say that, the same is true of when many rows match the query - sql.Row actually contains many rows, I believe? It is not until Scan is called that the additional rows are discarded.
Though, I agree with the issue reporter that this is not at all obvious and is rather confusing.

Maybe I should say instead, &quot;refer to Scan documentation...&quot;?
|Uploaded patch set 2.
|Change has been successfully cherry-picked as 3bcdbe57b6847e5fc3ab16016f5f66d9960fff97 by Sarah Adams
|Patch Set 1: Code-Review+2
|Patch Set 1:

(2 comments)
|Patch Set 4:

(1 comment)
|Done
|Done
|Done
|Done
|Done
|Done
|OK, that definitely makes a lot more sense - thanks! I figured that checking every query seemed excessive.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done.
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Done
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 1:

(2 comments)
|Uploaded patch set 3.
|Uploaded patch set 4.
|Uploaded patch set 5.
|Uploaded patch set 6.
|Patch Set 6:

(7 comments)
|Uploaded patch set 1.
|Patch Set 1:

(12 comments)
|Uploaded patch set 2.
|Patch Set 2:

(7 comments)
|Uploaded patch set 3.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Patch Set 2:

(1 comment)
|Patch Set 2:

(3 comments)
|Uploaded patch set 3.
|Created a revert of this change as I3897d8da5026ddc470989e3f239540286e89df4d
|Uploaded patch set 1.
|Created a revert of this change as I625410bc754ea2d150be097bf424de2be42acde4
|Uploaded patch set 1.
|Patch Set 2: Commit message was updated.
|Uploaded patch set 1.
|Uploaded patch set 1.
|Uploaded patch set 2.
|Uploaded patch set 1.
|Uploaded patch set 2.
